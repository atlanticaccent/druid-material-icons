use druid::{
    kurbo::{Affine, Circle, PathEl, Point},
    piet::RenderContext,
    Color, Data, Size,
};

pub struct Replay5 {
    size: f64,
    color: Color,
}

impl Replay5 {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for Replay5 {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 24.00, y: 10.00 }),
                PathEl::LineTo(Point { x: 24.00, y: 2.00 }),
                PathEl::LineTo(Point { x: 14.00, y: 12.00 }),
                PathEl::LineTo(Point { x: 24.00, y: 22.00 }),
                PathEl::LineTo(Point { x: 24.00, y: 14.00 }),
                PathEl::CurveTo(
                    Point { x: 30.60, y: 14.00 },
                    Point { x: 36.00, y: 19.40 },
                    Point { x: 36.00, y: 26.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 36.00, y: 32.60 },
                    Point { x: 30.60, y: 38.00 },
                    Point { x: 24.00, y: 38.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 17.40, y: 38.00 },
                    Point { x: 12.00, y: 32.60 },
                    Point { x: 12.00, y: 26.00 },
                ),
                PathEl::LineTo(Point { x: 8.00, y: 26.00 }),
                PathEl::CurveTo(
                    Point { x: 8.00, y: 34.80 },
                    Point { x: 15.20, y: 42.00 },
                    Point { x: 24.00, y: 42.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 32.80, y: 42.00 },
                    Point { x: 40.00, y: 34.80 },
                    Point { x: 40.00, y: 26.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 40.00, y: 17.20 },
                    Point { x: 32.80, y: 10.00 },
                    Point { x: 24.00, y: 10.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 21.40, y: 27.80 }),
                PathEl::LineTo(Point { x: 21.90, y: 23.50 }),
                PathEl::LineTo(Point { x: 26.70, y: 23.50 }),
                PathEl::LineTo(Point { x: 26.70, y: 24.90 }),
                PathEl::LineTo(Point { x: 23.30, y: 24.90 }),
                PathEl::LineTo(Point { x: 23.10, y: 26.70 }),
                PathEl::CurveTo(
                    Point { x: 23.20, y: 26.70 },
                    Point { x: 23.20, y: 26.60 },
                    Point { x: 23.30, y: 26.60 },
                ),
                PathEl::CurveTo(
                    Point { x: 23.40, y: 26.60 },
                    Point { x: 23.50, y: 26.50 },
                    Point { x: 23.60, y: 26.50 },
                ),
                PathEl::CurveTo(
                    Point { x: 23.70, y: 26.50 },
                    Point { x: 23.80, y: 26.40 },
                    Point { x: 24.00, y: 26.40 },
                ),
                PathEl::LineTo(Point { x: 24.40, y: 26.40 }),
                PathEl::CurveTo(
                    Point { x: 24.80, y: 26.40 },
                    Point { x: 25.20, y: 26.50 },
                    Point { x: 25.50, y: 26.60 },
                ),
                PathEl::CurveTo(
                    Point { x: 25.80, y: 26.70 },
                    Point { x: 26.10, y: 26.90 },
                    Point { x: 26.30, y: 27.20 },
                ),
                PathEl::CurveTo(
                    Point { x: 26.50, y: 27.50 },
                    Point { x: 26.70, y: 27.70 },
                    Point { x: 26.80, y: 28.10 },
                ),
                PathEl::CurveTo(
                    Point { x: 26.90, y: 28.50 },
                    Point { x: 27.00, y: 28.90 },
                    Point { x: 27.00, y: 29.30 },
                ),
                PathEl::CurveTo(
                    Point { x: 27.00, y: 29.70 },
                    Point { x: 26.90, y: 30.00 },
                    Point { x: 26.80, y: 30.40 },
                ),
                PathEl::CurveTo(
                    Point { x: 26.70, y: 30.80 },
                    Point { x: 26.50, y: 31.00 },
                    Point { x: 26.30, y: 31.30 },
                ),
                PathEl::CurveTo(
                    Point { x: 26.10, y: 31.60 },
                    Point { x: 25.80, y: 31.80 },
                    Point { x: 25.40, y: 31.90 },
                ),
                PathEl::CurveTo(
                    Point { x: 25.00, y: 32.00 },
                    Point { x: 24.60, y: 32.10 },
                    Point { x: 24.10, y: 32.10 },
                ),
                PathEl::CurveTo(
                    Point { x: 23.70, y: 32.10 },
                    Point { x: 23.40, y: 32.00 },
                    Point { x: 23.00, y: 31.90 },
                ),
                PathEl::CurveTo(
                    Point { x: 22.60, y: 31.80 },
                    Point { x: 22.40, y: 31.60 },
                    Point { x: 22.10, y: 31.40 },
                ),
                PathEl::CurveTo(
                    Point { x: 21.80, y: 31.20 },
                    Point { x: 21.60, y: 30.90 },
                    Point { x: 21.50, y: 30.60 },
                ),
                PathEl::CurveTo(
                    Point { x: 21.40, y: 30.30 },
                    Point { x: 21.20, y: 29.90 },
                    Point { x: 21.20, y: 29.50 },
                ),
                PathEl::LineTo(Point { x: 22.90, y: 29.50 }),
                PathEl::CurveTo(
                    Point { x: 22.90, y: 29.90 },
                    Point { x: 23.10, y: 30.10 },
                    Point { x: 23.30, y: 30.30 },
                ),
                PathEl::CurveTo(
                    Point { x: 23.50, y: 30.50 },
                    Point { x: 23.80, y: 30.60 },
                    Point { x: 24.10, y: 30.60 },
                ),
                PathEl::CurveTo(
                    Point { x: 24.30, y: 30.60 },
                    Point { x: 24.50, y: 30.60 },
                    Point { x: 24.60, y: 30.50 },
                ),
                PathEl::CurveTo(
                    Point { x: 24.70, y: 30.40 },
                    Point { x: 24.90, y: 30.30 },
                    Point { x: 25.00, y: 30.20 },
                ),
                PathEl::CurveTo(
                    Point { x: 25.10, y: 30.10 },
                    Point { x: 25.20, y: 29.90 },
                    Point { x: 25.20, y: 29.70 },
                ),
                PathEl::CurveTo(
                    Point { x: 25.20, y: 29.50 },
                    Point { x: 25.30, y: 29.30 },
                    Point { x: 25.30, y: 29.10 },
                ),
                PathEl::CurveTo(
                    Point { x: 25.30, y: 28.90 },
                    Point { x: 25.30, y: 28.70 },
                    Point { x: 25.20, y: 28.50 },
                ),
                PathEl::CurveTo(
                    Point { x: 25.10, y: 28.30 },
                    Point { x: 25.10, y: 28.20 },
                    Point { x: 24.90, y: 28.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 24.70, y: 27.80 },
                    Point { x: 24.60, y: 27.80 },
                    Point { x: 24.50, y: 27.70 },
                ),
                PathEl::CurveTo(
                    Point { x: 24.40, y: 27.60 },
                    Point { x: 24.10, y: 27.60 },
                    Point { x: 23.90, y: 27.60 },
                ),
                PathEl::LineTo(Point { x: 23.50, y: 27.60 }),
                PathEl::CurveTo(
                    Point { x: 23.50, y: 27.60 },
                    Point { x: 23.30, y: 27.70 },
                    Point { x: 23.20, y: 27.70 },
                ),
                PathEl::CurveTo(
                    Point { x: 23.10, y: 27.70 },
                    Point { x: 23.00, y: 27.90 },
                    Point { x: 22.90, y: 28.00 },
                ),
                PathEl::LineTo(Point { x: 22.70, y: 28.20 }),
                PathEl::LineTo(Point { x: 21.40, y: 27.80 }),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct WatchLater {
    size: f64,
    color: Color,
}

impl WatchLater {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for WatchLater {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 23.98, y: 4.00 }),
                PathEl::CurveTo(
                    Point { x: 12.94, y: 4.00 },
                    Point { x: 4.00, y: 12.96 },
                    Point { x: 4.00, y: 24.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 4.00, y: 35.04 },
                    Point { x: 12.94, y: 44.00 },
                    Point { x: 23.98, y: 44.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 35.04, y: 44.00 },
                    Point { x: 44.00, y: 35.04 },
                    Point { x: 44.00, y: 24.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 44.00, y: 12.96 },
                    Point { x: 35.04, y: 4.00 },
                    Point { x: 23.98, y: 4.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 32.50, y: 32.30 }),
                PathEl::LineTo(Point { x: 22.00, y: 26.00 }),
                PathEl::LineTo(Point { x: 22.00, y: 14.00 }),
                PathEl::LineTo(Point { x: 25.00, y: 14.00 }),
                PathEl::LineTo(Point { x: 25.00, y: 24.50 }),
                PathEl::LineTo(Point { x: 34.00, y: 29.84 }),
                PathEl::LineTo(Point { x: 32.50, y: 32.30 }),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct DoneAll {
    size: f64,
    color: Color,
}

impl DoneAll {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for DoneAll {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 36.00, y: 14.00 }),
                PathEl::LineTo(Point { x: 33.17, y: 11.17 }),
                PathEl::LineTo(Point { x: 20.49, y: 23.86 }),
                PathEl::LineTo(Point { x: 23.32, y: 26.69 }),
                PathEl::LineTo(Point { x: 36.00, y: 14.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 44.49, y: 11.17 }),
                PathEl::LineTo(Point { x: 23.31, y: 32.34 }),
                PathEl::LineTo(Point { x: 14.97, y: 24.00 }),
                PathEl::LineTo(Point { x: 12.14, y: 26.83 }),
                PathEl::LineTo(Point { x: 23.31, y: 38.00 }),
                PathEl::LineTo(Point { x: 47.31, y: 14.00 }),
                PathEl::LineTo(Point { x: 44.49, y: 11.17 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 0.83, y: 26.83 }),
                PathEl::LineTo(Point { x: 12.00, y: 38.00 }),
                PathEl::LineTo(Point { x: 14.83, y: 35.17 }),
                PathEl::LineTo(Point { x: 3.66, y: 24.00 }),
                PathEl::LineTo(Point { x: 0.83, y: 26.83 }),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct KeyboardCapslock {
    size: f64,
    color: Color,
}

impl KeyboardCapslock {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for KeyboardCapslock {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 24.00, y: 16.83 }),
                PathEl::LineTo(Point { x: 33.17, y: 26.00 }),
                PathEl::LineTo(Point { x: 36.00, y: 23.17 }),
                PathEl::LineTo(Point { x: 24.00, y: 11.17 }),
                PathEl::LineTo(Point { x: 12.00, y: 23.17 }),
                PathEl::LineTo(Point { x: 14.83, y: 26.00 }),
                PathEl::LineTo(Point { x: 24.00, y: 16.83 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 12.00, y: 36.00 }),
                PathEl::LineTo(Point { x: 36.00, y: 36.00 }),
                PathEl::LineTo(Point { x: 36.00, y: 32.00 }),
                PathEl::LineTo(Point { x: 12.00, y: 32.00 }),
                PathEl::LineTo(Point { x: 12.00, y: 36.00 }),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct Description {
    size: f64,
    color: Color,
}

impl Description {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for Description {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 28.00, y: 4.00 }),
                PathEl::LineTo(Point { x: 12.00, y: 4.00 }),
                PathEl::CurveTo(
                    Point { x: 9.79, y: 4.00 },
                    Point { x: 8.02, y: 5.79 },
                    Point { x: 8.02, y: 8.00 },
                ),
                PathEl::LineTo(Point { x: 8.00, y: 40.00 }),
                PathEl::CurveTo(
                    Point { x: 8.00, y: 42.21 },
                    Point { x: 9.77, y: 44.00 },
                    Point { x: 11.98, y: 44.00 },
                ),
                PathEl::LineTo(Point { x: 36.00, y: 44.00 }),
                PathEl::CurveTo(
                    Point { x: 38.21, y: 44.00 },
                    Point { x: 40.00, y: 42.21 },
                    Point { x: 40.00, y: 40.00 },
                ),
                PathEl::LineTo(Point { x: 40.00, y: 16.00 }),
                PathEl::LineTo(Point { x: 28.00, y: 4.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 32.00, y: 36.00 }),
                PathEl::LineTo(Point { x: 16.00, y: 36.00 }),
                PathEl::LineTo(Point { x: 16.00, y: 32.00 }),
                PathEl::LineTo(Point { x: 32.00, y: 32.00 }),
                PathEl::LineTo(Point { x: 32.00, y: 36.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 32.00, y: 28.00 }),
                PathEl::LineTo(Point { x: 16.00, y: 28.00 }),
                PathEl::LineTo(Point { x: 16.00, y: 24.00 }),
                PathEl::LineTo(Point { x: 32.00, y: 24.00 }),
                PathEl::LineTo(Point { x: 32.00, y: 28.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 26.00, y: 18.00 }),
                PathEl::LineTo(Point { x: 26.00, y: 7.00 }),
                PathEl::LineTo(Point { x: 37.00, y: 18.00 }),
                PathEl::LineTo(Point { x: 26.00, y: 18.00 }),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct Filter {
    size: f64,
    color: Color,
}

impl Filter {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for Filter {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 31.93, y: 20.57 }),
                PathEl::LineTo(Point { x: 26.43, y: 27.65 }),
                PathEl::LineTo(Point { x: 22.50, y: 22.93 }),
                PathEl::LineTo(Point { x: 17.00, y: 30.00 }),
                PathEl::LineTo(Point { x: 39.00, y: 30.00 }),
                PathEl::LineTo(Point { x: 31.93, y: 20.57 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 6.00, y: 10.00 }),
                PathEl::LineTo(Point { x: 2.00, y: 10.00 }),
                PathEl::LineTo(Point { x: 2.00, y: 42.00 }),
                PathEl::CurveTo(
                    Point { x: 2.00, y: 44.21 },
                    Point { x: 3.79, y: 46.00 },
                    Point { x: 6.00, y: 46.00 },
                ),
                PathEl::LineTo(Point { x: 38.00, y: 46.00 }),
                PathEl::LineTo(Point { x: 38.00, y: 42.00 }),
                PathEl::LineTo(Point { x: 6.00, y: 42.00 }),
                PathEl::LineTo(Point { x: 6.00, y: 10.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 42.00, y: 2.00 }),
                PathEl::LineTo(Point { x: 14.00, y: 2.00 }),
                PathEl::CurveTo(
                    Point { x: 11.79, y: 2.00 },
                    Point { x: 10.00, y: 3.79 },
                    Point { x: 10.00, y: 6.00 },
                ),
                PathEl::LineTo(Point { x: 10.00, y: 34.00 }),
                PathEl::CurveTo(
                    Point { x: 10.00, y: 36.21 },
                    Point { x: 11.79, y: 38.00 },
                    Point { x: 14.00, y: 38.00 },
                ),
                PathEl::LineTo(Point { x: 42.00, y: 38.00 }),
                PathEl::CurveTo(
                    Point { x: 44.21, y: 38.00 },
                    Point { x: 46.00, y: 36.21 },
                    Point { x: 46.00, y: 34.00 },
                ),
                PathEl::LineTo(Point { x: 46.00, y: 6.00 }),
                PathEl::CurveTo(
                    Point { x: 46.00, y: 3.79 },
                    Point { x: 44.21, y: 2.00 },
                    Point { x: 42.00, y: 2.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 42.00, y: 34.00 }),
                PathEl::LineTo(Point { x: 14.00, y: 34.00 }),
                PathEl::LineTo(Point { x: 14.00, y: 6.00 }),
                PathEl::LineTo(Point { x: 42.00, y: 6.00 }),
                PathEl::LineTo(Point { x: 42.00, y: 34.00 }),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct FormatColorText {
    size: f64,
    color: Color,
}

impl FormatColorText {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for FormatColorText {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 0.00, y: 40.00 }),
                PathEl::LineTo(Point { x: 48.00, y: 40.00 }),
                PathEl::LineTo(Point { x: 48.00, y: 48.00 }),
                PathEl::LineTo(Point { x: 0.00, y: 48.00 }),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 22.00, y: 6.00 }),
                PathEl::LineTo(Point { x: 11.00, y: 34.00 }),
                PathEl::LineTo(Point { x: 15.50, y: 34.00 }),
                PathEl::LineTo(Point { x: 17.75, y: 28.00 }),
                PathEl::LineTo(Point { x: 30.25, y: 28.00 }),
                PathEl::LineTo(Point { x: 32.50, y: 34.00 }),
                PathEl::LineTo(Point { x: 37.00, y: 34.00 }),
                PathEl::LineTo(Point { x: 26.00, y: 6.00 }),
                PathEl::LineTo(Point { x: 22.00, y: 6.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 19.25, y: 24.00 }),
                PathEl::LineTo(Point { x: 24.00, y: 11.33 }),
                PathEl::LineTo(Point { x: 28.75, y: 24.00 }),
                PathEl::LineTo(Point { x: 19.25, y: 24.00 }),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct PanoramaFishEye {
    size: f64,
    color: Color,
}

impl PanoramaFishEye {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for PanoramaFishEye {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 24.00, y: 4.00 }),
                PathEl::CurveTo(
                    Point { x: 12.95, y: 4.00 },
                    Point { x: 4.00, y: 12.95 },
                    Point { x: 4.00, y: 24.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 4.00, y: 35.05 },
                    Point { x: 12.95, y: 44.00 },
                    Point { x: 24.00, y: 44.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 35.05, y: 44.00 },
                    Point { x: 44.00, y: 35.05 },
                    Point { x: 44.00, y: 24.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 44.00, y: 12.95 },
                    Point { x: 35.05, y: 4.00 },
                    Point { x: 24.00, y: 4.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 24.00, y: 40.00 }),
                PathEl::CurveTo(
                    Point { x: 15.18, y: 40.00 },
                    Point { x: 8.00, y: 32.82 },
                    Point { x: 8.00, y: 24.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 8.00, y: 15.18 },
                    Point { x: 15.18, y: 8.00 },
                    Point { x: 24.00, y: 8.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 32.82, y: 8.00 },
                    Point { x: 40.00, y: 15.18 },
                    Point { x: 40.00, y: 24.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 40.00, y: 32.82 },
                    Point { x: 32.82, y: 40.00 },
                    Point { x: 24.00, y: 40.00 },
                ),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct Details {
    size: f64,
    color: Color,
}

impl Details {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for Details {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 6.00, y: 8.00 }),
                PathEl::LineTo(Point { x: 24.00, y: 40.00 }),
                PathEl::LineTo(Point { x: 42.00, y: 8.00 }),
                PathEl::LineTo(Point { x: 6.00, y: 8.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 12.75, y: 12.00 }),
                PathEl::LineTo(Point { x: 35.25, y: 12.00 }),
                PathEl::LineTo(Point { x: 24.00, y: 32.00 }),
                PathEl::LineTo(Point { x: 12.75, y: 12.00 }),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct Backspace {
    size: f64,
    color: Color,
}

impl Backspace {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for Backspace {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 44.00, y: 6.00 }),
                PathEl::LineTo(Point { x: 14.00, y: 6.00 }),
                PathEl::CurveTo(
                    Point { x: 12.62, y: 6.00 },
                    Point { x: 11.53, y: 6.70 },
                    Point { x: 10.81, y: 7.76 },
                ),
                PathEl::LineTo(Point { x: 0.00, y: 23.99 }),
                PathEl::LineTo(Point { x: 10.81, y: 40.22 }),
                PathEl::CurveTo(
                    Point { x: 11.53, y: 41.28 },
                    Point { x: 12.62, y: 42.00 },
                    Point { x: 14.00, y: 42.00 },
                ),
                PathEl::LineTo(Point { x: 44.00, y: 42.00 }),
                PathEl::CurveTo(
                    Point { x: 46.21, y: 42.00 },
                    Point { x: 48.00, y: 40.21 },
                    Point { x: 48.00, y: 38.00 },
                ),
                PathEl::LineTo(Point { x: 48.00, y: 10.00 }),
                PathEl::CurveTo(
                    Point { x: 48.00, y: 7.79 },
                    Point { x: 46.21, y: 6.00 },
                    Point { x: 44.00, y: 6.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 38.00, y: 31.17 }),
                PathEl::LineTo(Point { x: 35.17, y: 34.00 }),
                PathEl::LineTo(Point { x: 28.00, y: 26.83 }),
                PathEl::LineTo(Point { x: 20.83, y: 34.00 }),
                PathEl::LineTo(Point { x: 18.00, y: 31.17 }),
                PathEl::LineTo(Point { x: 25.17, y: 24.00 }),
                PathEl::LineTo(Point { x: 18.00, y: 16.83 }),
                PathEl::LineTo(Point { x: 20.83, y: 14.00 }),
                PathEl::LineTo(Point { x: 28.00, y: 21.17 }),
                PathEl::LineTo(Point { x: 35.17, y: 14.00 }),
                PathEl::LineTo(Point { x: 38.00, y: 16.83 }),
                PathEl::LineTo(Point { x: 30.83, y: 24.00 }),
                PathEl::LineTo(Point { x: 38.00, y: 31.17 }),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct ThumbUp {
    size: f64,
    color: Color,
}

impl ThumbUp {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for ThumbUp {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 2.00, y: 42.00 }),
                PathEl::LineTo(Point { x: 10.00, y: 42.00 }),
                PathEl::LineTo(Point { x: 10.00, y: 18.00 }),
                PathEl::LineTo(Point { x: 2.00, y: 18.00 }),
                PathEl::LineTo(Point { x: 2.00, y: 42.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 46.00, y: 20.00 }),
                PathEl::CurveTo(
                    Point { x: 46.00, y: 17.79 },
                    Point { x: 44.21, y: 16.00 },
                    Point { x: 42.00, y: 16.00 },
                ),
                PathEl::LineTo(Point { x: 29.37, y: 16.00 }),
                PathEl::LineTo(Point { x: 31.28, y: 6.86 }),
                PathEl::CurveTo(
                    Point { x: 31.32, y: 6.66 },
                    Point { x: 31.35, y: 6.45 },
                    Point { x: 31.35, y: 6.23 },
                ),
                PathEl::CurveTo(
                    Point { x: 31.35, y: 5.40 },
                    Point { x: 31.01, y: 4.65 },
                    Point { x: 30.47, y: 4.11 },
                ),
                PathEl::LineTo(Point { x: 28.34, y: 2.00 }),
                PathEl::LineTo(Point { x: 15.17, y: 15.17 }),
                PathEl::CurveTo(
                    Point { x: 14.45, y: 15.90 },
                    Point { x: 14.00, y: 16.90 },
                    Point { x: 14.00, y: 18.00 },
                ),
                PathEl::LineTo(Point { x: 14.00, y: 38.00 }),
                PathEl::CurveTo(
                    Point { x: 14.00, y: 40.21 },
                    Point { x: 15.79, y: 42.00 },
                    Point { x: 18.00, y: 42.00 },
                ),
                PathEl::LineTo(Point { x: 36.00, y: 42.00 }),
                PathEl::CurveTo(
                    Point { x: 37.66, y: 42.00 },
                    Point { x: 39.08, y: 40.99 },
                    Point { x: 39.68, y: 39.56 },
                ),
                PathEl::LineTo(Point { x: 45.71, y: 25.46 }),
                PathEl::CurveTo(
                    Point { x: 45.89, y: 25.00 },
                    Point { x: 46.00, y: 24.51 },
                    Point { x: 46.00, y: 24.00 },
                ),
                PathEl::LineTo(Point { x: 46.00, y: 20.17 }),
                PathEl::LineTo(Point { x: 45.98, y: 20.15 }),
                PathEl::LineTo(Point { x: 46.00, y: 20.00 }),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct DirectionsRun {
    size: f64,
    color: Color,
}

impl DirectionsRun {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for DirectionsRun {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 27.00, y: 9.00 }),
                PathEl::CurveTo(
                    Point { x: 29.20, y: 9.00 },
                    Point { x: 31.00, y: 7.20 },
                    Point { x: 31.00, y: 5.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 31.00, y: 2.80 },
                    Point { x: 29.20, y: 1.00 },
                    Point { x: 27.00, y: 1.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 24.80, y: 1.00 },
                    Point { x: 23.00, y: 2.80 },
                    Point { x: 23.00, y: 5.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 23.00, y: 7.20 },
                    Point { x: 24.80, y: 9.00 },
                    Point { x: 27.00, y: 9.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 19.80, y: 36.80 }),
                PathEl::LineTo(Point { x: 21.70, y: 28.00 }),
                PathEl::LineTo(Point { x: 26.00, y: 32.00 }),
                PathEl::LineTo(Point { x: 26.00, y: 44.00 }),
                PathEl::LineTo(Point { x: 30.00, y: 44.00 }),
                PathEl::LineTo(Point { x: 30.00, y: 28.90 }),
                PathEl::LineTo(Point { x: 25.90, y: 24.80 }),
                PathEl::LineTo(Point { x: 27.10, y: 18.80 }),
                PathEl::CurveTo(
                    Point { x: 29.70, y: 22.00 },
                    Point { x: 33.60, y: 24.00 },
                    Point { x: 38.00, y: 24.00 },
                ),
                PathEl::LineTo(Point { x: 38.00, y: 20.00 }),
                PathEl::CurveTo(
                    Point { x: 34.30, y: 20.00 },
                    Point { x: 31.10, y: 18.00 },
                    Point { x: 29.30, y: 15.10 },
                ),
                PathEl::LineTo(Point { x: 27.40, y: 11.90 }),
                PathEl::CurveTo(
                    Point { x: 26.70, y: 10.70 },
                    Point { x: 25.40, y: 10.00 },
                    Point { x: 24.00, y: 10.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 23.50, y: 10.00 },
                    Point { x: 23.00, y: 10.10 },
                    Point { x: 22.50, y: 10.30 },
                ),
                PathEl::LineTo(Point { x: 12.00, y: 14.60 }),
                PathEl::LineTo(Point { x: 12.00, y: 24.00 }),
                PathEl::LineTo(Point { x: 16.00, y: 24.00 }),
                PathEl::LineTo(Point { x: 16.00, y: 17.30 }),
                PathEl::LineTo(Point { x: 19.50, y: 15.90 }),
                PathEl::LineTo(Point { x: 16.40, y: 32.00 }),
                PathEl::LineTo(Point { x: 6.60, y: 30.10 }),
                PathEl::LineTo(Point { x: 5.80, y: 34.00 }),
                PathEl::CurveTo(
                    Point { x: 5.80, y: 34.00 },
                    Point { x: 19.80, y: 36.70 },
                    Point { x: 19.80, y: 36.80 },
                ),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct ModeComment {
    size: f64,
    color: Color,
}

impl ModeComment {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for ModeComment {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 43.98, y: 8.00 }),
                PathEl::CurveTo(
                    Point { x: 43.98, y: 5.79 },
                    Point { x: 42.21, y: 4.00 },
                    Point { x: 40.00, y: 4.00 },
                ),
                PathEl::LineTo(Point { x: 8.00, y: 4.00 }),
                PathEl::CurveTo(
                    Point { x: 5.79, y: 4.00 },
                    Point { x: 4.00, y: 5.79 },
                    Point { x: 4.00, y: 8.00 },
                ),
                PathEl::LineTo(Point { x: 4.00, y: 32.00 }),
                PathEl::CurveTo(
                    Point { x: 4.00, y: 34.21 },
                    Point { x: 5.79, y: 36.00 },
                    Point { x: 8.00, y: 36.00 },
                ),
                PathEl::LineTo(Point { x: 36.00, y: 36.00 }),
                PathEl::LineTo(Point { x: 44.00, y: 44.00 }),
                PathEl::LineTo(Point { x: 43.98, y: 8.00 }),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct TabletMac {
    size: f64,
    color: Color,
}

impl TabletMac {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for TabletMac {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 37.00, y: 0.00 }),
                PathEl::LineTo(Point { x: 9.00, y: 0.00 }),
                PathEl::CurveTo(
                    Point { x: 6.24, y: 0.00 },
                    Point { x: 4.00, y: 2.24 },
                    Point { x: 4.00, y: 5.00 },
                ),
                PathEl::LineTo(Point { x: 4.00, y: 43.00 }),
                PathEl::CurveTo(
                    Point { x: 4.00, y: 45.76 },
                    Point { x: 6.24, y: 48.00 },
                    Point { x: 9.00, y: 48.00 },
                ),
                PathEl::LineTo(Point { x: 37.00, y: 48.00 }),
                PathEl::CurveTo(
                    Point { x: 39.76, y: 48.00 },
                    Point { x: 42.00, y: 45.76 },
                    Point { x: 42.00, y: 43.00 },
                ),
                PathEl::LineTo(Point { x: 42.00, y: 5.00 }),
                PathEl::CurveTo(
                    Point { x: 42.00, y: 2.24 },
                    Point { x: 39.76, y: 0.00 },
                    Point { x: 37.00, y: 0.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 23.00, y: 46.00 }),
                PathEl::CurveTo(
                    Point { x: 21.34, y: 46.00 },
                    Point { x: 20.00, y: 44.66 },
                    Point { x: 20.00, y: 43.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 20.00, y: 41.34 },
                    Point { x: 21.34, y: 40.00 },
                    Point { x: 23.00, y: 40.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 24.66, y: 40.00 },
                    Point { x: 26.00, y: 41.34 },
                    Point { x: 26.00, y: 43.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 26.00, y: 44.66 },
                    Point { x: 24.66, y: 46.00 },
                    Point { x: 23.00, y: 46.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 38.00, y: 38.00 }),
                PathEl::LineTo(Point { x: 8.00, y: 38.00 }),
                PathEl::LineTo(Point { x: 8.00, y: 6.00 }),
                PathEl::LineTo(Point { x: 38.00, y: 6.00 }),
                PathEl::LineTo(Point { x: 38.00, y: 38.00 }),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct PhonelinkRing {
    size: f64,
    color: Color,
}

impl PhonelinkRing {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for PhonelinkRing {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 24.0, height / 24.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 20.10, y: 7.70 }),
                PathEl::LineTo(Point { x: 19.10, y: 8.70 }),
                PathEl::CurveTo(
                    Point { x: 20.90, y: 10.50 },
                    Point { x: 20.90, y: 13.30 },
                    Point { x: 19.10, y: 15.20 },
                ),
                PathEl::LineTo(Point { x: 20.10, y: 16.20 }),
                PathEl::CurveTo(
                    Point { x: 22.60, y: 13.90 },
                    Point { x: 22.60, y: 10.10 },
                    Point { x: 20.10, y: 7.70 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 18.00, y: 9.80 }),
                PathEl::LineTo(Point { x: 17.00, y: 10.80 }),
                PathEl::CurveTo(
                    Point { x: 17.50, y: 11.50 },
                    Point { x: 17.50, y: 12.40 },
                    Point { x: 17.00, y: 13.10 },
                ),
                PathEl::LineTo(Point { x: 18.00, y: 14.10 }),
                PathEl::CurveTo(
                    Point { x: 19.20, y: 12.90 },
                    Point { x: 19.20, y: 11.10 },
                    Point { x: 18.00, y: 9.80 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 14.00, y: 1.00 }),
                PathEl::LineTo(Point { x: 4.00, y: 1.00 }),
                PathEl::CurveTo(
                    Point { x: 2.90, y: 1.00 },
                    Point { x: 2.00, y: 1.90 },
                    Point { x: 2.00, y: 3.00 },
                ),
                PathEl::LineTo(Point { x: 2.00, y: 21.00 }),
                PathEl::CurveTo(
                    Point { x: 2.00, y: 22.10 },
                    Point { x: 2.90, y: 23.00 },
                    Point { x: 4.00, y: 23.00 },
                ),
                PathEl::LineTo(Point { x: 14.00, y: 23.00 }),
                PathEl::CurveTo(
                    Point { x: 15.10, y: 23.00 },
                    Point { x: 16.00, y: 22.10 },
                    Point { x: 16.00, y: 21.00 },
                ),
                PathEl::LineTo(Point { x: 16.00, y: 3.00 }),
                PathEl::CurveTo(
                    Point { x: 16.00, y: 1.90 },
                    Point { x: 15.10, y: 1.00 },
                    Point { x: 14.00, y: 1.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 14.00, y: 20.00 }),
                PathEl::LineTo(Point { x: 4.00, y: 20.00 }),
                PathEl::LineTo(Point { x: 4.00, y: 4.00 }),
                PathEl::LineTo(Point { x: 14.00, y: 4.00 }),
                PathEl::LineTo(Point { x: 14.00, y: 20.00 }),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct People {
    size: f64,
    color: Color,
}

impl People {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for People {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 32.00, y: 22.00 }),
                PathEl::CurveTo(
                    Point { x: 35.31, y: 22.00 },
                    Point { x: 37.98, y: 19.31 },
                    Point { x: 37.98, y: 16.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 37.98, y: 12.69 },
                    Point { x: 35.31, y: 10.00 },
                    Point { x: 32.00, y: 10.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 28.69, y: 10.00 },
                    Point { x: 26.00, y: 12.69 },
                    Point { x: 26.00, y: 16.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 26.00, y: 19.31 },
                    Point { x: 28.69, y: 22.00 },
                    Point { x: 32.00, y: 22.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 16.00, y: 22.00 }),
                PathEl::CurveTo(
                    Point { x: 19.31, y: 22.00 },
                    Point { x: 21.98, y: 19.31 },
                    Point { x: 21.98, y: 16.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 21.98, y: 12.69 },
                    Point { x: 19.31, y: 10.00 },
                    Point { x: 16.00, y: 10.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 12.69, y: 10.00 },
                    Point { x: 10.00, y: 12.69 },
                    Point { x: 10.00, y: 16.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 10.00, y: 19.31 },
                    Point { x: 12.69, y: 22.00 },
                    Point { x: 16.00, y: 22.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 16.00, y: 26.00 }),
                PathEl::CurveTo(
                    Point { x: 11.33, y: 26.00 },
                    Point { x: 2.00, y: 28.34 },
                    Point { x: 2.00, y: 33.00 },
                ),
                PathEl::LineTo(Point { x: 2.00, y: 38.00 }),
                PathEl::LineTo(Point { x: 30.00, y: 38.00 }),
                PathEl::LineTo(Point { x: 30.00, y: 33.00 }),
                PathEl::CurveTo(
                    Point { x: 30.00, y: 28.34 },
                    Point { x: 20.67, y: 26.00 },
                    Point { x: 16.00, y: 26.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 32.00, y: 26.00 }),
                PathEl::CurveTo(
                    Point { x: 31.42, y: 26.00 },
                    Point { x: 30.77, y: 26.04 },
                    Point { x: 30.07, y: 26.11 },
                ),
                PathEl::CurveTo(
                    Point { x: 32.39, y: 27.78 },
                    Point { x: 34.00, y: 30.03 },
                    Point { x: 34.00, y: 33.00 },
                ),
                PathEl::LineTo(Point { x: 34.00, y: 38.00 }),
                PathEl::LineTo(Point { x: 46.00, y: 38.00 }),
                PathEl::LineTo(Point { x: 46.00, y: 33.00 }),
                PathEl::CurveTo(
                    Point { x: 46.00, y: 28.34 },
                    Point { x: 36.67, y: 26.00 },
                    Point { x: 32.00, y: 26.00 },
                ),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct LocationSearching {
    size: f64,
    color: Color,
}

impl LocationSearching {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for LocationSearching {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 41.88, y: 22.17 }),
                PathEl::CurveTo(
                    Point { x: 40.96, y: 13.83 },
                    Point { x: 34.34, y: 7.21 },
                    Point { x: 26.00, y: 6.29 },
                ),
                PathEl::LineTo(Point { x: 26.00, y: 2.17 }),
                PathEl::LineTo(Point { x: 22.00, y: 2.17 }),
                PathEl::LineTo(Point { x: 22.00, y: 6.29 }),
                PathEl::CurveTo(
                    Point { x: 13.66, y: 7.21 },
                    Point { x: 7.04, y: 13.83 },
                    Point { x: 6.12, y: 22.17 },
                ),
                PathEl::LineTo(Point { x: 2.00, y: 22.17 }),
                PathEl::LineTo(Point { x: 2.00, y: 26.17 }),
                PathEl::LineTo(Point { x: 6.12, y: 26.17 }),
                PathEl::CurveTo(
                    Point { x: 7.04, y: 34.51 },
                    Point { x: 13.66, y: 41.13 },
                    Point { x: 22.00, y: 42.05 },
                ),
                PathEl::LineTo(Point { x: 22.00, y: 46.17 }),
                PathEl::LineTo(Point { x: 26.00, y: 46.17 }),
                PathEl::LineTo(Point { x: 26.00, y: 42.05 }),
                PathEl::CurveTo(
                    Point { x: 34.34, y: 41.13 },
                    Point { x: 40.96, y: 34.51 },
                    Point { x: 41.88, y: 26.17 },
                ),
                PathEl::LineTo(Point { x: 46.00, y: 26.17 }),
                PathEl::LineTo(Point { x: 46.00, y: 22.17 }),
                PathEl::LineTo(Point { x: 41.88, y: 22.17 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 24.00, y: 38.17 }),
                PathEl::CurveTo(
                    Point { x: 16.27, y: 38.17 },
                    Point { x: 10.00, y: 31.90 },
                    Point { x: 10.00, y: 24.17 },
                ),
                PathEl::CurveTo(
                    Point { x: 10.00, y: 16.44 },
                    Point { x: 16.27, y: 10.17 },
                    Point { x: 24.00, y: 10.17 },
                ),
                PathEl::CurveTo(
                    Point { x: 31.73, y: 10.17 },
                    Point { x: 38.00, y: 16.44 },
                    Point { x: 38.00, y: 24.17 },
                ),
                PathEl::CurveTo(
                    Point { x: 38.00, y: 31.90 },
                    Point { x: 31.73, y: 38.17 },
                    Point { x: 24.00, y: 38.17 },
                ),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct AirplanemodeActive {
    size: f64,
    color: Color,
}

impl AirplanemodeActive {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for AirplanemodeActive {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(&[PathEl::MoveTo(Point { x: 20.36, y: 18.00 })][..], &brush);
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 42.00, y: 32.00 }),
                PathEl::LineTo(Point { x: 42.00, y: 28.00 }),
                PathEl::LineTo(Point { x: 26.00, y: 18.00 }),
                PathEl::LineTo(Point { x: 26.00, y: 7.00 }),
                PathEl::CurveTo(
                    Point { x: 26.00, y: 5.34 },
                    Point { x: 24.66, y: 4.00 },
                    Point { x: 23.00, y: 4.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 21.34, y: 4.00 },
                    Point { x: 20.00, y: 5.34 },
                    Point { x: 20.00, y: 7.00 },
                ),
                PathEl::LineTo(Point { x: 20.00, y: 18.00 }),
                PathEl::LineTo(Point { x: 4.00, y: 28.00 }),
                PathEl::LineTo(Point { x: 4.00, y: 32.00 }),
                PathEl::LineTo(Point { x: 20.00, y: 27.00 }),
                PathEl::LineTo(Point { x: 20.00, y: 38.00 }),
                PathEl::LineTo(Point { x: 16.00, y: 41.00 }),
                PathEl::LineTo(Point { x: 16.00, y: 44.00 }),
                PathEl::LineTo(Point { x: 23.00, y: 42.00 }),
                PathEl::LineTo(Point { x: 30.00, y: 44.00 }),
                PathEl::LineTo(Point { x: 30.00, y: 41.00 }),
                PathEl::LineTo(Point { x: 26.00, y: 38.00 }),
                PathEl::LineTo(Point { x: 26.00, y: 27.00 }),
                PathEl::LineTo(Point { x: 42.00, y: 32.00 }),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct PlaylistAdd {
    size: f64,
    color: Color,
}

impl PlaylistAdd {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for PlaylistAdd {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 28.00, y: 20.00 }),
                PathEl::LineTo(Point { x: 4.00, y: 20.00 }),
                PathEl::LineTo(Point { x: 4.00, y: 24.00 }),
                PathEl::LineTo(Point { x: 28.00, y: 24.00 }),
                PathEl::LineTo(Point { x: 28.00, y: 20.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 28.00, y: 12.00 }),
                PathEl::LineTo(Point { x: 4.00, y: 12.00 }),
                PathEl::LineTo(Point { x: 4.00, y: 16.00 }),
                PathEl::LineTo(Point { x: 28.00, y: 16.00 }),
                PathEl::LineTo(Point { x: 28.00, y: 12.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 36.00, y: 28.00 }),
                PathEl::LineTo(Point { x: 36.00, y: 20.00 }),
                PathEl::LineTo(Point { x: 32.00, y: 20.00 }),
                PathEl::LineTo(Point { x: 32.00, y: 28.00 }),
                PathEl::LineTo(Point { x: 24.00, y: 28.00 }),
                PathEl::LineTo(Point { x: 24.00, y: 32.00 }),
                PathEl::LineTo(Point { x: 32.00, y: 32.00 }),
                PathEl::LineTo(Point { x: 32.00, y: 40.00 }),
                PathEl::LineTo(Point { x: 36.00, y: 40.00 }),
                PathEl::LineTo(Point { x: 36.00, y: 32.00 }),
                PathEl::LineTo(Point { x: 44.00, y: 32.00 }),
                PathEl::LineTo(Point { x: 44.00, y: 28.00 }),
                PathEl::LineTo(Point { x: 36.00, y: 28.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 4.00, y: 32.00 }),
                PathEl::LineTo(Point { x: 20.00, y: 32.00 }),
                PathEl::LineTo(Point { x: 20.00, y: 28.00 }),
                PathEl::LineTo(Point { x: 4.00, y: 28.00 }),
                PathEl::LineTo(Point { x: 4.00, y: 32.00 }),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct SpeakerPhone {
    size: f64,
    color: Color,
}

impl SpeakerPhone {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for SpeakerPhone {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 14.00, y: 15.14 }),
                PathEl::LineTo(Point { x: 16.86, y: 18.00 }),
                PathEl::CurveTo(
                    Point { x: 18.69, y: 16.17 },
                    Point { x: 21.21, y: 15.04 },
                    Point { x: 24.00, y: 15.04 },
                ),
                PathEl::CurveTo(
                    Point { x: 26.79, y: 15.04 },
                    Point { x: 29.31, y: 16.17 },
                    Point { x: 31.14, y: 18.00 },
                ),
                PathEl::LineTo(Point { x: 34.00, y: 15.14 }),
                PathEl::CurveTo(
                    Point { x: 31.44, y: 12.59 },
                    Point { x: 27.91, y: 11.00 },
                    Point { x: 24.00, y: 11.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 20.09, y: 11.00 },
                    Point { x: 16.56, y: 12.59 },
                    Point { x: 14.00, y: 15.14 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 24.00, y: 3.00 }),
                PathEl::CurveTo(
                    Point { x: 17.95, y: 3.00 },
                    Point { x: 12.47, y: 5.45 },
                    Point { x: 8.50, y: 9.42 },
                ),
                PathEl::LineTo(Point { x: 11.32, y: 12.24 }),
                PathEl::CurveTo(
                    Point { x: 14.57, y: 8.99 },
                    Point { x: 19.05, y: 6.99 },
                    Point { x: 24.00, y: 6.99 },
                ),
                PathEl::CurveTo(
                    Point { x: 28.95, y: 6.99 },
                    Point { x: 33.43, y: 8.99 },
                    Point { x: 36.68, y: 12.24 },
                ),
                PathEl::LineTo(Point { x: 39.50, y: 9.42 }),
                PathEl::CurveTo(
                    Point { x: 35.53, y: 5.45 },
                    Point { x: 30.05, y: 3.00 },
                    Point { x: 24.00, y: 3.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 29.71, y: 20.01 }),
                PathEl::LineTo(Point { x: 18.29, y: 20.00 }),
                PathEl::CurveTo(
                    Point { x: 17.03, y: 20.00 },
                    Point { x: 16.00, y: 21.03 },
                    Point { x: 16.00, y: 22.29 },
                ),
                PathEl::LineTo(Point { x: 16.00, y: 41.72 }),
                PathEl::CurveTo(
                    Point { x: 16.00, y: 42.98 },
                    Point { x: 17.03, y: 44.01 },
                    Point { x: 18.29, y: 44.01 },
                ),
                PathEl::LineTo(Point { x: 29.72, y: 44.01 }),
                PathEl::CurveTo(
                    Point { x: 30.98, y: 44.01 },
                    Point { x: 32.01, y: 42.98 },
                    Point { x: 32.01, y: 41.72 },
                ),
                PathEl::LineTo(Point { x: 32.01, y: 22.29 }),
                PathEl::CurveTo(
                    Point { x: 32.00, y: 21.03 },
                    Point { x: 30.97, y: 20.01 },
                    Point { x: 29.71, y: 20.01 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 30.00, y: 40.00 }),
                PathEl::LineTo(Point { x: 18.00, y: 40.00 }),
                PathEl::LineTo(Point { x: 18.00, y: 24.00 }),
                PathEl::LineTo(Point { x: 30.00, y: 24.00 }),
                PathEl::LineTo(Point { x: 30.00, y: 40.00 }),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct ControlPointDuplicate {
    size: f64,
    color: Color,
}

impl ControlPointDuplicate {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for ControlPointDuplicate {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 32.00, y: 16.00 }),
                PathEl::LineTo(Point { x: 28.00, y: 16.00 }),
                PathEl::LineTo(Point { x: 28.00, y: 22.00 }),
                PathEl::LineTo(Point { x: 22.00, y: 22.00 }),
                PathEl::LineTo(Point { x: 22.00, y: 26.00 }),
                PathEl::LineTo(Point { x: 28.00, y: 26.00 }),
                PathEl::LineTo(Point { x: 28.00, y: 32.00 }),
                PathEl::LineTo(Point { x: 32.00, y: 32.00 }),
                PathEl::LineTo(Point { x: 32.00, y: 26.00 }),
                PathEl::LineTo(Point { x: 38.00, y: 26.00 }),
                PathEl::LineTo(Point { x: 38.00, y: 22.00 }),
                PathEl::LineTo(Point { x: 32.00, y: 22.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 4.00, y: 24.00 }),
                PathEl::CurveTo(
                    Point { x: 4.00, y: 18.42 },
                    Point { x: 7.29, y: 13.61 },
                    Point { x: 12.02, y: 11.36 },
                ),
                PathEl::LineTo(Point { x: 12.02, y: 7.05 }),
                PathEl::CurveTo(
                    Point { x: 5.03, y: 9.51 },
                    Point { x: 0.00, y: 16.17 },
                    Point { x: 0.00, y: 24.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 0.00, y: 31.83 },
                    Point { x: 5.03, y: 38.49 },
                    Point { x: 12.02, y: 40.95 },
                ),
                PathEl::LineTo(Point { x: 12.02, y: 36.64 }),
                PathEl::CurveTo(
                    Point { x: 7.29, y: 34.39 },
                    Point { x: 4.00, y: 29.58 },
                    Point { x: 4.00, y: 24.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 30.00, y: 6.00 }),
                PathEl::CurveTo(
                    Point { x: 20.07, y: 6.00 },
                    Point { x: 12.00, y: 14.07 },
                    Point { x: 12.00, y: 24.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 12.00, y: 33.93 },
                    Point { x: 20.07, y: 42.00 },
                    Point { x: 30.00, y: 42.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 39.93, y: 42.00 },
                    Point { x: 48.00, y: 33.93 },
                    Point { x: 48.00, y: 24.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 48.00, y: 14.07 },
                    Point { x: 39.93, y: 6.00 },
                    Point { x: 30.00, y: 6.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 30.00, y: 38.00 }),
                PathEl::CurveTo(
                    Point { x: 22.28, y: 38.00 },
                    Point { x: 16.00, y: 31.72 },
                    Point { x: 16.00, y: 24.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 16.00, y: 16.28 },
                    Point { x: 22.28, y: 10.00 },
                    Point { x: 30.00, y: 10.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 37.72, y: 10.00 },
                    Point { x: 44.00, y: 16.28 },
                    Point { x: 44.00, y: 24.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 44.00, y: 31.72 },
                    Point { x: 37.72, y: 38.00 },
                    Point { x: 30.00, y: 38.00 },
                ),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct Input {
    size: f64,
    color: Color,
}

impl Input {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for Input {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 42.00, y: 6.02 }),
                PathEl::LineTo(Point { x: 6.00, y: 6.02 }),
                PathEl::CurveTo(
                    Point { x: 3.79, y: 6.02 },
                    Point { x: 2.00, y: 7.81 },
                    Point { x: 2.00, y: 10.02 },
                ),
                PathEl::LineTo(Point { x: 2.00, y: 18.00 }),
                PathEl::LineTo(Point { x: 6.00, y: 18.00 }),
                PathEl::LineTo(Point { x: 6.00, y: 9.98 }),
                PathEl::LineTo(Point { x: 42.00, y: 9.98 }),
                PathEl::LineTo(Point { x: 42.00, y: 38.04 }),
                PathEl::LineTo(Point { x: 6.00, y: 38.04 }),
                PathEl::LineTo(Point { x: 6.00, y: 30.00 }),
                PathEl::LineTo(Point { x: 2.00, y: 30.00 }),
                PathEl::LineTo(Point { x: 2.00, y: 38.02 }),
                PathEl::CurveTo(
                    Point { x: 2.00, y: 40.23 },
                    Point { x: 3.79, y: 41.98 },
                    Point { x: 6.00, y: 41.98 },
                ),
                PathEl::LineTo(Point { x: 42.00, y: 41.98 }),
                PathEl::CurveTo(
                    Point { x: 44.21, y: 41.98 },
                    Point { x: 46.00, y: 40.22 },
                    Point { x: 46.00, y: 38.02 },
                ),
                PathEl::LineTo(Point { x: 46.00, y: 10.02 }),
                PathEl::CurveTo(
                    Point { x: 46.00, y: 7.81 },
                    Point { x: 44.21, y: 6.02 },
                    Point { x: 42.00, y: 6.02 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 22.00, y: 32.00 }),
                PathEl::LineTo(Point { x: 30.00, y: 24.00 }),
                PathEl::LineTo(Point { x: 22.00, y: 16.00 }),
                PathEl::LineTo(Point { x: 22.00, y: 22.00 }),
                PathEl::LineTo(Point { x: 2.00, y: 22.00 }),
                PathEl::LineTo(Point { x: 2.00, y: 26.00 }),
                PathEl::LineTo(Point { x: 22.00, y: 26.00 }),
                PathEl::LineTo(Point { x: 22.00, y: 32.00 }),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct SwapCalls {
    size: f64,
    color: Color,
}

impl SwapCalls {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for SwapCalls {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 36.00, y: 8.00 }),
                PathEl::LineTo(Point { x: 28.00, y: 16.00 }),
                PathEl::LineTo(Point { x: 34.00, y: 16.00 }),
                PathEl::LineTo(Point { x: 34.00, y: 30.00 }),
                PathEl::CurveTo(
                    Point { x: 34.00, y: 32.21 },
                    Point { x: 32.21, y: 34.00 },
                    Point { x: 30.00, y: 34.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 27.79, y: 34.00 },
                    Point { x: 26.00, y: 32.21 },
                    Point { x: 26.00, y: 30.00 },
                ),
                PathEl::LineTo(Point { x: 26.00, y: 16.00 }),
                PathEl::CurveTo(
                    Point { x: 26.00, y: 11.59 },
                    Point { x: 22.41, y: 8.00 },
                    Point { x: 18.00, y: 8.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 13.59, y: 8.00 },
                    Point { x: 10.00, y: 11.59 },
                    Point { x: 10.00, y: 16.00 },
                ),
                PathEl::LineTo(Point { x: 10.00, y: 30.00 }),
                PathEl::LineTo(Point { x: 4.00, y: 30.00 }),
                PathEl::LineTo(Point { x: 12.00, y: 38.00 }),
                PathEl::LineTo(Point { x: 20.00, y: 30.00 }),
                PathEl::LineTo(Point { x: 14.00, y: 30.00 }),
                PathEl::LineTo(Point { x: 14.00, y: 16.00 }),
                PathEl::CurveTo(
                    Point { x: 14.00, y: 13.79 },
                    Point { x: 15.79, y: 12.00 },
                    Point { x: 18.00, y: 12.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 20.21, y: 12.00 },
                    Point { x: 22.00, y: 13.79 },
                    Point { x: 22.00, y: 16.00 },
                ),
                PathEl::LineTo(Point { x: 22.00, y: 30.00 }),
                PathEl::CurveTo(
                    Point { x: 22.00, y: 34.41 },
                    Point { x: 25.59, y: 38.00 },
                    Point { x: 30.00, y: 38.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 34.41, y: 38.00 },
                    Point { x: 38.00, y: 34.41 },
                    Point { x: 38.00, y: 30.00 },
                ),
                PathEl::LineTo(Point { x: 38.00, y: 16.00 }),
                PathEl::LineTo(Point { x: 44.00, y: 16.00 }),
                PathEl::LineTo(Point { x: 36.00, y: 8.00 }),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct VideoCall {
    size: f64,
    color: Color,
}

impl VideoCall {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for VideoCall {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 34.00, y: 21.00 }),
                PathEl::LineTo(Point { x: 34.00, y: 14.00 }),
                PathEl::CurveTo(
                    Point { x: 34.00, y: 12.90 },
                    Point { x: 33.10, y: 12.00 },
                    Point { x: 32.00, y: 12.00 },
                ),
                PathEl::LineTo(Point { x: 8.00, y: 12.00 }),
                PathEl::CurveTo(
                    Point { x: 6.90, y: 12.00 },
                    Point { x: 6.00, y: 12.90 },
                    Point { x: 6.00, y: 14.00 },
                ),
                PathEl::LineTo(Point { x: 6.00, y: 34.00 }),
                PathEl::CurveTo(
                    Point { x: 6.00, y: 35.10 },
                    Point { x: 6.90, y: 36.00 },
                    Point { x: 8.00, y: 36.00 },
                ),
                PathEl::LineTo(Point { x: 32.00, y: 36.00 }),
                PathEl::CurveTo(
                    Point { x: 33.10, y: 36.00 },
                    Point { x: 34.00, y: 35.10 },
                    Point { x: 34.00, y: 34.00 },
                ),
                PathEl::LineTo(Point { x: 34.00, y: 27.00 }),
                PathEl::LineTo(Point { x: 42.00, y: 35.00 }),
                PathEl::LineTo(Point { x: 42.00, y: 13.00 }),
                PathEl::LineTo(Point { x: 34.00, y: 21.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 28.00, y: 26.00 }),
                PathEl::LineTo(Point { x: 22.00, y: 26.00 }),
                PathEl::LineTo(Point { x: 22.00, y: 32.00 }),
                PathEl::LineTo(Point { x: 18.00, y: 32.00 }),
                PathEl::LineTo(Point { x: 18.00, y: 26.00 }),
                PathEl::LineTo(Point { x: 12.00, y: 26.00 }),
                PathEl::LineTo(Point { x: 12.00, y: 22.00 }),
                PathEl::LineTo(Point { x: 18.00, y: 22.00 }),
                PathEl::LineTo(Point { x: 18.00, y: 16.00 }),
                PathEl::LineTo(Point { x: 22.00, y: 16.00 }),
                PathEl::LineTo(Point { x: 22.00, y: 22.00 }),
                PathEl::LineTo(Point { x: 28.00, y: 22.00 }),
                PathEl::LineTo(Point { x: 28.00, y: 26.00 }),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct AccountBox {
    size: f64,
    color: Color,
}

impl AccountBox {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for AccountBox {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 6.00, y: 10.00 }),
                PathEl::LineTo(Point { x: 6.00, y: 38.00 }),
                PathEl::CurveTo(
                    Point { x: 6.00, y: 40.21 },
                    Point { x: 7.79, y: 42.00 },
                    Point { x: 10.00, y: 42.00 },
                ),
                PathEl::LineTo(Point { x: 38.00, y: 42.00 }),
                PathEl::CurveTo(
                    Point { x: 40.21, y: 42.00 },
                    Point { x: 42.00, y: 40.21 },
                    Point { x: 42.00, y: 38.00 },
                ),
                PathEl::LineTo(Point { x: 42.00, y: 10.00 }),
                PathEl::CurveTo(
                    Point { x: 42.00, y: 7.79 },
                    Point { x: 40.21, y: 6.00 },
                    Point { x: 38.00, y: 6.00 },
                ),
                PathEl::LineTo(Point { x: 10.00, y: 6.00 }),
                PathEl::CurveTo(
                    Point { x: 7.79, y: 6.00 },
                    Point { x: 6.00, y: 7.79 },
                    Point { x: 6.00, y: 10.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 30.00, y: 18.00 }),
                PathEl::CurveTo(
                    Point { x: 30.00, y: 21.32 },
                    Point { x: 27.31, y: 24.00 },
                    Point { x: 24.00, y: 24.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 20.69, y: 24.00 },
                    Point { x: 18.00, y: 21.32 },
                    Point { x: 18.00, y: 18.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 18.00, y: 14.69 },
                    Point { x: 20.69, y: 12.00 },
                    Point { x: 24.00, y: 12.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 27.31, y: 12.00 },
                    Point { x: 30.00, y: 14.69 },
                    Point { x: 30.00, y: 18.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 12.00, y: 34.00 }),
                PathEl::CurveTo(
                    Point { x: 12.00, y: 30.00 },
                    Point { x: 20.00, y: 27.80 },
                    Point { x: 24.00, y: 27.80 },
                ),
                PathEl::CurveTo(
                    Point { x: 28.00, y: 27.80 },
                    Point { x: 36.00, y: 30.00 },
                    Point { x: 36.00, y: 34.00 },
                ),
                PathEl::LineTo(Point { x: 36.00, y: 36.00 }),
                PathEl::LineTo(Point { x: 12.00, y: 36.00 }),
                PathEl::LineTo(Point { x: 12.00, y: 34.00 }),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct SyncDisabled {
    size: f64,
    color: Color,
}

impl SyncDisabled {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for SyncDisabled {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 20.00, y: 12.70 }),
                PathEl::LineTo(Point { x: 20.00, y: 8.52 }),
                PathEl::CurveTo(
                    Point { x: 18.40, y: 8.93 },
                    Point { x: 16.91, y: 9.59 },
                    Point { x: 15.54, y: 10.44 },
                ),
                PathEl::LineTo(Point { x: 18.47, y: 13.37 }),
                PathEl::CurveTo(
                    Point { x: 18.96, y: 13.12 },
                    Point { x: 19.47, y: 12.88 },
                    Point { x: 20.00, y: 12.70 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 5.73, y: 10.82 }),
                PathEl::LineTo(Point { x: 10.44, y: 15.53 }),
                PathEl::CurveTo(
                    Point { x: 8.90, y: 17.99 },
                    Point { x: 8.00, y: 20.88 },
                    Point { x: 8.00, y: 24.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 8.00, y: 28.42 },
                    Point { x: 9.81, y: 32.40 },
                    Point { x: 12.71, y: 35.29 },
                ),
                PathEl::LineTo(Point { x: 8.00, y: 40.00 }),
                PathEl::LineTo(Point { x: 20.00, y: 40.00 }),
                PathEl::LineTo(Point { x: 20.00, y: 28.00 }),
                PathEl::LineTo(Point { x: 15.53, y: 32.47 }),
                PathEl::CurveTo(
                    Point { x: 13.35, y: 30.30 },
                    Point { x: 12.00, y: 27.31 },
                    Point { x: 12.00, y: 24.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 12.00, y: 22.00 },
                    Point { x: 12.50, y: 20.12 },
                    Point { x: 13.37, y: 18.46 },
                ),
                PathEl::LineTo(Point { x: 29.54, y: 34.63 }),
                PathEl::CurveTo(
                    Point { x: 29.05, y: 34.89 },
                    Point { x: 28.54, y: 35.12 },
                    Point { x: 28.01, y: 35.31 },
                ),
                PathEl::LineTo(Point { x: 28.01, y: 39.48 }),
                PathEl::CurveTo(
                    Point { x: 29.61, y: 39.07 },
                    Point { x: 31.10, y: 38.41 },
                    Point { x: 32.47, y: 37.56 },
                ),
                PathEl::LineTo(Point { x: 37.19, y: 42.28 }),
                PathEl::LineTo(Point { x: 39.74, y: 39.73 }),
                PathEl::LineTo(Point { x: 8.27, y: 8.27 }),
                PathEl::LineTo(Point { x: 5.73, y: 10.82 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 40.00, y: 8.00 }),
                PathEl::LineTo(Point { x: 28.00, y: 8.00 }),
                PathEl::LineTo(Point { x: 28.00, y: 20.00 }),
                PathEl::LineTo(Point { x: 32.47, y: 15.53 }),
                PathEl::CurveTo(
                    Point { x: 34.65, y: 17.70 },
                    Point { x: 36.00, y: 20.69 },
                    Point { x: 36.00, y: 24.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 36.00, y: 26.00 },
                    Point { x: 35.50, y: 27.88 },
                    Point { x: 34.63, y: 29.54 },
                ),
                PathEl::LineTo(Point { x: 37.56, y: 32.47 }),
                PathEl::CurveTo(
                    Point { x: 39.10, y: 30.01 },
                    Point { x: 40.00, y: 27.12 },
                    Point { x: 40.00, y: 24.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 40.00, y: 19.58 },
                    Point { x: 38.19, y: 15.60 },
                    Point { x: 35.29, y: 12.71 },
                ),
                PathEl::LineTo(Point { x: 40.00, y: 8.00 }),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct Highlight {
    size: f64,
    color: Color,
}

impl Highlight {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for Highlight {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 12.00, y: 28.00 }),
                PathEl::LineTo(Point { x: 18.00, y: 34.00 }),
                PathEl::LineTo(Point { x: 18.00, y: 44.00 }),
                PathEl::LineTo(Point { x: 30.00, y: 44.00 }),
                PathEl::LineTo(Point { x: 30.00, y: 34.00 }),
                PathEl::LineTo(Point { x: 36.00, y: 28.00 }),
                PathEl::LineTo(Point { x: 36.00, y: 18.00 }),
                PathEl::LineTo(Point { x: 12.00, y: 18.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 22.00, y: 4.00 }),
                PathEl::LineTo(Point { x: 26.00, y: 4.00 }),
                PathEl::LineTo(Point { x: 26.00, y: 10.00 }),
                PathEl::LineTo(Point { x: 22.00, y: 10.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 7.00, y: 11.75 }),
                PathEl::LineTo(Point { x: 9.83, y: 8.92 }),
                PathEl::LineTo(Point { x: 14.07, y: 13.17 }),
                PathEl::LineTo(Point { x: 11.25, y: 15.99 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 33.92, y: 13.17 }),
                PathEl::LineTo(Point { x: 38.16, y: 8.93 }),
                PathEl::LineTo(Point { x: 40.99, y: 11.76 }),
                PathEl::LineTo(Point { x: 36.75, y: 16.00 }),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct Reorder {
    size: f64,
    color: Color,
}

impl Reorder {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for Reorder {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 24.0, height / 24.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 3.00, y: 15.00 }),
                PathEl::LineTo(Point { x: 21.00, y: 15.00 }),
                PathEl::LineTo(Point { x: 21.00, y: 13.00 }),
                PathEl::LineTo(Point { x: 3.00, y: 13.00 }),
                PathEl::LineTo(Point { x: 3.00, y: 15.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 3.00, y: 19.00 }),
                PathEl::LineTo(Point { x: 21.00, y: 19.00 }),
                PathEl::LineTo(Point { x: 21.00, y: 17.00 }),
                PathEl::LineTo(Point { x: 3.00, y: 17.00 }),
                PathEl::LineTo(Point { x: 3.00, y: 19.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 3.00, y: 11.00 }),
                PathEl::LineTo(Point { x: 21.00, y: 11.00 }),
                PathEl::LineTo(Point { x: 21.00, y: 9.00 }),
                PathEl::LineTo(Point { x: 3.00, y: 9.00 }),
                PathEl::LineTo(Point { x: 3.00, y: 11.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 3.00, y: 5.00 }),
                PathEl::LineTo(Point { x: 3.00, y: 7.00 }),
                PathEl::LineTo(Point { x: 21.00, y: 7.00 }),
                PathEl::LineTo(Point { x: 21.00, y: 5.00 }),
                PathEl::LineTo(Point { x: 3.00, y: 5.00 }),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct FormatAlignJustify {
    size: f64,
    color: Color,
}

impl FormatAlignJustify {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for FormatAlignJustify {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 6.00, y: 42.00 }),
                PathEl::LineTo(Point { x: 42.00, y: 42.00 }),
                PathEl::LineTo(Point { x: 42.00, y: 38.00 }),
                PathEl::LineTo(Point { x: 6.00, y: 38.00 }),
                PathEl::LineTo(Point { x: 6.00, y: 42.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 6.00, y: 34.00 }),
                PathEl::LineTo(Point { x: 42.00, y: 34.00 }),
                PathEl::LineTo(Point { x: 42.00, y: 30.00 }),
                PathEl::LineTo(Point { x: 6.00, y: 30.00 }),
                PathEl::LineTo(Point { x: 6.00, y: 34.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 6.00, y: 26.00 }),
                PathEl::LineTo(Point { x: 42.00, y: 26.00 }),
                PathEl::LineTo(Point { x: 42.00, y: 22.00 }),
                PathEl::LineTo(Point { x: 6.00, y: 22.00 }),
                PathEl::LineTo(Point { x: 6.00, y: 26.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 6.00, y: 18.00 }),
                PathEl::LineTo(Point { x: 42.00, y: 18.00 }),
                PathEl::LineTo(Point { x: 42.00, y: 14.00 }),
                PathEl::LineTo(Point { x: 6.00, y: 14.00 }),
                PathEl::LineTo(Point { x: 6.00, y: 18.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 6.00, y: 6.00 }),
                PathEl::LineTo(Point { x: 6.00, y: 10.00 }),
                PathEl::LineTo(Point { x: 42.00, y: 10.00 }),
                PathEl::LineTo(Point { x: 42.00, y: 6.00 }),
                PathEl::LineTo(Point { x: 6.00, y: 6.00 }),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct DeveloperMode {
    size: f64,
    color: Color,
}

impl DeveloperMode {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for DeveloperMode {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 14.00, y: 10.17 }),
                PathEl::LineTo(Point { x: 34.00, y: 10.17 }),
                PathEl::LineTo(Point { x: 34.00, y: 14.17 }),
                PathEl::LineTo(Point { x: 38.00, y: 14.17 }),
                PathEl::LineTo(Point { x: 38.00, y: 6.17 }),
                PathEl::CurveTo(
                    Point { x: 38.00, y: 3.96 },
                    Point { x: 36.21, y: 2.19 },
                    Point { x: 34.00, y: 2.19 },
                ),
                PathEl::LineTo(Point { x: 14.00, y: 2.17 }),
                PathEl::CurveTo(
                    Point { x: 11.79, y: 2.17 },
                    Point { x: 10.00, y: 3.96 },
                    Point { x: 10.00, y: 6.17 },
                ),
                PathEl::LineTo(Point { x: 10.00, y: 14.17 }),
                PathEl::LineTo(Point { x: 14.00, y: 14.17 }),
                PathEl::LineTo(Point { x: 14.00, y: 10.17 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 30.83, y: 33.34 }),
                PathEl::LineTo(Point { x: 40.00, y: 24.17 }),
                PathEl::LineTo(Point { x: 30.83, y: 15.00 }),
                PathEl::LineTo(Point { x: 28.00, y: 17.83 }),
                PathEl::LineTo(Point { x: 34.34, y: 24.17 }),
                PathEl::LineTo(Point { x: 28.00, y: 30.52 }),
                PathEl::LineTo(Point { x: 30.83, y: 33.34 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 20.00, y: 30.52 }),
                PathEl::LineTo(Point { x: 13.66, y: 24.18 }),
                PathEl::LineTo(Point { x: 20.00, y: 17.83 }),
                PathEl::LineTo(Point { x: 17.17, y: 15.00 }),
                PathEl::LineTo(Point { x: 8.00, y: 24.17 }),
                PathEl::LineTo(Point { x: 17.17, y: 33.34 }),
                PathEl::LineTo(Point { x: 20.00, y: 30.52 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 34.00, y: 38.17 }),
                PathEl::LineTo(Point { x: 14.00, y: 38.17 }),
                PathEl::LineTo(Point { x: 14.00, y: 34.17 }),
                PathEl::LineTo(Point { x: 10.00, y: 34.17 }),
                PathEl::LineTo(Point { x: 10.00, y: 42.17 }),
                PathEl::CurveTo(
                    Point { x: 10.00, y: 44.38 },
                    Point { x: 11.79, y: 46.17 },
                    Point { x: 14.00, y: 46.17 },
                ),
                PathEl::LineTo(Point { x: 34.00, y: 46.17 }),
                PathEl::CurveTo(
                    Point { x: 36.21, y: 46.17 },
                    Point { x: 38.00, y: 44.38 },
                    Point { x: 38.00, y: 42.17 },
                ),
                PathEl::LineTo(Point { x: 38.00, y: 34.17 }),
                PathEl::LineTo(Point { x: 34.00, y: 34.17 }),
                PathEl::LineTo(Point { x: 34.00, y: 38.17 }),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct Tonality {
    size: f64,
    color: Color,
}

impl Tonality {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for Tonality {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 24.00, y: 4.00 }),
                PathEl::CurveTo(
                    Point { x: 12.95, y: 4.00 },
                    Point { x: 4.00, y: 12.95 },
                    Point { x: 4.00, y: 24.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 4.00, y: 35.05 },
                    Point { x: 12.95, y: 44.00 },
                    Point { x: 24.00, y: 44.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 35.05, y: 44.00 },
                    Point { x: 44.00, y: 35.05 },
                    Point { x: 44.00, y: 24.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 44.00, y: 12.95 },
                    Point { x: 35.05, y: 4.00 },
                    Point { x: 24.00, y: 4.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 22.00, y: 39.86 }),
                PathEl::CurveTo(
                    Point { x: 14.11, y: 38.88 },
                    Point { x: 8.00, y: 32.16 },
                    Point { x: 8.00, y: 24.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 8.00, y: 15.84 },
                    Point { x: 14.11, y: 9.12 },
                    Point { x: 22.00, y: 8.14 },
                ),
                PathEl::LineTo(Point { x: 22.00, y: 39.86 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 26.00, y: 8.14 }),
                PathEl::CurveTo(
                    Point { x: 28.06, y: 8.40 },
                    Point { x: 30.00, y: 9.04 },
                    Point { x: 31.74, y: 10.00 },
                ),
                PathEl::LineTo(Point { x: 26.00, y: 10.00 }),
                PathEl::LineTo(Point { x: 26.00, y: 8.14 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 26.00, y: 14.00 }),
                PathEl::LineTo(Point { x: 36.48, y: 14.00 }),
                PathEl::CurveTo(
                    Point { x: 36.98, y: 14.63 },
                    Point { x: 37.44, y: 15.30 },
                    Point { x: 37.84, y: 16.00 },
                ),
                PathEl::LineTo(Point { x: 26.00, y: 16.00 }),
                PathEl::LineTo(Point { x: 26.00, y: 14.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 26.00, y: 20.00 }),
                PathEl::LineTo(Point { x: 39.48, y: 20.00 }),
                PathEl::CurveTo(
                    Point { x: 39.65, y: 20.65 },
                    Point { x: 39.78, y: 21.32 },
                    Point { x: 39.87, y: 22.00 },
                ),
                PathEl::LineTo(Point { x: 26.00, y: 22.00 }),
                PathEl::LineTo(Point { x: 26.00, y: 20.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 26.00, y: 39.86 }),
                PathEl::LineTo(Point { x: 26.00, y: 38.00 }),
                PathEl::LineTo(Point { x: 31.74, y: 38.00 }),
                PathEl::CurveTo(
                    Point { x: 30.00, y: 38.96 },
                    Point { x: 28.06, y: 39.60 },
                    Point { x: 26.00, y: 39.86 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 36.48, y: 34.00 }),
                PathEl::LineTo(Point { x: 26.00, y: 34.00 }),
                PathEl::LineTo(Point { x: 26.00, y: 32.00 }),
                PathEl::LineTo(Point { x: 37.84, y: 32.00 }),
                PathEl::CurveTo(
                    Point { x: 37.44, y: 32.70 },
                    Point { x: 36.98, y: 33.37 },
                    Point { x: 36.48, y: 34.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 39.48, y: 28.00 }),
                PathEl::LineTo(Point { x: 26.00, y: 28.00 }),
                PathEl::LineTo(Point { x: 26.00, y: 26.00 }),
                PathEl::LineTo(Point { x: 39.86, y: 26.00 }),
                PathEl::CurveTo(
                    Point { x: 39.78, y: 26.68 },
                    Point { x: 39.64, y: 27.35 },
                    Point { x: 39.48, y: 28.00 },
                ),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct AddCircleOutline {
    size: f64,
    color: Color,
}

impl AddCircleOutline {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for AddCircleOutline {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 26.00, y: 14.00 }),
                PathEl::LineTo(Point { x: 22.00, y: 14.00 }),
                PathEl::LineTo(Point { x: 22.00, y: 22.00 }),
                PathEl::LineTo(Point { x: 14.00, y: 22.00 }),
                PathEl::LineTo(Point { x: 14.00, y: 26.00 }),
                PathEl::LineTo(Point { x: 22.00, y: 26.00 }),
                PathEl::LineTo(Point { x: 22.00, y: 34.00 }),
                PathEl::LineTo(Point { x: 26.00, y: 34.00 }),
                PathEl::LineTo(Point { x: 26.00, y: 26.00 }),
                PathEl::LineTo(Point { x: 34.00, y: 26.00 }),
                PathEl::LineTo(Point { x: 34.00, y: 22.00 }),
                PathEl::LineTo(Point { x: 26.00, y: 22.00 }),
                PathEl::LineTo(Point { x: 26.00, y: 14.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 24.00, y: 4.00 }),
                PathEl::CurveTo(
                    Point { x: 12.95, y: 4.00 },
                    Point { x: 4.00, y: 12.95 },
                    Point { x: 4.00, y: 24.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 4.00, y: 35.05 },
                    Point { x: 12.95, y: 44.00 },
                    Point { x: 24.00, y: 44.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 35.05, y: 44.00 },
                    Point { x: 44.00, y: 35.05 },
                    Point { x: 44.00, y: 24.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 44.00, y: 12.95 },
                    Point { x: 35.05, y: 4.00 },
                    Point { x: 24.00, y: 4.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 24.00, y: 40.00 }),
                PathEl::CurveTo(
                    Point { x: 15.18, y: 40.00 },
                    Point { x: 8.00, y: 32.82 },
                    Point { x: 8.00, y: 24.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 8.00, y: 15.18 },
                    Point { x: 15.18, y: 8.00 },
                    Point { x: 24.00, y: 8.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 32.82, y: 8.00 },
                    Point { x: 40.00, y: 15.18 },
                    Point { x: 40.00, y: 24.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 40.00, y: 32.82 },
                    Point { x: 32.82, y: 40.00 },
                    Point { x: 24.00, y: 40.00 },
                ),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct Help {
    size: f64,
    color: Color,
}

impl Help {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for Help {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 24.00, y: 4.00 }),
                PathEl::CurveTo(
                    Point { x: 12.95, y: 4.00 },
                    Point { x: 4.00, y: 12.95 },
                    Point { x: 4.00, y: 24.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 4.00, y: 35.05 },
                    Point { x: 12.95, y: 44.00 },
                    Point { x: 24.00, y: 44.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 35.05, y: 44.00 },
                    Point { x: 44.00, y: 35.05 },
                    Point { x: 44.00, y: 24.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 44.00, y: 12.95 },
                    Point { x: 35.05, y: 4.00 },
                    Point { x: 24.00, y: 4.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 26.00, y: 38.00 }),
                PathEl::LineTo(Point { x: 22.00, y: 38.00 }),
                PathEl::LineTo(Point { x: 22.00, y: 34.00 }),
                PathEl::LineTo(Point { x: 26.00, y: 34.00 }),
                PathEl::LineTo(Point { x: 26.00, y: 38.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 30.13, y: 22.51 }),
                PathEl::LineTo(Point { x: 28.34, y: 24.35 }),
                PathEl::CurveTo(
                    Point { x: 26.90, y: 25.79 },
                    Point { x: 26.00, y: 27.00 },
                    Point { x: 26.00, y: 30.00 },
                ),
                PathEl::LineTo(Point { x: 22.00, y: 30.00 }),
                PathEl::LineTo(Point { x: 22.00, y: 29.00 }),
                PathEl::CurveTo(
                    Point { x: 22.00, y: 26.79 },
                    Point { x: 22.90, y: 24.79 },
                    Point { x: 24.34, y: 23.34 },
                ),
                PathEl::LineTo(Point { x: 26.83, y: 20.82 }),
                PathEl::CurveTo(
                    Point { x: 27.55, y: 20.10 },
                    Point { x: 28.00, y: 19.10 },
                    Point { x: 28.00, y: 18.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 28.00, y: 15.79 },
                    Point { x: 26.21, y: 14.00 },
                    Point { x: 24.00, y: 14.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 21.79, y: 14.00 },
                    Point { x: 20.00, y: 15.79 },
                    Point { x: 20.00, y: 18.00 },
                ),
                PathEl::LineTo(Point { x: 16.00, y: 18.00 }),
                PathEl::CurveTo(
                    Point { x: 16.00, y: 13.58 },
                    Point { x: 19.58, y: 10.00 },
                    Point { x: 24.00, y: 10.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 28.42, y: 10.00 },
                    Point { x: 32.00, y: 13.58 },
                    Point { x: 32.00, y: 18.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 32.00, y: 19.76 },
                    Point { x: 31.29, y: 21.35 },
                    Point { x: 30.13, y: 22.51 },
                ),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct NoSim {
    size: f64,
    color: Color,
}

impl NoSim {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for NoSim {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 37.98, y: 10.00 }),
                PathEl::CurveTo(
                    Point { x: 37.98, y: 7.79 },
                    Point { x: 36.21, y: 6.00 },
                    Point { x: 34.00, y: 6.00 },
                ),
                PathEl::LineTo(Point { x: 20.00, y: 6.00 }),
                PathEl::LineTo(Point { x: 15.32, y: 10.68 }),
                PathEl::LineTo(Point { x: 38.00, y: 33.36 }),
                PathEl::LineTo(Point { x: 37.98, y: 10.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 7.30, y: 7.76 }),
                PathEl::LineTo(Point { x: 4.76, y: 10.30 }),
                PathEl::LineTo(Point { x: 10.00, y: 15.55 }),
                PathEl::LineTo(Point { x: 10.00, y: 38.00 }),
                PathEl::CurveTo(
                    Point { x: 10.00, y: 40.21 },
                    Point { x: 11.79, y: 42.00 },
                    Point { x: 14.00, y: 42.00 },
                ),
                PathEl::LineTo(Point { x: 34.02, y: 42.00 }),
                PathEl::CurveTo(
                    Point { x: 34.72, y: 42.00 },
                    Point { x: 35.37, y: 41.80 },
                    Point { x: 35.94, y: 41.49 },
                ),
                PathEl::LineTo(Point { x: 39.70, y: 45.25 }),
                PathEl::LineTo(Point { x: 42.24, y: 42.70 }),
                PathEl::LineTo(Point { x: 7.30, y: 7.76 }),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct LocalDining {
    size: f64,
    color: Color,
}

impl LocalDining {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for LocalDining {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 16.20, y: 26.69 }),
                PathEl::LineTo(Point { x: 21.86, y: 21.03 }),
                PathEl::LineTo(Point { x: 7.83, y: 7.00 }),
                PathEl::CurveTo(
                    Point { x: 4.71, y: 10.12 },
                    Point { x: 4.71, y: 15.19 },
                    Point { x: 7.83, y: 18.31 },
                ),
                PathEl::LineTo(Point { x: 16.20, y: 26.69 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 29.77, y: 23.06 }),
                PathEl::CurveTo(
                    Point { x: 32.82, y: 24.49 },
                    Point { x: 37.13, y: 23.48 },
                    Point { x: 40.31, y: 20.30 },
                ),
                PathEl::CurveTo(
                    Point { x: 44.14, y: 16.47 },
                    Point { x: 44.87, y: 11.00 },
                    Point { x: 41.94, y: 8.07 },
                ),
                PathEl::CurveTo(
                    Point { x: 39.00, y: 5.14 },
                    Point { x: 33.52, y: 5.87 },
                    Point { x: 29.70, y: 9.70 },
                ),
                PathEl::CurveTo(
                    Point { x: 26.52, y: 12.88 },
                    Point { x: 25.52, y: 17.19 },
                    Point { x: 26.94, y: 20.24 },
                ),
                PathEl::CurveTo(
                    Point { x: 22.49, y: 24.68 },
                    Point { x: 7.41, y: 39.76 },
                    Point { x: 7.41, y: 39.76 },
                ),
                PathEl::LineTo(Point { x: 10.24, y: 42.59 }),
                PathEl::LineTo(Point { x: 24.00, y: 28.83 }),
                PathEl::LineTo(Point { x: 37.76, y: 42.59 }),
                PathEl::LineTo(Point { x: 40.59, y: 39.76 }),
                PathEl::LineTo(Point { x: 26.83, y: 26.00 }),
                PathEl::LineTo(Point { x: 29.77, y: 23.06 }),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct OfflinePin {
    size: f64,
    color: Color,
}

impl OfflinePin {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for OfflinePin {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 24.0, height / 24.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 12.00, y: 2.00 }),
                PathEl::CurveTo(
                    Point { x: 6.50, y: 2.00 },
                    Point { x: 2.00, y: 6.50 },
                    Point { x: 2.00, y: 12.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 2.00, y: 17.50 },
                    Point { x: 6.50, y: 22.00 },
                    Point { x: 12.00, y: 22.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 17.50, y: 22.00 },
                    Point { x: 22.00, y: 17.50 },
                    Point { x: 22.00, y: 12.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 22.00, y: 6.50 },
                    Point { x: 17.50, y: 2.00 },
                    Point { x: 12.00, y: 2.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 17.00, y: 18.00 }),
                PathEl::LineTo(Point { x: 7.00, y: 18.00 }),
                PathEl::LineTo(Point { x: 7.00, y: 16.00 }),
                PathEl::LineTo(Point { x: 17.00, y: 16.00 }),
                PathEl::LineTo(Point { x: 17.00, y: 18.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 10.30, y: 14.00 }),
                PathEl::LineTo(Point { x: 7.00, y: 10.70 }),
                PathEl::LineTo(Point { x: 8.40, y: 9.30 }),
                PathEl::LineTo(Point { x: 10.30, y: 11.20 }),
                PathEl::LineTo(Point { x: 15.60, y: 5.90 }),
                PathEl::LineTo(Point { x: 17.00, y: 7.30 }),
                PathEl::LineTo(Point { x: 10.30, y: 14.00 }),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct ControlPoint {
    size: f64,
    color: Color,
}

impl ControlPoint {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for ControlPoint {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 26.00, y: 14.00 }),
                PathEl::LineTo(Point { x: 22.00, y: 14.00 }),
                PathEl::LineTo(Point { x: 22.00, y: 22.00 }),
                PathEl::LineTo(Point { x: 14.00, y: 22.00 }),
                PathEl::LineTo(Point { x: 14.00, y: 26.00 }),
                PathEl::LineTo(Point { x: 22.00, y: 26.00 }),
                PathEl::LineTo(Point { x: 22.00, y: 34.00 }),
                PathEl::LineTo(Point { x: 26.00, y: 34.00 }),
                PathEl::LineTo(Point { x: 26.00, y: 26.00 }),
                PathEl::LineTo(Point { x: 34.00, y: 26.00 }),
                PathEl::LineTo(Point { x: 34.00, y: 22.00 }),
                PathEl::LineTo(Point { x: 26.00, y: 22.00 }),
                PathEl::LineTo(Point { x: 26.00, y: 14.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 24.00, y: 4.00 }),
                PathEl::CurveTo(
                    Point { x: 12.97, y: 4.00 },
                    Point { x: 4.00, y: 12.97 },
                    Point { x: 4.00, y: 24.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 4.00, y: 35.03 },
                    Point { x: 12.97, y: 44.00 },
                    Point { x: 24.00, y: 44.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 35.03, y: 44.00 },
                    Point { x: 44.00, y: 35.03 },
                    Point { x: 44.00, y: 24.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 44.00, y: 12.97 },
                    Point { x: 35.03, y: 4.00 },
                    Point { x: 24.00, y: 4.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 24.00, y: 40.00 }),
                PathEl::CurveTo(
                    Point { x: 15.18, y: 40.00 },
                    Point { x: 8.00, y: 32.82 },
                    Point { x: 8.00, y: 24.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 8.00, y: 15.18 },
                    Point { x: 15.18, y: 8.00 },
                    Point { x: 24.00, y: 8.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 32.82, y: 8.00 },
                    Point { x: 40.00, y: 15.18 },
                    Point { x: 40.00, y: 24.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 40.00, y: 32.82 },
                    Point { x: 32.82, y: 40.00 },
                    Point { x: 24.00, y: 40.00 },
                ),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct MonetizationOn {
    size: f64,
    color: Color,
}

impl MonetizationOn {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for MonetizationOn {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 24.00, y: 4.00 }),
                PathEl::CurveTo(
                    Point { x: 12.95, y: 4.00 },
                    Point { x: 4.00, y: 12.95 },
                    Point { x: 4.00, y: 24.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 4.00, y: 35.05 },
                    Point { x: 12.95, y: 44.00 },
                    Point { x: 24.00, y: 44.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 35.05, y: 44.00 },
                    Point { x: 44.00, y: 35.05 },
                    Point { x: 44.00, y: 24.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 44.00, y: 12.95 },
                    Point { x: 35.05, y: 4.00 },
                    Point { x: 24.00, y: 4.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 26.83, y: 36.18 }),
                PathEl::LineTo(Point { x: 26.83, y: 40.00 }),
                PathEl::LineTo(Point { x: 21.50, y: 40.00 }),
                PathEl::LineTo(Point { x: 21.50, y: 36.14 }),
                PathEl::CurveTo(
                    Point { x: 18.09, y: 35.41 },
                    Point { x: 15.17, y: 33.22 },
                    Point { x: 14.96, y: 29.33 },
                ),
                PathEl::LineTo(Point { x: 18.87, y: 29.33 }),
                PathEl::CurveTo(
                    Point { x: 19.07, y: 31.43 },
                    Point { x: 20.51, y: 33.06 },
                    Point { x: 24.17, y: 33.06 },
                ),
                PathEl::CurveTo(
                    Point { x: 28.10, y: 33.06 },
                    Point { x: 28.97, y: 31.10 },
                    Point { x: 28.97, y: 29.88 },
                ),
                PathEl::CurveTo(
                    Point { x: 28.97, y: 28.23 },
                    Point { x: 28.08, y: 26.66 },
                    Point { x: 23.64, y: 25.60 },
                ),
                PathEl::CurveTo(
                    Point { x: 18.68, y: 24.41 },
                    Point { x: 15.28, y: 22.36 },
                    Point { x: 15.28, y: 18.26 },
                ),
                PathEl::CurveTo(
                    Point { x: 15.28, y: 14.83 },
                    Point { x: 18.05, y: 12.59 },
                    Point { x: 21.50, y: 11.84 },
                ),
                PathEl::LineTo(Point { x: 21.50, y: 8.00 }),
                PathEl::LineTo(Point { x: 26.83, y: 8.00 }),
                PathEl::LineTo(Point { x: 26.83, y: 11.89 }),
                PathEl::CurveTo(
                    Point { x: 30.55, y: 12.80 },
                    Point { x: 32.41, y: 15.61 },
                    Point { x: 32.54, y: 18.66 },
                ),
                PathEl::LineTo(Point { x: 28.60, y: 18.66 }),
                PathEl::CurveTo(
                    Point { x: 28.49, y: 16.44 },
                    Point { x: 27.32, y: 14.93 },
                    Point { x: 24.16, y: 14.93 },
                ),
                PathEl::CurveTo(
                    Point { x: 21.16, y: 14.93 },
                    Point { x: 19.36, y: 16.28 },
                    Point { x: 19.36, y: 18.22 },
                ),
                PathEl::CurveTo(
                    Point { x: 19.36, y: 19.91 },
                    Point { x: 20.66, y: 20.99 },
                    Point { x: 24.69, y: 22.04 },
                ),
                PathEl::CurveTo(
                    Point { x: 28.73, y: 23.09 },
                    Point { x: 33.05, y: 24.81 },
                    Point { x: 33.05, y: 29.86 },
                ),
                PathEl::CurveTo(
                    Point { x: 33.05, y: 33.51 },
                    Point { x: 30.29, y: 35.52 },
                    Point { x: 26.83, y: 36.18 },
                ),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct Terrain {
    size: f64,
    color: Color,
}

impl Terrain {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for Terrain {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 28.00, y: 12.00 }),
                PathEl::LineTo(Point { x: 20.50, y: 22.00 }),
                PathEl::LineTo(Point { x: 26.20, y: 29.60 }),
                PathEl::LineTo(Point { x: 23.00, y: 32.00 }),
                PathEl::CurveTo(
                    Point { x: 19.62, y: 27.50 },
                    Point { x: 14.00, y: 20.00 },
                    Point { x: 14.00, y: 20.00 },
                ),
                PathEl::LineTo(Point { x: 2.00, y: 36.00 }),
                PathEl::LineTo(Point { x: 46.00, y: 36.00 }),
                PathEl::LineTo(Point { x: 28.00, y: 12.00 }),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct Beenhere {
    size: f64,
    color: Color,
}

impl Beenhere {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for Beenhere {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 38.00, y: 2.00 }),
                PathEl::LineTo(Point { x: 10.00, y: 2.00 }),
                PathEl::CurveTo(
                    Point { x: 7.79, y: 2.00 },
                    Point { x: 6.02, y: 3.79 },
                    Point { x: 6.02, y: 6.00 },
                ),
                PathEl::LineTo(Point { x: 6.00, y: 31.87 }),
                PathEl::CurveTo(
                    Point { x: 6.00, y: 33.25 },
                    Point { x: 6.70, y: 34.47 },
                    Point { x: 7.76, y: 35.19 },
                ),
                PathEl::LineTo(Point { x: 23.99, y: 46.00 }),
                PathEl::LineTo(Point { x: 40.22, y: 35.19 }),
                PathEl::CurveTo(
                    Point { x: 41.28, y: 34.47 },
                    Point { x: 41.98, y: 33.25 },
                    Point { x: 41.98, y: 31.87 },
                ),
                PathEl::LineTo(Point { x: 42.00, y: 6.00 }),
                PathEl::CurveTo(
                    Point { x: 42.00, y: 3.79 },
                    Point { x: 40.21, y: 2.00 },
                    Point { x: 38.00, y: 2.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 20.00, y: 32.00 }),
                PathEl::LineTo(Point { x: 10.00, y: 22.00 }),
                PathEl::LineTo(Point { x: 12.83, y: 19.17 }),
                PathEl::LineTo(Point { x: 20.00, y: 26.34 }),
                PathEl::LineTo(Point { x: 35.17, y: 11.17 }),
                PathEl::LineTo(Point { x: 38.00, y: 14.00 }),
                PathEl::LineTo(Point { x: 20.00, y: 32.00 }),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct SmokeFree {
    size: f64,
    color: Color,
}

impl SmokeFree {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for SmokeFree {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 4.00, y: 12.00 }),
                PathEl::LineTo(Point { x: 17.99, y: 26.00 }),
                PathEl::LineTo(Point { x: 4.00, y: 26.00 }),
                PathEl::LineTo(Point { x: 4.00, y: 32.00 }),
                PathEl::LineTo(Point { x: 23.99, y: 32.00 }),
                PathEl::LineTo(Point { x: 37.98, y: 46.00 }),
                PathEl::LineTo(Point { x: 40.50, y: 43.50 }),
                PathEl::LineTo(Point { x: 6.50, y: 9.50 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 41.00, y: 26.00 }),
                PathEl::LineTo(Point { x: 44.00, y: 26.00 }),
                PathEl::LineTo(Point { x: 44.00, y: 32.00 }),
                PathEl::LineTo(Point { x: 41.00, y: 32.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 36.00, y: 26.00 }),
                PathEl::LineTo(Point { x: 39.00, y: 26.00 }),
                PathEl::LineTo(Point { x: 39.00, y: 32.00 }),
                PathEl::LineTo(Point { x: 36.00, y: 32.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 37.70, y: 9.76 }),
                PathEl::CurveTo(
                    Point { x: 38.93, y: 8.55 },
                    Point { x: 39.70, y: 6.86 },
                    Point { x: 39.70, y: 5.00 },
                ),
                PathEl::LineTo(Point { x: 36.70, y: 5.00 }),
                PathEl::CurveTo(
                    Point { x: 36.70, y: 7.04 },
                    Point { x: 35.04, y: 8.70 },
                    Point { x: 33.00, y: 8.70 },
                ),
                PathEl::LineTo(Point { x: 33.00, y: 11.70 }),
                PathEl::CurveTo(
                    Point { x: 37.49, y: 11.70 },
                    Point { x: 41.00, y: 15.35 },
                    Point { x: 41.00, y: 19.84 },
                ),
                PathEl::LineTo(Point { x: 41.00, y: 24.00 }),
                PathEl::LineTo(Point { x: 44.00, y: 24.00 }),
                PathEl::LineTo(Point { x: 44.00, y: 19.83 }),
                PathEl::CurveTo(
                    Point { x: 44.00, y: 15.38 },
                    Point { x: 41.44, y: 11.54 },
                    Point { x: 37.70, y: 9.76 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 29.00, y: 17.39 }),
                PathEl::LineTo(Point { x: 32.06, y: 17.39 }),
                PathEl::CurveTo(
                    Point { x: 34.15, y: 17.39 },
                    Point { x: 36.00, y: 18.87 },
                    Point { x: 36.00, y: 21.50 },
                ),
                PathEl::LineTo(Point { x: 36.00, y: 24.00 }),
                PathEl::LineTo(Point { x: 39.00, y: 24.00 }),
                PathEl::LineTo(Point { x: 39.00, y: 20.82 }),
                PathEl::CurveTo(
                    Point { x: 39.00, y: 17.21 },
                    Point { x: 35.80, y: 14.50 },
                    Point { x: 32.06, y: 14.50 },
                ),
                PathEl::LineTo(Point { x: 29.00, y: 14.50 }),
                PathEl::CurveTo(
                    Point { x: 26.96, y: 14.50 },
                    Point { x: 25.30, y: 12.54 },
                    Point { x: 25.30, y: 10.50 },
                ),
                PathEl::CurveTo(
                    Point { x: 25.30, y: 8.46 },
                    Point { x: 26.96, y: 7.00 },
                    Point { x: 29.00, y: 7.00 },
                ),
                PathEl::LineTo(Point { x: 29.00, y: 4.00 }),
                PathEl::CurveTo(
                    Point { x: 25.31, y: 4.00 },
                    Point { x: 22.30, y: 7.00 },
                    Point { x: 22.30, y: 10.70 },
                ),
                PathEl::CurveTo(
                    Point { x: 22.30, y: 14.40 },
                    Point { x: 25.31, y: 17.39 },
                    Point { x: 29.00, y: 17.39 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 34.00, y: 31.85 }),
                PathEl::LineTo(Point { x: 34.00, y: 26.00 }),
                PathEl::LineTo(Point { x: 28.15, y: 26.00 }),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct PhoneForwarded {
    size: f64,
    color: Color,
}

impl PhoneForwarded {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for PhoneForwarded {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 36.00, y: 22.00 }),
                PathEl::LineTo(Point { x: 46.00, y: 12.00 }),
                PathEl::LineTo(Point { x: 36.00, y: 2.00 }),
                PathEl::LineTo(Point { x: 36.00, y: 8.00 }),
                PathEl::LineTo(Point { x: 28.00, y: 8.00 }),
                PathEl::LineTo(Point { x: 28.00, y: 16.00 }),
                PathEl::LineTo(Point { x: 36.00, y: 16.00 }),
                PathEl::LineTo(Point { x: 36.00, y: 22.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 40.00, y: 31.00 }),
                PathEl::CurveTo(
                    Point { x: 37.51, y: 31.00 },
                    Point { x: 35.11, y: 30.60 },
                    Point { x: 32.86, y: 29.86 },
                ),
                PathEl::CurveTo(
                    Point { x: 32.17, y: 29.64 },
                    Point { x: 31.38, y: 29.80 },
                    Point { x: 30.83, y: 30.35 },
                ),
                PathEl::LineTo(Point { x: 26.43, y: 34.76 }),
                PathEl::CurveTo(
                    Point { x: 20.76, y: 31.88 },
                    Point { x: 16.14, y: 27.25 },
                    Point { x: 13.25, y: 21.59 },
                ),
                PathEl::LineTo(Point { x: 17.65, y: 17.18 }),
                PathEl::CurveTo(
                    Point { x: 18.20, y: 16.63 },
                    Point { x: 18.36, y: 15.84 },
                    Point { x: 18.14, y: 15.15 },
                ),
                PathEl::CurveTo(
                    Point { x: 17.40, y: 12.89 },
                    Point { x: 17.00, y: 10.49 },
                    Point { x: 17.00, y: 8.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 17.00, y: 6.89 },
                    Point { x: 16.11, y: 6.00 },
                    Point { x: 15.00, y: 6.00 },
                ),
                PathEl::LineTo(Point { x: 8.00, y: 6.00 }),
                PathEl::CurveTo(
                    Point { x: 6.89, y: 6.00 },
                    Point { x: 6.00, y: 6.89 },
                    Point { x: 6.00, y: 8.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 6.00, y: 26.78 },
                    Point { x: 21.22, y: 42.00 },
                    Point { x: 40.00, y: 42.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 41.11, y: 42.00 },
                    Point { x: 42.00, y: 41.11 },
                    Point { x: 42.00, y: 40.00 },
                ),
                PathEl::LineTo(Point { x: 42.00, y: 33.00 }),
                PathEl::CurveTo(
                    Point { x: 42.00, y: 31.89 },
                    Point { x: 41.11, y: 31.00 },
                    Point { x: 40.00, y: 31.00 },
                ),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct ContentCut {
    size: f64,
    color: Color,
}

impl ContentCut {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for ContentCut {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 19.28, y: 15.28 }),
                PathEl::CurveTo(
                    Point { x: 19.73, y: 14.28 },
                    Point { x: 20.00, y: 13.17 },
                    Point { x: 20.00, y: 12.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 20.00, y: 7.58 },
                    Point { x: 16.42, y: 4.00 },
                    Point { x: 12.00, y: 4.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 7.58, y: 4.00 },
                    Point { x: 4.00, y: 7.58 },
                    Point { x: 4.00, y: 12.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 4.00, y: 16.42 },
                    Point { x: 7.58, y: 20.00 },
                    Point { x: 12.00, y: 20.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 13.17, y: 20.00 },
                    Point { x: 14.28, y: 19.73 },
                    Point { x: 15.28, y: 19.28 },
                ),
                PathEl::LineTo(Point { x: 20.00, y: 24.00 }),
                PathEl::LineTo(Point { x: 15.28, y: 28.72 }),
                PathEl::CurveTo(
                    Point { x: 14.28, y: 28.27 },
                    Point { x: 13.17, y: 28.00 },
                    Point { x: 12.00, y: 28.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 7.58, y: 28.00 },
                    Point { x: 4.00, y: 31.58 },
                    Point { x: 4.00, y: 36.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 4.00, y: 40.42 },
                    Point { x: 7.58, y: 44.00 },
                    Point { x: 12.00, y: 44.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 16.42, y: 44.00 },
                    Point { x: 20.00, y: 40.42 },
                    Point { x: 20.00, y: 36.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 20.00, y: 34.83 },
                    Point { x: 19.73, y: 33.72 },
                    Point { x: 19.28, y: 32.72 },
                ),
                PathEl::LineTo(Point { x: 24.00, y: 28.00 }),
                PathEl::LineTo(Point { x: 38.00, y: 42.00 }),
                PathEl::LineTo(Point { x: 44.00, y: 42.00 }),
                PathEl::LineTo(Point { x: 44.00, y: 40.00 }),
                PathEl::LineTo(Point { x: 19.28, y: 15.28 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 12.00, y: 16.00 }),
                PathEl::CurveTo(
                    Point { x: 9.79, y: 16.00 },
                    Point { x: 8.00, y: 14.21 },
                    Point { x: 8.00, y: 12.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 8.00, y: 9.79 },
                    Point { x: 9.79, y: 8.00 },
                    Point { x: 12.00, y: 8.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 14.21, y: 8.00 },
                    Point { x: 16.00, y: 9.79 },
                    Point { x: 16.00, y: 12.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 16.00, y: 14.21 },
                    Point { x: 14.21, y: 16.00 },
                    Point { x: 12.00, y: 16.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 12.00, y: 40.00 }),
                PathEl::CurveTo(
                    Point { x: 9.79, y: 40.00 },
                    Point { x: 8.00, y: 38.21 },
                    Point { x: 8.00, y: 36.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 8.00, y: 33.79 },
                    Point { x: 9.79, y: 32.00 },
                    Point { x: 12.00, y: 32.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 14.21, y: 32.00 },
                    Point { x: 16.00, y: 33.79 },
                    Point { x: 16.00, y: 36.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 16.00, y: 38.21 },
                    Point { x: 14.21, y: 40.00 },
                    Point { x: 12.00, y: 40.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 24.00, y: 25.00 }),
                PathEl::CurveTo(
                    Point { x: 23.45, y: 25.00 },
                    Point { x: 23.00, y: 24.55 },
                    Point { x: 23.00, y: 24.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 23.00, y: 23.45 },
                    Point { x: 23.45, y: 23.00 },
                    Point { x: 24.00, y: 23.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 24.55, y: 23.00 },
                    Point { x: 25.00, y: 23.45 },
                    Point { x: 25.00, y: 24.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 25.00, y: 24.55 },
                    Point { x: 24.55, y: 25.00 },
                    Point { x: 24.00, y: 25.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 38.00, y: 6.00 }),
                PathEl::LineTo(Point { x: 26.00, y: 18.00 }),
                PathEl::LineTo(Point { x: 30.00, y: 22.00 }),
                PathEl::LineTo(Point { x: 44.00, y: 8.00 }),
                PathEl::LineTo(Point { x: 44.00, y: 6.00 }),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct RoomService {
    size: f64,
    color: Color,
}

impl RoomService {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for RoomService {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 4.00, y: 34.00 }),
                PathEl::LineTo(Point { x: 44.00, y: 34.00 }),
                PathEl::LineTo(Point { x: 44.00, y: 38.00 }),
                PathEl::LineTo(Point { x: 4.00, y: 38.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 27.67, y: 15.58 }),
                PathEl::CurveTo(
                    Point { x: 27.88, y: 15.10 },
                    Point { x: 28.00, y: 14.56 },
                    Point { x: 28.00, y: 14.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 28.00, y: 11.79 },
                    Point { x: 26.21, y: 10.00 },
                    Point { x: 24.00, y: 10.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 21.79, y: 10.00 },
                    Point { x: 20.00, y: 11.79 },
                    Point { x: 20.00, y: 14.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 20.00, y: 14.56 },
                    Point { x: 20.12, y: 15.10 },
                    Point { x: 20.33, y: 15.58 },
                ),
                PathEl::CurveTo(
                    Point { x: 12.50, y: 17.20 },
                    Point { x: 6.54, y: 23.86 },
                    Point { x: 6.00, y: 32.00 },
                ),
                PathEl::LineTo(Point { x: 42.00, y: 32.00 }),
                PathEl::CurveTo(
                    Point { x: 41.46, y: 23.86 },
                    Point { x: 35.50, y: 17.20 },
                    Point { x: 27.67, y: 15.58 },
                ),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct SignalCellularConnectedNoInternet2Bar {
    size: f64,
    color: Color,
}

impl SignalCellularConnectedNoInternet2Bar {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for SignalCellularConnectedNoInternet2Bar {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 44.00, y: 16.00 }),
                PathEl::LineTo(Point { x: 44.00, y: 4.00 }),
                PathEl::LineTo(Point { x: 4.00, y: 44.00 }),
                PathEl::LineTo(Point { x: 36.00, y: 44.00 }),
                PathEl::LineTo(Point { x: 36.00, y: 16.00 }),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 28.00, y: 44.00 }),
                PathEl::LineTo(Point { x: 28.00, y: 20.00 }),
                PathEl::LineTo(Point { x: 4.00, y: 44.00 }),
                PathEl::LineTo(Point { x: 28.00, y: 44.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 40.00, y: 20.00 }),
                PathEl::LineTo(Point { x: 40.00, y: 36.00 }),
                PathEl::LineTo(Point { x: 44.00, y: 36.00 }),
                PathEl::LineTo(Point { x: 44.00, y: 20.00 }),
                PathEl::LineTo(Point { x: 40.00, y: 20.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 40.00, y: 44.00 }),
                PathEl::LineTo(Point { x: 44.00, y: 44.00 }),
                PathEl::LineTo(Point { x: 44.00, y: 40.00 }),
                PathEl::LineTo(Point { x: 40.00, y: 40.00 }),
                PathEl::LineTo(Point { x: 40.00, y: 44.00 }),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct TouchApp {
    size: f64,
    color: Color,
}

impl TouchApp {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for TouchApp {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 18.00, y: 22.48 }),
                PathEl::LineTo(Point { x: 18.00, y: 15.00 }),
                PathEl::CurveTo(
                    Point { x: 18.00, y: 12.24 },
                    Point { x: 20.24, y: 10.00 },
                    Point { x: 23.00, y: 10.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 25.76, y: 10.00 },
                    Point { x: 28.00, y: 12.24 },
                    Point { x: 28.00, y: 15.00 },
                ),
                PathEl::LineTo(Point { x: 28.00, y: 22.48 }),
                PathEl::CurveTo(
                    Point { x: 30.41, y: 20.87 },
                    Point { x: 32.00, y: 18.12 },
                    Point { x: 32.00, y: 15.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 32.00, y: 10.03 },
                    Point { x: 27.97, y: 6.00 },
                    Point { x: 23.00, y: 6.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 18.03, y: 6.00 },
                    Point { x: 14.00, y: 10.03 },
                    Point { x: 14.00, y: 15.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 14.00, y: 18.12 },
                    Point { x: 15.59, y: 20.87 },
                    Point { x: 18.00, y: 22.48 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 37.67, y: 31.74 }),
                PathEl::LineTo(Point { x: 28.59, y: 27.22 }),
                PathEl::CurveTo(
                    Point { x: 28.25, y: 27.08 },
                    Point { x: 27.89, y: 27.00 },
                    Point { x: 27.50, y: 27.00 },
                ),
                PathEl::LineTo(Point { x: 26.00, y: 27.00 }),
                PathEl::LineTo(Point { x: 26.00, y: 15.00 }),
                PathEl::CurveTo(
                    Point { x: 26.00, y: 13.34 },
                    Point { x: 24.66, y: 12.00 },
                    Point { x: 23.00, y: 12.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 21.34, y: 12.00 },
                    Point { x: 20.00, y: 13.34 },
                    Point { x: 20.00, y: 15.00 },
                ),
                PathEl::LineTo(Point { x: 20.00, y: 36.47 }),
                PathEl::LineTo(Point { x: 13.15, y: 35.04 }),
                PathEl::CurveTo(
                    Point { x: 13.00, y: 35.01 },
                    Point { x: 12.84, y: 34.99 },
                    Point { x: 12.68, y: 34.99 },
                ),
                PathEl::CurveTo(
                    Point { x: 12.06, y: 34.99 },
                    Point { x: 11.50, y: 35.25 },
                    Point { x: 11.09, y: 35.65 },
                ),
                PathEl::LineTo(Point { x: 9.51, y: 37.25 }),
                PathEl::LineTo(Point { x: 19.39, y: 47.13 }),
                PathEl::CurveTo(
                    Point { x: 19.94, y: 47.67 },
                    Point { x: 20.69, y: 48.01 },
                    Point { x: 21.51, y: 48.01 },
                ),
                PathEl::LineTo(Point { x: 35.10, y: 48.01 }),
                PathEl::CurveTo(
                    Point { x: 36.61, y: 48.01 },
                    Point { x: 37.76, y: 46.90 },
                    Point { x: 37.97, y: 45.45 },
                ),
                PathEl::LineTo(Point { x: 39.48, y: 34.91 }),
                PathEl::CurveTo(
                    Point { x: 39.50, y: 34.77 },
                    Point { x: 39.51, y: 34.64 },
                    Point { x: 39.51, y: 34.50 },
                ),
                PathEl::CurveTo(
                    Point { x: 39.50, y: 33.26 },
                    Point { x: 38.74, y: 32.19 },
                    Point { x: 37.67, y: 31.74 },
                ),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct FormatIndentDecrease {
    size: f64,
    color: Color,
}

impl FormatIndentDecrease {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for FormatIndentDecrease {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 22.00, y: 34.00 }),
                PathEl::LineTo(Point { x: 42.00, y: 34.00 }),
                PathEl::LineTo(Point { x: 42.00, y: 30.00 }),
                PathEl::LineTo(Point { x: 22.00, y: 30.00 }),
                PathEl::LineTo(Point { x: 22.00, y: 34.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 6.00, y: 24.00 }),
                PathEl::LineTo(Point { x: 14.00, y: 32.00 }),
                PathEl::LineTo(Point { x: 14.00, y: 16.00 }),
                PathEl::LineTo(Point { x: 6.00, y: 24.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 6.00, y: 42.00 }),
                PathEl::LineTo(Point { x: 42.00, y: 42.00 }),
                PathEl::LineTo(Point { x: 42.00, y: 38.00 }),
                PathEl::LineTo(Point { x: 6.00, y: 38.00 }),
                PathEl::LineTo(Point { x: 6.00, y: 42.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 6.00, y: 6.00 }),
                PathEl::LineTo(Point { x: 6.00, y: 10.00 }),
                PathEl::LineTo(Point { x: 42.00, y: 10.00 }),
                PathEl::LineTo(Point { x: 42.00, y: 6.00 }),
                PathEl::LineTo(Point { x: 6.00, y: 6.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 22.00, y: 18.00 }),
                PathEl::LineTo(Point { x: 42.00, y: 18.00 }),
                PathEl::LineTo(Point { x: 42.00, y: 14.00 }),
                PathEl::LineTo(Point { x: 22.00, y: 14.00 }),
                PathEl::LineTo(Point { x: 22.00, y: 18.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 22.00, y: 26.00 }),
                PathEl::LineTo(Point { x: 42.00, y: 26.00 }),
                PathEl::LineTo(Point { x: 42.00, y: 22.00 }),
                PathEl::LineTo(Point { x: 22.00, y: 22.00 }),
                PathEl::LineTo(Point { x: 22.00, y: 26.00 }),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct Face {
    size: f64,
    color: Color,
}

impl Face {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for Face {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 18.00, y: 23.50 }),
                PathEl::CurveTo(
                    Point { x: 16.62, y: 23.50 },
                    Point { x: 15.50, y: 24.62 },
                    Point { x: 15.50, y: 26.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 15.50, y: 27.38 },
                    Point { x: 16.62, y: 28.50 },
                    Point { x: 18.00, y: 28.50 },
                ),
                PathEl::CurveTo(
                    Point { x: 19.38, y: 28.50 },
                    Point { x: 20.50, y: 27.38 },
                    Point { x: 20.50, y: 26.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 20.50, y: 24.62 },
                    Point { x: 19.38, y: 23.50 },
                    Point { x: 18.00, y: 23.50 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 30.00, y: 23.50 }),
                PathEl::CurveTo(
                    Point { x: 28.62, y: 23.50 },
                    Point { x: 27.50, y: 24.62 },
                    Point { x: 27.50, y: 26.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 27.50, y: 27.38 },
                    Point { x: 28.62, y: 28.50 },
                    Point { x: 30.00, y: 28.50 },
                ),
                PathEl::CurveTo(
                    Point { x: 31.38, y: 28.50 },
                    Point { x: 32.50, y: 27.38 },
                    Point { x: 32.50, y: 26.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 32.50, y: 24.62 },
                    Point { x: 31.38, y: 23.50 },
                    Point { x: 30.00, y: 23.50 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 24.00, y: 4.00 }),
                PathEl::CurveTo(
                    Point { x: 12.95, y: 4.00 },
                    Point { x: 4.00, y: 12.95 },
                    Point { x: 4.00, y: 24.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 4.00, y: 35.05 },
                    Point { x: 12.95, y: 44.00 },
                    Point { x: 24.00, y: 44.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 35.05, y: 44.00 },
                    Point { x: 44.00, y: 35.05 },
                    Point { x: 44.00, y: 24.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 44.00, y: 12.95 },
                    Point { x: 35.05, y: 4.00 },
                    Point { x: 24.00, y: 4.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 24.00, y: 40.00 }),
                PathEl::CurveTo(
                    Point { x: 15.18, y: 40.00 },
                    Point { x: 8.00, y: 32.82 },
                    Point { x: 8.00, y: 24.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 8.00, y: 23.42 },
                    Point { x: 8.04, y: 22.85 },
                    Point { x: 8.10, y: 22.29 },
                ),
                PathEl::CurveTo(
                    Point { x: 12.81, y: 20.20 },
                    Point { x: 16.57, y: 16.34 },
                    Point { x: 18.52, y: 11.55 },
                ),
                PathEl::CurveTo(
                    Point { x: 22.14, y: 16.65 },
                    Point { x: 28.09, y: 20.00 },
                    Point { x: 34.83, y: 20.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 36.38, y: 20.00 },
                    Point { x: 37.89, y: 19.81 },
                    Point { x: 39.33, y: 19.47 },
                ),
                PathEl::CurveTo(
                    Point { x: 39.76, y: 20.91 },
                    Point { x: 40.00, y: 22.43 },
                    Point { x: 40.00, y: 24.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 40.00, y: 32.82 },
                    Point { x: 32.82, y: 40.00 },
                    Point { x: 24.00, y: 40.00 },
                ),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct CropSquare {
    size: f64,
    color: Color,
}

impl CropSquare {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for CropSquare {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 36.00, y: 8.00 }),
                PathEl::LineTo(Point { x: 12.00, y: 8.00 }),
                PathEl::CurveTo(
                    Point { x: 9.79, y: 8.00 },
                    Point { x: 8.00, y: 9.79 },
                    Point { x: 8.00, y: 12.00 },
                ),
                PathEl::LineTo(Point { x: 8.00, y: 36.00 }),
                PathEl::CurveTo(
                    Point { x: 8.00, y: 38.21 },
                    Point { x: 9.79, y: 40.00 },
                    Point { x: 12.00, y: 40.00 },
                ),
                PathEl::LineTo(Point { x: 36.00, y: 40.00 }),
                PathEl::CurveTo(
                    Point { x: 38.21, y: 40.00 },
                    Point { x: 40.00, y: 38.21 },
                    Point { x: 40.00, y: 36.00 },
                ),
                PathEl::LineTo(Point { x: 40.00, y: 12.00 }),
                PathEl::CurveTo(
                    Point { x: 40.00, y: 9.79 },
                    Point { x: 38.21, y: 8.00 },
                    Point { x: 36.00, y: 8.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 36.00, y: 36.00 }),
                PathEl::LineTo(Point { x: 12.00, y: 36.00 }),
                PathEl::LineTo(Point { x: 12.00, y: 12.00 }),
                PathEl::LineTo(Point { x: 36.00, y: 12.00 }),
                PathEl::LineTo(Point { x: 36.00, y: 36.00 }),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct Battery90 {
    size: f64,
    color: Color,
}

impl Battery90 {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for Battery90 {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 34.00, y: 10.67 }),
                PathEl::CurveTo(
                    Point { x: 34.00, y: 9.19 },
                    Point { x: 32.81, y: 8.00 },
                    Point { x: 31.33, y: 8.00 },
                ),
                PathEl::LineTo(Point { x: 28.00, y: 8.00 }),
                PathEl::LineTo(Point { x: 28.00, y: 4.00 }),
                PathEl::LineTo(Point { x: 20.00, y: 4.00 }),
                PathEl::LineTo(Point { x: 20.00, y: 8.00 }),
                PathEl::LineTo(Point { x: 16.67, y: 8.00 }),
                PathEl::CurveTo(
                    Point { x: 15.19, y: 8.00 },
                    Point { x: 14.00, y: 9.19 },
                    Point { x: 14.00, y: 10.67 },
                ),
                PathEl::LineTo(Point { x: 14.00, y: 16.00 }),
                PathEl::LineTo(Point { x: 34.00, y: 16.00 }),
                PathEl::LineTo(Point { x: 34.00, y: 10.67 }),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 14.00, y: 16.00 }),
                PathEl::LineTo(Point { x: 14.00, y: 41.33 }),
                PathEl::CurveTo(
                    Point { x: 14.00, y: 42.80 },
                    Point { x: 15.19, y: 44.00 },
                    Point { x: 16.67, y: 44.00 },
                ),
                PathEl::LineTo(Point { x: 31.34, y: 44.00 }),
                PathEl::CurveTo(
                    Point { x: 32.81, y: 44.00 },
                    Point { x: 34.01, y: 42.81 },
                    Point { x: 34.01, y: 41.33 },
                ),
                PathEl::LineTo(Point { x: 34.01, y: 16.00 }),
                PathEl::LineTo(Point { x: 14.00, y: 16.00 }),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct SignalWifi1BarLock {
    size: f64,
    color: Color,
}

impl SignalWifi1BarLock {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for SignalWifi1BarLock {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 41.00, y: 19.00 }),
                PathEl::CurveTo(
                    Point { x: 41.70, y: 19.00 },
                    Point { x: 42.40, y: 19.10 },
                    Point { x: 43.10, y: 19.20 },
                ),
                PathEl::LineTo(Point { x: 47.30, y: 14.00 }),
                PathEl::CurveTo(
                    Point { x: 46.40, y: 13.30 },
                    Point { x: 37.50, y: 6.00 },
                    Point { x: 24.00, y: 6.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 10.50, y: 6.00 },
                    Point { x: 1.60, y: 13.30 },
                    Point { x: 0.70, y: 14.00 },
                ),
                PathEl::LineTo(Point { x: 24.00, y: 43.00 }),
                PathEl::LineTo(Point { x: 31.00, y: 34.30 }),
                PathEl::LineTo(Point { x: 31.00, y: 29.00 }),
                PathEl::CurveTo(
                    Point { x: 31.00, y: 23.50 },
                    Point { x: 35.50, y: 19.00 },
                    Point { x: 41.00, y: 19.00 },
                ),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 46.00, y: 32.00 }),
                PathEl::LineTo(Point { x: 46.00, y: 29.00 }),
                PathEl::CurveTo(
                    Point { x: 46.00, y: 26.20 },
                    Point { x: 43.80, y: 24.00 },
                    Point { x: 41.00, y: 24.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 38.20, y: 24.00 },
                    Point { x: 36.00, y: 26.20 },
                    Point { x: 36.00, y: 29.00 },
                ),
                PathEl::LineTo(Point { x: 36.00, y: 32.00 }),
                PathEl::CurveTo(
                    Point { x: 34.90, y: 32.00 },
                    Point { x: 34.00, y: 32.90 },
                    Point { x: 34.00, y: 34.00 },
                ),
                PathEl::LineTo(Point { x: 34.00, y: 42.00 }),
                PathEl::CurveTo(
                    Point { x: 34.00, y: 43.10 },
                    Point { x: 34.90, y: 44.00 },
                    Point { x: 36.00, y: 44.00 },
                ),
                PathEl::LineTo(Point { x: 46.00, y: 44.00 }),
                PathEl::CurveTo(
                    Point { x: 47.10, y: 44.00 },
                    Point { x: 48.00, y: 43.10 },
                    Point { x: 48.00, y: 42.00 },
                ),
                PathEl::LineTo(Point { x: 48.00, y: 34.00 }),
                PathEl::CurveTo(
                    Point { x: 48.00, y: 32.90 },
                    Point { x: 47.10, y: 32.00 },
                    Point { x: 46.00, y: 32.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 44.00, y: 32.00 }),
                PathEl::LineTo(Point { x: 38.00, y: 32.00 }),
                PathEl::LineTo(Point { x: 38.00, y: 29.00 }),
                PathEl::CurveTo(
                    Point { x: 38.00, y: 27.30 },
                    Point { x: 39.30, y: 26.00 },
                    Point { x: 41.00, y: 26.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 42.70, y: 26.00 },
                    Point { x: 44.00, y: 27.30 },
                    Point { x: 44.00, y: 29.00 },
                ),
                PathEl::LineTo(Point { x: 44.00, y: 32.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 13.30, y: 29.70 }),
                PathEl::LineTo(Point { x: 22.30, y: 40.90 }),
                PathEl::LineTo(Point { x: 24.00, y: 43.00 }),
                PathEl::LineTo(Point { x: 31.00, y: 34.20 }),
                PathEl::LineTo(Point { x: 31.00, y: 29.00 }),
                PathEl::CurveTo(
                    Point { x: 31.00, y: 28.50 },
                    Point { x: 31.00, y: 28.00 },
                    Point { x: 31.10, y: 27.60 },
                ),
                PathEl::CurveTo(
                    Point { x: 29.30, y: 26.80 },
                    Point { x: 26.90, y: 26.00 },
                    Point { x: 24.00, y: 26.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 17.90, y: 26.00 },
                    Point { x: 13.90, y: 29.30 },
                    Point { x: 13.30, y: 29.70 },
                ),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct Store {
    size: f64,
    color: Color,
}

impl Store {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for Store {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 40.00, y: 8.00 }),
                PathEl::LineTo(Point { x: 8.00, y: 8.00 }),
                PathEl::LineTo(Point { x: 8.00, y: 12.00 }),
                PathEl::LineTo(Point { x: 40.00, y: 12.00 }),
                PathEl::LineTo(Point { x: 40.00, y: 8.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 42.00, y: 28.00 }),
                PathEl::LineTo(Point { x: 42.00, y: 24.00 }),
                PathEl::LineTo(Point { x: 40.00, y: 14.00 }),
                PathEl::LineTo(Point { x: 8.00, y: 14.00 }),
                PathEl::LineTo(Point { x: 6.00, y: 24.00 }),
                PathEl::LineTo(Point { x: 6.00, y: 28.00 }),
                PathEl::LineTo(Point { x: 8.00, y: 28.00 }),
                PathEl::LineTo(Point { x: 8.00, y: 40.00 }),
                PathEl::LineTo(Point { x: 28.00, y: 40.00 }),
                PathEl::LineTo(Point { x: 28.00, y: 28.00 }),
                PathEl::LineTo(Point { x: 36.00, y: 28.00 }),
                PathEl::LineTo(Point { x: 36.00, y: 40.00 }),
                PathEl::LineTo(Point { x: 40.00, y: 40.00 }),
                PathEl::LineTo(Point { x: 40.00, y: 28.00 }),
                PathEl::LineTo(Point { x: 42.00, y: 28.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 24.00, y: 36.00 }),
                PathEl::LineTo(Point { x: 12.00, y: 36.00 }),
                PathEl::LineTo(Point { x: 12.00, y: 28.00 }),
                PathEl::LineTo(Point { x: 24.00, y: 28.00 }),
                PathEl::LineTo(Point { x: 24.00, y: 36.00 }),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct CameraRear {
    size: f64,
    color: Color,
}

impl CameraRear {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for CameraRear {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 20.00, y: 40.00 }),
                PathEl::LineTo(Point { x: 10.00, y: 40.00 }),
                PathEl::LineTo(Point { x: 10.00, y: 44.00 }),
                PathEl::LineTo(Point { x: 20.00, y: 44.00 }),
                PathEl::LineTo(Point { x: 20.00, y: 48.00 }),
                PathEl::LineTo(Point { x: 26.00, y: 42.00 }),
                PathEl::LineTo(Point { x: 20.00, y: 36.00 }),
                PathEl::LineTo(Point { x: 20.00, y: 40.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 28.00, y: 40.00 }),
                PathEl::LineTo(Point { x: 28.00, y: 44.00 }),
                PathEl::LineTo(Point { x: 38.00, y: 44.00 }),
                PathEl::LineTo(Point { x: 38.00, y: 40.00 }),
                PathEl::LineTo(Point { x: 28.00, y: 40.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 34.00, y: 0.00 }),
                PathEl::LineTo(Point { x: 14.00, y: 0.00 }),
                PathEl::CurveTo(
                    Point { x: 11.79, y: 0.00 },
                    Point { x: 10.00, y: 1.79 },
                    Point { x: 10.00, y: 4.00 },
                ),
                PathEl::LineTo(Point { x: 10.00, y: 32.00 }),
                PathEl::CurveTo(
                    Point { x: 10.00, y: 34.21 },
                    Point { x: 11.79, y: 36.00 },
                    Point { x: 14.00, y: 36.00 },
                ),
                PathEl::LineTo(Point { x: 34.00, y: 36.00 }),
                PathEl::CurveTo(
                    Point { x: 36.21, y: 36.00 },
                    Point { x: 38.00, y: 34.21 },
                    Point { x: 38.00, y: 32.00 },
                ),
                PathEl::LineTo(Point { x: 38.00, y: 4.00 }),
                PathEl::CurveTo(
                    Point { x: 38.00, y: 1.79 },
                    Point { x: 36.21, y: 0.00 },
                    Point { x: 34.00, y: 0.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 23.99, y: 12.00 }),
                PathEl::CurveTo(
                    Point { x: 21.78, y: 12.00 },
                    Point { x: 20.00, y: 10.21 },
                    Point { x: 20.00, y: 8.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 20.00, y: 5.79 },
                    Point { x: 21.78, y: 4.00 },
                    Point { x: 23.99, y: 4.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 26.20, y: 4.00 },
                    Point { x: 27.99, y: 5.79 },
                    Point { x: 27.99, y: 8.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 27.99, y: 10.21 },
                    Point { x: 26.20, y: 12.00 },
                    Point { x: 23.99, y: 12.00 },
                ),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct FormatStrikethrough {
    size: f64,
    color: Color,
}

impl FormatStrikethrough {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for FormatStrikethrough {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 20.00, y: 38.00 }),
                PathEl::LineTo(Point { x: 28.00, y: 38.00 }),
                PathEl::LineTo(Point { x: 28.00, y: 32.00 }),
                PathEl::LineTo(Point { x: 20.00, y: 32.00 }),
                PathEl::LineTo(Point { x: 20.00, y: 38.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 10.00, y: 8.00 }),
                PathEl::LineTo(Point { x: 10.00, y: 14.00 }),
                PathEl::LineTo(Point { x: 20.00, y: 14.00 }),
                PathEl::LineTo(Point { x: 20.00, y: 20.00 }),
                PathEl::LineTo(Point { x: 28.00, y: 20.00 }),
                PathEl::LineTo(Point { x: 28.00, y: 14.00 }),
                PathEl::LineTo(Point { x: 38.00, y: 14.00 }),
                PathEl::LineTo(Point { x: 38.00, y: 8.00 }),
                PathEl::LineTo(Point { x: 10.00, y: 8.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 6.00, y: 28.00 }),
                PathEl::LineTo(Point { x: 42.00, y: 28.00 }),
                PathEl::LineTo(Point { x: 42.00, y: 24.00 }),
                PathEl::LineTo(Point { x: 6.00, y: 24.00 }),
                PathEl::LineTo(Point { x: 6.00, y: 28.00 }),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct ReportProblem {
    size: f64,
    color: Color,
}

impl ReportProblem {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for ReportProblem {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 2.00, y: 42.00 }),
                PathEl::LineTo(Point { x: 46.00, y: 42.00 }),
                PathEl::LineTo(Point { x: 24.00, y: 4.00 }),
                PathEl::LineTo(Point { x: 2.00, y: 42.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 26.00, y: 36.00 }),
                PathEl::LineTo(Point { x: 22.00, y: 36.00 }),
                PathEl::LineTo(Point { x: 22.00, y: 32.00 }),
                PathEl::LineTo(Point { x: 26.00, y: 32.00 }),
                PathEl::LineTo(Point { x: 26.00, y: 36.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 26.00, y: 28.00 }),
                PathEl::LineTo(Point { x: 22.00, y: 28.00 }),
                PathEl::LineTo(Point { x: 22.00, y: 20.00 }),
                PathEl::LineTo(Point { x: 26.00, y: 20.00 }),
                PathEl::LineTo(Point { x: 26.00, y: 28.00 }),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct Timelapse {
    size: f64,
    color: Color,
}

impl Timelapse {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for Timelapse {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 32.49, y: 15.51 }),
                PathEl::CurveTo(
                    Point { x: 30.14, y: 13.17 },
                    Point { x: 27.07, y: 12.00 },
                    Point { x: 24.00, y: 12.00 },
                ),
                PathEl::LineTo(Point { x: 24.00, y: 24.00 }),
                PathEl::LineTo(Point { x: 15.51, y: 32.49 }),
                PathEl::CurveTo(
                    Point { x: 20.20, y: 37.18 },
                    Point { x: 27.79, y: 37.18 },
                    Point { x: 32.48, y: 32.49 },
                ),
                PathEl::CurveTo(
                    Point { x: 37.17, y: 27.80 },
                    Point { x: 37.17, y: 20.20 },
                    Point { x: 32.49, y: 15.51 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 24.00, y: 4.00 }),
                PathEl::CurveTo(
                    Point { x: 12.95, y: 4.00 },
                    Point { x: 4.00, y: 12.95 },
                    Point { x: 4.00, y: 24.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 4.00, y: 35.05 },
                    Point { x: 12.95, y: 44.00 },
                    Point { x: 24.00, y: 44.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 35.05, y: 44.00 },
                    Point { x: 44.00, y: 35.04 },
                    Point { x: 44.00, y: 24.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 44.00, y: 12.95 },
                    Point { x: 35.05, y: 4.00 },
                    Point { x: 24.00, y: 4.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 24.00, y: 40.00 }),
                PathEl::CurveTo(
                    Point { x: 15.16, y: 40.00 },
                    Point { x: 8.00, y: 32.84 },
                    Point { x: 8.00, y: 24.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 8.00, y: 15.16 },
                    Point { x: 15.16, y: 8.00 },
                    Point { x: 24.00, y: 8.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 32.84, y: 8.00 },
                    Point { x: 40.00, y: 15.16 },
                    Point { x: 40.00, y: 24.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 40.00, y: 32.84 },
                    Point { x: 32.84, y: 40.00 },
                    Point { x: 24.00, y: 40.00 },
                ),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct ScreenRotation {
    size: f64,
    color: Color,
}

impl ScreenRotation {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for ScreenRotation {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 32.97, y: 5.03 }),
                PathEl::CurveTo(
                    Point { x: 39.50, y: 8.13 },
                    Point { x: 44.19, y: 14.48 },
                    Point { x: 44.90, y: 22.00 },
                ),
                PathEl::LineTo(Point { x: 47.90, y: 22.00 }),
                PathEl::CurveTo(
                    Point { x: 46.88, y: 9.68 },
                    Point { x: 36.58, y: 0.00 },
                    Point { x: 24.00, y: 0.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 23.55, y: 0.00 },
                    Point { x: 23.12, y: 0.04 },
                    Point { x: 22.67, y: 0.07 },
                ),
                PathEl::LineTo(Point { x: 30.30, y: 7.70 }),
                PathEl::LineTo(Point { x: 32.97, y: 5.03 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 20.46, y: 3.49 }),
                PathEl::CurveTo(
                    Point { x: 19.29, y: 2.32 },
                    Point { x: 17.39, y: 2.32 },
                    Point { x: 16.22, y: 3.49 },
                ),
                PathEl::LineTo(Point { x: 3.49, y: 16.22 }),
                PathEl::CurveTo(
                    Point { x: 2.32, y: 17.39 },
                    Point { x: 2.32, y: 19.29 },
                    Point { x: 3.49, y: 20.46 },
                ),
                PathEl::LineTo(Point { x: 27.53, y: 44.50 }),
                PathEl::CurveTo(
                    Point { x: 28.70, y: 45.67 },
                    Point { x: 30.60, y: 45.67 },
                    Point { x: 31.77, y: 44.50 },
                ),
                PathEl::LineTo(Point { x: 44.50, y: 31.77 }),
                PathEl::CurveTo(
                    Point { x: 45.67, y: 30.60 },
                    Point { x: 45.67, y: 28.70 },
                    Point { x: 44.50, y: 27.53 },
                ),
                PathEl::LineTo(Point { x: 20.46, y: 3.49 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 29.66, y: 42.38 }),
                PathEl::LineTo(Point { x: 5.61, y: 18.34 }),
                PathEl::LineTo(Point { x: 18.34, y: 5.61 }),
                PathEl::LineTo(Point { x: 42.38, y: 29.65 }),
                PathEl::LineTo(Point { x: 29.66, y: 42.38 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 15.03, y: 42.97 }),
                PathEl::CurveTo(
                    Point { x: 8.50, y: 39.87 },
                    Point { x: 3.81, y: 33.52 },
                    Point { x: 3.10, y: 26.00 },
                ),
                PathEl::LineTo(Point { x: 0.10, y: 26.00 }),
                PathEl::CurveTo(
                    Point { x: 1.12, y: 38.32 },
                    Point { x: 11.42, y: 48.00 },
                    Point { x: 24.00, y: 48.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 24.45, y: 48.00 },
                    Point { x: 24.88, y: 47.96 },
                    Point { x: 25.33, y: 47.93 },
                ),
                PathEl::LineTo(Point { x: 17.70, y: 40.30 }),
                PathEl::LineTo(Point { x: 15.03, y: 42.97 }),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct BrandingWatermark {
    size: f64,
    color: Color,
}

impl BrandingWatermark {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for BrandingWatermark {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 42.00, y: 6.00 }),
                PathEl::LineTo(Point { x: 6.00, y: 6.00 }),
                PathEl::CurveTo(
                    Point { x: 3.80, y: 6.00 },
                    Point { x: 2.00, y: 7.80 },
                    Point { x: 2.00, y: 10.00 },
                ),
                PathEl::LineTo(Point { x: 2.00, y: 38.00 }),
                PathEl::CurveTo(
                    Point { x: 2.00, y: 40.20 },
                    Point { x: 3.80, y: 42.00 },
                    Point { x: 6.00, y: 42.00 },
                ),
                PathEl::LineTo(Point { x: 42.00, y: 42.00 }),
                PathEl::CurveTo(
                    Point { x: 44.20, y: 42.00 },
                    Point { x: 46.00, y: 40.20 },
                    Point { x: 46.00, y: 38.00 },
                ),
                PathEl::LineTo(Point { x: 46.00, y: 10.00 }),
                PathEl::CurveTo(
                    Point { x: 46.00, y: 7.80 },
                    Point { x: 44.20, y: 6.00 },
                    Point { x: 42.00, y: 6.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 42.00, y: 38.00 }),
                PathEl::LineTo(Point { x: 24.00, y: 38.00 }),
                PathEl::LineTo(Point { x: 24.00, y: 26.00 }),
                PathEl::LineTo(Point { x: 42.00, y: 26.00 }),
                PathEl::LineTo(Point { x: 42.00, y: 38.00 }),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct GpsFixed {
    size: f64,
    color: Color,
}

impl GpsFixed {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for GpsFixed {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 24.00, y: 16.00 }),
                PathEl::CurveTo(
                    Point { x: 19.58, y: 16.00 },
                    Point { x: 16.00, y: 19.58 },
                    Point { x: 16.00, y: 24.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 16.00, y: 28.42 },
                    Point { x: 19.58, y: 32.00 },
                    Point { x: 24.00, y: 32.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 28.42, y: 32.00 },
                    Point { x: 32.00, y: 28.42 },
                    Point { x: 32.00, y: 24.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 32.00, y: 19.58 },
                    Point { x: 28.42, y: 16.00 },
                    Point { x: 24.00, y: 16.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 41.88, y: 22.00 }),
                PathEl::CurveTo(
                    Point { x: 40.96, y: 13.66 },
                    Point { x: 34.34, y: 7.04 },
                    Point { x: 26.00, y: 6.12 },
                ),
                PathEl::LineTo(Point { x: 26.00, y: 2.00 }),
                PathEl::LineTo(Point { x: 22.00, y: 2.00 }),
                PathEl::LineTo(Point { x: 22.00, y: 6.12 }),
                PathEl::CurveTo(
                    Point { x: 13.66, y: 7.04 },
                    Point { x: 7.04, y: 13.66 },
                    Point { x: 6.12, y: 22.00 },
                ),
                PathEl::LineTo(Point { x: 2.00, y: 22.00 }),
                PathEl::LineTo(Point { x: 2.00, y: 26.00 }),
                PathEl::LineTo(Point { x: 6.12, y: 26.00 }),
                PathEl::CurveTo(
                    Point { x: 7.04, y: 34.34 },
                    Point { x: 13.66, y: 40.96 },
                    Point { x: 22.00, y: 41.88 },
                ),
                PathEl::LineTo(Point { x: 22.00, y: 46.00 }),
                PathEl::LineTo(Point { x: 26.00, y: 46.00 }),
                PathEl::LineTo(Point { x: 26.00, y: 41.88 }),
                PathEl::CurveTo(
                    Point { x: 34.34, y: 40.96 },
                    Point { x: 40.96, y: 34.34 },
                    Point { x: 41.88, y: 26.00 },
                ),
                PathEl::LineTo(Point { x: 46.00, y: 26.00 }),
                PathEl::LineTo(Point { x: 46.00, y: 22.00 }),
                PathEl::LineTo(Point { x: 41.88, y: 22.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 24.00, y: 38.00 }),
                PathEl::CurveTo(
                    Point { x: 16.27, y: 38.00 },
                    Point { x: 10.00, y: 31.73 },
                    Point { x: 10.00, y: 24.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 10.00, y: 16.27 },
                    Point { x: 16.27, y: 10.00 },
                    Point { x: 24.00, y: 10.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 31.73, y: 10.00 },
                    Point { x: 38.00, y: 16.27 },
                    Point { x: 38.00, y: 24.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 38.00, y: 31.73 },
                    Point { x: 31.73, y: 38.00 },
                    Point { x: 24.00, y: 38.00 },
                ),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct Pageview {
    size: f64,
    color: Color,
}

impl Pageview {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for Pageview {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 23.00, y: 18.00 }),
                PathEl::CurveTo(
                    Point { x: 20.24, y: 18.00 },
                    Point { x: 18.00, y: 20.24 },
                    Point { x: 18.00, y: 23.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 18.00, y: 25.76 },
                    Point { x: 20.24, y: 28.00 },
                    Point { x: 23.00, y: 28.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 25.76, y: 28.00 },
                    Point { x: 28.00, y: 25.76 },
                    Point { x: 28.00, y: 23.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 28.00, y: 20.24 },
                    Point { x: 25.76, y: 18.00 },
                    Point { x: 23.00, y: 18.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 40.00, y: 8.00 }),
                PathEl::LineTo(Point { x: 8.00, y: 8.00 }),
                PathEl::CurveTo(
                    Point { x: 5.79, y: 8.00 },
                    Point { x: 4.00, y: 9.79 },
                    Point { x: 4.00, y: 12.00 },
                ),
                PathEl::LineTo(Point { x: 4.00, y: 36.00 }),
                PathEl::CurveTo(
                    Point { x: 4.00, y: 38.21 },
                    Point { x: 5.79, y: 40.00 },
                    Point { x: 8.00, y: 40.00 },
                ),
                PathEl::LineTo(Point { x: 40.00, y: 40.00 }),
                PathEl::CurveTo(
                    Point { x: 42.21, y: 40.00 },
                    Point { x: 44.00, y: 38.21 },
                    Point { x: 44.00, y: 36.00 },
                ),
                PathEl::LineTo(Point { x: 44.00, y: 12.00 }),
                PathEl::CurveTo(
                    Point { x: 44.00, y: 9.79 },
                    Point { x: 42.21, y: 8.00 },
                    Point { x: 40.00, y: 8.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 33.59, y: 36.41 }),
                PathEl::LineTo(Point { x: 27.78, y: 30.60 }),
                PathEl::CurveTo(
                    Point { x: 26.39, y: 31.48 },
                    Point { x: 24.76, y: 32.00 },
                    Point { x: 23.00, y: 32.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 18.03, y: 32.00 },
                    Point { x: 14.00, y: 27.97 },
                    Point { x: 14.00, y: 23.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 14.00, y: 18.03 },
                    Point { x: 18.03, y: 14.00 },
                    Point { x: 23.00, y: 14.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 27.97, y: 14.00 },
                    Point { x: 32.00, y: 18.03 },
                    Point { x: 32.00, y: 23.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 32.00, y: 24.76 },
                    Point { x: 31.48, y: 26.39 },
                    Point { x: 30.60, y: 27.77 },
                ),
                PathEl::LineTo(Point { x: 36.42, y: 33.57 }),
                PathEl::LineTo(Point { x: 33.59, y: 36.41 }),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct Announcement {
    size: f64,
    color: Color,
}

impl Announcement {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for Announcement {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 40.00, y: 4.00 }),
                PathEl::LineTo(Point { x: 8.00, y: 4.00 }),
                PathEl::CurveTo(
                    Point { x: 5.79, y: 4.00 },
                    Point { x: 4.02, y: 5.79 },
                    Point { x: 4.02, y: 8.00 },
                ),
                PathEl::LineTo(Point { x: 4.00, y: 44.00 }),
                PathEl::LineTo(Point { x: 12.00, y: 36.00 }),
                PathEl::LineTo(Point { x: 40.00, y: 36.00 }),
                PathEl::CurveTo(
                    Point { x: 42.21, y: 36.00 },
                    Point { x: 44.00, y: 34.21 },
                    Point { x: 44.00, y: 32.00 },
                ),
                PathEl::LineTo(Point { x: 44.00, y: 8.00 }),
                PathEl::CurveTo(
                    Point { x: 44.00, y: 5.79 },
                    Point { x: 42.21, y: 4.00 },
                    Point { x: 40.00, y: 4.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 26.00, y: 22.00 }),
                PathEl::LineTo(Point { x: 22.00, y: 22.00 }),
                PathEl::LineTo(Point { x: 22.00, y: 10.00 }),
                PathEl::LineTo(Point { x: 26.00, y: 10.00 }),
                PathEl::LineTo(Point { x: 26.00, y: 22.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 26.00, y: 30.00 }),
                PathEl::LineTo(Point { x: 22.00, y: 30.00 }),
                PathEl::LineTo(Point { x: 22.00, y: 26.00 }),
                PathEl::LineTo(Point { x: 26.00, y: 26.00 }),
                PathEl::LineTo(Point { x: 26.00, y: 30.00 }),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct Stop {
    size: f64,
    color: Color,
}

impl Stop {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for Stop {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 12.00, y: 12.00 }),
                PathEl::LineTo(Point { x: 36.00, y: 12.00 }),
                PathEl::LineTo(Point { x: 36.00, y: 36.00 }),
                PathEl::LineTo(Point { x: 12.00, y: 36.00 }),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct MoreHoriz {
    size: f64,
    color: Color,
}

impl MoreHoriz {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for MoreHoriz {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 12.00, y: 20.00 }),
                PathEl::CurveTo(
                    Point { x: 9.79, y: 20.00 },
                    Point { x: 8.00, y: 21.79 },
                    Point { x: 8.00, y: 24.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 8.00, y: 26.21 },
                    Point { x: 9.79, y: 28.00 },
                    Point { x: 12.00, y: 28.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 14.21, y: 28.00 },
                    Point { x: 16.00, y: 26.21 },
                    Point { x: 16.00, y: 24.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 16.00, y: 21.79 },
                    Point { x: 14.21, y: 20.00 },
                    Point { x: 12.00, y: 20.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 36.00, y: 20.00 }),
                PathEl::CurveTo(
                    Point { x: 33.79, y: 20.00 },
                    Point { x: 32.00, y: 21.79 },
                    Point { x: 32.00, y: 24.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 32.00, y: 26.21 },
                    Point { x: 33.79, y: 28.00 },
                    Point { x: 36.00, y: 28.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 38.21, y: 28.00 },
                    Point { x: 40.00, y: 26.21 },
                    Point { x: 40.00, y: 24.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 40.00, y: 21.79 },
                    Point { x: 38.21, y: 20.00 },
                    Point { x: 36.00, y: 20.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 24.00, y: 20.00 }),
                PathEl::CurveTo(
                    Point { x: 21.79, y: 20.00 },
                    Point { x: 20.00, y: 21.79 },
                    Point { x: 20.00, y: 24.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 20.00, y: 26.21 },
                    Point { x: 21.79, y: 28.00 },
                    Point { x: 24.00, y: 28.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 26.21, y: 28.00 },
                    Point { x: 28.00, y: 26.21 },
                    Point { x: 28.00, y: 24.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 28.00, y: 21.79 },
                    Point { x: 26.21, y: 20.00 },
                    Point { x: 24.00, y: 20.00 },
                ),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct PictureAsPdf {
    size: f64,
    color: Color,
}

impl PictureAsPdf {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for PictureAsPdf {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 40.00, y: 4.00 }),
                PathEl::LineTo(Point { x: 16.00, y: 4.00 }),
                PathEl::CurveTo(
                    Point { x: 13.79, y: 4.00 },
                    Point { x: 12.00, y: 5.79 },
                    Point { x: 12.00, y: 8.00 },
                ),
                PathEl::LineTo(Point { x: 12.00, y: 32.00 }),
                PathEl::CurveTo(
                    Point { x: 12.00, y: 34.21 },
                    Point { x: 13.79, y: 36.00 },
                    Point { x: 16.00, y: 36.00 },
                ),
                PathEl::LineTo(Point { x: 40.00, y: 36.00 }),
                PathEl::CurveTo(
                    Point { x: 42.21, y: 36.00 },
                    Point { x: 44.00, y: 34.21 },
                    Point { x: 44.00, y: 32.00 },
                ),
                PathEl::LineTo(Point { x: 44.00, y: 8.00 }),
                PathEl::CurveTo(
                    Point { x: 44.00, y: 5.79 },
                    Point { x: 42.21, y: 4.00 },
                    Point { x: 40.00, y: 4.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 23.00, y: 19.00 }),
                PathEl::CurveTo(
                    Point { x: 23.00, y: 20.66 },
                    Point { x: 21.66, y: 22.00 },
                    Point { x: 20.00, y: 22.00 },
                ),
                PathEl::LineTo(Point { x: 18.00, y: 22.00 }),
                PathEl::LineTo(Point { x: 18.00, y: 26.00 }),
                PathEl::LineTo(Point { x: 15.00, y: 26.00 }),
                PathEl::LineTo(Point { x: 15.00, y: 14.00 }),
                PathEl::LineTo(Point { x: 20.00, y: 14.00 }),
                PathEl::CurveTo(
                    Point { x: 21.66, y: 14.00 },
                    Point { x: 23.00, y: 15.34 },
                    Point { x: 23.00, y: 17.00 },
                ),
                PathEl::LineTo(Point { x: 23.00, y: 19.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 33.00, y: 23.00 }),
                PathEl::CurveTo(
                    Point { x: 33.00, y: 24.66 },
                    Point { x: 31.66, y: 26.00 },
                    Point { x: 30.00, y: 26.00 },
                ),
                PathEl::LineTo(Point { x: 25.00, y: 26.00 }),
                PathEl::LineTo(Point { x: 25.00, y: 14.00 }),
                PathEl::LineTo(Point { x: 30.00, y: 14.00 }),
                PathEl::CurveTo(
                    Point { x: 31.66, y: 14.00 },
                    Point { x: 33.00, y: 15.34 },
                    Point { x: 33.00, y: 17.00 },
                ),
                PathEl::LineTo(Point { x: 33.00, y: 23.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 41.00, y: 17.00 }),
                PathEl::LineTo(Point { x: 38.00, y: 17.00 }),
                PathEl::LineTo(Point { x: 38.00, y: 19.00 }),
                PathEl::LineTo(Point { x: 41.00, y: 19.00 }),
                PathEl::LineTo(Point { x: 41.00, y: 22.00 }),
                PathEl::LineTo(Point { x: 38.00, y: 22.00 }),
                PathEl::LineTo(Point { x: 38.00, y: 26.00 }),
                PathEl::LineTo(Point { x: 35.00, y: 26.00 }),
                PathEl::LineTo(Point { x: 35.00, y: 14.00 }),
                PathEl::LineTo(Point { x: 41.00, y: 14.00 }),
                PathEl::LineTo(Point { x: 41.00, y: 17.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 18.00, y: 19.00 }),
                PathEl::LineTo(Point { x: 20.00, y: 19.00 }),
                PathEl::LineTo(Point { x: 20.00, y: 17.00 }),
                PathEl::LineTo(Point { x: 18.00, y: 17.00 }),
                PathEl::LineTo(Point { x: 18.00, y: 19.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 8.00, y: 12.00 }),
                PathEl::LineTo(Point { x: 4.00, y: 12.00 }),
                PathEl::LineTo(Point { x: 4.00, y: 40.00 }),
                PathEl::CurveTo(
                    Point { x: 4.00, y: 42.21 },
                    Point { x: 5.79, y: 44.00 },
                    Point { x: 8.00, y: 44.00 },
                ),
                PathEl::LineTo(Point { x: 36.00, y: 44.00 }),
                PathEl::LineTo(Point { x: 36.00, y: 40.00 }),
                PathEl::LineTo(Point { x: 8.00, y: 40.00 }),
                PathEl::LineTo(Point { x: 8.00, y: 12.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 28.00, y: 23.00 }),
                PathEl::LineTo(Point { x: 30.00, y: 23.00 }),
                PathEl::LineTo(Point { x: 30.00, y: 17.00 }),
                PathEl::LineTo(Point { x: 28.00, y: 17.00 }),
                PathEl::LineTo(Point { x: 28.00, y: 23.00 }),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct AirlineSeatIndividualSuite {
    size: f64,
    color: Color,
}

impl AirlineSeatIndividualSuite {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for AirlineSeatIndividualSuite {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 14.00, y: 26.00 }),
                PathEl::CurveTo(
                    Point { x: 17.31, y: 26.00 },
                    Point { x: 20.00, y: 23.31 },
                    Point { x: 20.00, y: 20.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 20.00, y: 16.69 },
                    Point { x: 17.31, y: 14.00 },
                    Point { x: 14.00, y: 14.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 10.69, y: 14.00 },
                    Point { x: 8.00, y: 16.69 },
                    Point { x: 8.00, y: 20.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 8.00, y: 23.31 },
                    Point { x: 10.69, y: 26.00 },
                    Point { x: 14.00, y: 26.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 38.00, y: 14.00 }),
                PathEl::LineTo(Point { x: 22.00, y: 14.00 }),
                PathEl::LineTo(Point { x: 22.00, y: 28.00 }),
                PathEl::LineTo(Point { x: 6.00, y: 28.00 }),
                PathEl::LineTo(Point { x: 6.00, y: 14.00 }),
                PathEl::LineTo(Point { x: 2.00, y: 14.00 }),
                PathEl::LineTo(Point { x: 2.00, y: 34.00 }),
                PathEl::LineTo(Point { x: 46.00, y: 34.00 }),
                PathEl::LineTo(Point { x: 46.00, y: 22.00 }),
                PathEl::CurveTo(
                    Point { x: 46.00, y: 17.58 },
                    Point { x: 42.42, y: 14.00 },
                    Point { x: 38.00, y: 14.00 },
                ),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct PanoramaWideAngle {
    size: f64,
    color: Color,
}

impl PanoramaWideAngle {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for PanoramaWideAngle {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 24.00, y: 12.00 }),
                PathEl::CurveTo(
                    Point { x: 28.90, y: 12.00 },
                    Point { x: 33.42, y: 12.39 },
                    Point { x: 38.58, y: 13.27 },
                ),
                PathEl::CurveTo(
                    Point { x: 39.52, y: 16.84 },
                    Point { x: 40.00, y: 20.45 },
                    Point { x: 40.00, y: 24.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 40.00, y: 27.55 },
                    Point { x: 39.52, y: 31.16 },
                    Point { x: 38.58, y: 34.73 },
                ),
                PathEl::CurveTo(
                    Point { x: 33.42, y: 35.61 },
                    Point { x: 28.90, y: 36.00 },
                    Point { x: 24.00, y: 36.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 19.10, y: 36.00 },
                    Point { x: 14.58, y: 35.61 },
                    Point { x: 9.42, y: 34.73 },
                ),
                PathEl::CurveTo(
                    Point { x: 8.48, y: 31.16 },
                    Point { x: 8.00, y: 27.55 },
                    Point { x: 8.00, y: 24.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 8.00, y: 20.45 },
                    Point { x: 8.48, y: 16.84 },
                    Point { x: 9.42, y: 13.27 },
                ),
                PathEl::CurveTo(
                    Point { x: 14.58, y: 12.39 },
                    Point { x: 19.10, y: 12.00 },
                    Point { x: 24.00, y: 12.00 },
                ),
                PathEl::MoveTo(Point { x: 24.00, y: 8.00 }),
                PathEl::CurveTo(
                    Point { x: 18.54, y: 8.00 },
                    Point { x: 13.55, y: 8.48 },
                    Point { x: 8.09, y: 9.44 },
                ),
                PathEl::LineTo(Point { x: 6.24, y: 9.77 }),
                PathEl::LineTo(Point { x: 5.74, y: 11.56 }),
                PathEl::CurveTo(
                    Point { x: 4.58, y: 15.70 },
                    Point { x: 4.00, y: 19.85 },
                    Point { x: 4.00, y: 24.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 4.00, y: 28.15 },
                    Point { x: 4.58, y: 32.30 },
                    Point { x: 5.74, y: 36.44 },
                ),
                PathEl::LineTo(Point { x: 6.24, y: 38.23 }),
                PathEl::LineTo(Point { x: 8.09, y: 38.56 }),
                PathEl::CurveTo(
                    Point { x: 13.55, y: 39.52 },
                    Point { x: 18.54, y: 40.00 },
                    Point { x: 24.00, y: 40.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 29.46, y: 40.00 },
                    Point { x: 34.45, y: 39.52 },
                    Point { x: 39.91, y: 38.56 },
                ),
                PathEl::LineTo(Point { x: 41.76, y: 38.23 }),
                PathEl::LineTo(Point { x: 42.26, y: 36.44 }),
                PathEl::CurveTo(
                    Point { x: 43.42, y: 32.30 },
                    Point { x: 44.00, y: 28.15 },
                    Point { x: 44.00, y: 24.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 44.00, y: 19.85 },
                    Point { x: 43.42, y: 15.70 },
                    Point { x: 42.26, y: 11.56 },
                ),
                PathEl::LineTo(Point { x: 41.76, y: 9.77 }),
                PathEl::LineTo(Point { x: 39.91, y: 9.44 }),
                PathEl::CurveTo(
                    Point { x: 34.45, y: 8.48 },
                    Point { x: 29.46, y: 8.00 },
                    Point { x: 24.00, y: 8.00 },
                ),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct Block {
    size: f64,
    color: Color,
}

impl Block {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for Block {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 24.00, y: 4.00 }),
                PathEl::CurveTo(
                    Point { x: 12.95, y: 4.00 },
                    Point { x: 4.00, y: 12.95 },
                    Point { x: 4.00, y: 24.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 4.00, y: 35.05 },
                    Point { x: 12.95, y: 44.00 },
                    Point { x: 24.00, y: 44.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 35.05, y: 44.00 },
                    Point { x: 44.00, y: 35.05 },
                    Point { x: 44.00, y: 24.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 44.00, y: 12.95 },
                    Point { x: 35.05, y: 4.00 },
                    Point { x: 24.00, y: 4.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 8.00, y: 24.00 }),
                PathEl::CurveTo(
                    Point { x: 8.00, y: 15.16 },
                    Point { x: 15.16, y: 8.00 },
                    Point { x: 24.00, y: 8.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 27.70, y: 8.00 },
                    Point { x: 31.09, y: 9.27 },
                    Point { x: 33.80, y: 11.37 },
                ),
                PathEl::LineTo(Point { x: 11.37, y: 33.80 }),
                PathEl::CurveTo(
                    Point { x: 9.27, y: 31.09 },
                    Point { x: 8.00, y: 27.70 },
                    Point { x: 8.00, y: 24.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 24.00, y: 40.00 }),
                PathEl::CurveTo(
                    Point { x: 20.30, y: 40.00 },
                    Point { x: 16.91, y: 38.73 },
                    Point { x: 14.20, y: 36.63 },
                ),
                PathEl::LineTo(Point { x: 36.63, y: 14.20 }),
                PathEl::CurveTo(
                    Point { x: 38.73, y: 16.91 },
                    Point { x: 40.00, y: 20.30 },
                    Point { x: 40.00, y: 24.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 40.00, y: 32.84 },
                    Point { x: 32.84, y: 40.00 },
                    Point { x: 24.00, y: 40.00 },
                ),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct LocalHospital {
    size: f64,
    color: Color,
}

impl LocalHospital {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for LocalHospital {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 38.00, y: 6.00 }),
                PathEl::LineTo(Point { x: 10.00, y: 6.00 }),
                PathEl::CurveTo(
                    Point { x: 7.79, y: 6.00 },
                    Point { x: 6.02, y: 7.79 },
                    Point { x: 6.02, y: 10.00 },
                ),
                PathEl::LineTo(Point { x: 6.00, y: 38.00 }),
                PathEl::CurveTo(
                    Point { x: 6.00, y: 40.21 },
                    Point { x: 7.79, y: 42.00 },
                    Point { x: 10.00, y: 42.00 },
                ),
                PathEl::LineTo(Point { x: 38.00, y: 42.00 }),
                PathEl::CurveTo(
                    Point { x: 40.21, y: 42.00 },
                    Point { x: 42.00, y: 40.21 },
                    Point { x: 42.00, y: 38.00 },
                ),
                PathEl::LineTo(Point { x: 42.00, y: 10.00 }),
                PathEl::CurveTo(
                    Point { x: 42.00, y: 7.79 },
                    Point { x: 40.21, y: 6.00 },
                    Point { x: 38.00, y: 6.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 36.00, y: 28.00 }),
                PathEl::LineTo(Point { x: 28.00, y: 28.00 }),
                PathEl::LineTo(Point { x: 28.00, y: 36.00 }),
                PathEl::LineTo(Point { x: 20.00, y: 36.00 }),
                PathEl::LineTo(Point { x: 20.00, y: 28.00 }),
                PathEl::LineTo(Point { x: 12.00, y: 28.00 }),
                PathEl::LineTo(Point { x: 12.00, y: 20.00 }),
                PathEl::LineTo(Point { x: 20.00, y: 20.00 }),
                PathEl::LineTo(Point { x: 20.00, y: 12.00 }),
                PathEl::LineTo(Point { x: 28.00, y: 12.00 }),
                PathEl::LineTo(Point { x: 28.00, y: 20.00 }),
                PathEl::LineTo(Point { x: 36.00, y: 20.00 }),
                PathEl::LineTo(Point { x: 36.00, y: 28.00 }),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct BluetoothDisabled {
    size: f64,
    color: Color,
}

impl BluetoothDisabled {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for BluetoothDisabled {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 26.00, y: 11.83 }),
                PathEl::LineTo(Point { x: 29.76, y: 15.59 }),
                PathEl::LineTo(Point { x: 26.56, y: 18.79 }),
                PathEl::LineTo(Point { x: 29.39, y: 21.62 }),
                PathEl::LineTo(Point { x: 35.42, y: 15.59 }),
                PathEl::LineTo(Point { x: 24.00, y: 4.17 }),
                PathEl::LineTo(Point { x: 22.00, y: 4.17 }),
                PathEl::LineTo(Point { x: 22.00, y: 14.23 }),
                PathEl::LineTo(Point { x: 26.00, y: 18.23 }),
                PathEl::LineTo(Point { x: 26.00, y: 11.83 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 10.83, y: 8.17 }),
                PathEl::LineTo(Point { x: 8.00, y: 11.00 }),
                PathEl::LineTo(Point { x: 21.17, y: 24.17 }),
                PathEl::LineTo(Point { x: 10.00, y: 35.34 }),
                PathEl::LineTo(Point { x: 12.83, y: 38.17 }),
                PathEl::LineTo(Point { x: 22.00, y: 29.00 }),
                PathEl::LineTo(Point { x: 22.00, y: 44.17 }),
                PathEl::LineTo(Point { x: 24.00, y: 44.17 }),
                PathEl::LineTo(Point { x: 32.59, y: 35.58 }),
                PathEl::LineTo(Point { x: 37.18, y: 40.17 }),
                PathEl::LineTo(Point { x: 40.00, y: 37.34 }),
                PathEl::LineTo(Point { x: 10.83, y: 8.17 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 26.00, y: 36.51 }),
                PathEl::LineTo(Point { x: 26.00, y: 29.00 }),
                PathEl::LineTo(Point { x: 29.76, y: 32.76 }),
                PathEl::LineTo(Point { x: 26.00, y: 36.51 }),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct Email {
    size: f64,
    color: Color,
}

impl Email {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for Email {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 40.00, y: 8.00 }),
                PathEl::LineTo(Point { x: 8.00, y: 8.00 }),
                PathEl::CurveTo(
                    Point { x: 5.79, y: 8.00 },
                    Point { x: 4.02, y: 9.79 },
                    Point { x: 4.02, y: 12.00 },
                ),
                PathEl::LineTo(Point { x: 4.00, y: 36.00 }),
                PathEl::CurveTo(
                    Point { x: 4.00, y: 38.21 },
                    Point { x: 5.79, y: 40.00 },
                    Point { x: 8.00, y: 40.00 },
                ),
                PathEl::LineTo(Point { x: 40.00, y: 40.00 }),
                PathEl::CurveTo(
                    Point { x: 42.21, y: 40.00 },
                    Point { x: 44.00, y: 38.21 },
                    Point { x: 44.00, y: 36.00 },
                ),
                PathEl::LineTo(Point { x: 44.00, y: 12.00 }),
                PathEl::CurveTo(
                    Point { x: 44.00, y: 9.79 },
                    Point { x: 42.21, y: 8.00 },
                    Point { x: 40.00, y: 8.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 40.00, y: 16.00 }),
                PathEl::LineTo(Point { x: 24.00, y: 26.00 }),
                PathEl::LineTo(Point { x: 8.00, y: 16.00 }),
                PathEl::LineTo(Point { x: 8.00, y: 12.00 }),
                PathEl::LineTo(Point { x: 24.00, y: 22.00 }),
                PathEl::LineTo(Point { x: 40.00, y: 12.00 }),
                PathEl::LineTo(Point { x: 40.00, y: 16.00 }),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct RoundedCorner {
    size: f64,
    color: Color,
}

impl RoundedCorner {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for RoundedCorner {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 38.00, y: 38.00 }),
                PathEl::LineTo(Point { x: 42.00, y: 38.00 }),
                PathEl::LineTo(Point { x: 42.00, y: 42.00 }),
                PathEl::LineTo(Point { x: 38.00, y: 42.00 }),
                PathEl::LineTo(Point { x: 38.00, y: 38.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 38.00, y: 34.00 }),
                PathEl::LineTo(Point { x: 42.00, y: 34.00 }),
                PathEl::LineTo(Point { x: 42.00, y: 30.00 }),
                PathEl::LineTo(Point { x: 38.00, y: 30.00 }),
                PathEl::LineTo(Point { x: 38.00, y: 34.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 6.00, y: 26.00 }),
                PathEl::LineTo(Point { x: 10.00, y: 26.00 }),
                PathEl::LineTo(Point { x: 10.00, y: 22.00 }),
                PathEl::LineTo(Point { x: 6.00, y: 22.00 }),
                PathEl::LineTo(Point { x: 6.00, y: 26.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 6.00, y: 34.00 }),
                PathEl::LineTo(Point { x: 10.00, y: 34.00 }),
                PathEl::LineTo(Point { x: 10.00, y: 30.00 }),
                PathEl::LineTo(Point { x: 6.00, y: 30.00 }),
                PathEl::LineTo(Point { x: 6.00, y: 34.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 6.00, y: 18.00 }),
                PathEl::LineTo(Point { x: 10.00, y: 18.00 }),
                PathEl::LineTo(Point { x: 10.00, y: 14.00 }),
                PathEl::LineTo(Point { x: 6.00, y: 14.00 }),
                PathEl::LineTo(Point { x: 6.00, y: 18.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 6.00, y: 10.00 }),
                PathEl::LineTo(Point { x: 10.00, y: 10.00 }),
                PathEl::LineTo(Point { x: 10.00, y: 6.00 }),
                PathEl::LineTo(Point { x: 6.00, y: 6.00 }),
                PathEl::LineTo(Point { x: 6.00, y: 10.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 14.00, y: 10.00 }),
                PathEl::LineTo(Point { x: 18.00, y: 10.00 }),
                PathEl::LineTo(Point { x: 18.00, y: 6.00 }),
                PathEl::LineTo(Point { x: 14.00, y: 6.00 }),
                PathEl::LineTo(Point { x: 14.00, y: 10.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 30.00, y: 42.00 }),
                PathEl::LineTo(Point { x: 34.00, y: 42.00 }),
                PathEl::LineTo(Point { x: 34.00, y: 38.00 }),
                PathEl::LineTo(Point { x: 30.00, y: 38.00 }),
                PathEl::LineTo(Point { x: 30.00, y: 42.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 22.00, y: 42.00 }),
                PathEl::LineTo(Point { x: 26.00, y: 42.00 }),
                PathEl::LineTo(Point { x: 26.00, y: 38.00 }),
                PathEl::LineTo(Point { x: 22.00, y: 38.00 }),
                PathEl::LineTo(Point { x: 22.00, y: 42.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 30.00, y: 42.00 }),
                PathEl::LineTo(Point { x: 34.00, y: 42.00 }),
                PathEl::LineTo(Point { x: 34.00, y: 38.00 }),
                PathEl::LineTo(Point { x: 30.00, y: 38.00 }),
                PathEl::LineTo(Point { x: 30.00, y: 42.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 14.00, y: 42.00 }),
                PathEl::LineTo(Point { x: 18.00, y: 42.00 }),
                PathEl::LineTo(Point { x: 18.00, y: 38.00 }),
                PathEl::LineTo(Point { x: 14.00, y: 38.00 }),
                PathEl::LineTo(Point { x: 14.00, y: 42.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 6.00, y: 42.00 }),
                PathEl::LineTo(Point { x: 10.00, y: 42.00 }),
                PathEl::LineTo(Point { x: 10.00, y: 38.00 }),
                PathEl::LineTo(Point { x: 6.00, y: 38.00 }),
                PathEl::LineTo(Point { x: 6.00, y: 42.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 42.00, y: 16.00 }),
                PathEl::CurveTo(
                    Point { x: 42.00, y: 10.49 },
                    Point { x: 37.51, y: 6.00 },
                    Point { x: 32.00, y: 6.00 },
                ),
                PathEl::LineTo(Point { x: 22.00, y: 6.00 }),
                PathEl::LineTo(Point { x: 22.00, y: 10.00 }),
                PathEl::LineTo(Point { x: 32.00, y: 10.00 }),
                PathEl::CurveTo(
                    Point { x: 35.31, y: 10.00 },
                    Point { x: 38.00, y: 12.69 },
                    Point { x: 38.00, y: 16.00 },
                ),
                PathEl::LineTo(Point { x: 38.00, y: 26.00 }),
                PathEl::LineTo(Point { x: 42.00, y: 26.00 }),
                PathEl::LineTo(Point { x: 42.00, y: 16.00 }),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct FolderShared {
    size: f64,
    color: Color,
}

impl FolderShared {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for FolderShared {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 40.00, y: 12.00 }),
                PathEl::LineTo(Point { x: 24.00, y: 12.00 }),
                PathEl::LineTo(Point { x: 20.00, y: 8.00 }),
                PathEl::LineTo(Point { x: 8.00, y: 8.00 }),
                PathEl::CurveTo(
                    Point { x: 5.79, y: 8.00 },
                    Point { x: 4.02, y: 9.79 },
                    Point { x: 4.02, y: 12.00 },
                ),
                PathEl::LineTo(Point { x: 4.00, y: 36.00 }),
                PathEl::CurveTo(
                    Point { x: 4.00, y: 38.21 },
                    Point { x: 5.79, y: 40.00 },
                    Point { x: 8.00, y: 40.00 },
                ),
                PathEl::LineTo(Point { x: 40.00, y: 40.00 }),
                PathEl::CurveTo(
                    Point { x: 42.21, y: 40.00 },
                    Point { x: 44.00, y: 38.21 },
                    Point { x: 44.00, y: 36.00 },
                ),
                PathEl::LineTo(Point { x: 44.00, y: 16.00 }),
                PathEl::CurveTo(
                    Point { x: 44.00, y: 13.79 },
                    Point { x: 42.21, y: 12.00 },
                    Point { x: 40.00, y: 12.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 30.00, y: 18.00 }),
                PathEl::CurveTo(
                    Point { x: 32.21, y: 18.00 },
                    Point { x: 34.00, y: 19.79 },
                    Point { x: 34.00, y: 22.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 34.00, y: 24.21 },
                    Point { x: 32.21, y: 26.00 },
                    Point { x: 30.00, y: 26.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 27.79, y: 26.00 },
                    Point { x: 26.00, y: 24.21 },
                    Point { x: 26.00, y: 22.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 26.00, y: 19.79 },
                    Point { x: 27.79, y: 18.00 },
                    Point { x: 30.00, y: 18.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 38.00, y: 34.00 }),
                PathEl::LineTo(Point { x: 22.00, y: 34.00 }),
                PathEl::LineTo(Point { x: 22.00, y: 32.00 }),
                PathEl::CurveTo(
                    Point { x: 22.00, y: 29.33 },
                    Point { x: 27.33, y: 28.00 },
                    Point { x: 30.00, y: 28.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 32.67, y: 28.00 },
                    Point { x: 38.00, y: 29.33 },
                    Point { x: 38.00, y: 32.00 },
                ),
                PathEl::LineTo(Point { x: 38.00, y: 34.00 }),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct FirstPage {
    size: f64,
    color: Color,
}

impl FirstPage {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for FirstPage {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 36.82, y: 33.18 }),
                PathEl::LineTo(Point { x: 27.64, y: 24.00 }),
                PathEl::LineTo(Point { x: 36.82, y: 14.82 }),
                PathEl::LineTo(Point { x: 34.00, y: 12.00 }),
                PathEl::LineTo(Point { x: 22.00, y: 24.00 }),
                PathEl::LineTo(Point { x: 34.00, y: 36.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 12.00, y: 12.00 }),
                PathEl::LineTo(Point { x: 16.00, y: 12.00 }),
                PathEl::LineTo(Point { x: 16.00, y: 36.00 }),
                PathEl::LineTo(Point { x: 12.00, y: 36.00 }),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct FindReplace {
    size: f64,
    color: Color,
}

impl FindReplace {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for FindReplace {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 22.00, y: 12.00 }),
                PathEl::CurveTo(
                    Point { x: 24.76, y: 12.00 },
                    Point { x: 27.26, y: 13.12 },
                    Point { x: 29.07, y: 14.93 },
                ),
                PathEl::LineTo(Point { x: 24.00, y: 20.00 }),
                PathEl::LineTo(Point { x: 36.00, y: 20.00 }),
                PathEl::LineTo(Point { x: 36.00, y: 8.00 }),
                PathEl::LineTo(Point { x: 31.90, y: 12.10 }),
                PathEl::CurveTo(
                    Point { x: 29.37, y: 9.57 },
                    Point { x: 25.87, y: 8.00 },
                    Point { x: 22.00, y: 8.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 14.95, y: 8.00 },
                    Point { x: 9.13, y: 13.22 },
                    Point { x: 8.16, y: 20.00 },
                ),
                PathEl::LineTo(Point { x: 12.20, y: 20.00 }),
                PathEl::CurveTo(
                    Point { x: 13.13, y: 15.44 },
                    Point { x: 17.16, y: 12.00 },
                    Point { x: 22.00, y: 12.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 33.28, y: 30.27 }),
                PathEl::CurveTo(
                    Point { x: 34.61, y: 28.46 },
                    Point { x: 35.51, y: 26.32 },
                    Point { x: 35.84, y: 24.00 },
                ),
                PathEl::LineTo(Point { x: 31.80, y: 24.00 }),
                PathEl::CurveTo(
                    Point { x: 30.87, y: 28.56 },
                    Point { x: 26.84, y: 32.00 },
                    Point { x: 22.00, y: 32.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 19.24, y: 32.00 },
                    Point { x: 16.74, y: 30.88 },
                    Point { x: 14.93, y: 29.07 },
                ),
                PathEl::LineTo(Point { x: 20.00, y: 24.00 }),
                PathEl::LineTo(Point { x: 8.00, y: 24.00 }),
                PathEl::LineTo(Point { x: 8.00, y: 36.00 }),
                PathEl::LineTo(Point { x: 12.10, y: 31.90 }),
                PathEl::CurveTo(
                    Point { x: 14.63, y: 34.43 },
                    Point { x: 18.13, y: 36.00 },
                    Point { x: 22.00, y: 36.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 25.10, y: 36.00 },
                    Point { x: 27.96, y: 34.98 },
                    Point { x: 30.28, y: 33.27 },
                ),
                PathEl::LineTo(Point { x: 40.00, y: 42.98 }),
                PathEl::LineTo(Point { x: 42.98, y: 40.00 }),
                PathEl::LineTo(Point { x: 33.28, y: 30.27 }),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct SignalWifi2Bar {
    size: f64,
    color: Color,
}

impl SignalWifi2Bar {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for SignalWifi2Bar {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 24.02, y: 42.98 }),
                PathEl::LineTo(Point { x: 47.28, y: 14.00 }),
                PathEl::CurveTo(
                    Point { x: 46.38, y: 13.32 },
                    Point { x: 37.43, y: 6.00 },
                    Point { x: 24.00, y: 6.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 10.57, y: 6.00 },
                    Point { x: 1.62, y: 13.32 },
                    Point { x: 0.72, y: 14.00 },
                ),
                PathEl::LineTo(Point { x: 23.98, y: 42.98 }),
                PathEl::LineTo(Point { x: 24.00, y: 43.00 }),
                PathEl::LineTo(Point { x: 24.02, y: 42.98 }),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 9.58, y: 25.03 }),
                PathEl::LineTo(Point { x: 23.99, y: 42.98 }),
                PathEl::LineTo(Point { x: 24.00, y: 43.00 }),
                PathEl::LineTo(Point { x: 24.01, y: 42.98 }),
                PathEl::LineTo(Point { x: 38.42, y: 25.03 }),
                PathEl::CurveTo(
                    Point { x: 37.70, y: 24.47 },
                    Point { x: 32.20, y: 20.00 },
                    Point { x: 24.00, y: 20.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 15.80, y: 20.00 },
                    Point { x: 10.30, y: 24.47 },
                    Point { x: 9.58, y: 25.03 },
                ),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct SettingsRemote {
    size: f64,
    color: Color,
}

impl SettingsRemote {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for SettingsRemote {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 30.00, y: 18.00 }),
                PathEl::LineTo(Point { x: 18.00, y: 18.00 }),
                PathEl::CurveTo(
                    Point { x: 16.89, y: 18.00 },
                    Point { x: 16.00, y: 18.90 },
                    Point { x: 16.00, y: 20.00 },
                ),
                PathEl::LineTo(Point { x: 16.00, y: 44.00 }),
                PathEl::CurveTo(
                    Point { x: 16.00, y: 45.10 },
                    Point { x: 16.89, y: 46.00 },
                    Point { x: 18.00, y: 46.00 },
                ),
                PathEl::LineTo(Point { x: 30.00, y: 46.00 }),
                PathEl::CurveTo(
                    Point { x: 31.11, y: 46.00 },
                    Point { x: 32.00, y: 45.10 },
                    Point { x: 32.00, y: 44.00 },
                ),
                PathEl::LineTo(Point { x: 32.00, y: 20.00 }),
                PathEl::CurveTo(
                    Point { x: 32.00, y: 18.90 },
                    Point { x: 31.11, y: 18.00 },
                    Point { x: 30.00, y: 18.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 24.00, y: 30.00 }),
                PathEl::CurveTo(
                    Point { x: 21.79, y: 30.00 },
                    Point { x: 20.00, y: 28.21 },
                    Point { x: 20.00, y: 26.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 20.00, y: 23.79 },
                    Point { x: 21.79, y: 22.00 },
                    Point { x: 24.00, y: 22.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 26.21, y: 22.00 },
                    Point { x: 28.00, y: 23.79 },
                    Point { x: 28.00, y: 26.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 28.00, y: 28.21 },
                    Point { x: 26.21, y: 30.00 },
                    Point { x: 24.00, y: 30.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 14.10, y: 12.10 }),
                PathEl::LineTo(Point { x: 16.93, y: 14.93 }),
                PathEl::CurveTo(
                    Point { x: 18.74, y: 13.12 },
                    Point { x: 21.24, y: 12.00 },
                    Point { x: 24.00, y: 12.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 26.76, y: 12.00 },
                    Point { x: 29.26, y: 13.12 },
                    Point { x: 31.07, y: 14.93 },
                ),
                PathEl::LineTo(Point { x: 33.90, y: 12.10 }),
                PathEl::CurveTo(
                    Point { x: 31.37, y: 9.57 },
                    Point { x: 27.87, y: 8.00 },
                    Point { x: 24.00, y: 8.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 20.13, y: 8.00 },
                    Point { x: 16.63, y: 9.57 },
                    Point { x: 14.10, y: 12.10 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 24.00, y: 0.00 }),
                PathEl::CurveTo(
                    Point { x: 17.93, y: 0.00 },
                    Point { x: 12.43, y: 2.46 },
                    Point { x: 8.44, y: 6.44 },
                ),
                PathEl::LineTo(Point { x: 11.27, y: 9.27 }),
                PathEl::CurveTo(
                    Point { x: 14.53, y: 6.01 },
                    Point { x: 19.03, y: 4.00 },
                    Point { x: 24.00, y: 4.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 28.97, y: 4.00 },
                    Point { x: 33.47, y: 6.01 },
                    Point { x: 36.73, y: 9.27 },
                ),
                PathEl::LineTo(Point { x: 39.56, y: 6.44 }),
                PathEl::CurveTo(
                    Point { x: 35.57, y: 2.46 },
                    Point { x: 30.07, y: 0.00 },
                    Point { x: 24.00, y: 0.00 },
                ),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct BorderRight {
    size: f64,
    color: Color,
}

impl BorderRight {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for BorderRight {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 14.00, y: 42.00 }),
                PathEl::LineTo(Point { x: 18.00, y: 42.00 }),
                PathEl::LineTo(Point { x: 18.00, y: 38.00 }),
                PathEl::LineTo(Point { x: 14.00, y: 38.00 }),
                PathEl::LineTo(Point { x: 14.00, y: 42.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 6.00, y: 10.00 }),
                PathEl::LineTo(Point { x: 10.00, y: 10.00 }),
                PathEl::LineTo(Point { x: 10.00, y: 6.00 }),
                PathEl::LineTo(Point { x: 6.00, y: 6.00 }),
                PathEl::LineTo(Point { x: 6.00, y: 10.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 14.00, y: 10.00 }),
                PathEl::LineTo(Point { x: 18.00, y: 10.00 }),
                PathEl::LineTo(Point { x: 18.00, y: 6.00 }),
                PathEl::LineTo(Point { x: 14.00, y: 6.00 }),
                PathEl::LineTo(Point { x: 14.00, y: 10.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 14.00, y: 26.00 }),
                PathEl::LineTo(Point { x: 18.00, y: 26.00 }),
                PathEl::LineTo(Point { x: 18.00, y: 22.00 }),
                PathEl::LineTo(Point { x: 14.00, y: 22.00 }),
                PathEl::LineTo(Point { x: 14.00, y: 26.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 6.00, y: 42.00 }),
                PathEl::LineTo(Point { x: 10.00, y: 42.00 }),
                PathEl::LineTo(Point { x: 10.00, y: 38.00 }),
                PathEl::LineTo(Point { x: 6.00, y: 38.00 }),
                PathEl::LineTo(Point { x: 6.00, y: 42.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 22.00, y: 42.00 }),
                PathEl::LineTo(Point { x: 26.00, y: 42.00 }),
                PathEl::LineTo(Point { x: 26.00, y: 38.00 }),
                PathEl::LineTo(Point { x: 22.00, y: 38.00 }),
                PathEl::LineTo(Point { x: 22.00, y: 42.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 6.00, y: 26.00 }),
                PathEl::LineTo(Point { x: 10.00, y: 26.00 }),
                PathEl::LineTo(Point { x: 10.00, y: 22.00 }),
                PathEl::LineTo(Point { x: 6.00, y: 22.00 }),
                PathEl::LineTo(Point { x: 6.00, y: 26.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 6.00, y: 34.00 }),
                PathEl::LineTo(Point { x: 10.00, y: 34.00 }),
                PathEl::LineTo(Point { x: 10.00, y: 30.00 }),
                PathEl::LineTo(Point { x: 6.00, y: 30.00 }),
                PathEl::LineTo(Point { x: 6.00, y: 34.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 6.00, y: 18.00 }),
                PathEl::LineTo(Point { x: 10.00, y: 18.00 }),
                PathEl::LineTo(Point { x: 10.00, y: 14.00 }),
                PathEl::LineTo(Point { x: 6.00, y: 14.00 }),
                PathEl::LineTo(Point { x: 6.00, y: 18.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 22.00, y: 34.00 }),
                PathEl::LineTo(Point { x: 26.00, y: 34.00 }),
                PathEl::LineTo(Point { x: 26.00, y: 30.00 }),
                PathEl::LineTo(Point { x: 22.00, y: 30.00 }),
                PathEl::LineTo(Point { x: 22.00, y: 34.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 30.00, y: 26.00 }),
                PathEl::LineTo(Point { x: 34.00, y: 26.00 }),
                PathEl::LineTo(Point { x: 34.00, y: 22.00 }),
                PathEl::LineTo(Point { x: 30.00, y: 22.00 }),
                PathEl::LineTo(Point { x: 30.00, y: 26.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 38.00, y: 6.00 }),
                PathEl::LineTo(Point { x: 38.00, y: 42.00 }),
                PathEl::LineTo(Point { x: 42.00, y: 42.00 }),
                PathEl::LineTo(Point { x: 42.00, y: 6.00 }),
                PathEl::LineTo(Point { x: 38.00, y: 6.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 30.00, y: 42.00 }),
                PathEl::LineTo(Point { x: 34.00, y: 42.00 }),
                PathEl::LineTo(Point { x: 34.00, y: 38.00 }),
                PathEl::LineTo(Point { x: 30.00, y: 38.00 }),
                PathEl::LineTo(Point { x: 30.00, y: 42.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 30.00, y: 10.00 }),
                PathEl::LineTo(Point { x: 34.00, y: 10.00 }),
                PathEl::LineTo(Point { x: 34.00, y: 6.00 }),
                PathEl::LineTo(Point { x: 30.00, y: 6.00 }),
                PathEl::LineTo(Point { x: 30.00, y: 10.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 22.00, y: 26.00 }),
                PathEl::LineTo(Point { x: 26.00, y: 26.00 }),
                PathEl::LineTo(Point { x: 26.00, y: 22.00 }),
                PathEl::LineTo(Point { x: 22.00, y: 22.00 }),
                PathEl::LineTo(Point { x: 22.00, y: 26.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 22.00, y: 10.00 }),
                PathEl::LineTo(Point { x: 26.00, y: 10.00 }),
                PathEl::LineTo(Point { x: 26.00, y: 6.00 }),
                PathEl::LineTo(Point { x: 22.00, y: 6.00 }),
                PathEl::LineTo(Point { x: 22.00, y: 10.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 22.00, y: 18.00 }),
                PathEl::LineTo(Point { x: 26.00, y: 18.00 }),
                PathEl::LineTo(Point { x: 26.00, y: 14.00 }),
                PathEl::LineTo(Point { x: 22.00, y: 14.00 }),
                PathEl::LineTo(Point { x: 22.00, y: 18.00 }),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct BurstMode {
    size: f64,
    color: Color,
}

impl BurstMode {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for BurstMode {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 2.00, y: 10.00 }),
                PathEl::LineTo(Point { x: 6.00, y: 10.00 }),
                PathEl::LineTo(Point { x: 6.00, y: 38.00 }),
                PathEl::LineTo(Point { x: 2.00, y: 38.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 10.00, y: 10.00 }),
                PathEl::LineTo(Point { x: 14.00, y: 10.00 }),
                PathEl::LineTo(Point { x: 14.00, y: 38.00 }),
                PathEl::LineTo(Point { x: 10.00, y: 38.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 44.00, y: 10.00 }),
                PathEl::LineTo(Point { x: 20.00, y: 10.00 }),
                PathEl::CurveTo(
                    Point { x: 18.90, y: 10.00 },
                    Point { x: 18.00, y: 10.90 },
                    Point { x: 18.00, y: 12.00 },
                ),
                PathEl::LineTo(Point { x: 18.00, y: 36.00 }),
                PathEl::CurveTo(
                    Point { x: 18.00, y: 37.10 },
                    Point { x: 18.90, y: 38.00 },
                    Point { x: 20.00, y: 38.00 },
                ),
                PathEl::LineTo(Point { x: 44.00, y: 38.00 }),
                PathEl::CurveTo(
                    Point { x: 45.10, y: 38.00 },
                    Point { x: 46.00, y: 37.10 },
                    Point { x: 46.00, y: 36.00 },
                ),
                PathEl::LineTo(Point { x: 46.00, y: 12.00 }),
                PathEl::CurveTo(
                    Point { x: 46.00, y: 10.90 },
                    Point { x: 45.10, y: 10.00 },
                    Point { x: 44.00, y: 10.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 22.00, y: 34.00 }),
                PathEl::LineTo(Point { x: 27.00, y: 27.70 }),
                PathEl::LineTo(Point { x: 30.57, y: 32.00 }),
                PathEl::LineTo(Point { x: 35.57, y: 25.56 }),
                PathEl::LineTo(Point { x: 42.00, y: 34.00 }),
                PathEl::LineTo(Point { x: 22.00, y: 34.00 }),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct NoEncryption {
    size: f64,
    color: Color,
}

impl NoEncryption {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for NoEncryption {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 42.00, y: 43.56 }),
                PathEl::LineTo(Point { x: 8.44, y: 10.00 }),
                PathEl::LineTo(Point { x: 6.00, y: 12.44 }),
                PathEl::LineTo(Point { x: 10.08, y: 16.52 }),
                PathEl::CurveTo(
                    Point { x: 8.85, y: 17.20 },
                    Point { x: 8.00, y: 18.50 },
                    Point { x: 8.00, y: 20.00 },
                ),
                PathEl::LineTo(Point { x: 8.00, y: 40.00 }),
                PathEl::CurveTo(
                    Point { x: 8.00, y: 42.20 },
                    Point { x: 9.80, y: 44.00 },
                    Point { x: 12.00, y: 44.00 },
                ),
                PathEl::LineTo(Point { x: 36.00, y: 44.00 }),
                PathEl::CurveTo(
                    Point { x: 36.47, y: 44.00 },
                    Point { x: 36.91, y: 43.91 },
                    Point { x: 37.32, y: 43.76 },
                ),
                PathEl::LineTo(Point { x: 39.56, y: 46.00 }),
                PathEl::LineTo(Point { x: 42.00, y: 43.56 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 17.80, y: 12.00 }),
                PathEl::CurveTo(
                    Point { x: 17.80, y: 8.58 },
                    Point { x: 20.58, y: 5.80 },
                    Point { x: 24.00, y: 5.80 },
                ),
                PathEl::CurveTo(
                    Point { x: 27.42, y: 5.80 },
                    Point { x: 30.20, y: 8.58 },
                    Point { x: 30.20, y: 12.00 },
                ),
                PathEl::LineTo(Point { x: 30.20, y: 16.00 }),
                PathEl::LineTo(Point { x: 19.31, y: 16.00 }),
                PathEl::LineTo(Point { x: 40.00, y: 36.69 }),
                PathEl::LineTo(Point { x: 40.00, y: 20.00 }),
                PathEl::CurveTo(
                    Point { x: 40.00, y: 17.80 },
                    Point { x: 38.20, y: 16.00 },
                    Point { x: 36.00, y: 16.00 },
                ),
                PathEl::LineTo(Point { x: 34.00, y: 16.00 }),
                PathEl::LineTo(Point { x: 34.00, y: 12.00 }),
                PathEl::CurveTo(
                    Point { x: 34.00, y: 6.48 },
                    Point { x: 29.52, y: 2.00 },
                    Point { x: 24.00, y: 2.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 18.89, y: 2.00 },
                    Point { x: 14.72, y: 5.86 },
                    Point { x: 14.12, y: 10.81 },
                ),
                PathEl::LineTo(Point { x: 17.80, y: 14.49 }),
                PathEl::LineTo(Point { x: 17.80, y: 12.00 }),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct SettingsPower {
    size: f64,
    color: Color,
}

impl SettingsPower {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for SettingsPower {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 14.00, y: 48.00 }),
                PathEl::LineTo(Point { x: 18.00, y: 48.00 }),
                PathEl::LineTo(Point { x: 18.00, y: 44.00 }),
                PathEl::LineTo(Point { x: 14.00, y: 44.00 }),
                PathEl::LineTo(Point { x: 14.00, y: 48.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 22.00, y: 48.00 }),
                PathEl::LineTo(Point { x: 26.00, y: 48.00 }),
                PathEl::LineTo(Point { x: 26.00, y: 44.00 }),
                PathEl::LineTo(Point { x: 22.00, y: 44.00 }),
                PathEl::LineTo(Point { x: 22.00, y: 48.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 26.00, y: 4.00 }),
                PathEl::LineTo(Point { x: 22.00, y: 4.00 }),
                PathEl::LineTo(Point { x: 22.00, y: 24.00 }),
                PathEl::LineTo(Point { x: 26.00, y: 24.00 }),
                PathEl::LineTo(Point { x: 26.00, y: 4.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 33.13, y: 8.87 }),
                PathEl::LineTo(Point { x: 30.24, y: 11.76 }),
                PathEl::CurveTo(
                    Point { x: 33.69, y: 13.87 },
                    Point { x: 36.00, y: 17.66 },
                    Point { x: 36.00, y: 22.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 36.00, y: 28.63 },
                    Point { x: 30.63, y: 34.00 },
                    Point { x: 24.00, y: 34.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 17.37, y: 34.00 },
                    Point { x: 12.00, y: 28.63 },
                    Point { x: 12.00, y: 22.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 12.00, y: 17.66 },
                    Point { x: 14.31, y: 13.87 },
                    Point { x: 17.76, y: 11.76 },
                ),
                PathEl::LineTo(Point { x: 14.87, y: 8.87 }),
                PathEl::CurveTo(
                    Point { x: 10.72, y: 11.76 },
                    Point { x: 8.00, y: 16.56 },
                    Point { x: 8.00, y: 22.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 8.00, y: 30.84 },
                    Point { x: 15.16, y: 38.00 },
                    Point { x: 24.00, y: 38.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 32.84, y: 38.00 },
                    Point { x: 40.00, y: 30.84 },
                    Point { x: 40.00, y: 22.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 40.00, y: 16.56 },
                    Point { x: 37.28, y: 11.76 },
                    Point { x: 33.13, y: 8.87 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 30.00, y: 48.00 }),
                PathEl::LineTo(Point { x: 34.00, y: 48.00 }),
                PathEl::LineTo(Point { x: 34.00, y: 44.00 }),
                PathEl::LineTo(Point { x: 30.00, y: 44.00 }),
                PathEl::LineTo(Point { x: 30.00, y: 48.00 }),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct DialerSip {
    size: f64,
    color: Color,
}

impl DialerSip {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for DialerSip {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 34.00, y: 6.00 }),
                PathEl::LineTo(Point { x: 32.00, y: 6.00 }),
                PathEl::LineTo(Point { x: 32.00, y: 16.00 }),
                PathEl::LineTo(Point { x: 34.00, y: 16.00 }),
                PathEl::LineTo(Point { x: 34.00, y: 6.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 30.00, y: 10.00 }),
                PathEl::LineTo(Point { x: 26.00, y: 10.00 }),
                PathEl::LineTo(Point { x: 26.00, y: 8.00 }),
                PathEl::LineTo(Point { x: 30.00, y: 8.00 }),
                PathEl::LineTo(Point { x: 30.00, y: 6.00 }),
                PathEl::LineTo(Point { x: 24.00, y: 6.00 }),
                PathEl::LineTo(Point { x: 24.00, y: 12.00 }),
                PathEl::LineTo(Point { x: 28.00, y: 12.00 }),
                PathEl::LineTo(Point { x: 28.00, y: 14.00 }),
                PathEl::LineTo(Point { x: 24.00, y: 14.00 }),
                PathEl::LineTo(Point { x: 24.00, y: 16.00 }),
                PathEl::LineTo(Point { x: 30.00, y: 16.00 }),
                PathEl::LineTo(Point { x: 30.00, y: 10.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 36.00, y: 6.00 }),
                PathEl::LineTo(Point { x: 36.00, y: 16.00 }),
                PathEl::LineTo(Point { x: 38.00, y: 16.00 }),
                PathEl::LineTo(Point { x: 38.00, y: 12.00 }),
                PathEl::LineTo(Point { x: 42.00, y: 12.00 }),
                PathEl::LineTo(Point { x: 42.00, y: 6.00 }),
                PathEl::LineTo(Point { x: 36.00, y: 6.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 40.00, y: 10.00 }),
                PathEl::LineTo(Point { x: 38.00, y: 10.00 }),
                PathEl::LineTo(Point { x: 38.00, y: 8.00 }),
                PathEl::LineTo(Point { x: 40.00, y: 8.00 }),
                PathEl::LineTo(Point { x: 40.00, y: 10.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 40.00, y: 31.00 }),
                PathEl::CurveTo(
                    Point { x: 37.51, y: 31.00 },
                    Point { x: 35.11, y: 30.60 },
                    Point { x: 32.86, y: 29.86 },
                ),
                PathEl::CurveTo(
                    Point { x: 32.17, y: 29.64 },
                    Point { x: 31.38, y: 29.80 },
                    Point { x: 30.83, y: 30.35 },
                ),
                PathEl::LineTo(Point { x: 26.43, y: 34.76 }),
                PathEl::CurveTo(
                    Point { x: 20.77, y: 31.88 },
                    Point { x: 16.14, y: 27.25 },
                    Point { x: 13.25, y: 21.59 },
                ),
                PathEl::LineTo(Point { x: 17.65, y: 17.18 }),
                PathEl::CurveTo(
                    Point { x: 18.20, y: 16.63 },
                    Point { x: 18.36, y: 15.84 },
                    Point { x: 18.14, y: 15.15 },
                ),
                PathEl::CurveTo(
                    Point { x: 17.40, y: 12.90 },
                    Point { x: 17.00, y: 10.49 },
                    Point { x: 17.00, y: 8.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 17.00, y: 6.89 },
                    Point { x: 16.11, y: 6.00 },
                    Point { x: 15.00, y: 6.00 },
                ),
                PathEl::LineTo(Point { x: 8.00, y: 6.00 }),
                PathEl::CurveTo(
                    Point { x: 6.89, y: 6.00 },
                    Point { x: 6.00, y: 6.89 },
                    Point { x: 6.00, y: 8.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 6.00, y: 26.78 },
                    Point { x: 21.22, y: 42.00 },
                    Point { x: 40.00, y: 42.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 41.11, y: 42.00 },
                    Point { x: 42.00, y: 41.11 },
                    Point { x: 42.00, y: 40.00 },
                ),
                PathEl::LineTo(Point { x: 42.00, y: 33.00 }),
                PathEl::CurveTo(
                    Point { x: 42.00, y: 31.89 },
                    Point { x: 41.11, y: 31.00 },
                    Point { x: 40.00, y: 31.00 },
                ),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct LibraryAdd {
    size: f64,
    color: Color,
}

impl LibraryAdd {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for LibraryAdd {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 8.00, y: 12.00 }),
                PathEl::LineTo(Point { x: 4.00, y: 12.00 }),
                PathEl::LineTo(Point { x: 4.00, y: 40.00 }),
                PathEl::CurveTo(
                    Point { x: 4.00, y: 42.21 },
                    Point { x: 5.79, y: 44.00 },
                    Point { x: 8.00, y: 44.00 },
                ),
                PathEl::LineTo(Point { x: 36.00, y: 44.00 }),
                PathEl::LineTo(Point { x: 36.00, y: 40.00 }),
                PathEl::LineTo(Point { x: 8.00, y: 40.00 }),
                PathEl::LineTo(Point { x: 8.00, y: 12.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 40.00, y: 4.00 }),
                PathEl::LineTo(Point { x: 16.00, y: 4.00 }),
                PathEl::CurveTo(
                    Point { x: 13.79, y: 4.00 },
                    Point { x: 12.00, y: 5.79 },
                    Point { x: 12.00, y: 8.00 },
                ),
                PathEl::LineTo(Point { x: 12.00, y: 32.00 }),
                PathEl::CurveTo(
                    Point { x: 12.00, y: 34.21 },
                    Point { x: 13.79, y: 36.00 },
                    Point { x: 16.00, y: 36.00 },
                ),
                PathEl::LineTo(Point { x: 40.00, y: 36.00 }),
                PathEl::CurveTo(
                    Point { x: 42.21, y: 36.00 },
                    Point { x: 44.00, y: 34.21 },
                    Point { x: 44.00, y: 32.00 },
                ),
                PathEl::LineTo(Point { x: 44.00, y: 8.00 }),
                PathEl::CurveTo(
                    Point { x: 44.00, y: 5.79 },
                    Point { x: 42.21, y: 4.00 },
                    Point { x: 40.00, y: 4.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 38.00, y: 22.00 }),
                PathEl::LineTo(Point { x: 30.00, y: 22.00 }),
                PathEl::LineTo(Point { x: 30.00, y: 30.00 }),
                PathEl::LineTo(Point { x: 26.00, y: 30.00 }),
                PathEl::LineTo(Point { x: 26.00, y: 22.00 }),
                PathEl::LineTo(Point { x: 18.00, y: 22.00 }),
                PathEl::LineTo(Point { x: 18.00, y: 18.00 }),
                PathEl::LineTo(Point { x: 26.00, y: 18.00 }),
                PathEl::LineTo(Point { x: 26.00, y: 10.00 }),
                PathEl::LineTo(Point { x: 30.00, y: 10.00 }),
                PathEl::LineTo(Point { x: 30.00, y: 18.00 }),
                PathEl::LineTo(Point { x: 38.00, y: 18.00 }),
                PathEl::LineTo(Point { x: 38.00, y: 22.00 }),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct SignalCellularNull {
    size: f64,
    color: Color,
}

impl SignalCellularNull {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for SignalCellularNull {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 40.00, y: 13.66 }),
                PathEl::LineTo(Point { x: 40.00, y: 40.00 }),
                PathEl::LineTo(Point { x: 13.66, y: 40.00 }),
                PathEl::LineTo(Point { x: 40.00, y: 13.66 }),
                PathEl::MoveTo(Point { x: 44.00, y: 4.00 }),
                PathEl::LineTo(Point { x: 4.00, y: 44.00 }),
                PathEl::LineTo(Point { x: 44.00, y: 44.00 }),
                PathEl::LineTo(Point { x: 44.00, y: 4.00 }),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct Error {
    size: f64,
    color: Color,
}

impl Error {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for Error {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 24.00, y: 4.00 }),
                PathEl::CurveTo(
                    Point { x: 12.96, y: 4.00 },
                    Point { x: 4.00, y: 12.95 },
                    Point { x: 4.00, y: 24.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 4.00, y: 35.05 },
                    Point { x: 12.96, y: 44.00 },
                    Point { x: 24.00, y: 44.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 35.04, y: 44.00 },
                    Point { x: 44.00, y: 35.05 },
                    Point { x: 44.00, y: 24.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 44.00, y: 12.95 },
                    Point { x: 35.04, y: 4.00 },
                    Point { x: 24.00, y: 4.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 26.00, y: 34.00 }),
                PathEl::LineTo(Point { x: 22.00, y: 34.00 }),
                PathEl::LineTo(Point { x: 22.00, y: 30.00 }),
                PathEl::LineTo(Point { x: 26.00, y: 30.00 }),
                PathEl::LineTo(Point { x: 26.00, y: 34.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 26.00, y: 26.00 }),
                PathEl::LineTo(Point { x: 22.00, y: 26.00 }),
                PathEl::LineTo(Point { x: 22.00, y: 14.00 }),
                PathEl::LineTo(Point { x: 26.00, y: 14.00 }),
                PathEl::LineTo(Point { x: 26.00, y: 26.00 }),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct Autorenew {
    size: f64,
    color: Color,
}

impl Autorenew {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for Autorenew {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 24.00, y: 12.00 }),
                PathEl::LineTo(Point { x: 24.00, y: 18.00 }),
                PathEl::LineTo(Point { x: 32.00, y: 10.00 }),
                PathEl::LineTo(Point { x: 24.00, y: 2.00 }),
                PathEl::LineTo(Point { x: 24.00, y: 8.00 }),
                PathEl::CurveTo(
                    Point { x: 15.16, y: 8.00 },
                    Point { x: 8.00, y: 15.16 },
                    Point { x: 8.00, y: 24.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 8.00, y: 27.14 },
                    Point { x: 8.92, y: 30.05 },
                    Point { x: 10.48, y: 32.52 },
                ),
                PathEl::LineTo(Point { x: 13.40, y: 29.60 }),
                PathEl::CurveTo(
                    Point { x: 12.51, y: 27.93 },
                    Point { x: 12.00, y: 26.03 },
                    Point { x: 12.00, y: 24.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 12.00, y: 17.37 },
                    Point { x: 17.37, y: 12.00 },
                    Point { x: 24.00, y: 12.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 37.52, y: 15.48 }),
                PathEl::LineTo(Point { x: 34.60, y: 18.40 }),
                PathEl::CurveTo(
                    Point { x: 35.49, y: 20.07 },
                    Point { x: 36.00, y: 21.97 },
                    Point { x: 36.00, y: 24.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 36.00, y: 30.63 },
                    Point { x: 30.63, y: 36.00 },
                    Point { x: 24.00, y: 36.00 },
                ),
                PathEl::LineTo(Point { x: 24.00, y: 30.00 }),
                PathEl::LineTo(Point { x: 16.00, y: 38.00 }),
                PathEl::LineTo(Point { x: 24.00, y: 46.00 }),
                PathEl::LineTo(Point { x: 24.00, y: 40.00 }),
                PathEl::CurveTo(
                    Point { x: 32.84, y: 40.00 },
                    Point { x: 40.00, y: 32.84 },
                    Point { x: 40.00, y: 24.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 40.00, y: 20.86 },
                    Point { x: 39.08, y: 17.95 },
                    Point { x: 37.52, y: 15.48 },
                ),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct Loop {
    size: f64,
    color: Color,
}

impl Loop {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for Loop {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 24.00, y: 8.00 }),
                PathEl::LineTo(Point { x: 24.00, y: 2.00 }),
                PathEl::LineTo(Point { x: 16.00, y: 10.00 }),
                PathEl::LineTo(Point { x: 24.00, y: 18.00 }),
                PathEl::LineTo(Point { x: 24.00, y: 12.00 }),
                PathEl::CurveTo(
                    Point { x: 30.63, y: 12.00 },
                    Point { x: 36.00, y: 17.37 },
                    Point { x: 36.00, y: 24.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 36.00, y: 26.03 },
                    Point { x: 35.49, y: 27.93 },
                    Point { x: 34.61, y: 29.61 },
                ),
                PathEl::LineTo(Point { x: 37.53, y: 32.53 }),
                PathEl::CurveTo(
                    Point { x: 39.08, y: 30.05 },
                    Point { x: 40.00, y: 27.14 },
                    Point { x: 40.00, y: 24.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 40.00, y: 15.16 },
                    Point { x: 32.84, y: 8.00 },
                    Point { x: 24.00, y: 8.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 24.00, y: 36.00 }),
                PathEl::CurveTo(
                    Point { x: 17.37, y: 36.00 },
                    Point { x: 12.00, y: 30.63 },
                    Point { x: 12.00, y: 24.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 12.00, y: 21.97 },
                    Point { x: 12.51, y: 20.07 },
                    Point { x: 13.39, y: 18.39 },
                ),
                PathEl::LineTo(Point { x: 10.47, y: 15.47 }),
                PathEl::CurveTo(
                    Point { x: 8.92, y: 17.95 },
                    Point { x: 8.00, y: 20.86 },
                    Point { x: 8.00, y: 24.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 8.00, y: 32.84 },
                    Point { x: 15.16, y: 40.00 },
                    Point { x: 24.00, y: 40.00 },
                ),
                PathEl::LineTo(Point { x: 24.00, y: 46.00 }),
                PathEl::LineTo(Point { x: 32.00, y: 38.00 }),
                PathEl::LineTo(Point { x: 24.00, y: 30.00 }),
                PathEl::LineTo(Point { x: 24.00, y: 36.00 }),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct VideogameAsset {
    size: f64,
    color: Color,
}

impl VideogameAsset {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for VideogameAsset {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 42.00, y: 12.00 }),
                PathEl::LineTo(Point { x: 6.00, y: 12.00 }),
                PathEl::CurveTo(
                    Point { x: 3.79, y: 12.00 },
                    Point { x: 2.00, y: 13.79 },
                    Point { x: 2.00, y: 16.00 },
                ),
                PathEl::LineTo(Point { x: 2.00, y: 32.00 }),
                PathEl::CurveTo(
                    Point { x: 2.00, y: 34.21 },
                    Point { x: 3.79, y: 36.00 },
                    Point { x: 6.00, y: 36.00 },
                ),
                PathEl::LineTo(Point { x: 42.00, y: 36.00 }),
                PathEl::CurveTo(
                    Point { x: 44.21, y: 36.00 },
                    Point { x: 46.00, y: 34.21 },
                    Point { x: 46.00, y: 32.00 },
                ),
                PathEl::LineTo(Point { x: 46.00, y: 16.00 }),
                PathEl::CurveTo(
                    Point { x: 46.00, y: 13.79 },
                    Point { x: 44.21, y: 12.00 },
                    Point { x: 42.00, y: 12.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 22.00, y: 26.00 }),
                PathEl::LineTo(Point { x: 16.00, y: 26.00 }),
                PathEl::LineTo(Point { x: 16.00, y: 32.00 }),
                PathEl::LineTo(Point { x: 12.00, y: 32.00 }),
                PathEl::LineTo(Point { x: 12.00, y: 26.00 }),
                PathEl::LineTo(Point { x: 6.00, y: 26.00 }),
                PathEl::LineTo(Point { x: 6.00, y: 22.00 }),
                PathEl::LineTo(Point { x: 12.00, y: 22.00 }),
                PathEl::LineTo(Point { x: 12.00, y: 16.00 }),
                PathEl::LineTo(Point { x: 16.00, y: 16.00 }),
                PathEl::LineTo(Point { x: 16.00, y: 22.00 }),
                PathEl::LineTo(Point { x: 22.00, y: 22.00 }),
                PathEl::LineTo(Point { x: 22.00, y: 26.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 31.00, y: 30.00 }),
                PathEl::CurveTo(
                    Point { x: 29.34, y: 30.00 },
                    Point { x: 28.00, y: 28.66 },
                    Point { x: 28.00, y: 27.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 28.00, y: 25.34 },
                    Point { x: 29.34, y: 24.00 },
                    Point { x: 31.00, y: 24.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 32.66, y: 24.00 },
                    Point { x: 34.00, y: 25.34 },
                    Point { x: 34.00, y: 27.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 34.00, y: 28.66 },
                    Point { x: 32.66, y: 30.00 },
                    Point { x: 31.00, y: 30.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 39.00, y: 24.00 }),
                PathEl::CurveTo(
                    Point { x: 37.34, y: 24.00 },
                    Point { x: 36.00, y: 22.66 },
                    Point { x: 36.00, y: 21.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 36.00, y: 19.34 },
                    Point { x: 37.34, y: 18.00 },
                    Point { x: 39.00, y: 18.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 40.66, y: 18.00 },
                    Point { x: 42.00, y: 19.34 },
                    Point { x: 42.00, y: 21.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 42.00, y: 22.66 },
                    Point { x: 40.66, y: 24.00 },
                    Point { x: 39.00, y: 24.00 },
                ),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct PersonPin {
    size: f64,
    color: Color,
}

impl PersonPin {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for PersonPin {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 38.00, y: 4.00 }),
                PathEl::LineTo(Point { x: 10.00, y: 4.00 }),
                PathEl::CurveTo(
                    Point { x: 7.79, y: 4.00 },
                    Point { x: 6.00, y: 5.79 },
                    Point { x: 6.00, y: 8.00 },
                ),
                PathEl::LineTo(Point { x: 6.00, y: 36.00 }),
                PathEl::CurveTo(
                    Point { x: 6.00, y: 38.21 },
                    Point { x: 7.79, y: 40.00 },
                    Point { x: 10.00, y: 40.00 },
                ),
                PathEl::LineTo(Point { x: 18.00, y: 40.00 }),
                PathEl::LineTo(Point { x: 24.00, y: 46.00 }),
                PathEl::LineTo(Point { x: 30.00, y: 40.00 }),
                PathEl::LineTo(Point { x: 38.00, y: 40.00 }),
                PathEl::CurveTo(
                    Point { x: 40.21, y: 40.00 },
                    Point { x: 42.00, y: 38.21 },
                    Point { x: 42.00, y: 36.00 },
                ),
                PathEl::LineTo(Point { x: 42.00, y: 8.00 }),
                PathEl::CurveTo(
                    Point { x: 42.00, y: 5.79 },
                    Point { x: 40.21, y: 4.00 },
                    Point { x: 38.00, y: 4.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 24.00, y: 10.60 }),
                PathEl::CurveTo(
                    Point { x: 26.98, y: 10.60 },
                    Point { x: 29.40, y: 13.02 },
                    Point { x: 29.40, y: 16.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 29.40, y: 18.98 },
                    Point { x: 26.98, y: 21.40 },
                    Point { x: 24.00, y: 21.40 },
                ),
                PathEl::CurveTo(
                    Point { x: 21.02, y: 21.40 },
                    Point { x: 18.60, y: 18.98 },
                    Point { x: 18.60, y: 16.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 18.60, y: 13.02 },
                    Point { x: 21.02, y: 10.60 },
                    Point { x: 24.00, y: 10.60 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 36.00, y: 32.00 }),
                PathEl::LineTo(Point { x: 12.00, y: 32.00 }),
                PathEl::LineTo(Point { x: 12.00, y: 30.20 }),
                PathEl::CurveTo(
                    Point { x: 12.00, y: 26.20 },
                    Point { x: 20.00, y: 24.00 },
                    Point { x: 24.00, y: 24.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 28.00, y: 24.00 },
                    Point { x: 36.00, y: 26.20 },
                    Point { x: 36.00, y: 30.20 },
                ),
                PathEl::LineTo(Point { x: 36.00, y: 32.00 }),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct LayersClear {
    size: f64,
    color: Color,
}

impl LayersClear {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for LayersClear {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 39.62, y: 29.98 }),
                PathEl::LineTo(Point { x: 42.00, y: 28.13 }),
                PathEl::LineTo(Point { x: 39.15, y: 25.28 }),
                PathEl::LineTo(Point { x: 36.77, y: 27.13 }),
                PathEl::LineTo(Point { x: 39.62, y: 29.98 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 38.73, y: 20.55 }),
                PathEl::LineTo(Point { x: 42.00, y: 18.00 }),
                PathEl::LineTo(Point { x: 24.00, y: 4.00 }),
                PathEl::LineTo(Point { x: 18.17, y: 8.53 }),
                PathEl::LineTo(Point { x: 33.92, y: 24.28 }),
                PathEl::LineTo(Point { x: 38.73, y: 20.55 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 6.55, y: 2.00 }),
                PathEl::LineTo(Point { x: 4.00, y: 4.55 }),
                PathEl::LineTo(Point { x: 12.44, y: 12.99 }),
                PathEl::LineTo(Point { x: 6.00, y: 18.00 }),
                PathEl::LineTo(Point { x: 9.26, y: 20.53 }),
                PathEl::LineTo(Point { x: 24.00, y: 32.00 }),
                PathEl::LineTo(Point { x: 28.19, y: 28.74 }),
                PathEl::LineTo(Point { x: 31.04, y: 31.59 }),
                PathEl::LineTo(Point { x: 23.98, y: 37.08 }),
                PathEl::LineTo(Point { x: 9.24, y: 25.61 }),
                PathEl::LineTo(Point { x: 6.00, y: 28.13 }),
                PathEl::LineTo(Point { x: 24.00, y: 42.13 }),
                PathEl::LineTo(Point { x: 33.89, y: 34.43 }),
                PathEl::LineTo(Point { x: 41.46, y: 42.00 }),
                PathEl::LineTo(Point { x: 44.00, y: 39.45 }),
                PathEl::LineTo(Point { x: 6.55, y: 2.00 }),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct LowPriority {
    size: f64,
    color: Color,
}

impl LowPriority {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for LowPriority {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 28.00, y: 10.00 }),
                PathEl::LineTo(Point { x: 44.00, y: 10.00 }),
                PathEl::LineTo(Point { x: 44.00, y: 14.00 }),
                PathEl::LineTo(Point { x: 28.00, y: 14.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 28.00, y: 21.00 }),
                PathEl::LineTo(Point { x: 44.00, y: 21.00 }),
                PathEl::LineTo(Point { x: 44.00, y: 25.00 }),
                PathEl::LineTo(Point { x: 28.00, y: 25.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 28.00, y: 32.00 }),
                PathEl::LineTo(Point { x: 44.00, y: 32.00 }),
                PathEl::LineTo(Point { x: 44.00, y: 36.00 }),
                PathEl::LineTo(Point { x: 28.00, y: 36.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 4.00, y: 23.00 }),
                PathEl::CurveTo(
                    Point { x: 4.00, y: 30.17 },
                    Point { x: 9.83, y: 36.00 },
                    Point { x: 17.00, y: 36.00 },
                ),
                PathEl::LineTo(Point { x: 18.00, y: 36.00 }),
                PathEl::LineTo(Point { x: 18.00, y: 40.00 }),
                PathEl::LineTo(Point { x: 24.00, y: 34.00 }),
                PathEl::LineTo(Point { x: 18.00, y: 28.00 }),
                PathEl::LineTo(Point { x: 18.00, y: 32.00 }),
                PathEl::LineTo(Point { x: 17.00, y: 32.00 }),
                PathEl::CurveTo(
                    Point { x: 12.04, y: 32.00 },
                    Point { x: 8.00, y: 27.96 },
                    Point { x: 8.00, y: 23.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 8.00, y: 18.04 },
                    Point { x: 12.04, y: 14.00 },
                    Point { x: 17.00, y: 14.00 },
                ),
                PathEl::LineTo(Point { x: 24.00, y: 14.00 }),
                PathEl::LineTo(Point { x: 24.00, y: 10.00 }),
                PathEl::LineTo(Point { x: 17.00, y: 10.00 }),
                PathEl::CurveTo(
                    Point { x: 9.83, y: 10.00 },
                    Point { x: 4.00, y: 15.83 },
                    Point { x: 4.00, y: 23.00 },
                ),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct Flip {
    size: f64,
    color: Color,
}

impl Flip {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for Flip {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 30.00, y: 42.00 }),
                PathEl::LineTo(Point { x: 34.00, y: 42.00 }),
                PathEl::LineTo(Point { x: 34.00, y: 38.00 }),
                PathEl::LineTo(Point { x: 30.00, y: 38.00 }),
                PathEl::LineTo(Point { x: 30.00, y: 42.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 38.00, y: 18.00 }),
                PathEl::LineTo(Point { x: 42.00, y: 18.00 }),
                PathEl::LineTo(Point { x: 42.00, y: 14.00 }),
                PathEl::LineTo(Point { x: 38.00, y: 14.00 }),
                PathEl::LineTo(Point { x: 38.00, y: 18.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 6.00, y: 10.00 }),
                PathEl::LineTo(Point { x: 6.00, y: 38.00 }),
                PathEl::CurveTo(
                    Point { x: 6.00, y: 40.21 },
                    Point { x: 7.79, y: 42.00 },
                    Point { x: 10.00, y: 42.00 },
                ),
                PathEl::LineTo(Point { x: 18.00, y: 42.00 }),
                PathEl::LineTo(Point { x: 18.00, y: 38.00 }),
                PathEl::LineTo(Point { x: 10.00, y: 38.00 }),
                PathEl::LineTo(Point { x: 10.00, y: 10.00 }),
                PathEl::LineTo(Point { x: 18.00, y: 10.00 }),
                PathEl::LineTo(Point { x: 18.00, y: 6.00 }),
                PathEl::LineTo(Point { x: 10.00, y: 6.00 }),
                PathEl::CurveTo(
                    Point { x: 7.79, y: 6.00 },
                    Point { x: 6.00, y: 7.79 },
                    Point { x: 6.00, y: 10.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 38.00, y: 6.00 }),
                PathEl::LineTo(Point { x: 38.00, y: 10.00 }),
                PathEl::LineTo(Point { x: 42.00, y: 10.00 }),
                PathEl::CurveTo(
                    Point { x: 42.00, y: 7.79 },
                    Point { x: 40.21, y: 6.00 },
                    Point { x: 38.00, y: 6.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 22.00, y: 46.00 }),
                PathEl::LineTo(Point { x: 26.00, y: 46.00 }),
                PathEl::LineTo(Point { x: 26.00, y: 2.00 }),
                PathEl::LineTo(Point { x: 22.00, y: 2.00 }),
                PathEl::LineTo(Point { x: 22.00, y: 46.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 38.00, y: 34.00 }),
                PathEl::LineTo(Point { x: 42.00, y: 34.00 }),
                PathEl::LineTo(Point { x: 42.00, y: 30.00 }),
                PathEl::LineTo(Point { x: 38.00, y: 30.00 }),
                PathEl::LineTo(Point { x: 38.00, y: 34.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 30.00, y: 10.00 }),
                PathEl::LineTo(Point { x: 34.00, y: 10.00 }),
                PathEl::LineTo(Point { x: 34.00, y: 6.00 }),
                PathEl::LineTo(Point { x: 30.00, y: 6.00 }),
                PathEl::LineTo(Point { x: 30.00, y: 10.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 38.00, y: 26.00 }),
                PathEl::LineTo(Point { x: 42.00, y: 26.00 }),
                PathEl::LineTo(Point { x: 42.00, y: 22.00 }),
                PathEl::LineTo(Point { x: 38.00, y: 22.00 }),
                PathEl::LineTo(Point { x: 38.00, y: 26.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 38.00, y: 42.00 }),
                PathEl::CurveTo(
                    Point { x: 40.21, y: 42.00 },
                    Point { x: 42.00, y: 40.21 },
                    Point { x: 42.00, y: 38.00 },
                ),
                PathEl::LineTo(Point { x: 38.00, y: 38.00 }),
                PathEl::LineTo(Point { x: 38.00, y: 42.00 }),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct Assessment {
    size: f64,
    color: Color,
}

impl Assessment {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for Assessment {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 38.00, y: 6.00 }),
                PathEl::LineTo(Point { x: 10.00, y: 6.00 }),
                PathEl::CurveTo(
                    Point { x: 7.79, y: 6.00 },
                    Point { x: 6.00, y: 7.79 },
                    Point { x: 6.00, y: 10.00 },
                ),
                PathEl::LineTo(Point { x: 6.00, y: 38.00 }),
                PathEl::CurveTo(
                    Point { x: 6.00, y: 40.21 },
                    Point { x: 7.79, y: 42.00 },
                    Point { x: 10.00, y: 42.00 },
                ),
                PathEl::LineTo(Point { x: 38.00, y: 42.00 }),
                PathEl::CurveTo(
                    Point { x: 40.21, y: 42.00 },
                    Point { x: 42.00, y: 40.21 },
                    Point { x: 42.00, y: 38.00 },
                ),
                PathEl::LineTo(Point { x: 42.00, y: 10.00 }),
                PathEl::CurveTo(
                    Point { x: 42.00, y: 7.79 },
                    Point { x: 40.21, y: 6.00 },
                    Point { x: 38.00, y: 6.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 18.00, y: 34.00 }),
                PathEl::LineTo(Point { x: 14.00, y: 34.00 }),
                PathEl::LineTo(Point { x: 14.00, y: 20.00 }),
                PathEl::LineTo(Point { x: 18.00, y: 20.00 }),
                PathEl::LineTo(Point { x: 18.00, y: 34.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 26.00, y: 34.00 }),
                PathEl::LineTo(Point { x: 22.00, y: 34.00 }),
                PathEl::LineTo(Point { x: 22.00, y: 14.00 }),
                PathEl::LineTo(Point { x: 26.00, y: 14.00 }),
                PathEl::LineTo(Point { x: 26.00, y: 34.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 34.00, y: 34.00 }),
                PathEl::LineTo(Point { x: 30.00, y: 34.00 }),
                PathEl::LineTo(Point { x: 30.00, y: 26.00 }),
                PathEl::LineTo(Point { x: 34.00, y: 26.00 }),
                PathEl::LineTo(Point { x: 34.00, y: 34.00 }),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct RemoveShoppingCart {
    size: f64,
    color: Color,
}

impl RemoveShoppingCart {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for RemoveShoppingCart {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 45.46, y: 45.46 }),
                PathEl::LineTo(Point { x: 5.54, y: 5.54 }),
                PathEl::LineTo(Point { x: 4.00, y: 4.00 }),
                PathEl::LineTo(Point { x: 2.54, y: 2.54 }),
                PathEl::LineTo(Point { x: 0.00, y: 5.08 }),
                PathEl::LineTo(Point { x: 8.78, y: 13.86 }),
                PathEl::LineTo(Point { x: 13.20, y: 23.18 }),
                PathEl::LineTo(Point { x: 10.50, y: 28.08 }),
                PathEl::CurveTo(
                    Point { x: 10.18, y: 28.64 },
                    Point { x: 10.00, y: 29.30 },
                    Point { x: 10.00, y: 30.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 10.00, y: 32.20 },
                    Point { x: 11.80, y: 34.00 },
                    Point { x: 14.00, y: 34.00 },
                ),
                PathEl::LineTo(Point { x: 28.92, y: 34.00 }),
                PathEl::LineTo(Point { x: 31.68, y: 36.76 }),
                PathEl::CurveTo(
                    Point { x: 30.68, y: 37.49 },
                    Point { x: 30.02, y: 38.67 },
                    Point { x: 30.02, y: 40.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 30.02, y: 42.20 },
                    Point { x: 31.80, y: 44.00 },
                    Point { x: 34.00, y: 44.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 35.33, y: 44.00 },
                    Point { x: 36.51, y: 43.33 },
                    Point { x: 37.24, y: 42.32 },
                ),
                PathEl::LineTo(Point { x: 42.92, y: 48.00 }),
                PathEl::LineTo(Point { x: 45.46, y: 45.46 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 14.84, y: 30.00 }),
                PathEl::CurveTo(
                    Point { x: 14.56, y: 30.00 },
                    Point { x: 14.34, y: 29.78 },
                    Point { x: 14.34, y: 29.50 },
                ),
                PathEl::LineTo(Point { x: 14.40, y: 29.26 }),
                PathEl::LineTo(Point { x: 16.20, y: 26.00 }),
                PathEl::LineTo(Point { x: 20.92, y: 26.00 }),
                PathEl::LineTo(Point { x: 24.92, y: 30.00 }),
                PathEl::LineTo(Point { x: 14.84, y: 30.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 31.10, y: 26.00 }),
                PathEl::CurveTo(
                    Point { x: 32.60, y: 26.00 },
                    Point { x: 33.92, y: 25.18 },
                    Point { x: 34.60, y: 23.94 },
                ),
                PathEl::LineTo(Point { x: 41.76, y: 10.96 }),
                PathEl::CurveTo(
                    Point { x: 41.92, y: 10.68 },
                    Point { x: 42.00, y: 10.34 },
                    Point { x: 42.00, y: 10.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 42.00, y: 8.90 },
                    Point { x: 41.10, y: 8.00 },
                    Point { x: 40.00, y: 8.00 },
                ),
                PathEl::LineTo(Point { x: 13.08, y: 8.00 }),
                PathEl::LineTo(Point { x: 31.08, y: 26.00 }),
                PathEl::LineTo(Point { x: 31.10, y: 26.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 14.00, y: 36.00 }),
                PathEl::CurveTo(
                    Point { x: 11.80, y: 36.00 },
                    Point { x: 10.02, y: 37.80 },
                    Point { x: 10.02, y: 40.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 10.02, y: 42.20 },
                    Point { x: 11.80, y: 44.00 },
                    Point { x: 14.00, y: 44.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 16.20, y: 44.00 },
                    Point { x: 18.00, y: 42.20 },
                    Point { x: 18.00, y: 40.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 18.00, y: 37.80 },
                    Point { x: 16.20, y: 36.00 },
                    Point { x: 14.00, y: 36.00 },
                ),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct LightbulbOutline {
    size: f64,
    color: Color,
}

impl LightbulbOutline {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for LightbulbOutline {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 18.00, y: 42.00 }),
                PathEl::CurveTo(
                    Point { x: 18.00, y: 43.10 },
                    Point { x: 18.90, y: 44.00 },
                    Point { x: 20.00, y: 44.00 },
                ),
                PathEl::LineTo(Point { x: 28.00, y: 44.00 }),
                PathEl::CurveTo(
                    Point { x: 29.10, y: 44.00 },
                    Point { x: 30.00, y: 43.10 },
                    Point { x: 30.00, y: 42.00 },
                ),
                PathEl::LineTo(Point { x: 30.00, y: 40.00 }),
                PathEl::LineTo(Point { x: 18.00, y: 40.00 }),
                PathEl::LineTo(Point { x: 18.00, y: 42.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 24.00, y: 4.00 }),
                PathEl::CurveTo(
                    Point { x: 16.27, y: 4.00 },
                    Point { x: 10.00, y: 10.27 },
                    Point { x: 10.00, y: 18.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 10.00, y: 22.76 },
                    Point { x: 12.38, y: 26.95 },
                    Point { x: 16.00, y: 29.48 },
                ),
                PathEl::LineTo(Point { x: 16.00, y: 34.00 }),
                PathEl::CurveTo(
                    Point { x: 16.00, y: 35.10 },
                    Point { x: 16.90, y: 36.00 },
                    Point { x: 18.00, y: 36.00 },
                ),
                PathEl::LineTo(Point { x: 30.00, y: 36.00 }),
                PathEl::CurveTo(
                    Point { x: 31.10, y: 36.00 },
                    Point { x: 32.00, y: 35.10 },
                    Point { x: 32.00, y: 34.00 },
                ),
                PathEl::LineTo(Point { x: 32.00, y: 29.48 }),
                PathEl::CurveTo(
                    Point { x: 35.62, y: 26.95 },
                    Point { x: 38.00, y: 22.76 },
                    Point { x: 38.00, y: 18.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 38.00, y: 10.27 },
                    Point { x: 31.73, y: 4.00 },
                    Point { x: 24.00, y: 4.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 29.71, y: 26.20 }),
                PathEl::LineTo(Point { x: 28.00, y: 27.39 }),
                PathEl::LineTo(Point { x: 28.00, y: 32.00 }),
                PathEl::LineTo(Point { x: 20.00, y: 32.00 }),
                PathEl::LineTo(Point { x: 20.00, y: 27.40 }),
                PathEl::LineTo(Point { x: 18.29, y: 26.21 }),
                PathEl::CurveTo(
                    Point { x: 15.60, y: 24.33 },
                    Point { x: 14.00, y: 21.27 },
                    Point { x: 14.00, y: 18.01 },
                ),
                PathEl::CurveTo(
                    Point { x: 14.00, y: 12.50 },
                    Point { x: 18.49, y: 8.01 },
                    Point { x: 24.00, y: 8.01 },
                ),
                PathEl::CurveTo(
                    Point { x: 29.51, y: 8.01 },
                    Point { x: 34.00, y: 12.50 },
                    Point { x: 34.00, y: 18.01 },
                ),
                PathEl::CurveTo(
                    Point { x: 34.00, y: 21.26 },
                    Point { x: 32.40, y: 24.32 },
                    Point { x: 29.71, y: 26.20 },
                ),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct FiberPin {
    size: f64,
    color: Color,
}

impl FiberPin {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for FiberPin {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 11.00, y: 21.00 }),
                PathEl::LineTo(Point { x: 15.00, y: 21.00 }),
                PathEl::LineTo(Point { x: 15.00, y: 23.00 }),
                PathEl::LineTo(Point { x: 11.00, y: 23.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 40.00, y: 8.00 }),
                PathEl::LineTo(Point { x: 8.00, y: 8.00 }),
                PathEl::CurveTo(
                    Point { x: 5.78, y: 8.00 },
                    Point { x: 4.02, y: 9.78 },
                    Point { x: 4.02, y: 12.00 },
                ),
                PathEl::LineTo(Point { x: 4.00, y: 36.00 }),
                PathEl::CurveTo(
                    Point { x: 4.00, y: 38.22 },
                    Point { x: 5.78, y: 40.00 },
                    Point { x: 8.00, y: 40.00 },
                ),
                PathEl::LineTo(Point { x: 40.00, y: 40.00 }),
                PathEl::CurveTo(
                    Point { x: 42.22, y: 40.00 },
                    Point { x: 44.00, y: 38.22 },
                    Point { x: 44.00, y: 36.00 },
                ),
                PathEl::LineTo(Point { x: 44.00, y: 12.00 }),
                PathEl::CurveTo(
                    Point { x: 44.00, y: 9.78 },
                    Point { x: 42.22, y: 8.00 },
                    Point { x: 40.00, y: 8.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 18.00, y: 23.00 }),
                PathEl::CurveTo(
                    Point { x: 18.00, y: 24.70 },
                    Point { x: 16.70, y: 26.00 },
                    Point { x: 15.00, y: 26.00 },
                ),
                PathEl::LineTo(Point { x: 11.00, y: 26.00 }),
                PathEl::LineTo(Point { x: 11.00, y: 30.00 }),
                PathEl::LineTo(Point { x: 8.00, y: 30.00 }),
                PathEl::LineTo(Point { x: 8.00, y: 18.00 }),
                PathEl::LineTo(Point { x: 15.00, y: 18.00 }),
                PathEl::CurveTo(
                    Point { x: 16.70, y: 18.00 },
                    Point { x: 18.00, y: 19.30 },
                    Point { x: 18.00, y: 21.00 },
                ),
                PathEl::LineTo(Point { x: 18.00, y: 23.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 25.00, y: 30.00 }),
                PathEl::LineTo(Point { x: 22.00, y: 30.00 }),
                PathEl::LineTo(Point { x: 22.00, y: 18.00 }),
                PathEl::LineTo(Point { x: 25.00, y: 18.00 }),
                PathEl::LineTo(Point { x: 25.00, y: 30.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 40.00, y: 30.00 }),
                PathEl::LineTo(Point { x: 37.60, y: 30.00 }),
                PathEl::LineTo(Point { x: 32.50, y: 23.00 }),
                PathEl::LineTo(Point { x: 32.50, y: 30.00 }),
                PathEl::LineTo(Point { x: 30.00, y: 30.00 }),
                PathEl::LineTo(Point { x: 30.00, y: 18.00 }),
                PathEl::LineTo(Point { x: 32.50, y: 18.00 }),
                PathEl::LineTo(Point { x: 37.50, y: 25.00 }),
                PathEl::LineTo(Point { x: 37.50, y: 18.00 }),
                PathEl::LineTo(Point { x: 40.00, y: 18.00 }),
                PathEl::LineTo(Point { x: 40.00, y: 30.00 }),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct FormatAlignCenter {
    size: f64,
    color: Color,
}

impl FormatAlignCenter {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for FormatAlignCenter {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 14.00, y: 30.00 }),
                PathEl::LineTo(Point { x: 14.00, y: 34.00 }),
                PathEl::LineTo(Point { x: 34.00, y: 34.00 }),
                PathEl::LineTo(Point { x: 34.00, y: 30.00 }),
                PathEl::LineTo(Point { x: 14.00, y: 30.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 6.00, y: 42.00 }),
                PathEl::LineTo(Point { x: 42.00, y: 42.00 }),
                PathEl::LineTo(Point { x: 42.00, y: 38.00 }),
                PathEl::LineTo(Point { x: 6.00, y: 38.00 }),
                PathEl::LineTo(Point { x: 6.00, y: 42.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 6.00, y: 26.00 }),
                PathEl::LineTo(Point { x: 42.00, y: 26.00 }),
                PathEl::LineTo(Point { x: 42.00, y: 22.00 }),
                PathEl::LineTo(Point { x: 6.00, y: 22.00 }),
                PathEl::LineTo(Point { x: 6.00, y: 26.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 14.00, y: 14.00 }),
                PathEl::LineTo(Point { x: 14.00, y: 18.00 }),
                PathEl::LineTo(Point { x: 34.00, y: 18.00 }),
                PathEl::LineTo(Point { x: 34.00, y: 14.00 }),
                PathEl::LineTo(Point { x: 14.00, y: 14.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 6.00, y: 6.00 }),
                PathEl::LineTo(Point { x: 6.00, y: 10.00 }),
                PathEl::LineTo(Point { x: 42.00, y: 10.00 }),
                PathEl::LineTo(Point { x: 42.00, y: 6.00 }),
                PathEl::LineTo(Point { x: 6.00, y: 6.00 }),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct Spellcheck {
    size: f64,
    color: Color,
}

impl Spellcheck {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for Spellcheck {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 24.89, y: 32.00 }),
                PathEl::LineTo(Point { x: 29.07, y: 32.00 }),
                PathEl::LineTo(Point { x: 18.86, y: 6.00 }),
                PathEl::LineTo(Point { x: 15.15, y: 6.00 }),
                PathEl::LineTo(Point { x: 4.93, y: 32.00 }),
                PathEl::LineTo(Point { x: 9.11, y: 32.00 }),
                PathEl::LineTo(Point { x: 11.36, y: 26.00 }),
                PathEl::LineTo(Point { x: 22.65, y: 26.00 }),
                PathEl::LineTo(Point { x: 24.89, y: 32.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 12.86, y: 22.00 }),
                PathEl::LineTo(Point { x: 17.00, y: 10.95 }),
                PathEl::LineTo(Point { x: 21.14, y: 22.00 }),
                PathEl::LineTo(Point { x: 12.86, y: 22.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 43.17, y: 23.17 }),
                PathEl::LineTo(Point { x: 27.00, y: 39.34 }),
                PathEl::LineTo(Point { x: 19.66, y: 32.00 }),
                PathEl::LineTo(Point { x: 16.83, y: 34.83 }),
                PathEl::LineTo(Point { x: 27.00, y: 45.00 }),
                PathEl::LineTo(Point { x: 46.00, y: 26.00 }),
                PathEl::LineTo(Point { x: 43.17, y: 23.17 }),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct Dock {
    size: f64,
    color: Color,
}

impl Dock {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for Dock {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 16.00, y: 46.00 }),
                PathEl::LineTo(Point { x: 32.00, y: 46.00 }),
                PathEl::LineTo(Point { x: 32.00, y: 42.00 }),
                PathEl::LineTo(Point { x: 16.00, y: 42.00 }),
                PathEl::LineTo(Point { x: 16.00, y: 46.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 32.00, y: 2.02 }),
                PathEl::LineTo(Point { x: 16.00, y: 2.00 }),
                PathEl::CurveTo(
                    Point { x: 13.79, y: 2.00 },
                    Point { x: 12.00, y: 3.79 },
                    Point { x: 12.00, y: 6.00 },
                ),
                PathEl::LineTo(Point { x: 12.00, y: 34.00 }),
                PathEl::CurveTo(
                    Point { x: 12.00, y: 36.21 },
                    Point { x: 13.79, y: 38.00 },
                    Point { x: 16.00, y: 38.00 },
                ),
                PathEl::LineTo(Point { x: 32.00, y: 38.00 }),
                PathEl::CurveTo(
                    Point { x: 34.21, y: 38.00 },
                    Point { x: 36.00, y: 36.21 },
                    Point { x: 36.00, y: 34.00 },
                ),
                PathEl::LineTo(Point { x: 36.00, y: 6.00 }),
                PathEl::CurveTo(
                    Point { x: 36.00, y: 3.79 },
                    Point { x: 34.21, y: 2.02 },
                    Point { x: 32.00, y: 2.02 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 32.00, y: 30.00 }),
                PathEl::LineTo(Point { x: 16.00, y: 30.00 }),
                PathEl::LineTo(Point { x: 16.00, y: 10.00 }),
                PathEl::LineTo(Point { x: 32.00, y: 10.00 }),
                PathEl::LineTo(Point { x: 32.00, y: 30.00 }),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct NearMe {
    size: f64,
    color: Color,
}

impl NearMe {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for NearMe {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 42.00, y: 6.00 }),
                PathEl::LineTo(Point { x: 6.00, y: 21.07 }),
                PathEl::LineTo(Point { x: 6.00, y: 23.04 }),
                PathEl::LineTo(Point { x: 19.67, y: 28.34 }),
                PathEl::LineTo(Point { x: 24.97, y: 42.00 }),
                PathEl::LineTo(Point { x: 26.94, y: 42.00 }),
                PathEl::LineTo(Point { x: 42.00, y: 6.00 }),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct CardGiftcard {
    size: f64,
    color: Color,
}

impl CardGiftcard {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for CardGiftcard {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 40.00, y: 12.00 }),
                PathEl::LineTo(Point { x: 35.63, y: 12.00 }),
                PathEl::CurveTo(
                    Point { x: 35.85, y: 11.37 },
                    Point { x: 36.00, y: 10.70 },
                    Point { x: 36.00, y: 10.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 36.00, y: 6.69 },
                    Point { x: 33.31, y: 4.00 },
                    Point { x: 30.00, y: 4.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 27.91, y: 4.00 },
                    Point { x: 26.07, y: 5.07 },
                    Point { x: 25.00, y: 6.69 },
                ),
                PathEl::LineTo(Point { x: 24.00, y: 8.05 }),
                PathEl::LineTo(Point { x: 23.00, y: 6.69 }),
                PathEl::CurveTo(
                    Point { x: 21.93, y: 5.07 },
                    Point { x: 20.09, y: 4.00 },
                    Point { x: 18.00, y: 4.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 14.69, y: 4.00 },
                    Point { x: 12.00, y: 6.69 },
                    Point { x: 12.00, y: 10.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 12.00, y: 10.70 },
                    Point { x: 12.14, y: 11.37 },
                    Point { x: 12.37, y: 12.00 },
                ),
                PathEl::LineTo(Point { x: 8.00, y: 12.00 }),
                PathEl::CurveTo(
                    Point { x: 5.79, y: 12.00 },
                    Point { x: 4.02, y: 13.79 },
                    Point { x: 4.02, y: 16.00 },
                ),
                PathEl::LineTo(Point { x: 4.00, y: 38.00 }),
                PathEl::CurveTo(
                    Point { x: 4.00, y: 40.21 },
                    Point { x: 5.79, y: 42.00 },
                    Point { x: 8.00, y: 42.00 },
                ),
                PathEl::LineTo(Point { x: 40.00, y: 42.00 }),
                PathEl::CurveTo(
                    Point { x: 42.21, y: 42.00 },
                    Point { x: 44.00, y: 40.21 },
                    Point { x: 44.00, y: 38.00 },
                ),
                PathEl::LineTo(Point { x: 44.00, y: 16.00 }),
                PathEl::CurveTo(
                    Point { x: 44.00, y: 13.79 },
                    Point { x: 42.21, y: 12.00 },
                    Point { x: 40.00, y: 12.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 30.00, y: 8.00 }),
                PathEl::CurveTo(
                    Point { x: 31.10, y: 8.00 },
                    Point { x: 32.00, y: 8.90 },
                    Point { x: 32.00, y: 10.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 32.00, y: 11.10 },
                    Point { x: 31.10, y: 12.00 },
                    Point { x: 30.00, y: 12.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 28.90, y: 12.00 },
                    Point { x: 28.00, y: 11.10 },
                    Point { x: 28.00, y: 10.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 28.00, y: 8.90 },
                    Point { x: 28.90, y: 8.00 },
                    Point { x: 30.00, y: 8.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 18.00, y: 8.00 }),
                PathEl::CurveTo(
                    Point { x: 19.10, y: 8.00 },
                    Point { x: 20.00, y: 8.90 },
                    Point { x: 20.00, y: 10.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 20.00, y: 11.10 },
                    Point { x: 19.10, y: 12.00 },
                    Point { x: 18.00, y: 12.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 16.90, y: 12.00 },
                    Point { x: 16.00, y: 11.10 },
                    Point { x: 16.00, y: 10.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 16.00, y: 8.90 },
                    Point { x: 16.90, y: 8.00 },
                    Point { x: 18.00, y: 8.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 40.00, y: 38.00 }),
                PathEl::LineTo(Point { x: 8.00, y: 38.00 }),
                PathEl::LineTo(Point { x: 8.00, y: 34.00 }),
                PathEl::LineTo(Point { x: 40.00, y: 34.00 }),
                PathEl::LineTo(Point { x: 40.00, y: 38.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 40.00, y: 28.00 }),
                PathEl::LineTo(Point { x: 8.00, y: 28.00 }),
                PathEl::LineTo(Point { x: 8.00, y: 16.00 }),
                PathEl::LineTo(Point { x: 18.16, y: 16.00 }),
                PathEl::LineTo(Point { x: 14.00, y: 21.67 }),
                PathEl::LineTo(Point { x: 17.25, y: 24.00 }),
                PathEl::LineTo(Point { x: 22.00, y: 17.53 }),
                PathEl::LineTo(Point { x: 24.00, y: 14.81 }),
                PathEl::LineTo(Point { x: 26.00, y: 17.53 }),
                PathEl::LineTo(Point { x: 30.75, y: 24.00 }),
                PathEl::LineTo(Point { x: 34.00, y: 21.67 }),
                PathEl::LineTo(Point { x: 29.84, y: 16.00 }),
                PathEl::LineTo(Point { x: 40.00, y: 16.00 }),
                PathEl::LineTo(Point { x: 40.00, y: 28.00 }),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct HourglassEmpty {
    size: f64,
    color: Color,
}

impl HourglassEmpty {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for HourglassEmpty {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 12.00, y: 5.00 }),
                PathEl::LineTo(Point { x: 12.00, y: 15.00 }),
                PathEl::LineTo(Point { x: 21.00, y: 24.00 }),
                PathEl::LineTo(Point { x: 12.00, y: 33.00 }),
                PathEl::LineTo(Point { x: 12.00, y: 43.00 }),
                PathEl::LineTo(Point { x: 36.00, y: 43.00 }),
                PathEl::LineTo(Point { x: 36.00, y: 33.00 }),
                PathEl::LineTo(Point { x: 27.00, y: 24.00 }),
                PathEl::LineTo(Point { x: 36.00, y: 15.00 }),
                PathEl::LineTo(Point { x: 36.00, y: 5.00 }),
                PathEl::LineTo(Point { x: 12.00, y: 5.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 32.00, y: 34.00 }),
                PathEl::LineTo(Point { x: 32.00, y: 39.00 }),
                PathEl::LineTo(Point { x: 16.00, y: 39.00 }),
                PathEl::LineTo(Point { x: 16.00, y: 34.00 }),
                PathEl::LineTo(Point { x: 24.00, y: 26.00 }),
                PathEl::LineTo(Point { x: 32.00, y: 34.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 24.00, y: 22.00 }),
                PathEl::LineTo(Point { x: 16.00, y: 14.00 }),
                PathEl::LineTo(Point { x: 16.00, y: 9.00 }),
                PathEl::LineTo(Point { x: 32.00, y: 9.00 }),
                PathEl::LineTo(Point { x: 32.00, y: 14.00 }),
                PathEl::LineTo(Point { x: 24.00, y: 22.00 }),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct MoveToInbox {
    size: f64,
    color: Color,
}

impl MoveToInbox {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for MoveToInbox {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 38.00, y: 6.00 }),
                PathEl::LineTo(Point { x: 9.98, y: 6.00 }),
                PathEl::CurveTo(
                    Point { x: 7.77, y: 6.00 },
                    Point { x: 6.02, y: 7.79 },
                    Point { x: 6.02, y: 10.00 },
                ),
                PathEl::LineTo(Point { x: 6.00, y: 38.00 }),
                PathEl::CurveTo(
                    Point { x: 6.00, y: 40.21 },
                    Point { x: 7.77, y: 42.00 },
                    Point { x: 9.98, y: 42.00 },
                ),
                PathEl::LineTo(Point { x: 38.00, y: 42.00 }),
                PathEl::CurveTo(
                    Point { x: 40.21, y: 42.00 },
                    Point { x: 42.00, y: 40.21 },
                    Point { x: 42.00, y: 38.00 },
                ),
                PathEl::LineTo(Point { x: 42.00, y: 10.00 }),
                PathEl::CurveTo(
                    Point { x: 42.00, y: 7.79 },
                    Point { x: 40.21, y: 6.00 },
                    Point { x: 38.00, y: 6.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 38.00, y: 30.00 }),
                PathEl::LineTo(Point { x: 30.00, y: 30.00 }),
                PathEl::CurveTo(
                    Point { x: 30.00, y: 33.31 },
                    Point { x: 27.31, y: 36.00 },
                    Point { x: 24.00, y: 36.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 20.69, y: 36.00 },
                    Point { x: 18.00, y: 33.31 },
                    Point { x: 18.00, y: 30.00 },
                ),
                PathEl::LineTo(Point { x: 9.98, y: 30.00 }),
                PathEl::LineTo(Point { x: 9.98, y: 10.00 }),
                PathEl::LineTo(Point { x: 38.00, y: 10.00 }),
                PathEl::LineTo(Point { x: 38.00, y: 30.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 32.00, y: 20.00 }),
                PathEl::LineTo(Point { x: 28.00, y: 20.00 }),
                PathEl::LineTo(Point { x: 28.00, y: 14.00 }),
                PathEl::LineTo(Point { x: 20.00, y: 14.00 }),
                PathEl::LineTo(Point { x: 20.00, y: 20.00 }),
                PathEl::LineTo(Point { x: 16.00, y: 20.00 }),
                PathEl::LineTo(Point { x: 24.00, y: 28.00 }),
                PathEl::LineTo(Point { x: 32.00, y: 20.00 }),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct Streetview {
    size: f64,
    color: Color,
}

impl Streetview {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for Streetview {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 25.12, y: 28.66 }),
                PathEl::CurveTo(
                    Point { x: 24.44, y: 29.21 },
                    Point { x: 24.00, y: 30.05 },
                    Point { x: 24.00, y: 31.00 },
                ),
                PathEl::LineTo(Point { x: 24.00, y: 42.00 }),
                PathEl::LineTo(Point { x: 38.00, y: 42.00 }),
                PathEl::CurveTo(
                    Point { x: 40.20, y: 42.00 },
                    Point { x: 42.00, y: 40.20 },
                    Point { x: 42.00, y: 38.00 },
                ),
                PathEl::LineTo(Point { x: 42.00, y: 26.05 }),
                PathEl::CurveTo(
                    Point { x: 40.11, y: 25.38 },
                    Point { x: 38.09, y: 25.00 },
                    Point { x: 36.00, y: 25.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 31.95, y: 25.00 },
                    Point { x: 28.13, y: 26.40 },
                    Point { x: 25.12, y: 28.66 },
                ),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
        ctx.fill(
            Circle {
                center: Point { x: 36.00, y: 12.00 },
                radius: 10.00,
            },
            &brush,
        );
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 23.00, y: 12.00 }),
                PathEl::CurveTo(
                    Point { x: 23.00, y: 9.83 },
                    Point { x: 23.54, y: 7.80 },
                    Point { x: 24.47, y: 6.00 },
                ),
                PathEl::LineTo(Point { x: 10.00, y: 6.00 }),
                PathEl::CurveTo(
                    Point { x: 7.80, y: 6.00 },
                    Point { x: 6.00, y: 7.80 },
                    Point { x: 6.00, y: 10.00 },
                ),
                PathEl::LineTo(Point { x: 6.00, y: 38.00 }),
                PathEl::CurveTo(
                    Point { x: 6.00, y: 39.10 },
                    Point { x: 6.45, y: 40.10 },
                    Point { x: 7.18, y: 40.83 },
                ),
                PathEl::LineTo(Point { x: 26.81, y: 21.20 }),
                PathEl::CurveTo(
                    Point { x: 24.46, y: 18.84 },
                    Point { x: 23.00, y: 15.59 },
                    Point { x: 23.00, y: 12.00 },
                ),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct AssistantPhoto {
    size: f64,
    color: Color,
}

impl AssistantPhoto {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for AssistantPhoto {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 28.80, y: 12.00 }),
                PathEl::LineTo(Point { x: 28.00, y: 8.00 }),
                PathEl::LineTo(Point { x: 10.00, y: 8.00 }),
                PathEl::LineTo(Point { x: 10.00, y: 42.00 }),
                PathEl::LineTo(Point { x: 14.00, y: 42.00 }),
                PathEl::LineTo(Point { x: 14.00, y: 28.00 }),
                PathEl::LineTo(Point { x: 25.20, y: 28.00 }),
                PathEl::LineTo(Point { x: 26.00, y: 32.00 }),
                PathEl::LineTo(Point { x: 40.00, y: 32.00 }),
                PathEl::LineTo(Point { x: 40.00, y: 12.00 }),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct ThumbsUpDown {
    size: f64,
    color: Color,
}

impl ThumbsUpDown {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for ThumbsUpDown {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 24.00, y: 12.00 }),
                PathEl::CurveTo(
                    Point { x: 24.00, y: 10.90 },
                    Point { x: 23.10, y: 10.00 },
                    Point { x: 22.00, y: 10.00 },
                ),
                PathEl::LineTo(Point { x: 11.63, y: 10.00 }),
                PathEl::LineTo(Point { x: 12.96, y: 3.65 }),
                PathEl::CurveTo(
                    Point { x: 12.99, y: 3.50 },
                    Point { x: 13.01, y: 3.34 },
                    Point { x: 13.01, y: 3.18 },
                ),
                PathEl::CurveTo(
                    Point { x: 13.01, y: 2.56 },
                    Point { x: 12.76, y: 2.00 },
                    Point { x: 12.35, y: 1.59 },
                ),
                PathEl::LineTo(Point { x: 10.76, y: 0.00 }),
                PathEl::LineTo(Point { x: 0.88, y: 9.88 }),
                PathEl::CurveTo(
                    Point { x: 0.34, y: 10.42 },
                    Point { x: 0.00, y: 11.17 },
                    Point { x: 0.00, y: 12.00 },
                ),
                PathEl::LineTo(Point { x: 0.00, y: 25.00 }),
                PathEl::CurveTo(
                    Point { x: 0.00, y: 26.66 },
                    Point { x: 1.34, y: 28.00 },
                    Point { x: 3.00, y: 28.00 },
                ),
                PathEl::LineTo(Point { x: 16.50, y: 28.00 }),
                PathEl::CurveTo(
                    Point { x: 17.74, y: 28.00 },
                    Point { x: 18.81, y: 27.25 },
                    Point { x: 19.26, y: 26.17 },
                ),
                PathEl::LineTo(Point { x: 23.79, y: 15.59 }),
                PathEl::CurveTo(
                    Point { x: 23.92, y: 15.25 },
                    Point { x: 24.00, y: 14.89 },
                    Point { x: 24.00, y: 14.50 },
                ),
                PathEl::LineTo(Point { x: 24.00, y: 12.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 45.00, y: 20.00 }),
                PathEl::LineTo(Point { x: 31.50, y: 20.00 }),
                PathEl::CurveTo(
                    Point { x: 30.26, y: 20.00 },
                    Point { x: 29.19, y: 20.75 },
                    Point { x: 28.74, y: 21.83 },
                ),
                PathEl::LineTo(Point { x: 24.21, y: 32.41 }),
                PathEl::CurveTo(
                    Point { x: 24.08, y: 32.75 },
                    Point { x: 24.00, y: 33.11 },
                    Point { x: 24.00, y: 33.50 },
                ),
                PathEl::LineTo(Point { x: 24.00, y: 36.00 }),
                PathEl::CurveTo(
                    Point { x: 24.00, y: 37.10 },
                    Point { x: 24.90, y: 38.00 },
                    Point { x: 26.00, y: 38.00 },
                ),
                PathEl::LineTo(Point { x: 36.37, y: 38.00 }),
                PathEl::LineTo(Point { x: 35.04, y: 44.35 }),
                PathEl::CurveTo(
                    Point { x: 35.01, y: 44.50 },
                    Point { x: 34.99, y: 44.66 },
                    Point { x: 34.99, y: 44.82 },
                ),
                PathEl::CurveTo(
                    Point { x: 34.99, y: 45.44 },
                    Point { x: 35.24, y: 46.00 },
                    Point { x: 35.65, y: 46.41 },
                ),
                PathEl::LineTo(Point { x: 37.24, y: 48.00 }),
                PathEl::LineTo(Point { x: 47.12, y: 38.12 }),
                PathEl::CurveTo(
                    Point { x: 47.66, y: 37.58 },
                    Point { x: 48.00, y: 36.83 },
                    Point { x: 48.00, y: 36.00 },
                ),
                PathEl::LineTo(Point { x: 48.00, y: 23.00 }),
                PathEl::CurveTo(
                    Point { x: 48.00, y: 21.34 },
                    Point { x: 46.66, y: 20.00 },
                    Point { x: 45.00, y: 20.00 },
                ),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct Image {
    size: f64,
    color: Color,
}

impl Image {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for Image {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 42.00, y: 38.00 }),
                PathEl::LineTo(Point { x: 42.00, y: 10.00 }),
                PathEl::CurveTo(
                    Point { x: 42.00, y: 7.79 },
                    Point { x: 40.21, y: 6.00 },
                    Point { x: 38.00, y: 6.00 },
                ),
                PathEl::LineTo(Point { x: 10.00, y: 6.00 }),
                PathEl::CurveTo(
                    Point { x: 7.79, y: 6.00 },
                    Point { x: 6.00, y: 7.79 },
                    Point { x: 6.00, y: 10.00 },
                ),
                PathEl::LineTo(Point { x: 6.00, y: 38.00 }),
                PathEl::CurveTo(
                    Point { x: 6.00, y: 40.21 },
                    Point { x: 7.79, y: 42.00 },
                    Point { x: 10.00, y: 42.00 },
                ),
                PathEl::LineTo(Point { x: 38.00, y: 42.00 }),
                PathEl::CurveTo(
                    Point { x: 40.21, y: 42.00 },
                    Point { x: 42.00, y: 40.21 },
                    Point { x: 42.00, y: 38.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 17.00, y: 27.00 }),
                PathEl::LineTo(Point { x: 22.00, y: 33.01 }),
                PathEl::LineTo(Point { x: 29.00, y: 24.00 }),
                PathEl::LineTo(Point { x: 38.00, y: 36.00 }),
                PathEl::LineTo(Point { x: 10.00, y: 36.00 }),
                PathEl::LineTo(Point { x: 17.00, y: 27.00 }),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct BrightnessAuto {
    size: f64,
    color: Color,
}

impl BrightnessAuto {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for BrightnessAuto {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 21.70, y: 25.30 }),
                PathEl::LineTo(Point { x: 26.30, y: 25.30 }),
                PathEl::LineTo(Point { x: 24.00, y: 18.00 }),
                PathEl::LineTo(Point { x: 21.70, y: 25.30 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 40.00, y: 17.37 }),
                PathEl::LineTo(Point { x: 40.00, y: 8.00 }),
                PathEl::LineTo(Point { x: 30.63, y: 8.00 }),
                PathEl::LineTo(Point { x: 24.00, y: 1.37 }),
                PathEl::LineTo(Point { x: 17.37, y: 8.00 }),
                PathEl::LineTo(Point { x: 8.00, y: 8.00 }),
                PathEl::LineTo(Point { x: 8.00, y: 17.37 }),
                PathEl::LineTo(Point { x: 1.37, y: 24.00 }),
                PathEl::LineTo(Point { x: 8.00, y: 30.63 }),
                PathEl::LineTo(Point { x: 8.00, y: 40.00 }),
                PathEl::LineTo(Point { x: 17.37, y: 40.00 }),
                PathEl::LineTo(Point { x: 24.00, y: 46.63 }),
                PathEl::LineTo(Point { x: 30.63, y: 40.00 }),
                PathEl::LineTo(Point { x: 40.00, y: 40.00 }),
                PathEl::LineTo(Point { x: 40.00, y: 30.63 }),
                PathEl::LineTo(Point { x: 46.63, y: 24.00 }),
                PathEl::LineTo(Point { x: 40.00, y: 17.37 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 28.60, y: 32.00 }),
                PathEl::LineTo(Point { x: 27.20, y: 28.00 }),
                PathEl::LineTo(Point { x: 20.80, y: 28.00 }),
                PathEl::LineTo(Point { x: 19.40, y: 32.00 }),
                PathEl::LineTo(Point { x: 15.60, y: 32.00 }),
                PathEl::LineTo(Point { x: 22.00, y: 14.00 }),
                PathEl::LineTo(Point { x: 26.00, y: 14.00 }),
                PathEl::LineTo(Point { x: 32.40, y: 32.00 }),
                PathEl::LineTo(Point { x: 28.60, y: 32.00 }),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct Timeline {
    size: f64,
    color: Color,
}

impl Timeline {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for Timeline {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 46.00, y: 16.00 }),
                PathEl::CurveTo(
                    Point { x: 46.00, y: 18.20 },
                    Point { x: 44.20, y: 20.00 },
                    Point { x: 42.00, y: 20.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 41.64, y: 20.00 },
                    Point { x: 41.30, y: 19.96 },
                    Point { x: 40.98, y: 19.86 },
                ),
                PathEl::LineTo(Point { x: 33.86, y: 26.96 }),
                PathEl::CurveTo(
                    Point { x: 33.96, y: 27.28 },
                    Point { x: 34.00, y: 27.64 },
                    Point { x: 34.00, y: 28.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 34.00, y: 30.20 },
                    Point { x: 32.20, y: 32.00 },
                    Point { x: 30.00, y: 32.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 27.80, y: 32.00 },
                    Point { x: 26.00, y: 30.20 },
                    Point { x: 26.00, y: 28.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 26.00, y: 27.64 },
                    Point { x: 26.04, y: 27.28 },
                    Point { x: 26.14, y: 26.96 },
                ),
                PathEl::LineTo(Point { x: 21.04, y: 21.86 }),
                PathEl::CurveTo(
                    Point { x: 20.72, y: 21.96 },
                    Point { x: 20.36, y: 22.00 },
                    Point { x: 20.00, y: 22.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 19.64, y: 22.00 },
                    Point { x: 19.28, y: 21.96 },
                    Point { x: 18.96, y: 21.86 },
                ),
                PathEl::LineTo(Point { x: 9.86, y: 30.98 }),
                PathEl::CurveTo(
                    Point { x: 9.96, y: 31.30 },
                    Point { x: 10.00, y: 31.64 },
                    Point { x: 10.00, y: 32.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 10.00, y: 34.20 },
                    Point { x: 8.20, y: 36.00 },
                    Point { x: 6.00, y: 36.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 3.80, y: 36.00 },
                    Point { x: 2.00, y: 34.20 },
                    Point { x: 2.00, y: 32.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 2.00, y: 29.80 },
                    Point { x: 3.80, y: 28.00 },
                    Point { x: 6.00, y: 28.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 6.36, y: 28.00 },
                    Point { x: 6.70, y: 28.04 },
                    Point { x: 7.02, y: 28.14 },
                ),
                PathEl::LineTo(Point { x: 16.14, y: 19.04 }),
                PathEl::CurveTo(
                    Point { x: 16.04, y: 18.72 },
                    Point { x: 16.00, y: 18.36 },
                    Point { x: 16.00, y: 18.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 16.00, y: 15.80 },
                    Point { x: 17.80, y: 14.00 },
                    Point { x: 20.00, y: 14.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 22.20, y: 14.00 },
                    Point { x: 24.00, y: 15.80 },
                    Point { x: 24.00, y: 18.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 24.00, y: 18.36 },
                    Point { x: 23.96, y: 18.72 },
                    Point { x: 23.86, y: 19.04 },
                ),
                PathEl::LineTo(Point { x: 28.96, y: 24.14 }),
                PathEl::CurveTo(
                    Point { x: 29.28, y: 24.04 },
                    Point { x: 29.64, y: 24.00 },
                    Point { x: 30.00, y: 24.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 30.36, y: 24.00 },
                    Point { x: 30.72, y: 24.04 },
                    Point { x: 31.04, y: 24.14 },
                ),
                PathEl::LineTo(Point { x: 38.14, y: 17.02 }),
                PathEl::CurveTo(
                    Point { x: 38.04, y: 16.70 },
                    Point { x: 38.00, y: 16.36 },
                    Point { x: 38.00, y: 16.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 38.00, y: 13.80 },
                    Point { x: 39.80, y: 12.00 },
                    Point { x: 42.00, y: 12.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 44.20, y: 12.00 },
                    Point { x: 46.00, y: 13.80 },
                    Point { x: 46.00, y: 16.00 },
                ),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct ChatBubble {
    size: f64,
    color: Color,
}

impl ChatBubble {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for ChatBubble {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 40.00, y: 4.00 }),
                PathEl::LineTo(Point { x: 8.00, y: 4.00 }),
                PathEl::CurveTo(
                    Point { x: 5.79, y: 4.00 },
                    Point { x: 4.00, y: 5.79 },
                    Point { x: 4.00, y: 8.00 },
                ),
                PathEl::LineTo(Point { x: 4.00, y: 44.00 }),
                PathEl::LineTo(Point { x: 12.00, y: 36.00 }),
                PathEl::LineTo(Point { x: 40.00, y: 36.00 }),
                PathEl::CurveTo(
                    Point { x: 42.21, y: 36.00 },
                    Point { x: 44.00, y: 34.21 },
                    Point { x: 44.00, y: 32.00 },
                ),
                PathEl::LineTo(Point { x: 44.00, y: 8.00 }),
                PathEl::CurveTo(
                    Point { x: 44.00, y: 5.79 },
                    Point { x: 42.21, y: 4.00 },
                    Point { x: 40.00, y: 4.00 },
                ),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct Filter8 {
    size: f64,
    color: Color,
}

impl Filter8 {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for Filter8 {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 6.00, y: 10.00 }),
                PathEl::LineTo(Point { x: 2.00, y: 10.00 }),
                PathEl::LineTo(Point { x: 2.00, y: 42.00 }),
                PathEl::CurveTo(
                    Point { x: 2.00, y: 44.21 },
                    Point { x: 3.79, y: 46.00 },
                    Point { x: 6.00, y: 46.00 },
                ),
                PathEl::LineTo(Point { x: 38.00, y: 46.00 }),
                PathEl::LineTo(Point { x: 38.00, y: 42.00 }),
                PathEl::LineTo(Point { x: 6.00, y: 42.00 }),
                PathEl::LineTo(Point { x: 6.00, y: 10.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 42.00, y: 2.00 }),
                PathEl::LineTo(Point { x: 14.00, y: 2.00 }),
                PathEl::CurveTo(
                    Point { x: 11.79, y: 2.00 },
                    Point { x: 10.00, y: 3.79 },
                    Point { x: 10.00, y: 6.00 },
                ),
                PathEl::LineTo(Point { x: 10.00, y: 34.00 }),
                PathEl::CurveTo(
                    Point { x: 10.00, y: 36.21 },
                    Point { x: 11.79, y: 38.00 },
                    Point { x: 14.00, y: 38.00 },
                ),
                PathEl::LineTo(Point { x: 42.00, y: 38.00 }),
                PathEl::CurveTo(
                    Point { x: 44.21, y: 38.00 },
                    Point { x: 46.00, y: 36.21 },
                    Point { x: 46.00, y: 34.00 },
                ),
                PathEl::LineTo(Point { x: 46.00, y: 6.00 }),
                PathEl::CurveTo(
                    Point { x: 46.00, y: 3.79 },
                    Point { x: 44.21, y: 2.00 },
                    Point { x: 42.00, y: 2.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 42.00, y: 34.00 }),
                PathEl::LineTo(Point { x: 14.00, y: 34.00 }),
                PathEl::LineTo(Point { x: 14.00, y: 6.00 }),
                PathEl::LineTo(Point { x: 42.00, y: 6.00 }),
                PathEl::LineTo(Point { x: 42.00, y: 34.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 26.00, y: 30.00 }),
                PathEl::LineTo(Point { x: 30.00, y: 30.00 }),
                PathEl::CurveTo(
                    Point { x: 32.21, y: 30.00 },
                    Point { x: 34.00, y: 28.21 },
                    Point { x: 34.00, y: 26.00 },
                ),
                PathEl::LineTo(Point { x: 34.00, y: 23.00 }),
                PathEl::CurveTo(
                    Point { x: 34.00, y: 21.34 },
                    Point { x: 32.66, y: 20.00 },
                    Point { x: 31.00, y: 20.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 32.66, y: 20.00 },
                    Point { x: 34.00, y: 18.66 },
                    Point { x: 34.00, y: 17.00 },
                ),
                PathEl::LineTo(Point { x: 34.00, y: 14.00 }),
                PathEl::CurveTo(
                    Point { x: 34.00, y: 11.79 },
                    Point { x: 32.21, y: 10.00 },
                    Point { x: 30.00, y: 10.00 },
                ),
                PathEl::LineTo(Point { x: 26.00, y: 10.00 }),
                PathEl::CurveTo(
                    Point { x: 23.79, y: 10.00 },
                    Point { x: 22.00, y: 11.79 },
                    Point { x: 22.00, y: 14.00 },
                ),
                PathEl::LineTo(Point { x: 22.00, y: 17.00 }),
                PathEl::CurveTo(
                    Point { x: 22.00, y: 18.66 },
                    Point { x: 23.34, y: 20.00 },
                    Point { x: 25.00, y: 20.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 23.34, y: 20.00 },
                    Point { x: 22.00, y: 21.34 },
                    Point { x: 22.00, y: 23.00 },
                ),
                PathEl::LineTo(Point { x: 22.00, y: 26.00 }),
                PathEl::CurveTo(
                    Point { x: 22.00, y: 28.21 },
                    Point { x: 23.79, y: 30.00 },
                    Point { x: 26.00, y: 30.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 26.00, y: 14.00 }),
                PathEl::LineTo(Point { x: 30.00, y: 14.00 }),
                PathEl::LineTo(Point { x: 30.00, y: 18.00 }),
                PathEl::LineTo(Point { x: 26.00, y: 18.00 }),
                PathEl::LineTo(Point { x: 26.00, y: 14.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 26.00, y: 22.00 }),
                PathEl::LineTo(Point { x: 30.00, y: 22.00 }),
                PathEl::LineTo(Point { x: 30.00, y: 26.00 }),
                PathEl::LineTo(Point { x: 26.00, y: 26.00 }),
                PathEl::LineTo(Point { x: 26.00, y: 22.00 }),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct AccountBalanceWallet {
    size: f64,
    color: Color,
}

impl AccountBalanceWallet {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for AccountBalanceWallet {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 42.00, y: 36.00 }),
                PathEl::LineTo(Point { x: 42.00, y: 38.00 }),
                PathEl::CurveTo(
                    Point { x: 42.00, y: 40.21 },
                    Point { x: 40.21, y: 42.00 },
                    Point { x: 38.00, y: 42.00 },
                ),
                PathEl::LineTo(Point { x: 10.00, y: 42.00 }),
                PathEl::CurveTo(
                    Point { x: 7.79, y: 42.00 },
                    Point { x: 6.00, y: 40.21 },
                    Point { x: 6.00, y: 38.00 },
                ),
                PathEl::LineTo(Point { x: 6.00, y: 10.00 }),
                PathEl::CurveTo(
                    Point { x: 6.00, y: 7.79 },
                    Point { x: 7.79, y: 6.00 },
                    Point { x: 10.00, y: 6.00 },
                ),
                PathEl::LineTo(Point { x: 38.00, y: 6.00 }),
                PathEl::CurveTo(
                    Point { x: 40.21, y: 6.00 },
                    Point { x: 42.00, y: 7.79 },
                    Point { x: 42.00, y: 10.00 },
                ),
                PathEl::LineTo(Point { x: 42.00, y: 12.00 }),
                PathEl::LineTo(Point { x: 24.00, y: 12.00 }),
                PathEl::CurveTo(
                    Point { x: 21.79, y: 12.00 },
                    Point { x: 20.00, y: 13.79 },
                    Point { x: 20.00, y: 16.00 },
                ),
                PathEl::LineTo(Point { x: 20.00, y: 32.00 }),
                PathEl::CurveTo(
                    Point { x: 20.00, y: 34.21 },
                    Point { x: 21.79, y: 36.00 },
                    Point { x: 24.00, y: 36.00 },
                ),
                PathEl::LineTo(Point { x: 42.00, y: 36.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 24.00, y: 32.00 }),
                PathEl::LineTo(Point { x: 44.00, y: 32.00 }),
                PathEl::LineTo(Point { x: 44.00, y: 16.00 }),
                PathEl::LineTo(Point { x: 24.00, y: 16.00 }),
                PathEl::LineTo(Point { x: 24.00, y: 32.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 32.00, y: 27.00 }),
                PathEl::CurveTo(
                    Point { x: 30.34, y: 27.00 },
                    Point { x: 29.00, y: 25.66 },
                    Point { x: 29.00, y: 24.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 29.00, y: 22.34 },
                    Point { x: 30.34, y: 21.00 },
                    Point { x: 32.00, y: 21.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 33.66, y: 21.00 },
                    Point { x: 35.00, y: 22.34 },
                    Point { x: 35.00, y: 24.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 35.00, y: 25.66 },
                    Point { x: 33.66, y: 27.00 },
                    Point { x: 32.00, y: 27.00 },
                ),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct LooksTwo {
    size: f64,
    color: Color,
}

impl LooksTwo {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for LooksTwo {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 38.00, y: 6.00 }),
                PathEl::LineTo(Point { x: 10.00, y: 6.00 }),
                PathEl::CurveTo(
                    Point { x: 7.79, y: 6.00 },
                    Point { x: 6.00, y: 7.79 },
                    Point { x: 6.00, y: 10.00 },
                ),
                PathEl::LineTo(Point { x: 6.00, y: 38.00 }),
                PathEl::CurveTo(
                    Point { x: 6.00, y: 40.21 },
                    Point { x: 7.79, y: 42.00 },
                    Point { x: 10.00, y: 42.00 },
                ),
                PathEl::LineTo(Point { x: 38.00, y: 42.00 }),
                PathEl::CurveTo(
                    Point { x: 40.21, y: 42.00 },
                    Point { x: 42.00, y: 40.21 },
                    Point { x: 42.00, y: 38.00 },
                ),
                PathEl::LineTo(Point { x: 42.00, y: 10.00 }),
                PathEl::CurveTo(
                    Point { x: 42.00, y: 7.79 },
                    Point { x: 40.21, y: 6.00 },
                    Point { x: 38.00, y: 6.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 30.00, y: 22.00 }),
                PathEl::CurveTo(
                    Point { x: 30.00, y: 24.21 },
                    Point { x: 28.21, y: 26.00 },
                    Point { x: 26.00, y: 26.00 },
                ),
                PathEl::LineTo(Point { x: 22.00, y: 26.00 }),
                PathEl::LineTo(Point { x: 22.00, y: 30.00 }),
                PathEl::LineTo(Point { x: 30.00, y: 30.00 }),
                PathEl::LineTo(Point { x: 30.00, y: 34.00 }),
                PathEl::LineTo(Point { x: 18.00, y: 34.00 }),
                PathEl::LineTo(Point { x: 18.00, y: 26.00 }),
                PathEl::CurveTo(
                    Point { x: 18.00, y: 23.79 },
                    Point { x: 19.79, y: 22.00 },
                    Point { x: 22.00, y: 22.00 },
                ),
                PathEl::LineTo(Point { x: 26.00, y: 22.00 }),
                PathEl::LineTo(Point { x: 26.00, y: 18.00 }),
                PathEl::LineTo(Point { x: 18.00, y: 18.00 }),
                PathEl::LineTo(Point { x: 18.00, y: 14.00 }),
                PathEl::LineTo(Point { x: 26.00, y: 14.00 }),
                PathEl::CurveTo(
                    Point { x: 28.21, y: 14.00 },
                    Point { x: 30.00, y: 15.79 },
                    Point { x: 30.00, y: 18.00 },
                ),
                PathEl::LineTo(Point { x: 30.00, y: 22.00 }),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct LiveHelp {
    size: f64,
    color: Color,
}

impl LiveHelp {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for LiveHelp {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 38.00, y: 4.00 }),
                PathEl::LineTo(Point { x: 10.00, y: 4.00 }),
                PathEl::CurveTo(
                    Point { x: 7.79, y: 4.00 },
                    Point { x: 6.00, y: 5.79 },
                    Point { x: 6.00, y: 8.00 },
                ),
                PathEl::LineTo(Point { x: 6.00, y: 36.00 }),
                PathEl::CurveTo(
                    Point { x: 6.00, y: 38.21 },
                    Point { x: 7.79, y: 40.00 },
                    Point { x: 10.00, y: 40.00 },
                ),
                PathEl::LineTo(Point { x: 18.00, y: 40.00 }),
                PathEl::LineTo(Point { x: 24.00, y: 46.00 }),
                PathEl::LineTo(Point { x: 30.00, y: 40.00 }),
                PathEl::LineTo(Point { x: 38.00, y: 40.00 }),
                PathEl::CurveTo(
                    Point { x: 40.21, y: 40.00 },
                    Point { x: 42.00, y: 38.21 },
                    Point { x: 42.00, y: 36.00 },
                ),
                PathEl::LineTo(Point { x: 42.00, y: 8.00 }),
                PathEl::CurveTo(
                    Point { x: 42.00, y: 5.79 },
                    Point { x: 40.21, y: 4.00 },
                    Point { x: 38.00, y: 4.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 26.00, y: 36.00 }),
                PathEl::LineTo(Point { x: 22.00, y: 36.00 }),
                PathEl::LineTo(Point { x: 22.00, y: 32.00 }),
                PathEl::LineTo(Point { x: 26.00, y: 32.00 }),
                PathEl::LineTo(Point { x: 26.00, y: 36.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 30.13, y: 20.51 }),
                PathEl::LineTo(Point { x: 28.34, y: 22.35 }),
                PathEl::CurveTo(
                    Point { x: 26.90, y: 23.79 },
                    Point { x: 26.00, y: 25.00 },
                    Point { x: 26.00, y: 28.00 },
                ),
                PathEl::LineTo(Point { x: 22.00, y: 28.00 }),
                PathEl::LineTo(Point { x: 22.00, y: 27.00 }),
                PathEl::CurveTo(
                    Point { x: 22.00, y: 24.79 },
                    Point { x: 22.90, y: 22.79 },
                    Point { x: 24.34, y: 21.34 },
                ),
                PathEl::LineTo(Point { x: 26.83, y: 18.82 }),
                PathEl::CurveTo(
                    Point { x: 27.55, y: 18.10 },
                    Point { x: 28.00, y: 17.10 },
                    Point { x: 28.00, y: 16.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 28.00, y: 13.79 },
                    Point { x: 26.21, y: 12.00 },
                    Point { x: 24.00, y: 12.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 21.79, y: 12.00 },
                    Point { x: 20.00, y: 13.79 },
                    Point { x: 20.00, y: 16.00 },
                ),
                PathEl::LineTo(Point { x: 16.00, y: 16.00 }),
                PathEl::CurveTo(
                    Point { x: 16.00, y: 11.58 },
                    Point { x: 19.58, y: 8.00 },
                    Point { x: 24.00, y: 8.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 28.42, y: 8.00 },
                    Point { x: 32.00, y: 11.58 },
                    Point { x: 32.00, y: 16.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 32.00, y: 17.76 },
                    Point { x: 31.29, y: 19.35 },
                    Point { x: 30.13, y: 20.51 },
                ),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct FavoriteBorder {
    size: f64,
    color: Color,
}

impl FavoriteBorder {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for FavoriteBorder {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 33.00, y: 6.00 }),
                PathEl::CurveTo(
                    Point { x: 29.52, y: 6.00 },
                    Point { x: 26.18, y: 7.62 },
                    Point { x: 24.00, y: 10.17 },
                ),
                PathEl::CurveTo(
                    Point { x: 21.82, y: 7.62 },
                    Point { x: 18.48, y: 6.00 },
                    Point { x: 15.00, y: 6.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 8.83, y: 6.00 },
                    Point { x: 4.00, y: 10.83 },
                    Point { x: 4.00, y: 17.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 4.00, y: 24.55 },
                    Point { x: 10.80, y: 30.72 },
                    Point { x: 21.10, y: 40.07 },
                ),
                PathEl::LineTo(Point { x: 24.00, y: 42.70 }),
                PathEl::LineTo(Point { x: 26.90, y: 40.07 }),
                PathEl::CurveTo(
                    Point { x: 37.20, y: 30.72 },
                    Point { x: 44.00, y: 24.55 },
                    Point { x: 44.00, y: 17.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 44.00, y: 10.83 },
                    Point { x: 39.17, y: 6.00 },
                    Point { x: 33.00, y: 6.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 24.21, y: 37.11 }),
                PathEl::LineTo(Point { x: 24.00, y: 37.30 }),
                PathEl::LineTo(Point { x: 23.79, y: 37.11 }),
                PathEl::CurveTo(
                    Point { x: 14.28, y: 28.48 },
                    Point { x: 8.00, y: 22.78 },
                    Point { x: 8.00, y: 17.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 8.00, y: 13.01 },
                    Point { x: 11.01, y: 10.00 },
                    Point { x: 15.00, y: 10.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 18.08, y: 10.00 },
                    Point { x: 21.08, y: 11.99 },
                    Point { x: 22.13, y: 14.72 },
                ),
                PathEl::LineTo(Point { x: 25.86, y: 14.72 }),
                PathEl::CurveTo(
                    Point { x: 26.92, y: 11.99 },
                    Point { x: 29.92, y: 10.00 },
                    Point { x: 33.00, y: 10.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 36.99, y: 10.00 },
                    Point { x: 40.00, y: 13.01 },
                    Point { x: 40.00, y: 17.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 40.00, y: 22.78 },
                    Point { x: 33.72, y: 28.48 },
                    Point { x: 24.21, y: 37.11 },
                ),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct Looks6 {
    size: f64,
    color: Color,
}

impl Looks6 {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for Looks6 {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 22.00, y: 30.00 }),
                PathEl::LineTo(Point { x: 26.00, y: 30.00 }),
                PathEl::LineTo(Point { x: 26.00, y: 26.00 }),
                PathEl::LineTo(Point { x: 22.00, y: 26.00 }),
                PathEl::LineTo(Point { x: 22.00, y: 30.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 38.00, y: 6.00 }),
                PathEl::LineTo(Point { x: 10.00, y: 6.00 }),
                PathEl::CurveTo(
                    Point { x: 7.79, y: 6.00 },
                    Point { x: 6.00, y: 7.79 },
                    Point { x: 6.00, y: 10.00 },
                ),
                PathEl::LineTo(Point { x: 6.00, y: 38.00 }),
                PathEl::CurveTo(
                    Point { x: 6.00, y: 40.21 },
                    Point { x: 7.79, y: 42.00 },
                    Point { x: 10.00, y: 42.00 },
                ),
                PathEl::LineTo(Point { x: 38.00, y: 42.00 }),
                PathEl::CurveTo(
                    Point { x: 40.21, y: 42.00 },
                    Point { x: 42.00, y: 40.21 },
                    Point { x: 42.00, y: 38.00 },
                ),
                PathEl::LineTo(Point { x: 42.00, y: 10.00 }),
                PathEl::CurveTo(
                    Point { x: 42.00, y: 7.79 },
                    Point { x: 40.21, y: 6.00 },
                    Point { x: 38.00, y: 6.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 30.00, y: 18.00 }),
                PathEl::LineTo(Point { x: 22.00, y: 18.00 }),
                PathEl::LineTo(Point { x: 22.00, y: 22.00 }),
                PathEl::LineTo(Point { x: 26.00, y: 22.00 }),
                PathEl::CurveTo(
                    Point { x: 28.21, y: 22.00 },
                    Point { x: 30.00, y: 23.79 },
                    Point { x: 30.00, y: 26.00 },
                ),
                PathEl::LineTo(Point { x: 30.00, y: 30.00 }),
                PathEl::CurveTo(
                    Point { x: 30.00, y: 32.21 },
                    Point { x: 28.21, y: 34.00 },
                    Point { x: 26.00, y: 34.00 },
                ),
                PathEl::LineTo(Point { x: 22.00, y: 34.00 }),
                PathEl::CurveTo(
                    Point { x: 19.79, y: 34.00 },
                    Point { x: 18.00, y: 32.21 },
                    Point { x: 18.00, y: 30.00 },
                ),
                PathEl::LineTo(Point { x: 18.00, y: 18.00 }),
                PathEl::CurveTo(
                    Point { x: 18.00, y: 15.79 },
                    Point { x: 19.79, y: 14.00 },
                    Point { x: 22.00, y: 14.00 },
                ),
                PathEl::LineTo(Point { x: 30.00, y: 14.00 }),
                PathEl::LineTo(Point { x: 30.00, y: 18.00 }),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct LiveTv {
    size: f64,
    color: Color,
}

impl LiveTv {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for LiveTv {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 42.00, y: 12.00 }),
                PathEl::LineTo(Point { x: 26.83, y: 12.00 }),
                PathEl::LineTo(Point { x: 33.42, y: 5.41 }),
                PathEl::LineTo(Point { x: 32.00, y: 4.00 }),
                PathEl::LineTo(Point { x: 24.00, y: 12.00 }),
                PathEl::LineTo(Point { x: 16.00, y: 4.00 }),
                PathEl::LineTo(Point { x: 14.59, y: 5.41 }),
                PathEl::LineTo(Point { x: 21.17, y: 12.00 }),
                PathEl::LineTo(Point { x: 6.00, y: 12.00 }),
                PathEl::CurveTo(
                    Point { x: 3.79, y: 12.00 },
                    Point { x: 2.00, y: 13.79 },
                    Point { x: 2.00, y: 16.00 },
                ),
                PathEl::LineTo(Point { x: 2.00, y: 40.00 }),
                PathEl::CurveTo(
                    Point { x: 2.00, y: 42.21 },
                    Point { x: 3.79, y: 44.00 },
                    Point { x: 6.00, y: 44.00 },
                ),
                PathEl::LineTo(Point { x: 42.00, y: 44.00 }),
                PathEl::CurveTo(
                    Point { x: 44.21, y: 44.00 },
                    Point { x: 46.00, y: 42.21 },
                    Point { x: 46.00, y: 40.00 },
                ),
                PathEl::LineTo(Point { x: 46.00, y: 16.00 }),
                PathEl::CurveTo(
                    Point { x: 46.00, y: 13.79 },
                    Point { x: 44.21, y: 12.00 },
                    Point { x: 42.00, y: 12.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 42.00, y: 40.00 }),
                PathEl::LineTo(Point { x: 6.00, y: 40.00 }),
                PathEl::LineTo(Point { x: 6.00, y: 16.00 }),
                PathEl::LineTo(Point { x: 42.00, y: 16.00 }),
                PathEl::LineTo(Point { x: 42.00, y: 40.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 18.00, y: 20.00 }),
                PathEl::LineTo(Point { x: 18.00, y: 36.00 }),
                PathEl::LineTo(Point { x: 32.00, y: 28.00 }),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct LockOutline {
    size: f64,
    color: Color,
}

impl LockOutline {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for LockOutline {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 24.00, y: 34.00 }),
                PathEl::CurveTo(
                    Point { x: 26.20, y: 34.00 },
                    Point { x: 28.00, y: 32.20 },
                    Point { x: 28.00, y: 30.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 28.00, y: 27.80 },
                    Point { x: 26.20, y: 26.00 },
                    Point { x: 24.00, y: 26.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 21.80, y: 26.00 },
                    Point { x: 20.00, y: 27.80 },
                    Point { x: 20.00, y: 30.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 20.00, y: 32.20 },
                    Point { x: 21.80, y: 34.00 },
                    Point { x: 24.00, y: 34.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 36.00, y: 16.00 }),
                PathEl::LineTo(Point { x: 34.00, y: 16.00 }),
                PathEl::LineTo(Point { x: 34.00, y: 12.00 }),
                PathEl::CurveTo(
                    Point { x: 34.00, y: 6.48 },
                    Point { x: 29.52, y: 2.00 },
                    Point { x: 24.00, y: 2.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 18.48, y: 2.00 },
                    Point { x: 14.00, y: 6.48 },
                    Point { x: 14.00, y: 12.00 },
                ),
                PathEl::LineTo(Point { x: 14.00, y: 16.00 }),
                PathEl::LineTo(Point { x: 12.00, y: 16.00 }),
                PathEl::CurveTo(
                    Point { x: 9.80, y: 16.00 },
                    Point { x: 8.00, y: 17.80 },
                    Point { x: 8.00, y: 20.00 },
                ),
                PathEl::LineTo(Point { x: 8.00, y: 40.00 }),
                PathEl::CurveTo(
                    Point { x: 8.00, y: 42.20 },
                    Point { x: 9.80, y: 44.00 },
                    Point { x: 12.00, y: 44.00 },
                ),
                PathEl::LineTo(Point { x: 36.00, y: 44.00 }),
                PathEl::CurveTo(
                    Point { x: 38.20, y: 44.00 },
                    Point { x: 40.00, y: 42.20 },
                    Point { x: 40.00, y: 40.00 },
                ),
                PathEl::LineTo(Point { x: 40.00, y: 20.00 }),
                PathEl::CurveTo(
                    Point { x: 40.00, y: 17.80 },
                    Point { x: 38.20, y: 16.00 },
                    Point { x: 36.00, y: 16.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 17.80, y: 12.00 }),
                PathEl::CurveTo(
                    Point { x: 17.80, y: 8.58 },
                    Point { x: 20.58, y: 5.80 },
                    Point { x: 24.00, y: 5.80 },
                ),
                PathEl::CurveTo(
                    Point { x: 27.42, y: 5.80 },
                    Point { x: 30.20, y: 8.58 },
                    Point { x: 30.20, y: 12.00 },
                ),
                PathEl::LineTo(Point { x: 30.20, y: 16.00 }),
                PathEl::LineTo(Point { x: 17.80, y: 16.00 }),
                PathEl::LineTo(Point { x: 17.80, y: 12.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 36.00, y: 40.00 }),
                PathEl::LineTo(Point { x: 12.00, y: 40.00 }),
                PathEl::LineTo(Point { x: 12.00, y: 20.00 }),
                PathEl::LineTo(Point { x: 36.00, y: 20.00 }),
                PathEl::LineTo(Point { x: 36.00, y: 40.00 }),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct Remove {
    size: f64,
    color: Color,
}

impl Remove {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for Remove {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 38.00, y: 26.00 }),
                PathEl::LineTo(Point { x: 10.00, y: 26.00 }),
                PathEl::LineTo(Point { x: 10.00, y: 22.00 }),
                PathEl::LineTo(Point { x: 38.00, y: 22.00 }),
                PathEl::LineTo(Point { x: 38.00, y: 26.00 }),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct Landscape {
    size: f64,
    color: Color,
}

impl Landscape {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for Landscape {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 28.00, y: 12.00 }),
                PathEl::LineTo(Point { x: 20.50, y: 22.00 }),
                PathEl::LineTo(Point { x: 26.20, y: 29.60 }),
                PathEl::LineTo(Point { x: 23.00, y: 32.00 }),
                PathEl::CurveTo(
                    Point { x: 19.62, y: 27.50 },
                    Point { x: 14.00, y: 20.00 },
                    Point { x: 14.00, y: 20.00 },
                ),
                PathEl::LineTo(Point { x: 2.00, y: 36.00 }),
                PathEl::LineTo(Point { x: 46.00, y: 36.00 }),
                PathEl::LineTo(Point { x: 28.00, y: 12.00 }),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct SignalCellularConnectedNoInternet4Bar {
    size: f64,
    color: Color,
}

impl SignalCellularConnectedNoInternet4Bar {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for SignalCellularConnectedNoInternet4Bar {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 40.00, y: 36.00 }),
                PathEl::LineTo(Point { x: 44.00, y: 36.00 }),
                PathEl::LineTo(Point { x: 44.00, y: 20.00 }),
                PathEl::LineTo(Point { x: 40.00, y: 20.00 }),
                PathEl::LineTo(Point { x: 40.00, y: 36.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 40.00, y: 44.00 }),
                PathEl::LineTo(Point { x: 44.00, y: 44.00 }),
                PathEl::LineTo(Point { x: 44.00, y: 40.00 }),
                PathEl::LineTo(Point { x: 40.00, y: 40.00 }),
                PathEl::LineTo(Point { x: 40.00, y: 44.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 4.00, y: 44.00 }),
                PathEl::LineTo(Point { x: 36.00, y: 44.00 }),
                PathEl::LineTo(Point { x: 36.00, y: 16.00 }),
                PathEl::LineTo(Point { x: 44.00, y: 16.00 }),
                PathEl::LineTo(Point { x: 44.00, y: 4.00 }),
                PathEl::LineTo(Point { x: 4.00, y: 44.00 }),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct Send {
    size: f64,
    color: Color,
}

impl Send {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for Send {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 4.02, y: 42.00 }),
                PathEl::LineTo(Point { x: 46.00, y: 24.00 }),
                PathEl::LineTo(Point { x: 4.02, y: 6.00 }),
                PathEl::LineTo(Point { x: 4.00, y: 20.00 }),
                PathEl::LineTo(Point { x: 34.00, y: 24.00 }),
                PathEl::LineTo(Point { x: 4.00, y: 28.00 }),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct LocalMall {
    size: f64,
    color: Color,
}

impl LocalMall {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for LocalMall {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 38.00, y: 12.00 }),
                PathEl::LineTo(Point { x: 34.00, y: 12.00 }),
                PathEl::CurveTo(
                    Point { x: 34.00, y: 6.48 },
                    Point { x: 29.52, y: 2.00 },
                    Point { x: 24.00, y: 2.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 18.48, y: 2.00 },
                    Point { x: 14.00, y: 6.48 },
                    Point { x: 14.00, y: 12.00 },
                ),
                PathEl::LineTo(Point { x: 10.00, y: 12.00 }),
                PathEl::CurveTo(
                    Point { x: 7.79, y: 12.00 },
                    Point { x: 6.02, y: 13.79 },
                    Point { x: 6.02, y: 16.00 },
                ),
                PathEl::LineTo(Point { x: 6.00, y: 40.00 }),
                PathEl::CurveTo(
                    Point { x: 6.00, y: 42.21 },
                    Point { x: 7.79, y: 44.00 },
                    Point { x: 10.00, y: 44.00 },
                ),
                PathEl::LineTo(Point { x: 38.00, y: 44.00 }),
                PathEl::CurveTo(
                    Point { x: 40.21, y: 44.00 },
                    Point { x: 42.00, y: 42.21 },
                    Point { x: 42.00, y: 40.00 },
                ),
                PathEl::LineTo(Point { x: 42.00, y: 16.00 }),
                PathEl::CurveTo(
                    Point { x: 42.00, y: 13.79 },
                    Point { x: 40.21, y: 12.00 },
                    Point { x: 38.00, y: 12.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 24.00, y: 6.00 }),
                PathEl::CurveTo(
                    Point { x: 27.31, y: 6.00 },
                    Point { x: 30.00, y: 8.69 },
                    Point { x: 30.00, y: 12.00 },
                ),
                PathEl::LineTo(Point { x: 18.00, y: 12.00 }),
                PathEl::CurveTo(
                    Point { x: 18.00, y: 8.69 },
                    Point { x: 20.69, y: 6.00 },
                    Point { x: 24.00, y: 6.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 24.00, y: 26.00 }),
                PathEl::CurveTo(
                    Point { x: 18.48, y: 26.00 },
                    Point { x: 14.00, y: 21.52 },
                    Point { x: 14.00, y: 16.00 },
                ),
                PathEl::LineTo(Point { x: 18.00, y: 16.00 }),
                PathEl::CurveTo(
                    Point { x: 18.00, y: 19.31 },
                    Point { x: 20.69, y: 22.00 },
                    Point { x: 24.00, y: 22.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 27.31, y: 22.00 },
                    Point { x: 30.00, y: 19.31 },
                    Point { x: 30.00, y: 16.00 },
                ),
                PathEl::LineTo(Point { x: 34.00, y: 16.00 }),
                PathEl::CurveTo(
                    Point { x: 34.00, y: 21.52 },
                    Point { x: 29.52, y: 26.00 },
                    Point { x: 24.00, y: 26.00 },
                ),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct FiberSmartRecord {
    size: f64,
    color: Color,
}

impl FiberSmartRecord {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for FiberSmartRecord {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            Circle {
                center: Point { x: 34.00, y: 12.00 },
                radius: 16.00,
            },
            &brush,
        );
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 50.00, y: -3.48 }),
                PathEl::LineTo(Point { x: 50.00, y: 0.70 }),
                PathEl::CurveTo(
                    Point { x: 54.66, y: 2.34 },
                    Point { x: 58.00, y: 6.78 },
                    Point { x: 58.00, y: 12.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 58.00, y: 17.22 },
                    Point { x: 54.66, y: 21.66 },
                    Point { x: 50.00, y: 23.30 },
                ),
                PathEl::LineTo(Point { x: 50.00, y: 27.48 }),
                PathEl::CurveTo(
                    Point { x: 56.90, y: 25.70 },
                    Point { x: 62.00, y: 19.46 },
                    Point { x: 62.00, y: 12.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 62.00, y: 4.54 },
                    Point { x: 56.90, y: -1.70 },
                    Point { x: 50.00, y: -3.48 },
                ),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct LocationDisabled {
    size: f64,
    color: Color,
}

impl LocationDisabled {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for LocationDisabled {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 41.88, y: 22.17 }),
                PathEl::CurveTo(
                    Point { x: 40.96, y: 13.83 },
                    Point { x: 34.34, y: 7.21 },
                    Point { x: 26.00, y: 6.29 },
                ),
                PathEl::LineTo(Point { x: 26.00, y: 2.17 }),
                PathEl::LineTo(Point { x: 22.00, y: 2.17 }),
                PathEl::LineTo(Point { x: 22.00, y: 6.29 }),
                PathEl::CurveTo(
                    Point { x: 19.74, y: 6.54 },
                    Point { x: 17.62, y: 7.22 },
                    Point { x: 15.69, y: 8.23 },
                ),
                PathEl::LineTo(Point { x: 18.69, y: 11.23 }),
                PathEl::CurveTo(
                    Point { x: 20.33, y: 10.56 },
                    Point { x: 22.12, y: 10.18 },
                    Point { x: 24.00, y: 10.18 },
                ),
                PathEl::CurveTo(
                    Point { x: 31.73, y: 10.18 },
                    Point { x: 38.00, y: 16.45 },
                    Point { x: 38.00, y: 24.18 },
                ),
                PathEl::CurveTo(
                    Point { x: 38.00, y: 26.06 },
                    Point { x: 37.62, y: 27.85 },
                    Point { x: 36.95, y: 29.49 },
                ),
                PathEl::LineTo(Point { x: 39.95, y: 32.49 }),
                PathEl::CurveTo(
                    Point { x: 40.96, y: 30.56 },
                    Point { x: 41.63, y: 28.44 },
                    Point { x: 41.88, y: 26.18 },
                ),
                PathEl::LineTo(Point { x: 46.00, y: 26.18 }),
                PathEl::LineTo(Point { x: 46.00, y: 22.18 }),
                PathEl::LineTo(Point { x: 41.88, y: 22.18 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 6.00, y: 8.72 }),
                PathEl::LineTo(Point { x: 10.07, y: 12.79 }),
                PathEl::CurveTo(
                    Point { x: 7.93, y: 15.41 },
                    Point { x: 6.50, y: 18.63 },
                    Point { x: 6.11, y: 22.17 },
                ),
                PathEl::LineTo(Point { x: 2.00, y: 22.17 }),
                PathEl::LineTo(Point { x: 2.00, y: 26.17 }),
                PathEl::LineTo(Point { x: 6.12, y: 26.17 }),
                PathEl::CurveTo(
                    Point { x: 7.04, y: 34.51 },
                    Point { x: 13.66, y: 41.13 },
                    Point { x: 22.00, y: 42.05 },
                ),
                PathEl::LineTo(Point { x: 22.00, y: 46.17 }),
                PathEl::LineTo(Point { x: 26.00, y: 46.17 }),
                PathEl::LineTo(Point { x: 26.00, y: 42.05 }),
                PathEl::CurveTo(
                    Point { x: 29.54, y: 41.66 },
                    Point { x: 32.76, y: 40.23 },
                    Point { x: 35.38, y: 38.09 },
                ),
                PathEl::LineTo(Point { x: 39.46, y: 42.17 }),
                PathEl::LineTo(Point { x: 42.00, y: 39.63 }),
                PathEl::LineTo(Point { x: 8.55, y: 6.17 }),
                PathEl::LineTo(Point { x: 6.00, y: 8.72 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 32.53, y: 35.25 }),
                PathEl::CurveTo(
                    Point { x: 30.17, y: 37.07 },
                    Point { x: 27.21, y: 38.17 },
                    Point { x: 24.00, y: 38.17 },
                ),
                PathEl::CurveTo(
                    Point { x: 16.27, y: 38.17 },
                    Point { x: 10.00, y: 31.90 },
                    Point { x: 10.00, y: 24.17 },
                ),
                PathEl::CurveTo(
                    Point { x: 10.00, y: 20.95 },
                    Point { x: 11.10, y: 18.00 },
                    Point { x: 12.92, y: 15.64 },
                ),
                PathEl::LineTo(Point { x: 32.53, y: 35.25 }),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct Power {
    size: f64,
    color: Color,
}

impl Power {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for Power {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 32.02, y: 14.00 }),
                PathEl::LineTo(Point { x: 32.00, y: 14.00 }),
                PathEl::LineTo(Point { x: 32.00, y: 6.00 }),
                PathEl::LineTo(Point { x: 28.00, y: 6.00 }),
                PathEl::LineTo(Point { x: 28.00, y: 14.00 }),
                PathEl::LineTo(Point { x: 20.00, y: 14.00 }),
                PathEl::LineTo(Point { x: 20.00, y: 6.00 }),
                PathEl::LineTo(Point { x: 16.00, y: 6.00 }),
                PathEl::LineTo(Point { x: 16.00, y: 14.00 }),
                PathEl::LineTo(Point { x: 15.98, y: 14.00 }),
                PathEl::CurveTo(
                    Point { x: 14.00, y: 13.99 },
                    Point { x: 12.00, y: 15.99 },
                    Point { x: 12.00, y: 17.99 },
                ),
                PathEl::LineTo(Point { x: 12.00, y: 28.98 }),
                PathEl::LineTo(Point { x: 19.00, y: 36.00 }),
                PathEl::LineTo(Point { x: 19.00, y: 42.00 }),
                PathEl::LineTo(Point { x: 29.00, y: 42.00 }),
                PathEl::LineTo(Point { x: 29.00, y: 36.00 }),
                PathEl::LineTo(Point { x: 36.00, y: 28.97 }),
                PathEl::LineTo(Point { x: 36.00, y: 17.98 }),
                PathEl::CurveTo(
                    Point { x: 36.00, y: 15.99 },
                    Point { x: 34.00, y: 13.99 },
                    Point { x: 32.02, y: 14.00 },
                ),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct NavigateBefore {
    size: f64,
    color: Color,
}

impl NavigateBefore {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for NavigateBefore {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 30.83, y: 14.83 }),
                PathEl::LineTo(Point { x: 28.00, y: 12.00 }),
                PathEl::LineTo(Point { x: 16.00, y: 24.00 }),
                PathEl::LineTo(Point { x: 28.00, y: 36.00 }),
                PathEl::LineTo(Point { x: 30.83, y: 33.17 }),
                PathEl::LineTo(Point { x: 21.66, y: 24.00 }),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct BookmarkBorder {
    size: f64,
    color: Color,
}

impl BookmarkBorder {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for BookmarkBorder {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 34.00, y: 6.00 }),
                PathEl::LineTo(Point { x: 14.00, y: 6.00 }),
                PathEl::CurveTo(
                    Point { x: 11.79, y: 6.00 },
                    Point { x: 10.02, y: 7.79 },
                    Point { x: 10.02, y: 10.00 },
                ),
                PathEl::LineTo(Point { x: 10.00, y: 42.00 }),
                PathEl::LineTo(Point { x: 24.00, y: 36.00 }),
                PathEl::LineTo(Point { x: 38.00, y: 42.00 }),
                PathEl::LineTo(Point { x: 38.00, y: 10.00 }),
                PathEl::CurveTo(
                    Point { x: 38.00, y: 7.79 },
                    Point { x: 36.21, y: 6.00 },
                    Point { x: 34.00, y: 6.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 34.00, y: 36.00 }),
                PathEl::LineTo(Point { x: 24.00, y: 31.65 }),
                PathEl::LineTo(Point { x: 14.00, y: 36.00 }),
                PathEl::LineTo(Point { x: 14.00, y: 10.00 }),
                PathEl::LineTo(Point { x: 34.00, y: 10.00 }),
                PathEl::LineTo(Point { x: 34.00, y: 36.00 }),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct MergeType {
    size: f64,
    color: Color,
}

impl MergeType {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for MergeType {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 34.00, y: 40.83 }),
                PathEl::LineTo(Point { x: 36.83, y: 38.00 }),
                PathEl::LineTo(Point { x: 30.00, y: 31.17 }),
                PathEl::LineTo(Point { x: 27.17, y: 34.00 }),
                PathEl::LineTo(Point { x: 34.00, y: 40.83 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 15.00, y: 16.00 }),
                PathEl::LineTo(Point { x: 22.00, y: 16.00 }),
                PathEl::LineTo(Point { x: 22.00, y: 27.17 }),
                PathEl::LineTo(Point { x: 11.17, y: 38.00 }),
                PathEl::LineTo(Point { x: 14.00, y: 40.83 }),
                PathEl::LineTo(Point { x: 26.00, y: 28.83 }),
                PathEl::LineTo(Point { x: 26.00, y: 16.00 }),
                PathEl::LineTo(Point { x: 33.00, y: 16.00 }),
                PathEl::LineTo(Point { x: 24.00, y: 7.00 }),
                PathEl::LineTo(Point { x: 15.00, y: 16.00 }),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct BorderClear {
    size: f64,
    color: Color,
}

impl BorderClear {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for BorderClear {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 14.00, y: 10.00 }),
                PathEl::LineTo(Point { x: 18.00, y: 10.00 }),
                PathEl::LineTo(Point { x: 18.00, y: 6.00 }),
                PathEl::LineTo(Point { x: 14.00, y: 6.00 }),
                PathEl::LineTo(Point { x: 14.00, y: 10.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 14.00, y: 26.00 }),
                PathEl::LineTo(Point { x: 18.00, y: 26.00 }),
                PathEl::LineTo(Point { x: 18.00, y: 22.00 }),
                PathEl::LineTo(Point { x: 14.00, y: 22.00 }),
                PathEl::LineTo(Point { x: 14.00, y: 26.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 14.00, y: 42.00 }),
                PathEl::LineTo(Point { x: 18.00, y: 42.00 }),
                PathEl::LineTo(Point { x: 18.00, y: 38.00 }),
                PathEl::LineTo(Point { x: 14.00, y: 38.00 }),
                PathEl::LineTo(Point { x: 14.00, y: 42.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 22.00, y: 34.00 }),
                PathEl::LineTo(Point { x: 26.00, y: 34.00 }),
                PathEl::LineTo(Point { x: 26.00, y: 30.00 }),
                PathEl::LineTo(Point { x: 22.00, y: 30.00 }),
                PathEl::LineTo(Point { x: 22.00, y: 34.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 22.00, y: 42.00 }),
                PathEl::LineTo(Point { x: 26.00, y: 42.00 }),
                PathEl::LineTo(Point { x: 26.00, y: 38.00 }),
                PathEl::LineTo(Point { x: 22.00, y: 38.00 }),
                PathEl::LineTo(Point { x: 22.00, y: 42.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 6.00, y: 42.00 }),
                PathEl::LineTo(Point { x: 10.00, y: 42.00 }),
                PathEl::LineTo(Point { x: 10.00, y: 38.00 }),
                PathEl::LineTo(Point { x: 6.00, y: 38.00 }),
                PathEl::LineTo(Point { x: 6.00, y: 42.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 6.00, y: 34.00 }),
                PathEl::LineTo(Point { x: 10.00, y: 34.00 }),
                PathEl::LineTo(Point { x: 10.00, y: 30.00 }),
                PathEl::LineTo(Point { x: 6.00, y: 30.00 }),
                PathEl::LineTo(Point { x: 6.00, y: 34.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 6.00, y: 26.00 }),
                PathEl::LineTo(Point { x: 10.00, y: 26.00 }),
                PathEl::LineTo(Point { x: 10.00, y: 22.00 }),
                PathEl::LineTo(Point { x: 6.00, y: 22.00 }),
                PathEl::LineTo(Point { x: 6.00, y: 26.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 6.00, y: 18.00 }),
                PathEl::LineTo(Point { x: 10.00, y: 18.00 }),
                PathEl::LineTo(Point { x: 10.00, y: 14.00 }),
                PathEl::LineTo(Point { x: 6.00, y: 14.00 }),
                PathEl::LineTo(Point { x: 6.00, y: 18.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 6.00, y: 10.00 }),
                PathEl::LineTo(Point { x: 10.00, y: 10.00 }),
                PathEl::LineTo(Point { x: 10.00, y: 6.00 }),
                PathEl::LineTo(Point { x: 6.00, y: 6.00 }),
                PathEl::LineTo(Point { x: 6.00, y: 10.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 22.00, y: 26.00 }),
                PathEl::LineTo(Point { x: 26.00, y: 26.00 }),
                PathEl::LineTo(Point { x: 26.00, y: 22.00 }),
                PathEl::LineTo(Point { x: 22.00, y: 22.00 }),
                PathEl::LineTo(Point { x: 22.00, y: 26.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 38.00, y: 34.00 }),
                PathEl::LineTo(Point { x: 42.00, y: 34.00 }),
                PathEl::LineTo(Point { x: 42.00, y: 30.00 }),
                PathEl::LineTo(Point { x: 38.00, y: 30.00 }),
                PathEl::LineTo(Point { x: 38.00, y: 34.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 38.00, y: 26.00 }),
                PathEl::LineTo(Point { x: 42.00, y: 26.00 }),
                PathEl::LineTo(Point { x: 42.00, y: 22.00 }),
                PathEl::LineTo(Point { x: 38.00, y: 22.00 }),
                PathEl::LineTo(Point { x: 38.00, y: 26.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 38.00, y: 42.00 }),
                PathEl::LineTo(Point { x: 42.00, y: 42.00 }),
                PathEl::LineTo(Point { x: 42.00, y: 38.00 }),
                PathEl::LineTo(Point { x: 38.00, y: 38.00 }),
                PathEl::LineTo(Point { x: 38.00, y: 42.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 38.00, y: 18.00 }),
                PathEl::LineTo(Point { x: 42.00, y: 18.00 }),
                PathEl::LineTo(Point { x: 42.00, y: 14.00 }),
                PathEl::LineTo(Point { x: 38.00, y: 14.00 }),
                PathEl::LineTo(Point { x: 38.00, y: 18.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 22.00, y: 18.00 }),
                PathEl::LineTo(Point { x: 26.00, y: 18.00 }),
                PathEl::LineTo(Point { x: 26.00, y: 14.00 }),
                PathEl::LineTo(Point { x: 22.00, y: 14.00 }),
                PathEl::LineTo(Point { x: 22.00, y: 18.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 38.00, y: 6.00 }),
                PathEl::LineTo(Point { x: 38.00, y: 10.00 }),
                PathEl::LineTo(Point { x: 42.00, y: 10.00 }),
                PathEl::LineTo(Point { x: 42.00, y: 6.00 }),
                PathEl::LineTo(Point { x: 38.00, y: 6.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 22.00, y: 10.00 }),
                PathEl::LineTo(Point { x: 26.00, y: 10.00 }),
                PathEl::LineTo(Point { x: 26.00, y: 6.00 }),
                PathEl::LineTo(Point { x: 22.00, y: 6.00 }),
                PathEl::LineTo(Point { x: 22.00, y: 10.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 30.00, y: 42.00 }),
                PathEl::LineTo(Point { x: 34.00, y: 42.00 }),
                PathEl::LineTo(Point { x: 34.00, y: 38.00 }),
                PathEl::LineTo(Point { x: 30.00, y: 38.00 }),
                PathEl::LineTo(Point { x: 30.00, y: 42.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 30.00, y: 26.00 }),
                PathEl::LineTo(Point { x: 34.00, y: 26.00 }),
                PathEl::LineTo(Point { x: 34.00, y: 22.00 }),
                PathEl::LineTo(Point { x: 30.00, y: 22.00 }),
                PathEl::LineTo(Point { x: 30.00, y: 26.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 30.00, y: 10.00 }),
                PathEl::LineTo(Point { x: 34.00, y: 10.00 }),
                PathEl::LineTo(Point { x: 34.00, y: 6.00 }),
                PathEl::LineTo(Point { x: 30.00, y: 6.00 }),
                PathEl::LineTo(Point { x: 30.00, y: 10.00 }),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct Group {
    size: f64,
    color: Color,
}

impl Group {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for Group {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 32.00, y: 22.00 }),
                PathEl::CurveTo(
                    Point { x: 35.31, y: 22.00 },
                    Point { x: 37.98, y: 19.31 },
                    Point { x: 37.98, y: 16.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 37.98, y: 12.69 },
                    Point { x: 35.31, y: 10.00 },
                    Point { x: 32.00, y: 10.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 28.69, y: 10.00 },
                    Point { x: 26.00, y: 12.69 },
                    Point { x: 26.00, y: 16.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 26.00, y: 19.31 },
                    Point { x: 28.69, y: 22.00 },
                    Point { x: 32.00, y: 22.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 16.00, y: 22.00 }),
                PathEl::CurveTo(
                    Point { x: 19.31, y: 22.00 },
                    Point { x: 21.98, y: 19.31 },
                    Point { x: 21.98, y: 16.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 21.98, y: 12.69 },
                    Point { x: 19.31, y: 10.00 },
                    Point { x: 16.00, y: 10.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 12.69, y: 10.00 },
                    Point { x: 10.00, y: 12.69 },
                    Point { x: 10.00, y: 16.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 10.00, y: 19.31 },
                    Point { x: 12.69, y: 22.00 },
                    Point { x: 16.00, y: 22.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 16.00, y: 26.00 }),
                PathEl::CurveTo(
                    Point { x: 11.33, y: 26.00 },
                    Point { x: 2.00, y: 28.34 },
                    Point { x: 2.00, y: 33.00 },
                ),
                PathEl::LineTo(Point { x: 2.00, y: 38.00 }),
                PathEl::LineTo(Point { x: 30.00, y: 38.00 }),
                PathEl::LineTo(Point { x: 30.00, y: 33.00 }),
                PathEl::CurveTo(
                    Point { x: 30.00, y: 28.34 },
                    Point { x: 20.67, y: 26.00 },
                    Point { x: 16.00, y: 26.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 32.00, y: 26.00 }),
                PathEl::CurveTo(
                    Point { x: 31.42, y: 26.00 },
                    Point { x: 30.77, y: 26.04 },
                    Point { x: 30.07, y: 26.11 },
                ),
                PathEl::CurveTo(
                    Point { x: 32.39, y: 27.78 },
                    Point { x: 34.00, y: 30.03 },
                    Point { x: 34.00, y: 33.00 },
                ),
                PathEl::LineTo(Point { x: 34.00, y: 38.00 }),
                PathEl::LineTo(Point { x: 46.00, y: 38.00 }),
                PathEl::LineTo(Point { x: 46.00, y: 33.00 }),
                PathEl::CurveTo(
                    Point { x: 46.00, y: 28.34 },
                    Point { x: 36.67, y: 26.00 },
                    Point { x: 32.00, y: 26.00 },
                ),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct PermPhoneMsg {
    size: f64,
    color: Color,
}

impl PermPhoneMsg {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for PermPhoneMsg {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 40.00, y: 31.00 }),
                PathEl::CurveTo(
                    Point { x: 37.51, y: 31.00 },
                    Point { x: 35.10, y: 30.60 },
                    Point { x: 32.86, y: 29.86 },
                ),
                PathEl::CurveTo(
                    Point { x: 32.17, y: 29.64 },
                    Point { x: 31.38, y: 29.80 },
                    Point { x: 30.83, y: 30.35 },
                ),
                PathEl::LineTo(Point { x: 26.43, y: 34.76 }),
                PathEl::CurveTo(
                    Point { x: 20.76, y: 31.88 },
                    Point { x: 16.14, y: 27.25 },
                    Point { x: 13.25, y: 21.59 },
                ),
                PathEl::LineTo(Point { x: 17.65, y: 17.17 }),
                PathEl::CurveTo(
                    Point { x: 18.20, y: 16.62 },
                    Point { x: 18.36, y: 15.83 },
                    Point { x: 18.14, y: 15.14 },
                ),
                PathEl::CurveTo(
                    Point { x: 17.40, y: 12.90 },
                    Point { x: 17.00, y: 10.49 },
                    Point { x: 17.00, y: 8.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 17.00, y: 6.89 },
                    Point { x: 16.11, y: 6.00 },
                    Point { x: 15.00, y: 6.00 },
                ),
                PathEl::LineTo(Point { x: 8.00, y: 6.00 }),
                PathEl::CurveTo(
                    Point { x: 6.90, y: 6.00 },
                    Point { x: 6.00, y: 6.89 },
                    Point { x: 6.00, y: 8.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 6.00, y: 26.78 },
                    Point { x: 21.22, y: 42.00 },
                    Point { x: 40.00, y: 42.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 41.11, y: 42.00 },
                    Point { x: 42.00, y: 41.11 },
                    Point { x: 42.00, y: 40.00 },
                ),
                PathEl::LineTo(Point { x: 42.00, y: 33.00 }),
                PathEl::CurveTo(
                    Point { x: 42.00, y: 31.89 },
                    Point { x: 41.11, y: 31.00 },
                    Point { x: 40.00, y: 31.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 24.00, y: 6.00 }),
                PathEl::LineTo(Point { x: 24.00, y: 26.00 }),
                PathEl::LineTo(Point { x: 30.00, y: 20.00 }),
                PathEl::LineTo(Point { x: 42.00, y: 20.00 }),
                PathEl::LineTo(Point { x: 42.00, y: 6.00 }),
                PathEl::LineTo(Point { x: 24.00, y: 6.00 }),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct CropFree {
    size: f64,
    color: Color,
}

impl CropFree {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for CropFree {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 6.00, y: 10.00 }),
                PathEl::LineTo(Point { x: 6.00, y: 18.00 }),
                PathEl::LineTo(Point { x: 10.00, y: 18.00 }),
                PathEl::LineTo(Point { x: 10.00, y: 10.00 }),
                PathEl::LineTo(Point { x: 18.00, y: 10.00 }),
                PathEl::LineTo(Point { x: 18.00, y: 6.00 }),
                PathEl::LineTo(Point { x: 10.00, y: 6.00 }),
                PathEl::CurveTo(
                    Point { x: 7.79, y: 6.00 },
                    Point { x: 6.00, y: 7.79 },
                    Point { x: 6.00, y: 10.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 10.00, y: 30.00 }),
                PathEl::LineTo(Point { x: 6.00, y: 30.00 }),
                PathEl::LineTo(Point { x: 6.00, y: 38.00 }),
                PathEl::CurveTo(
                    Point { x: 6.00, y: 40.21 },
                    Point { x: 7.79, y: 42.00 },
                    Point { x: 10.00, y: 42.00 },
                ),
                PathEl::LineTo(Point { x: 18.00, y: 42.00 }),
                PathEl::LineTo(Point { x: 18.00, y: 38.00 }),
                PathEl::LineTo(Point { x: 10.00, y: 38.00 }),
                PathEl::LineTo(Point { x: 10.00, y: 30.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 38.00, y: 38.00 }),
                PathEl::LineTo(Point { x: 30.00, y: 38.00 }),
                PathEl::LineTo(Point { x: 30.00, y: 42.00 }),
                PathEl::LineTo(Point { x: 38.00, y: 42.00 }),
                PathEl::CurveTo(
                    Point { x: 40.21, y: 42.00 },
                    Point { x: 42.00, y: 40.21 },
                    Point { x: 42.00, y: 38.00 },
                ),
                PathEl::LineTo(Point { x: 42.00, y: 30.00 }),
                PathEl::LineTo(Point { x: 38.00, y: 30.00 }),
                PathEl::LineTo(Point { x: 38.00, y: 38.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 38.00, y: 6.00 }),
                PathEl::LineTo(Point { x: 30.00, y: 6.00 }),
                PathEl::LineTo(Point { x: 30.00, y: 10.00 }),
                PathEl::LineTo(Point { x: 38.00, y: 10.00 }),
                PathEl::LineTo(Point { x: 38.00, y: 18.00 }),
                PathEl::LineTo(Point { x: 42.00, y: 18.00 }),
                PathEl::LineTo(Point { x: 42.00, y: 10.00 }),
                PathEl::CurveTo(
                    Point { x: 42.00, y: 7.79 },
                    Point { x: 40.21, y: 6.00 },
                    Point { x: 38.00, y: 6.00 },
                ),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct Attachment {
    size: f64,
    color: Color,
}

impl Attachment {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for Attachment {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 15.00, y: 36.00 }),
                PathEl::CurveTo(
                    Point { x: 8.92, y: 36.00 },
                    Point { x: 4.00, y: 31.07 },
                    Point { x: 4.00, y: 25.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 4.00, y: 18.93 },
                    Point { x: 8.92, y: 14.00 },
                    Point { x: 15.00, y: 14.00 },
                ),
                PathEl::LineTo(Point { x: 36.00, y: 14.00 }),
                PathEl::CurveTo(
                    Point { x: 40.42, y: 14.00 },
                    Point { x: 44.00, y: 17.58 },
                    Point { x: 44.00, y: 22.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 44.00, y: 26.42 },
                    Point { x: 40.42, y: 30.00 },
                    Point { x: 36.00, y: 30.00 },
                ),
                PathEl::LineTo(Point { x: 19.00, y: 30.00 }),
                PathEl::CurveTo(
                    Point { x: 16.24, y: 30.00 },
                    Point { x: 14.00, y: 27.76 },
                    Point { x: 14.00, y: 25.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 14.00, y: 22.24 },
                    Point { x: 16.24, y: 20.00 },
                    Point { x: 19.00, y: 20.00 },
                ),
                PathEl::LineTo(Point { x: 34.00, y: 20.00 }),
                PathEl::LineTo(Point { x: 34.00, y: 23.00 }),
                PathEl::LineTo(Point { x: 19.00, y: 23.00 }),
                PathEl::CurveTo(
                    Point { x: 17.90, y: 23.00 },
                    Point { x: 17.00, y: 23.89 },
                    Point { x: 17.00, y: 25.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 17.00, y: 26.11 },
                    Point { x: 17.90, y: 27.00 },
                    Point { x: 19.00, y: 27.00 },
                ),
                PathEl::LineTo(Point { x: 36.00, y: 27.00 }),
                PathEl::CurveTo(
                    Point { x: 38.76, y: 27.00 },
                    Point { x: 41.00, y: 24.76 },
                    Point { x: 41.00, y: 22.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 41.00, y: 19.24 },
                    Point { x: 38.76, y: 17.00 },
                    Point { x: 36.00, y: 17.00 },
                ),
                PathEl::LineTo(Point { x: 15.00, y: 17.00 }),
                PathEl::CurveTo(
                    Point { x: 10.58, y: 17.00 },
                    Point { x: 7.00, y: 20.58 },
                    Point { x: 7.00, y: 25.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 7.00, y: 29.42 },
                    Point { x: 10.58, y: 33.00 },
                    Point { x: 15.00, y: 33.00 },
                ),
                PathEl::LineTo(Point { x: 34.00, y: 33.00 }),
                PathEl::LineTo(Point { x: 34.00, y: 36.00 }),
                PathEl::LineTo(Point { x: 15.00, y: 36.00 }),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct ClearAll {
    size: f64,
    color: Color,
}

impl ClearAll {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for ClearAll {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 10.00, y: 26.00 }),
                PathEl::LineTo(Point { x: 38.00, y: 26.00 }),
                PathEl::LineTo(Point { x: 38.00, y: 22.00 }),
                PathEl::LineTo(Point { x: 10.00, y: 22.00 }),
                PathEl::LineTo(Point { x: 10.00, y: 26.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 6.00, y: 34.00 }),
                PathEl::LineTo(Point { x: 34.00, y: 34.00 }),
                PathEl::LineTo(Point { x: 34.00, y: 30.00 }),
                PathEl::LineTo(Point { x: 6.00, y: 30.00 }),
                PathEl::LineTo(Point { x: 6.00, y: 34.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 14.00, y: 14.00 }),
                PathEl::LineTo(Point { x: 14.00, y: 18.00 }),
                PathEl::LineTo(Point { x: 42.00, y: 18.00 }),
                PathEl::LineTo(Point { x: 42.00, y: 14.00 }),
                PathEl::LineTo(Point { x: 14.00, y: 14.00 }),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct Keyboard {
    size: f64,
    color: Color,
}

impl Keyboard {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for Keyboard {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 40.00, y: 10.00 }),
                PathEl::LineTo(Point { x: 8.00, y: 10.00 }),
                PathEl::CurveTo(
                    Point { x: 5.79, y: 10.00 },
                    Point { x: 4.02, y: 11.79 },
                    Point { x: 4.02, y: 14.00 },
                ),
                PathEl::LineTo(Point { x: 4.00, y: 34.00 }),
                PathEl::CurveTo(
                    Point { x: 4.00, y: 36.21 },
                    Point { x: 5.79, y: 38.00 },
                    Point { x: 8.00, y: 38.00 },
                ),
                PathEl::LineTo(Point { x: 40.00, y: 38.00 }),
                PathEl::CurveTo(
                    Point { x: 42.21, y: 38.00 },
                    Point { x: 44.00, y: 36.21 },
                    Point { x: 44.00, y: 34.00 },
                ),
                PathEl::LineTo(Point { x: 44.00, y: 14.00 }),
                PathEl::CurveTo(
                    Point { x: 44.00, y: 11.79 },
                    Point { x: 42.21, y: 10.00 },
                    Point { x: 40.00, y: 10.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 22.00, y: 16.00 }),
                PathEl::LineTo(Point { x: 26.00, y: 16.00 }),
                PathEl::LineTo(Point { x: 26.00, y: 20.00 }),
                PathEl::LineTo(Point { x: 22.00, y: 20.00 }),
                PathEl::LineTo(Point { x: 22.00, y: 16.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 22.00, y: 22.00 }),
                PathEl::LineTo(Point { x: 26.00, y: 22.00 }),
                PathEl::LineTo(Point { x: 26.00, y: 26.00 }),
                PathEl::LineTo(Point { x: 22.00, y: 26.00 }),
                PathEl::LineTo(Point { x: 22.00, y: 22.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 16.00, y: 16.00 }),
                PathEl::LineTo(Point { x: 20.00, y: 16.00 }),
                PathEl::LineTo(Point { x: 20.00, y: 20.00 }),
                PathEl::LineTo(Point { x: 16.00, y: 20.00 }),
                PathEl::LineTo(Point { x: 16.00, y: 16.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 16.00, y: 22.00 }),
                PathEl::LineTo(Point { x: 20.00, y: 22.00 }),
                PathEl::LineTo(Point { x: 20.00, y: 26.00 }),
                PathEl::LineTo(Point { x: 16.00, y: 26.00 }),
                PathEl::LineTo(Point { x: 16.00, y: 22.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 14.00, y: 26.00 }),
                PathEl::LineTo(Point { x: 10.00, y: 26.00 }),
                PathEl::LineTo(Point { x: 10.00, y: 22.00 }),
                PathEl::LineTo(Point { x: 14.00, y: 22.00 }),
                PathEl::LineTo(Point { x: 14.00, y: 26.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 14.00, y: 20.00 }),
                PathEl::LineTo(Point { x: 10.00, y: 20.00 }),
                PathEl::LineTo(Point { x: 10.00, y: 16.00 }),
                PathEl::LineTo(Point { x: 14.00, y: 16.00 }),
                PathEl::LineTo(Point { x: 14.00, y: 20.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 32.00, y: 34.00 }),
                PathEl::LineTo(Point { x: 16.00, y: 34.00 }),
                PathEl::LineTo(Point { x: 16.00, y: 30.00 }),
                PathEl::LineTo(Point { x: 32.00, y: 30.00 }),
                PathEl::LineTo(Point { x: 32.00, y: 34.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 32.00, y: 26.00 }),
                PathEl::LineTo(Point { x: 28.00, y: 26.00 }),
                PathEl::LineTo(Point { x: 28.00, y: 22.00 }),
                PathEl::LineTo(Point { x: 32.00, y: 22.00 }),
                PathEl::LineTo(Point { x: 32.00, y: 26.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 32.00, y: 20.00 }),
                PathEl::LineTo(Point { x: 28.00, y: 20.00 }),
                PathEl::LineTo(Point { x: 28.00, y: 16.00 }),
                PathEl::LineTo(Point { x: 32.00, y: 16.00 }),
                PathEl::LineTo(Point { x: 32.00, y: 20.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 38.00, y: 26.00 }),
                PathEl::LineTo(Point { x: 34.00, y: 26.00 }),
                PathEl::LineTo(Point { x: 34.00, y: 22.00 }),
                PathEl::LineTo(Point { x: 38.00, y: 22.00 }),
                PathEl::LineTo(Point { x: 38.00, y: 26.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 38.00, y: 20.00 }),
                PathEl::LineTo(Point { x: 34.00, y: 20.00 }),
                PathEl::LineTo(Point { x: 34.00, y: 16.00 }),
                PathEl::LineTo(Point { x: 38.00, y: 16.00 }),
                PathEl::LineTo(Point { x: 38.00, y: 20.00 }),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct BatteryCharging30 {
    size: f64,
    color: Color,
}

impl BatteryCharging30 {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for BatteryCharging30 {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 31.33, y: 8.00 }),
                PathEl::LineTo(Point { x: 28.00, y: 8.00 }),
                PathEl::LineTo(Point { x: 28.00, y: 4.00 }),
                PathEl::LineTo(Point { x: 20.00, y: 4.00 }),
                PathEl::LineTo(Point { x: 20.00, y: 8.00 }),
                PathEl::LineTo(Point { x: 16.67, y: 8.00 }),
                PathEl::CurveTo(
                    Point { x: 15.19, y: 8.00 },
                    Point { x: 14.00, y: 9.19 },
                    Point { x: 14.00, y: 10.67 },
                ),
                PathEl::LineTo(Point { x: 14.00, y: 29.00 }),
                PathEl::LineTo(Point { x: 18.00, y: 29.00 }),
                PathEl::LineTo(Point { x: 26.00, y: 14.00 }),
                PathEl::LineTo(Point { x: 26.00, y: 25.00 }),
                PathEl::LineTo(Point { x: 30.00, y: 25.00 }),
                PathEl::LineTo(Point { x: 27.87, y: 29.00 }),
                PathEl::LineTo(Point { x: 34.00, y: 29.00 }),
                PathEl::LineTo(Point { x: 34.00, y: 10.67 }),
                PathEl::CurveTo(
                    Point { x: 34.00, y: 9.19 },
                    Point { x: 32.81, y: 8.00 },
                    Point { x: 31.33, y: 8.00 },
                ),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 22.00, y: 40.00 }),
                PathEl::LineTo(Point { x: 22.00, y: 29.00 }),
                PathEl::LineTo(Point { x: 14.00, y: 29.00 }),
                PathEl::LineTo(Point { x: 14.00, y: 41.33 }),
                PathEl::CurveTo(
                    Point { x: 14.00, y: 42.80 },
                    Point { x: 15.19, y: 44.00 },
                    Point { x: 16.67, y: 44.00 },
                ),
                PathEl::LineTo(Point { x: 31.34, y: 44.00 }),
                PathEl::CurveTo(
                    Point { x: 32.81, y: 44.00 },
                    Point { x: 34.01, y: 42.81 },
                    Point { x: 34.01, y: 41.33 },
                ),
                PathEl::LineTo(Point { x: 34.01, y: 29.00 }),
                PathEl::LineTo(Point { x: 27.88, y: 29.00 }),
                PathEl::LineTo(Point { x: 22.00, y: 40.00 }),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct FilterFrames {
    size: f64,
    color: Color,
}

impl FilterFrames {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for FilterFrames {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 40.00, y: 8.00 }),
                PathEl::LineTo(Point { x: 32.00, y: 8.00 }),
                PathEl::LineTo(Point { x: 24.00, y: 0.00 }),
                PathEl::LineTo(Point { x: 16.00, y: 8.00 }),
                PathEl::LineTo(Point { x: 8.00, y: 8.00 }),
                PathEl::CurveTo(
                    Point { x: 5.79, y: 8.00 },
                    Point { x: 4.00, y: 9.79 },
                    Point { x: 4.00, y: 12.00 },
                ),
                PathEl::LineTo(Point { x: 4.00, y: 40.00 }),
                PathEl::CurveTo(
                    Point { x: 4.00, y: 42.21 },
                    Point { x: 5.79, y: 44.00 },
                    Point { x: 8.00, y: 44.00 },
                ),
                PathEl::LineTo(Point { x: 40.00, y: 44.00 }),
                PathEl::CurveTo(
                    Point { x: 42.21, y: 44.00 },
                    Point { x: 44.00, y: 42.21 },
                    Point { x: 44.00, y: 40.00 },
                ),
                PathEl::LineTo(Point { x: 44.00, y: 12.00 }),
                PathEl::CurveTo(
                    Point { x: 44.00, y: 9.79 },
                    Point { x: 42.21, y: 8.00 },
                    Point { x: 40.00, y: 8.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 40.00, y: 40.00 }),
                PathEl::LineTo(Point { x: 8.00, y: 40.00 }),
                PathEl::LineTo(Point { x: 8.00, y: 12.00 }),
                PathEl::LineTo(Point { x: 17.03, y: 12.00 }),
                PathEl::LineTo(Point { x: 24.07, y: 5.00 }),
                PathEl::LineTo(Point { x: 31.03, y: 12.00 }),
                PathEl::LineTo(Point { x: 40.00, y: 12.00 }),
                PathEl::LineTo(Point { x: 40.00, y: 40.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 36.00, y: 16.00 }),
                PathEl::LineTo(Point { x: 12.00, y: 16.00 }),
                PathEl::LineTo(Point { x: 12.00, y: 36.00 }),
                PathEl::LineTo(Point { x: 36.00, y: 36.00 }),
            ][..],
            &brush,
        );
    }
}

pub struct ZoomOutMap {
    size: f64,
    color: Color,
}

impl ZoomOutMap {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for ZoomOutMap {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 30.00, y: 6.00 }),
                PathEl::LineTo(Point { x: 34.59, y: 10.59 }),
                PathEl::LineTo(Point { x: 28.83, y: 16.34 }),
                PathEl::LineTo(Point { x: 31.66, y: 19.17 }),
                PathEl::LineTo(Point { x: 37.41, y: 13.41 }),
                PathEl::LineTo(Point { x: 42.00, y: 18.00 }),
                PathEl::LineTo(Point { x: 42.00, y: 6.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 6.00, y: 18.00 }),
                PathEl::LineTo(Point { x: 10.59, y: 13.41 }),
                PathEl::LineTo(Point { x: 16.34, y: 19.17 }),
                PathEl::LineTo(Point { x: 19.17, y: 16.34 }),
                PathEl::LineTo(Point { x: 13.41, y: 10.59 }),
                PathEl::LineTo(Point { x: 18.00, y: 6.00 }),
                PathEl::LineTo(Point { x: 6.00, y: 6.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 18.00, y: 42.00 }),
                PathEl::LineTo(Point { x: 13.41, y: 37.41 }),
                PathEl::LineTo(Point { x: 19.17, y: 31.66 }),
                PathEl::LineTo(Point { x: 16.34, y: 28.83 }),
                PathEl::LineTo(Point { x: 10.59, y: 34.59 }),
                PathEl::LineTo(Point { x: 6.00, y: 30.00 }),
                PathEl::LineTo(Point { x: 6.00, y: 42.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 42.00, y: 30.00 }),
                PathEl::LineTo(Point { x: 37.41, y: 34.59 }),
                PathEl::LineTo(Point { x: 31.66, y: 28.83 }),
                PathEl::LineTo(Point { x: 28.83, y: 31.66 }),
                PathEl::LineTo(Point { x: 34.59, y: 37.41 }),
                PathEl::LineTo(Point { x: 30.00, y: 42.00 }),
                PathEl::LineTo(Point { x: 42.00, y: 42.00 }),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct ViewColumn {
    size: f64,
    color: Color,
}

impl ViewColumn {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for ViewColumn {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 20.00, y: 36.00 }),
                PathEl::LineTo(Point { x: 30.00, y: 36.00 }),
                PathEl::LineTo(Point { x: 30.00, y: 10.00 }),
                PathEl::LineTo(Point { x: 20.00, y: 10.00 }),
                PathEl::LineTo(Point { x: 20.00, y: 36.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 8.00, y: 36.00 }),
                PathEl::LineTo(Point { x: 18.00, y: 36.00 }),
                PathEl::LineTo(Point { x: 18.00, y: 10.00 }),
                PathEl::LineTo(Point { x: 8.00, y: 10.00 }),
                PathEl::LineTo(Point { x: 8.00, y: 36.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 32.00, y: 10.00 }),
                PathEl::LineTo(Point { x: 32.00, y: 36.00 }),
                PathEl::LineTo(Point { x: 42.00, y: 36.00 }),
                PathEl::LineTo(Point { x: 42.00, y: 10.00 }),
                PathEl::LineTo(Point { x: 32.00, y: 10.00 }),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct Bluetooth {
    size: f64,
    color: Color,
}

impl Bluetooth {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for Bluetooth {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 35.41, y: 15.41 }),
                PathEl::LineTo(Point { x: 24.00, y: 4.00 }),
                PathEl::LineTo(Point { x: 22.00, y: 4.00 }),
                PathEl::LineTo(Point { x: 22.00, y: 19.17 }),
                PathEl::LineTo(Point { x: 12.83, y: 10.00 }),
                PathEl::LineTo(Point { x: 10.00, y: 12.83 }),
                PathEl::LineTo(Point { x: 21.17, y: 24.00 }),
                PathEl::LineTo(Point { x: 10.00, y: 35.17 }),
                PathEl::LineTo(Point { x: 12.83, y: 38.00 }),
                PathEl::LineTo(Point { x: 22.00, y: 28.83 }),
                PathEl::LineTo(Point { x: 22.00, y: 44.00 }),
                PathEl::LineTo(Point { x: 24.00, y: 44.00 }),
                PathEl::LineTo(Point { x: 35.41, y: 32.59 }),
                PathEl::LineTo(Point { x: 26.83, y: 24.00 }),
                PathEl::LineTo(Point { x: 35.41, y: 15.41 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 26.00, y: 11.66 }),
                PathEl::LineTo(Point { x: 29.76, y: 15.42 }),
                PathEl::LineTo(Point { x: 26.00, y: 19.17 }),
                PathEl::LineTo(Point { x: 26.00, y: 11.66 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 29.76, y: 32.59 }),
                PathEl::LineTo(Point { x: 26.00, y: 36.34 }),
                PathEl::LineTo(Point { x: 26.00, y: 28.82 }),
                PathEl::LineTo(Point { x: 29.76, y: 32.59 }),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct LocalSee {
    size: f64,
    color: Color,
}

impl LocalSee {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for LocalSee {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            Circle {
                center: Point { x: 24.00, y: 24.00 },
                radius: 6.40,
            },
            &brush,
        );
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 18.00, y: 4.00 }),
                PathEl::LineTo(Point { x: 14.34, y: 8.00 }),
                PathEl::LineTo(Point { x: 8.00, y: 8.00 }),
                PathEl::CurveTo(
                    Point { x: 5.79, y: 8.00 },
                    Point { x: 4.00, y: 9.79 },
                    Point { x: 4.00, y: 12.00 },
                ),
                PathEl::LineTo(Point { x: 4.00, y: 36.00 }),
                PathEl::CurveTo(
                    Point { x: 4.00, y: 38.21 },
                    Point { x: 5.79, y: 40.00 },
                    Point { x: 8.00, y: 40.00 },
                ),
                PathEl::LineTo(Point { x: 40.00, y: 40.00 }),
                PathEl::CurveTo(
                    Point { x: 42.21, y: 40.00 },
                    Point { x: 44.00, y: 38.21 },
                    Point { x: 44.00, y: 36.00 },
                ),
                PathEl::LineTo(Point { x: 44.00, y: 12.00 }),
                PathEl::CurveTo(
                    Point { x: 44.00, y: 9.79 },
                    Point { x: 42.21, y: 8.00 },
                    Point { x: 40.00, y: 8.00 },
                ),
                PathEl::LineTo(Point { x: 33.66, y: 8.00 }),
                PathEl::LineTo(Point { x: 30.00, y: 4.00 }),
                PathEl::LineTo(Point { x: 18.00, y: 4.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 24.00, y: 34.00 }),
                PathEl::CurveTo(
                    Point { x: 18.48, y: 34.00 },
                    Point { x: 14.00, y: 29.52 },
                    Point { x: 14.00, y: 24.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 14.00, y: 18.48 },
                    Point { x: 18.48, y: 14.00 },
                    Point { x: 24.00, y: 14.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 29.52, y: 14.00 },
                    Point { x: 34.00, y: 18.48 },
                    Point { x: 34.00, y: 24.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 34.00, y: 29.52 },
                    Point { x: 29.52, y: 34.00 },
                    Point { x: 24.00, y: 34.00 },
                ),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct Looks {
    size: f64,
    color: Color,
}

impl Looks {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for Looks {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 24.00, y: 20.00 }),
                PathEl::CurveTo(
                    Point { x: 16.28, y: 20.00 },
                    Point { x: 10.00, y: 26.28 },
                    Point { x: 10.00, y: 34.00 },
                ),
                PathEl::LineTo(Point { x: 14.00, y: 34.00 }),
                PathEl::CurveTo(
                    Point { x: 14.00, y: 28.49 },
                    Point { x: 18.49, y: 24.00 },
                    Point { x: 24.00, y: 24.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 29.51, y: 24.00 },
                    Point { x: 34.00, y: 28.49 },
                    Point { x: 34.00, y: 34.00 },
                ),
                PathEl::LineTo(Point { x: 38.00, y: 34.00 }),
                PathEl::CurveTo(
                    Point { x: 38.00, y: 26.28 },
                    Point { x: 31.72, y: 20.00 },
                    Point { x: 24.00, y: 20.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 24.00, y: 12.00 }),
                PathEl::CurveTo(
                    Point { x: 11.87, y: 12.00 },
                    Point { x: 2.00, y: 21.87 },
                    Point { x: 2.00, y: 34.00 },
                ),
                PathEl::LineTo(Point { x: 6.00, y: 34.00 }),
                PathEl::CurveTo(
                    Point { x: 6.00, y: 24.08 },
                    Point { x: 14.08, y: 16.00 },
                    Point { x: 24.00, y: 16.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 33.92, y: 16.00 },
                    Point { x: 42.00, y: 24.08 },
                    Point { x: 42.00, y: 34.00 },
                ),
                PathEl::LineTo(Point { x: 46.00, y: 34.00 }),
                PathEl::CurveTo(
                    Point { x: 46.00, y: 21.87 },
                    Point { x: 36.13, y: 12.00 },
                    Point { x: 24.00, y: 12.00 },
                ),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct Looks5 {
    size: f64,
    color: Color,
}

impl Looks5 {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for Looks5 {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 38.00, y: 6.00 }),
                PathEl::LineTo(Point { x: 10.00, y: 6.00 }),
                PathEl::CurveTo(
                    Point { x: 7.79, y: 6.00 },
                    Point { x: 6.00, y: 7.79 },
                    Point { x: 6.00, y: 10.00 },
                ),
                PathEl::LineTo(Point { x: 6.00, y: 38.00 }),
                PathEl::CurveTo(
                    Point { x: 6.00, y: 40.21 },
                    Point { x: 7.79, y: 42.00 },
                    Point { x: 10.00, y: 42.00 },
                ),
                PathEl::LineTo(Point { x: 38.00, y: 42.00 }),
                PathEl::CurveTo(
                    Point { x: 40.21, y: 42.00 },
                    Point { x: 42.00, y: 40.21 },
                    Point { x: 42.00, y: 38.00 },
                ),
                PathEl::LineTo(Point { x: 42.00, y: 10.00 }),
                PathEl::CurveTo(
                    Point { x: 42.00, y: 7.79 },
                    Point { x: 40.21, y: 6.00 },
                    Point { x: 38.00, y: 6.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 30.00, y: 18.00 }),
                PathEl::LineTo(Point { x: 22.00, y: 18.00 }),
                PathEl::LineTo(Point { x: 22.00, y: 22.00 }),
                PathEl::LineTo(Point { x: 26.00, y: 22.00 }),
                PathEl::CurveTo(
                    Point { x: 28.21, y: 22.00 },
                    Point { x: 30.00, y: 23.79 },
                    Point { x: 30.00, y: 26.00 },
                ),
                PathEl::LineTo(Point { x: 30.00, y: 30.00 }),
                PathEl::CurveTo(
                    Point { x: 30.00, y: 32.21 },
                    Point { x: 28.21, y: 34.00 },
                    Point { x: 26.00, y: 34.00 },
                ),
                PathEl::LineTo(Point { x: 18.00, y: 34.00 }),
                PathEl::LineTo(Point { x: 18.00, y: 30.00 }),
                PathEl::LineTo(Point { x: 26.00, y: 30.00 }),
                PathEl::LineTo(Point { x: 26.00, y: 26.00 }),
                PathEl::LineTo(Point { x: 18.00, y: 26.00 }),
                PathEl::LineTo(Point { x: 18.00, y: 14.00 }),
                PathEl::LineTo(Point { x: 30.00, y: 14.00 }),
                PathEl::LineTo(Point { x: 30.00, y: 18.00 }),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct FolderOpen {
    size: f64,
    color: Color,
}

impl FolderOpen {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for FolderOpen {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 40.00, y: 12.00 }),
                PathEl::LineTo(Point { x: 24.00, y: 12.00 }),
                PathEl::LineTo(Point { x: 20.00, y: 8.00 }),
                PathEl::LineTo(Point { x: 8.00, y: 8.00 }),
                PathEl::CurveTo(
                    Point { x: 5.79, y: 8.00 },
                    Point { x: 4.02, y: 9.79 },
                    Point { x: 4.02, y: 12.00 },
                ),
                PathEl::LineTo(Point { x: 4.00, y: 36.00 }),
                PathEl::CurveTo(
                    Point { x: 4.00, y: 38.21 },
                    Point { x: 5.79, y: 40.00 },
                    Point { x: 8.00, y: 40.00 },
                ),
                PathEl::LineTo(Point { x: 40.00, y: 40.00 }),
                PathEl::CurveTo(
                    Point { x: 42.21, y: 40.00 },
                    Point { x: 44.00, y: 38.21 },
                    Point { x: 44.00, y: 36.00 },
                ),
                PathEl::LineTo(Point { x: 44.00, y: 16.00 }),
                PathEl::CurveTo(
                    Point { x: 44.00, y: 13.79 },
                    Point { x: 42.21, y: 12.00 },
                    Point { x: 40.00, y: 12.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 40.00, y: 36.00 }),
                PathEl::LineTo(Point { x: 8.00, y: 36.00 }),
                PathEl::LineTo(Point { x: 8.00, y: 16.00 }),
                PathEl::LineTo(Point { x: 40.00, y: 16.00 }),
                PathEl::LineTo(Point { x: 40.00, y: 36.00 }),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct Forward30 {
    size: f64,
    color: Color,
}

impl Forward30 {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for Forward30 {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 19.10, y: 27.00 }),
                PathEl::LineTo(Point { x: 20.00, y: 27.00 }),
                PathEl::CurveTo(
                    Point { x: 20.40, y: 27.00 },
                    Point { x: 20.70, y: 26.90 },
                    Point { x: 21.00, y: 26.70 },
                ),
                PathEl::CurveTo(
                    Point { x: 21.30, y: 26.50 },
                    Point { x: 21.30, y: 26.20 },
                    Point { x: 21.30, y: 25.80 },
                ),
                PathEl::CurveTo(
                    Point { x: 21.30, y: 25.60 },
                    Point { x: 21.30, y: 25.50 },
                    Point { x: 21.20, y: 25.40 },
                ),
                PathEl::CurveTo(
                    Point { x: 21.10, y: 25.30 },
                    Point { x: 21.10, y: 25.10 },
                    Point { x: 21.00, y: 25.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 20.90, y: 24.90 },
                    Point { x: 20.80, y: 24.80 },
                    Point { x: 20.60, y: 24.80 },
                ),
                PathEl::CurveTo(
                    Point { x: 20.40, y: 24.80 },
                    Point { x: 20.30, y: 24.70 },
                    Point { x: 20.10, y: 24.70 },
                ),
                PathEl::CurveTo(
                    Point { x: 19.90, y: 24.70 },
                    Point { x: 19.80, y: 24.70 },
                    Point { x: 19.70, y: 24.80 },
                ),
                PathEl::CurveTo(
                    Point { x: 19.60, y: 24.90 },
                    Point { x: 19.40, y: 24.90 },
                    Point { x: 19.30, y: 25.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 19.20, y: 25.10 },
                    Point { x: 19.10, y: 25.20 },
                    Point { x: 19.10, y: 25.30 },
                ),
                PathEl::CurveTo(
                    Point { x: 19.10, y: 25.40 },
                    Point { x: 19.00, y: 25.50 },
                    Point { x: 19.00, y: 25.70 },
                ),
                PathEl::LineTo(Point { x: 17.30, y: 25.70 }),
                PathEl::CurveTo(
                    Point { x: 17.30, y: 25.30 },
                    Point { x: 17.40, y: 25.00 },
                    Point { x: 17.50, y: 24.70 },
                ),
                PathEl::CurveTo(
                    Point { x: 17.60, y: 24.40 },
                    Point { x: 17.80, y: 24.20 },
                    Point { x: 18.10, y: 24.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 18.40, y: 23.80 },
                    Point { x: 18.60, y: 23.60 },
                    Point { x: 19.00, y: 23.50 },
                ),
                PathEl::CurveTo(
                    Point { x: 19.40, y: 23.40 },
                    Point { x: 19.70, y: 23.30 },
                    Point { x: 20.10, y: 23.30 },
                ),
                PathEl::CurveTo(
                    Point { x: 20.50, y: 23.30 },
                    Point { x: 20.90, y: 23.40 },
                    Point { x: 21.30, y: 23.50 },
                ),
                PathEl::CurveTo(
                    Point { x: 21.70, y: 23.60 },
                    Point { x: 22.00, y: 23.80 },
                    Point { x: 22.20, y: 24.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 22.40, y: 24.20 },
                    Point { x: 22.70, y: 24.50 },
                    Point { x: 22.80, y: 24.80 },
                ),
                PathEl::CurveTo(
                    Point { x: 22.90, y: 25.10 },
                    Point { x: 23.00, y: 25.50 },
                    Point { x: 23.00, y: 25.90 },
                ),
                PathEl::CurveTo(
                    Point { x: 23.00, y: 26.10 },
                    Point { x: 23.00, y: 26.30 },
                    Point { x: 22.90, y: 26.40 },
                ),
                PathEl::CurveTo(
                    Point { x: 22.80, y: 26.50 },
                    Point { x: 22.80, y: 26.70 },
                    Point { x: 22.60, y: 26.90 },
                ),
                PathEl::CurveTo(
                    Point { x: 22.40, y: 27.10 },
                    Point { x: 22.40, y: 27.20 },
                    Point { x: 22.20, y: 27.30 },
                ),
                PathEl::CurveTo(
                    Point { x: 22.00, y: 27.40 },
                    Point { x: 21.90, y: 27.50 },
                    Point { x: 21.60, y: 27.60 },
                ),
                PathEl::CurveTo(
                    Point { x: 22.10, y: 27.80 },
                    Point { x: 22.40, y: 28.00 },
                    Point { x: 22.70, y: 28.40 },
                ),
                PathEl::CurveTo(
                    Point { x: 23.00, y: 28.80 },
                    Point { x: 23.10, y: 29.20 },
                    Point { x: 23.10, y: 29.60 },
                ),
                PathEl::CurveTo(
                    Point { x: 23.10, y: 30.00 },
                    Point { x: 23.00, y: 30.40 },
                    Point { x: 22.90, y: 30.70 },
                ),
                PathEl::CurveTo(
                    Point { x: 22.80, y: 31.00 },
                    Point { x: 22.50, y: 31.30 },
                    Point { x: 22.30, y: 31.50 },
                ),
                PathEl::CurveTo(
                    Point { x: 22.10, y: 31.70 },
                    Point { x: 21.70, y: 31.90 },
                    Point { x: 21.30, y: 32.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 20.90, y: 32.10 },
                    Point { x: 20.50, y: 32.20 },
                    Point { x: 20.10, y: 32.20 },
                ),
                PathEl::CurveTo(
                    Point { x: 19.70, y: 32.20 },
                    Point { x: 19.40, y: 32.20 },
                    Point { x: 19.00, y: 32.10 },
                ),
                PathEl::CurveTo(
                    Point { x: 18.60, y: 32.00 },
                    Point { x: 18.30, y: 31.90 },
                    Point { x: 18.10, y: 31.60 },
                ),
                PathEl::CurveTo(
                    Point { x: 17.90, y: 31.30 },
                    Point { x: 17.60, y: 31.10 },
                    Point { x: 17.40, y: 30.80 },
                ),
                PathEl::CurveTo(
                    Point { x: 17.20, y: 30.50 },
                    Point { x: 17.20, y: 30.10 },
                    Point { x: 17.20, y: 29.70 },
                ),
                PathEl::LineTo(Point { x: 18.90, y: 29.70 }),
                PathEl::CurveTo(
                    Point { x: 18.90, y: 29.90 },
                    Point { x: 18.90, y: 30.00 },
                    Point { x: 19.00, y: 30.10 },
                ),
                PathEl::CurveTo(
                    Point { x: 19.10, y: 30.20 },
                    Point { x: 19.10, y: 30.30 },
                    Point { x: 19.30, y: 30.40 },
                ),
                PathEl::CurveTo(
                    Point { x: 19.50, y: 30.50 },
                    Point { x: 19.50, y: 30.60 },
                    Point { x: 19.70, y: 30.60 },
                ),
                PathEl::CurveTo(
                    Point { x: 19.90, y: 30.60 },
                    Point { x: 20.00, y: 30.70 },
                    Point { x: 20.20, y: 30.70 },
                ),
                PathEl::CurveTo(
                    Point { x: 20.40, y: 30.70 },
                    Point { x: 20.60, y: 30.70 },
                    Point { x: 20.70, y: 30.60 },
                ),
                PathEl::CurveTo(
                    Point { x: 20.80, y: 30.50 },
                    Point { x: 21.00, y: 30.50 },
                    Point { x: 21.10, y: 30.40 },
                ),
                PathEl::CurveTo(
                    Point { x: 21.20, y: 30.30 },
                    Point { x: 21.30, y: 30.20 },
                    Point { x: 21.40, y: 30.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 21.50, y: 29.80 },
                    Point { x: 21.50, y: 29.70 },
                    Point { x: 21.50, y: 29.50 },
                ),
                PathEl::CurveTo(
                    Point { x: 21.50, y: 29.30 },
                    Point { x: 21.50, y: 29.10 },
                    Point { x: 21.40, y: 28.90 },
                ),
                PathEl::CurveTo(
                    Point { x: 21.30, y: 28.70 },
                    Point { x: 21.20, y: 28.60 },
                    Point { x: 21.10, y: 28.50 },
                ),
                PathEl::CurveTo(
                    Point { x: 21.00, y: 28.40 },
                    Point { x: 20.80, y: 28.30 },
                    Point { x: 20.70, y: 28.30 },
                ),
                PathEl::CurveTo(
                    Point { x: 20.60, y: 28.30 },
                    Point { x: 20.30, y: 28.20 },
                    Point { x: 20.10, y: 28.20 },
                ),
                PathEl::LineTo(Point { x: 19.20, y: 28.20 }),
                PathEl::LineTo(Point { x: 19.20, y: 27.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 30.60, y: 28.50 }),
                PathEl::CurveTo(
                    Point { x: 30.60, y: 29.10 },
                    Point { x: 30.50, y: 29.70 },
                    Point { x: 30.40, y: 30.10 },
                ),
                PathEl::CurveTo(
                    Point { x: 30.30, y: 30.50 },
                    Point { x: 30.00, y: 31.00 },
                    Point { x: 29.80, y: 31.30 },
                ),
                PathEl::CurveTo(
                    Point { x: 29.60, y: 31.60 },
                    Point { x: 29.20, y: 31.80 },
                    Point { x: 28.90, y: 32.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 28.60, y: 32.20 },
                    Point { x: 28.20, y: 32.20 },
                    Point { x: 27.70, y: 32.20 },
                ),
                PathEl::CurveTo(
                    Point { x: 27.20, y: 32.20 },
                    Point { x: 26.90, y: 32.10 },
                    Point { x: 26.50, y: 32.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 26.10, y: 31.90 },
                    Point { x: 25.80, y: 31.60 },
                    Point { x: 25.60, y: 31.30 },
                ),
                PathEl::CurveTo(
                    Point { x: 25.40, y: 31.00 },
                    Point { x: 25.10, y: 30.60 },
                    Point { x: 25.00, y: 30.20 },
                ),
                PathEl::CurveTo(
                    Point { x: 24.90, y: 29.80 },
                    Point { x: 24.80, y: 29.20 },
                    Point { x: 24.80, y: 28.60 },
                ),
                PathEl::LineTo(Point { x: 24.80, y: 27.00 }),
                PathEl::CurveTo(
                    Point { x: 24.80, y: 26.40 },
                    Point { x: 24.90, y: 25.80 },
                    Point { x: 25.00, y: 25.40 },
                ),
                PathEl::CurveTo(
                    Point { x: 25.10, y: 25.00 },
                    Point { x: 25.30, y: 24.60 },
                    Point { x: 25.60, y: 24.30 },
                ),
                PathEl::CurveTo(
                    Point { x: 25.90, y: 24.00 },
                    Point { x: 26.20, y: 23.80 },
                    Point { x: 26.50, y: 23.60 },
                ),
                PathEl::CurveTo(
                    Point { x: 26.80, y: 23.40 },
                    Point { x: 27.20, y: 23.40 },
                    Point { x: 27.70, y: 23.40 },
                ),
                PathEl::CurveTo(
                    Point { x: 28.20, y: 23.40 },
                    Point { x: 28.50, y: 23.50 },
                    Point { x: 28.90, y: 23.60 },
                ),
                PathEl::CurveTo(
                    Point { x: 29.30, y: 23.70 },
                    Point { x: 29.60, y: 24.00 },
                    Point { x: 29.80, y: 24.30 },
                ),
                PathEl::CurveTo(
                    Point { x: 30.00, y: 24.60 },
                    Point { x: 30.30, y: 25.00 },
                    Point { x: 30.40, y: 25.40 },
                ),
                PathEl::CurveTo(
                    Point { x: 30.50, y: 25.80 },
                    Point { x: 30.60, y: 26.40 },
                    Point { x: 30.60, y: 27.00 },
                ),
                PathEl::LineTo(Point { x: 30.60, y: 28.50 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 28.90, y: 26.80 }),
                PathEl::CurveTo(
                    Point { x: 28.90, y: 26.40 },
                    Point { x: 28.90, y: 26.10 },
                    Point { x: 28.80, y: 25.80 },
                ),
                PathEl::CurveTo(
                    Point { x: 28.70, y: 25.50 },
                    Point { x: 28.70, y: 25.30 },
                    Point { x: 28.60, y: 25.20 },
                ),
                PathEl::CurveTo(
                    Point { x: 28.50, y: 25.10 },
                    Point { x: 28.40, y: 24.90 },
                    Point { x: 28.20, y: 24.90 },
                ),
                PathEl::CurveTo(
                    Point { x: 28.00, y: 24.90 },
                    Point { x: 27.90, y: 24.80 },
                    Point { x: 27.70, y: 24.80 },
                ),
                PathEl::CurveTo(
                    Point { x: 27.50, y: 24.80 },
                    Point { x: 27.30, y: 24.80 },
                    Point { x: 27.20, y: 24.90 },
                ),
                PathEl::CurveTo(
                    Point { x: 27.10, y: 25.00 },
                    Point { x: 26.90, y: 25.10 },
                    Point { x: 26.80, y: 25.20 },
                ),
                PathEl::CurveTo(
                    Point { x: 26.70, y: 25.30 },
                    Point { x: 26.60, y: 25.60 },
                    Point { x: 26.60, y: 25.80 },
                ),
                PathEl::CurveTo(
                    Point { x: 26.60, y: 26.00 },
                    Point { x: 26.50, y: 26.40 },
                    Point { x: 26.50, y: 26.80 },
                ),
                PathEl::LineTo(Point { x: 26.50, y: 28.70 }),
                PathEl::CurveTo(
                    Point { x: 26.50, y: 29.10 },
                    Point { x: 26.50, y: 29.40 },
                    Point { x: 26.60, y: 29.70 },
                ),
                PathEl::CurveTo(
                    Point { x: 26.70, y: 30.00 },
                    Point { x: 26.70, y: 30.20 },
                    Point { x: 26.80, y: 30.30 },
                ),
                PathEl::CurveTo(
                    Point { x: 26.90, y: 30.40 },
                    Point { x: 27.00, y: 30.60 },
                    Point { x: 27.20, y: 30.60 },
                ),
                PathEl::CurveTo(
                    Point { x: 27.40, y: 30.60 },
                    Point { x: 27.50, y: 30.70 },
                    Point { x: 27.70, y: 30.70 },
                ),
                PathEl::CurveTo(
                    Point { x: 27.90, y: 30.70 },
                    Point { x: 28.10, y: 30.70 },
                    Point { x: 28.20, y: 30.60 },
                ),
                PathEl::CurveTo(
                    Point { x: 28.30, y: 30.50 },
                    Point { x: 28.50, y: 30.40 },
                    Point { x: 28.60, y: 30.30 },
                ),
                PathEl::CurveTo(
                    Point { x: 28.70, y: 30.20 },
                    Point { x: 28.80, y: 29.90 },
                    Point { x: 28.80, y: 29.70 },
                ),
                PathEl::CurveTo(
                    Point { x: 28.80, y: 29.50 },
                    Point { x: 28.90, y: 29.10 },
                    Point { x: 28.90, y: 28.70 },
                ),
                PathEl::LineTo(Point { x: 28.90, y: 26.80 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 8.00, y: 26.00 }),
                PathEl::CurveTo(
                    Point { x: 8.00, y: 34.80 },
                    Point { x: 15.20, y: 42.00 },
                    Point { x: 24.00, y: 42.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 32.80, y: 42.00 },
                    Point { x: 40.00, y: 34.80 },
                    Point { x: 40.00, y: 26.00 },
                ),
                PathEl::LineTo(Point { x: 36.00, y: 26.00 }),
                PathEl::CurveTo(
                    Point { x: 36.00, y: 32.60 },
                    Point { x: 30.60, y: 38.00 },
                    Point { x: 24.00, y: 38.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 17.40, y: 38.00 },
                    Point { x: 12.00, y: 32.60 },
                    Point { x: 12.00, y: 26.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 12.00, y: 19.40 },
                    Point { x: 17.40, y: 14.00 },
                    Point { x: 24.00, y: 14.00 },
                ),
                PathEl::LineTo(Point { x: 24.00, y: 22.00 }),
                PathEl::LineTo(Point { x: 34.00, y: 12.00 }),
                PathEl::LineTo(Point { x: 24.00, y: 2.00 }),
                PathEl::LineTo(Point { x: 24.00, y: 10.00 }),
                PathEl::CurveTo(
                    Point { x: 15.20, y: 10.00 },
                    Point { x: 8.00, y: 17.20 },
                    Point { x: 8.00, y: 26.00 },
                ),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct VolumeOff {
    size: f64,
    color: Color,
}

impl VolumeOff {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for VolumeOff {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 33.00, y: 24.00 }),
                PathEl::CurveTo(
                    Point { x: 33.00, y: 20.47 },
                    Point { x: 30.96, y: 17.42 },
                    Point { x: 28.00, y: 15.95 },
                ),
                PathEl::LineTo(Point { x: 28.00, y: 20.37 }),
                PathEl::LineTo(Point { x: 32.91, y: 25.28 }),
                PathEl::CurveTo(
                    Point { x: 32.97, y: 24.86 },
                    Point { x: 33.00, y: 24.43 },
                    Point { x: 33.00, y: 24.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 38.00, y: 24.00 }),
                PathEl::CurveTo(
                    Point { x: 38.00, y: 25.88 },
                    Point { x: 37.59, y: 27.65 },
                    Point { x: 36.92, y: 29.28 },
                ),
                PathEl::LineTo(Point { x: 39.95, y: 32.31 }),
                PathEl::CurveTo(
                    Point { x: 41.25, y: 29.82 },
                    Point { x: 42.00, y: 27.00 },
                    Point { x: 42.00, y: 24.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 42.00, y: 15.44 },
                    Point { x: 36.01, y: 8.28 },
                    Point { x: 28.00, y: 6.46 },
                ),
                PathEl::LineTo(Point { x: 28.00, y: 10.59 }),
                PathEl::CurveTo(
                    Point { x: 33.78, y: 12.31 },
                    Point { x: 38.00, y: 17.66 },
                    Point { x: 38.00, y: 24.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 8.55, y: 6.00 }),
                PathEl::LineTo(Point { x: 6.00, y: 8.55 }),
                PathEl::LineTo(Point { x: 15.45, y: 18.00 }),
                PathEl::LineTo(Point { x: 6.00, y: 18.00 }),
                PathEl::LineTo(Point { x: 6.00, y: 30.00 }),
                PathEl::LineTo(Point { x: 14.00, y: 30.00 }),
                PathEl::LineTo(Point { x: 24.00, y: 40.00 }),
                PathEl::LineTo(Point { x: 24.00, y: 26.55 }),
                PathEl::LineTo(Point { x: 32.51, y: 35.06 }),
                PathEl::CurveTo(
                    Point { x: 31.17, y: 36.09 },
                    Point { x: 29.66, y: 36.92 },
                    Point { x: 28.00, y: 37.42 },
                ),
                PathEl::LineTo(Point { x: 28.00, y: 41.55 }),
                PathEl::CurveTo(
                    Point { x: 30.75, y: 40.92 },
                    Point { x: 33.26, y: 39.66 },
                    Point { x: 35.37, y: 37.93 },
                ),
                PathEl::LineTo(Point { x: 39.45, y: 42.00 }),
                PathEl::LineTo(Point { x: 42.00, y: 39.45 }),
                PathEl::LineTo(Point { x: 24.00, y: 21.45 }),
                PathEl::LineTo(Point { x: 8.55, y: 6.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 24.00, y: 8.00 }),
                PathEl::LineTo(Point { x: 19.82, y: 12.18 }),
                PathEl::LineTo(Point { x: 24.00, y: 16.36 }),
                PathEl::LineTo(Point { x: 24.00, y: 8.00 }),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct Crop {
    size: f64,
    color: Color,
}

impl Crop {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for Crop {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 34.00, y: 30.00 }),
                PathEl::LineTo(Point { x: 38.00, y: 30.00 }),
                PathEl::LineTo(Point { x: 38.00, y: 14.00 }),
                PathEl::CurveTo(
                    Point { x: 38.00, y: 11.79 },
                    Point { x: 36.21, y: 10.00 },
                    Point { x: 34.00, y: 10.00 },
                ),
                PathEl::LineTo(Point { x: 18.00, y: 10.00 }),
                PathEl::LineTo(Point { x: 18.00, y: 14.00 }),
                PathEl::LineTo(Point { x: 34.00, y: 14.00 }),
                PathEl::LineTo(Point { x: 34.00, y: 30.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 14.00, y: 34.00 }),
                PathEl::LineTo(Point { x: 14.00, y: 2.00 }),
                PathEl::LineTo(Point { x: 10.00, y: 2.00 }),
                PathEl::LineTo(Point { x: 10.00, y: 10.00 }),
                PathEl::LineTo(Point { x: 2.00, y: 10.00 }),
                PathEl::LineTo(Point { x: 2.00, y: 14.00 }),
                PathEl::LineTo(Point { x: 10.00, y: 14.00 }),
                PathEl::LineTo(Point { x: 10.00, y: 34.00 }),
                PathEl::CurveTo(
                    Point { x: 10.00, y: 36.21 },
                    Point { x: 11.79, y: 38.00 },
                    Point { x: 14.00, y: 38.00 },
                ),
                PathEl::LineTo(Point { x: 34.00, y: 38.00 }),
                PathEl::LineTo(Point { x: 34.00, y: 46.00 }),
                PathEl::LineTo(Point { x: 38.00, y: 46.00 }),
                PathEl::LineTo(Point { x: 38.00, y: 38.00 }),
                PathEl::LineTo(Point { x: 46.00, y: 38.00 }),
                PathEl::LineTo(Point { x: 46.00, y: 34.00 }),
                PathEl::LineTo(Point { x: 14.00, y: 34.00 }),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct OpenWith {
    size: f64,
    color: Color,
}

impl OpenWith {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for OpenWith {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 20.00, y: 18.00 }),
                PathEl::LineTo(Point { x: 28.00, y: 18.00 }),
                PathEl::LineTo(Point { x: 28.00, y: 12.00 }),
                PathEl::LineTo(Point { x: 34.00, y: 12.00 }),
                PathEl::LineTo(Point { x: 24.00, y: 2.00 }),
                PathEl::LineTo(Point { x: 14.00, y: 12.00 }),
                PathEl::LineTo(Point { x: 20.00, y: 12.00 }),
                PathEl::LineTo(Point { x: 20.00, y: 18.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 18.00, y: 20.00 }),
                PathEl::LineTo(Point { x: 12.00, y: 20.00 }),
                PathEl::LineTo(Point { x: 12.00, y: 14.00 }),
                PathEl::LineTo(Point { x: 2.00, y: 24.00 }),
                PathEl::LineTo(Point { x: 12.00, y: 34.00 }),
                PathEl::LineTo(Point { x: 12.00, y: 28.00 }),
                PathEl::LineTo(Point { x: 18.00, y: 28.00 }),
                PathEl::LineTo(Point { x: 18.00, y: 20.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 46.00, y: 24.00 }),
                PathEl::LineTo(Point { x: 36.00, y: 14.00 }),
                PathEl::LineTo(Point { x: 36.00, y: 20.00 }),
                PathEl::LineTo(Point { x: 30.00, y: 20.00 }),
                PathEl::LineTo(Point { x: 30.00, y: 28.00 }),
                PathEl::LineTo(Point { x: 36.00, y: 28.00 }),
                PathEl::LineTo(Point { x: 36.00, y: 34.00 }),
                PathEl::LineTo(Point { x: 46.00, y: 24.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 28.00, y: 30.00 }),
                PathEl::LineTo(Point { x: 20.00, y: 30.00 }),
                PathEl::LineTo(Point { x: 20.00, y: 36.00 }),
                PathEl::LineTo(Point { x: 14.00, y: 36.00 }),
                PathEl::LineTo(Point { x: 24.00, y: 46.00 }),
                PathEl::LineTo(Point { x: 34.00, y: 36.00 }),
                PathEl::LineTo(Point { x: 28.00, y: 36.00 }),
                PathEl::LineTo(Point { x: 28.00, y: 30.00 }),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct SettingsApplications {
    size: f64,
    color: Color,
}

impl SettingsApplications {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for SettingsApplications {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 24.00, y: 20.00 }),
                PathEl::CurveTo(
                    Point { x: 21.79, y: 20.00 },
                    Point { x: 20.00, y: 21.79 },
                    Point { x: 20.00, y: 24.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 20.00, y: 26.21 },
                    Point { x: 21.79, y: 28.00 },
                    Point { x: 24.00, y: 28.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 26.21, y: 28.00 },
                    Point { x: 28.00, y: 26.21 },
                    Point { x: 28.00, y: 24.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 28.00, y: 21.79 },
                    Point { x: 26.21, y: 20.00 },
                    Point { x: 24.00, y: 20.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 38.00, y: 6.00 }),
                PathEl::LineTo(Point { x: 10.00, y: 6.00 }),
                PathEl::CurveTo(
                    Point { x: 7.79, y: 6.00 },
                    Point { x: 6.00, y: 7.79 },
                    Point { x: 6.00, y: 10.00 },
                ),
                PathEl::LineTo(Point { x: 6.00, y: 38.00 }),
                PathEl::CurveTo(
                    Point { x: 6.00, y: 40.21 },
                    Point { x: 7.79, y: 42.00 },
                    Point { x: 10.00, y: 42.00 },
                ),
                PathEl::LineTo(Point { x: 38.00, y: 42.00 }),
                PathEl::CurveTo(
                    Point { x: 40.21, y: 42.00 },
                    Point { x: 42.00, y: 40.21 },
                    Point { x: 42.00, y: 38.00 },
                ),
                PathEl::LineTo(Point { x: 42.00, y: 10.00 }),
                PathEl::CurveTo(
                    Point { x: 42.00, y: 7.79 },
                    Point { x: 40.21, y: 6.00 },
                    Point { x: 38.00, y: 6.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 34.50, y: 24.00 }),
                PathEl::CurveTo(
                    Point { x: 34.50, y: 24.46 },
                    Point { x: 34.46, y: 24.92 },
                    Point { x: 34.40, y: 25.37 },
                ),
                PathEl::LineTo(Point { x: 37.36, y: 27.69 }),
                PathEl::CurveTo(
                    Point { x: 37.62, y: 27.90 },
                    Point { x: 37.70, y: 28.28 },
                    Point { x: 37.52, y: 28.58 },
                ),
                PathEl::LineTo(Point { x: 34.72, y: 33.43 }),
                PathEl::CurveTo(
                    Point { x: 34.55, y: 33.73 },
                    Point { x: 34.18, y: 33.85 },
                    Point { x: 33.86, y: 33.73 },
                ),
                PathEl::LineTo(Point { x: 30.37, y: 32.32 }),
                PathEl::CurveTo(
                    Point { x: 29.65, y: 32.88 },
                    Point { x: 28.86, y: 33.34 },
                    Point { x: 28.00, y: 33.70 },
                ),
                PathEl::LineTo(Point { x: 27.48, y: 37.41 }),
                PathEl::CurveTo(
                    Point { x: 27.44, y: 37.74 },
                    Point { x: 27.15, y: 38.00 },
                    Point { x: 26.80, y: 38.00 },
                ),
                PathEl::LineTo(Point { x: 21.20, y: 38.00 }),
                PathEl::CurveTo(
                    Point { x: 20.85, y: 38.00 },
                    Point { x: 20.56, y: 37.74 },
                    Point { x: 20.51, y: 37.41 },
                ),
                PathEl::LineTo(Point { x: 19.99, y: 33.70 }),
                PathEl::CurveTo(
                    Point { x: 19.14, y: 33.35 },
                    Point { x: 18.35, y: 32.88 },
                    Point { x: 17.62, y: 32.32 },
                ),
                PathEl::LineTo(Point { x: 14.14, y: 33.72 }),
                PathEl::CurveTo(
                    Point { x: 13.82, y: 33.84 },
                    Point { x: 13.46, y: 33.72 },
                    Point { x: 13.28, y: 33.42 },
                ),
                PathEl::LineTo(Point { x: 10.48, y: 28.57 }),
                PathEl::CurveTo(
                    Point { x: 10.30, y: 28.27 },
                    Point { x: 10.38, y: 27.89 },
                    Point { x: 10.64, y: 27.68 },
                ),
                PathEl::LineTo(Point { x: 13.60, y: 25.37 }),
                PathEl::CurveTo(
                    Point { x: 13.54, y: 24.92 },
                    Point { x: 13.50, y: 24.47 },
                    Point { x: 13.50, y: 24.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 13.50, y: 23.54 },
                    Point { x: 13.54, y: 23.08 },
                    Point { x: 13.60, y: 22.63 },
                ),
                PathEl::LineTo(Point { x: 10.64, y: 20.32 }),
                PathEl::CurveTo(
                    Point { x: 10.38, y: 20.11 },
                    Point { x: 10.30, y: 19.73 },
                    Point { x: 10.48, y: 19.43 },
                ),
                PathEl::LineTo(Point { x: 13.28, y: 14.58 }),
                PathEl::CurveTo(
                    Point { x: 13.46, y: 14.28 },
                    Point { x: 13.82, y: 14.16 },
                    Point { x: 14.14, y: 14.28 },
                ),
                PathEl::LineTo(Point { x: 17.62, y: 15.68 }),
                PathEl::CurveTo(
                    Point { x: 18.34, y: 15.13 },
                    Point { x: 19.13, y: 14.66 },
                    Point { x: 19.99, y: 14.30 },
                ),
                PathEl::LineTo(Point { x: 20.51, y: 10.59 }),
                PathEl::CurveTo(
                    Point { x: 20.56, y: 10.26 },
                    Point { x: 20.85, y: 10.00 },
                    Point { x: 21.20, y: 10.00 },
                ),
                PathEl::LineTo(Point { x: 26.80, y: 10.00 }),
                PathEl::CurveTo(
                    Point { x: 27.15, y: 10.00 },
                    Point { x: 27.44, y: 10.26 },
                    Point { x: 27.49, y: 10.59 },
                ),
                PathEl::LineTo(Point { x: 28.01, y: 14.30 }),
                PathEl::CurveTo(
                    Point { x: 28.86, y: 14.65 },
                    Point { x: 29.65, y: 15.12 },
                    Point { x: 30.38, y: 15.68 },
                ),
                PathEl::LineTo(Point { x: 33.86, y: 14.28 }),
                PathEl::CurveTo(
                    Point { x: 34.18, y: 14.16 },
                    Point { x: 34.54, y: 14.28 },
                    Point { x: 34.72, y: 14.58 },
                ),
                PathEl::LineTo(Point { x: 37.52, y: 19.43 }),
                PathEl::CurveTo(
                    Point { x: 37.70, y: 19.73 },
                    Point { x: 37.62, y: 20.11 },
                    Point { x: 37.36, y: 20.32 },
                ),
                PathEl::LineTo(Point { x: 34.40, y: 22.64 }),
                PathEl::CurveTo(
                    Point { x: 34.46, y: 23.08 },
                    Point { x: 34.50, y: 23.54 },
                    Point { x: 34.50, y: 24.00 },
                ),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct AirlineSeatLegroomNormal {
    size: f64,
    color: Color,
}

impl AirlineSeatLegroomNormal {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for AirlineSeatLegroomNormal {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 10.00, y: 24.00 }),
                PathEl::LineTo(Point { x: 10.00, y: 6.00 }),
                PathEl::LineTo(Point { x: 6.00, y: 6.00 }),
                PathEl::LineTo(Point { x: 6.00, y: 24.00 }),
                PathEl::CurveTo(
                    Point { x: 6.00, y: 29.52 },
                    Point { x: 10.48, y: 34.00 },
                    Point { x: 16.00, y: 34.00 },
                ),
                PathEl::LineTo(Point { x: 28.00, y: 34.00 }),
                PathEl::LineTo(Point { x: 28.00, y: 30.00 }),
                PathEl::LineTo(Point { x: 16.00, y: 30.00 }),
                PathEl::CurveTo(
                    Point { x: 12.69, y: 30.00 },
                    Point { x: 10.00, y: 27.31 },
                    Point { x: 10.00, y: 24.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 41.00, y: 36.00 }),
                PathEl::LineTo(Point { x: 38.00, y: 36.00 }),
                PathEl::LineTo(Point { x: 38.00, y: 22.00 }),
                PathEl::CurveTo(
                    Point { x: 38.00, y: 19.79 },
                    Point { x: 36.21, y: 18.00 },
                    Point { x: 34.00, y: 18.00 },
                ),
                PathEl::LineTo(Point { x: 24.00, y: 18.00 }),
                PathEl::LineTo(Point { x: 24.00, y: 6.00 }),
                PathEl::LineTo(Point { x: 12.00, y: 6.00 }),
                PathEl::LineTo(Point { x: 12.00, y: 22.00 }),
                PathEl::CurveTo(
                    Point { x: 12.00, y: 25.30 },
                    Point { x: 14.70, y: 28.00 },
                    Point { x: 18.00, y: 28.00 },
                ),
                PathEl::LineTo(Point { x: 32.00, y: 28.00 }),
                PathEl::LineTo(Point { x: 32.00, y: 42.00 }),
                PathEl::LineTo(Point { x: 41.00, y: 42.00 }),
                PathEl::CurveTo(
                    Point { x: 42.66, y: 42.00 },
                    Point { x: 44.00, y: 40.66 },
                    Point { x: 44.00, y: 39.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 44.00, y: 37.34 },
                    Point { x: 42.66, y: 36.00 },
                    Point { x: 41.00, y: 36.00 },
                ),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct VpnKey {
    size: f64,
    color: Color,
}

impl VpnKey {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for VpnKey {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 25.30, y: 20.00 }),
                PathEl::CurveTo(
                    Point { x: 23.65, y: 15.34 },
                    Point { x: 19.22, y: 12.00 },
                    Point { x: 14.00, y: 12.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 7.37, y: 12.00 },
                    Point { x: 2.00, y: 17.37 },
                    Point { x: 2.00, y: 24.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 2.00, y: 30.63 },
                    Point { x: 7.37, y: 36.00 },
                    Point { x: 14.00, y: 36.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 19.22, y: 36.00 },
                    Point { x: 23.65, y: 32.66 },
                    Point { x: 25.30, y: 28.00 },
                ),
                PathEl::LineTo(Point { x: 34.00, y: 28.00 }),
                PathEl::LineTo(Point { x: 34.00, y: 36.00 }),
                PathEl::LineTo(Point { x: 42.00, y: 36.00 }),
                PathEl::LineTo(Point { x: 42.00, y: 28.00 }),
                PathEl::LineTo(Point { x: 46.00, y: 28.00 }),
                PathEl::LineTo(Point { x: 46.00, y: 20.00 }),
                PathEl::LineTo(Point { x: 25.30, y: 20.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 14.00, y: 28.00 }),
                PathEl::CurveTo(
                    Point { x: 11.79, y: 28.00 },
                    Point { x: 10.00, y: 26.21 },
                    Point { x: 10.00, y: 24.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 10.00, y: 21.79 },
                    Point { x: 11.79, y: 20.00 },
                    Point { x: 14.00, y: 20.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 16.21, y: 20.00 },
                    Point { x: 18.00, y: 21.79 },
                    Point { x: 18.00, y: 24.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 18.00, y: 26.21 },
                    Point { x: 16.21, y: 28.00 },
                    Point { x: 14.00, y: 28.00 },
                ),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct Wallpaper {
    size: f64,
    color: Color,
}

impl Wallpaper {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for Wallpaper {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 8.00, y: 8.00 }),
                PathEl::LineTo(Point { x: 22.00, y: 8.00 }),
                PathEl::LineTo(Point { x: 22.00, y: 4.00 }),
                PathEl::LineTo(Point { x: 8.00, y: 4.00 }),
                PathEl::CurveTo(
                    Point { x: 5.79, y: 4.00 },
                    Point { x: 4.00, y: 5.79 },
                    Point { x: 4.00, y: 8.00 },
                ),
                PathEl::LineTo(Point { x: 4.00, y: 22.00 }),
                PathEl::LineTo(Point { x: 8.00, y: 22.00 }),
                PathEl::LineTo(Point { x: 8.00, y: 8.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 20.00, y: 26.00 }),
                PathEl::LineTo(Point { x: 12.00, y: 36.00 }),
                PathEl::LineTo(Point { x: 36.00, y: 36.00 }),
                PathEl::LineTo(Point { x: 30.00, y: 28.00 }),
                PathEl::LineTo(Point { x: 25.94, y: 33.42 }),
                PathEl::LineTo(Point { x: 20.00, y: 26.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 34.00, y: 17.00 }),
                PathEl::CurveTo(
                    Point { x: 34.00, y: 15.34 },
                    Point { x: 32.66, y: 14.00 },
                    Point { x: 31.00, y: 14.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 29.34, y: 14.00 },
                    Point { x: 28.00, y: 15.34 },
                    Point { x: 28.00, y: 17.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 28.00, y: 18.66 },
                    Point { x: 29.34, y: 20.00 },
                    Point { x: 31.00, y: 20.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 32.66, y: 20.00 },
                    Point { x: 34.00, y: 18.66 },
                    Point { x: 34.00, y: 17.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 40.00, y: 4.00 }),
                PathEl::LineTo(Point { x: 26.00, y: 4.00 }),
                PathEl::LineTo(Point { x: 26.00, y: 8.00 }),
                PathEl::LineTo(Point { x: 40.00, y: 8.00 }),
                PathEl::LineTo(Point { x: 40.00, y: 22.00 }),
                PathEl::LineTo(Point { x: 44.00, y: 22.00 }),
                PathEl::LineTo(Point { x: 44.00, y: 8.00 }),
                PathEl::CurveTo(
                    Point { x: 44.00, y: 5.79 },
                    Point { x: 42.21, y: 4.00 },
                    Point { x: 40.00, y: 4.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 40.00, y: 40.00 }),
                PathEl::LineTo(Point { x: 26.00, y: 40.00 }),
                PathEl::LineTo(Point { x: 26.00, y: 44.00 }),
                PathEl::LineTo(Point { x: 40.00, y: 44.00 }),
                PathEl::CurveTo(
                    Point { x: 42.21, y: 44.00 },
                    Point { x: 44.00, y: 42.21 },
                    Point { x: 44.00, y: 40.00 },
                ),
                PathEl::LineTo(Point { x: 44.00, y: 26.00 }),
                PathEl::LineTo(Point { x: 40.00, y: 26.00 }),
                PathEl::LineTo(Point { x: 40.00, y: 40.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 8.00, y: 26.00 }),
                PathEl::LineTo(Point { x: 4.00, y: 26.00 }),
                PathEl::LineTo(Point { x: 4.00, y: 40.00 }),
                PathEl::CurveTo(
                    Point { x: 4.00, y: 42.21 },
                    Point { x: 5.79, y: 44.00 },
                    Point { x: 8.00, y: 44.00 },
                ),
                PathEl::LineTo(Point { x: 22.00, y: 44.00 }),
                PathEl::LineTo(Point { x: 22.00, y: 40.00 }),
                PathEl::LineTo(Point { x: 8.00, y: 40.00 }),
                PathEl::LineTo(Point { x: 8.00, y: 26.00 }),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct SkipNext {
    size: f64,
    color: Color,
}

impl SkipNext {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for SkipNext {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 12.00, y: 36.00 }),
                PathEl::LineTo(Point { x: 29.00, y: 24.00 }),
                PathEl::LineTo(Point { x: 12.00, y: 12.00 }),
                PathEl::LineTo(Point { x: 12.00, y: 36.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 32.00, y: 12.00 }),
                PathEl::LineTo(Point { x: 32.00, y: 36.00 }),
                PathEl::LineTo(Point { x: 36.00, y: 36.00 }),
                PathEl::LineTo(Point { x: 36.00, y: 12.00 }),
                PathEl::LineTo(Point { x: 32.00, y: 12.00 }),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct BrightnessLow {
    size: f64,
    color: Color,
}

impl BrightnessLow {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for BrightnessLow {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 40.00, y: 30.63 }),
                PathEl::LineTo(Point { x: 46.63, y: 24.00 }),
                PathEl::LineTo(Point { x: 40.00, y: 17.37 }),
                PathEl::LineTo(Point { x: 40.00, y: 8.00 }),
                PathEl::LineTo(Point { x: 30.63, y: 8.00 }),
                PathEl::LineTo(Point { x: 24.00, y: 1.37 }),
                PathEl::LineTo(Point { x: 17.37, y: 8.00 }),
                PathEl::LineTo(Point { x: 8.00, y: 8.00 }),
                PathEl::LineTo(Point { x: 8.00, y: 17.37 }),
                PathEl::LineTo(Point { x: 1.37, y: 24.00 }),
                PathEl::LineTo(Point { x: 8.00, y: 30.63 }),
                PathEl::LineTo(Point { x: 8.00, y: 40.00 }),
                PathEl::LineTo(Point { x: 17.37, y: 40.00 }),
                PathEl::LineTo(Point { x: 24.00, y: 46.63 }),
                PathEl::LineTo(Point { x: 30.63, y: 40.00 }),
                PathEl::LineTo(Point { x: 40.00, y: 40.00 }),
                PathEl::LineTo(Point { x: 40.00, y: 30.63 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 24.00, y: 36.00 }),
                PathEl::CurveTo(
                    Point { x: 17.37, y: 36.00 },
                    Point { x: 12.00, y: 30.63 },
                    Point { x: 12.00, y: 24.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 12.00, y: 17.37 },
                    Point { x: 17.37, y: 12.00 },
                    Point { x: 24.00, y: 12.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 30.63, y: 12.00 },
                    Point { x: 36.00, y: 17.37 },
                    Point { x: 36.00, y: 24.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 36.00, y: 30.63 },
                    Point { x: 30.63, y: 36.00 },
                    Point { x: 24.00, y: 36.00 },
                ),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct SupervisorAccount {
    size: f64,
    color: Color,
}

impl SupervisorAccount {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for SupervisorAccount {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 33.00, y: 24.00 }),
                PathEl::CurveTo(
                    Point { x: 35.76, y: 24.00 },
                    Point { x: 37.98, y: 21.76 },
                    Point { x: 37.98, y: 19.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 37.98, y: 16.24 },
                    Point { x: 35.76, y: 14.00 },
                    Point { x: 33.00, y: 14.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 30.24, y: 14.00 },
                    Point { x: 28.00, y: 16.24 },
                    Point { x: 28.00, y: 19.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 28.00, y: 21.76 },
                    Point { x: 30.24, y: 24.00 },
                    Point { x: 33.00, y: 24.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 18.00, y: 22.00 }),
                PathEl::CurveTo(
                    Point { x: 21.31, y: 22.00 },
                    Point { x: 23.98, y: 19.31 },
                    Point { x: 23.98, y: 16.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 23.98, y: 12.69 },
                    Point { x: 21.31, y: 10.00 },
                    Point { x: 18.00, y: 10.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 14.69, y: 10.00 },
                    Point { x: 12.00, y: 12.69 },
                    Point { x: 12.00, y: 16.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 12.00, y: 19.31 },
                    Point { x: 14.69, y: 22.00 },
                    Point { x: 18.00, y: 22.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 33.00, y: 28.00 }),
                PathEl::CurveTo(
                    Point { x: 29.33, y: 28.00 },
                    Point { x: 22.00, y: 29.84 },
                    Point { x: 22.00, y: 33.50 },
                ),
                PathEl::LineTo(Point { x: 22.00, y: 38.00 }),
                PathEl::LineTo(Point { x: 44.00, y: 38.00 }),
                PathEl::LineTo(Point { x: 44.00, y: 33.50 }),
                PathEl::CurveTo(
                    Point { x: 44.00, y: 29.84 },
                    Point { x: 36.67, y: 28.00 },
                    Point { x: 33.00, y: 28.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 18.00, y: 26.00 }),
                PathEl::CurveTo(
                    Point { x: 13.33, y: 26.00 },
                    Point { x: 4.00, y: 28.34 },
                    Point { x: 4.00, y: 33.00 },
                ),
                PathEl::LineTo(Point { x: 4.00, y: 38.00 }),
                PathEl::LineTo(Point { x: 18.00, y: 38.00 }),
                PathEl::LineTo(Point { x: 18.00, y: 33.50 }),
                PathEl::CurveTo(
                    Point { x: 18.00, y: 31.80 },
                    Point { x: 18.67, y: 28.83 },
                    Point { x: 22.74, y: 26.56 },
                ),
                PathEl::CurveTo(
                    Point { x: 21.00, y: 26.19 },
                    Point { x: 19.31, y: 26.00 },
                    Point { x: 18.00, y: 26.00 },
                ),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct CropRotate {
    size: f64,
    color: Color,
}

impl CropRotate {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for CropRotate {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 14.93, y: 42.97 }),
                PathEl::CurveTo(
                    Point { x: 8.40, y: 39.87 },
                    Point { x: 3.71, y: 33.52 },
                    Point { x: 3.00, y: 26.00 },
                ),
                PathEl::LineTo(Point { x: 0.00, y: 26.00 }),
                PathEl::CurveTo(
                    Point { x: 1.02, y: 38.32 },
                    Point { x: 11.32, y: 48.00 },
                    Point { x: 23.90, y: 48.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 24.35, y: 48.00 },
                    Point { x: 24.78, y: 47.96 },
                    Point { x: 25.22, y: 47.93 },
                ),
                PathEl::LineTo(Point { x: 17.60, y: 40.30 }),
                PathEl::LineTo(Point { x: 14.93, y: 42.97 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 24.10, y: 0.00 }),
                PathEl::CurveTo(
                    Point { x: 23.65, y: 0.00 },
                    Point { x: 23.22, y: 0.04 },
                    Point { x: 22.78, y: 0.07 },
                ),
                PathEl::LineTo(Point { x: 30.40, y: 7.70 }),
                PathEl::LineTo(Point { x: 33.06, y: 5.04 }),
                PathEl::CurveTo(
                    Point { x: 39.60, y: 8.13 },
                    Point { x: 44.29, y: 14.48 },
                    Point { x: 45.00, y: 22.00 },
                ),
                PathEl::LineTo(Point { x: 48.00, y: 22.00 }),
                PathEl::CurveTo(
                    Point { x: 46.98, y: 9.68 },
                    Point { x: 36.68, y: 0.00 },
                    Point { x: 24.10, y: 0.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 32.00, y: 28.00 }),
                PathEl::LineTo(Point { x: 36.00, y: 28.00 }),
                PathEl::LineTo(Point { x: 36.00, y: 16.00 }),
                PathEl::CurveTo(
                    Point { x: 36.00, y: 13.79 },
                    Point { x: 34.21, y: 12.00 },
                    Point { x: 32.00, y: 12.00 },
                ),
                PathEl::LineTo(Point { x: 20.00, y: 12.00 }),
                PathEl::LineTo(Point { x: 20.00, y: 16.00 }),
                PathEl::LineTo(Point { x: 32.00, y: 16.00 }),
                PathEl::LineTo(Point { x: 32.00, y: 28.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 16.00, y: 32.00 }),
                PathEl::LineTo(Point { x: 16.00, y: 8.00 }),
                PathEl::LineTo(Point { x: 12.00, y: 8.00 }),
                PathEl::LineTo(Point { x: 12.00, y: 12.00 }),
                PathEl::LineTo(Point { x: 8.00, y: 12.00 }),
                PathEl::LineTo(Point { x: 8.00, y: 16.00 }),
                PathEl::LineTo(Point { x: 12.00, y: 16.00 }),
                PathEl::LineTo(Point { x: 12.00, y: 32.00 }),
                PathEl::CurveTo(
                    Point { x: 12.00, y: 34.21 },
                    Point { x: 13.79, y: 36.00 },
                    Point { x: 16.00, y: 36.00 },
                ),
                PathEl::LineTo(Point { x: 32.00, y: 36.00 }),
                PathEl::LineTo(Point { x: 32.00, y: 40.00 }),
                PathEl::LineTo(Point { x: 36.00, y: 40.00 }),
                PathEl::LineTo(Point { x: 36.00, y: 36.00 }),
                PathEl::LineTo(Point { x: 40.00, y: 36.00 }),
                PathEl::LineTo(Point { x: 40.00, y: 32.00 }),
                PathEl::LineTo(Point { x: 16.00, y: 32.00 }),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct PermScanWifi {
    size: f64,
    color: Color,
}

impl PermScanWifi {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for PermScanWifi {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 24.00, y: 6.00 }),
                PathEl::CurveTo(
                    Point { x: 13.91, y: 6.00 },
                    Point { x: 6.29, y: 9.70 },
                    Point { x: 0.00, y: 14.47 },
                ),
                PathEl::LineTo(Point { x: 24.00, y: 44.00 }),
                PathEl::LineTo(Point { x: 48.00, y: 14.50 }),
                PathEl::CurveTo(
                    Point { x: 41.71, y: 9.74 },
                    Point { x: 34.09, y: 6.00 },
                    Point { x: 24.00, y: 6.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 26.00, y: 32.00 }),
                PathEl::LineTo(Point { x: 22.00, y: 32.00 }),
                PathEl::LineTo(Point { x: 22.00, y: 20.00 }),
                PathEl::LineTo(Point { x: 26.00, y: 20.00 }),
                PathEl::LineTo(Point { x: 26.00, y: 32.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 22.00, y: 16.00 }),
                PathEl::LineTo(Point { x: 22.00, y: 12.00 }),
                PathEl::LineTo(Point { x: 26.00, y: 12.00 }),
                PathEl::LineTo(Point { x: 26.00, y: 16.00 }),
                PathEl::LineTo(Point { x: 22.00, y: 16.00 }),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct Widgets {
    size: f64,
    color: Color,
}

impl Widgets {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for Widgets {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 26.00, y: 26.00 }),
                PathEl::LineTo(Point { x: 26.00, y: 42.00 }),
                PathEl::LineTo(Point { x: 42.00, y: 42.00 }),
                PathEl::LineTo(Point { x: 42.00, y: 26.00 }),
                PathEl::LineTo(Point { x: 26.00, y: 26.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 6.00, y: 42.00 }),
                PathEl::LineTo(Point { x: 22.00, y: 42.00 }),
                PathEl::LineTo(Point { x: 22.00, y: 26.00 }),
                PathEl::LineTo(Point { x: 6.00, y: 26.00 }),
                PathEl::LineTo(Point { x: 6.00, y: 42.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 6.00, y: 6.00 }),
                PathEl::LineTo(Point { x: 6.00, y: 22.00 }),
                PathEl::LineTo(Point { x: 22.00, y: 22.00 }),
                PathEl::LineTo(Point { x: 22.00, y: 6.00 }),
                PathEl::LineTo(Point { x: 6.00, y: 6.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 33.31, y: 3.37 }),
                PathEl::LineTo(Point { x: 22.00, y: 14.69 }),
                PathEl::LineTo(Point { x: 33.31, y: 26.00 }),
                PathEl::LineTo(Point { x: 44.62, y: 14.69 }),
                PathEl::LineTo(Point { x: 33.31, y: 3.37 }),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct FormatLineSpacing {
    size: f64,
    color: Color,
}

impl FormatLineSpacing {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for FormatLineSpacing {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 12.00, y: 14.00 }),
                PathEl::LineTo(Point { x: 17.00, y: 14.00 }),
                PathEl::LineTo(Point { x: 10.00, y: 7.00 }),
                PathEl::LineTo(Point { x: 3.00, y: 14.00 }),
                PathEl::LineTo(Point { x: 8.00, y: 14.00 }),
                PathEl::LineTo(Point { x: 8.00, y: 34.00 }),
                PathEl::LineTo(Point { x: 3.00, y: 34.00 }),
                PathEl::LineTo(Point { x: 10.00, y: 41.00 }),
                PathEl::LineTo(Point { x: 17.00, y: 34.00 }),
                PathEl::LineTo(Point { x: 12.00, y: 34.00 }),
                PathEl::LineTo(Point { x: 12.00, y: 14.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 20.00, y: 10.00 }),
                PathEl::LineTo(Point { x: 20.00, y: 14.00 }),
                PathEl::LineTo(Point { x: 44.00, y: 14.00 }),
                PathEl::LineTo(Point { x: 44.00, y: 10.00 }),
                PathEl::LineTo(Point { x: 20.00, y: 10.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 20.00, y: 38.00 }),
                PathEl::LineTo(Point { x: 44.00, y: 38.00 }),
                PathEl::LineTo(Point { x: 44.00, y: 34.00 }),
                PathEl::LineTo(Point { x: 20.00, y: 34.00 }),
                PathEl::LineTo(Point { x: 20.00, y: 38.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 20.00, y: 26.00 }),
                PathEl::LineTo(Point { x: 44.00, y: 26.00 }),
                PathEl::LineTo(Point { x: 44.00, y: 22.00 }),
                PathEl::LineTo(Point { x: 20.00, y: 22.00 }),
                PathEl::LineTo(Point { x: 20.00, y: 26.00 }),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct FormatAlignRight {
    size: f64,
    color: Color,
}

impl FormatAlignRight {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for FormatAlignRight {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 6.00, y: 42.00 }),
                PathEl::LineTo(Point { x: 42.00, y: 42.00 }),
                PathEl::LineTo(Point { x: 42.00, y: 38.00 }),
                PathEl::LineTo(Point { x: 6.00, y: 38.00 }),
                PathEl::LineTo(Point { x: 6.00, y: 42.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 18.00, y: 34.00 }),
                PathEl::LineTo(Point { x: 42.00, y: 34.00 }),
                PathEl::LineTo(Point { x: 42.00, y: 30.00 }),
                PathEl::LineTo(Point { x: 18.00, y: 30.00 }),
                PathEl::LineTo(Point { x: 18.00, y: 34.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 6.00, y: 26.00 }),
                PathEl::LineTo(Point { x: 42.00, y: 26.00 }),
                PathEl::LineTo(Point { x: 42.00, y: 22.00 }),
                PathEl::LineTo(Point { x: 6.00, y: 22.00 }),
                PathEl::LineTo(Point { x: 6.00, y: 26.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 18.00, y: 18.00 }),
                PathEl::LineTo(Point { x: 42.00, y: 18.00 }),
                PathEl::LineTo(Point { x: 42.00, y: 14.00 }),
                PathEl::LineTo(Point { x: 18.00, y: 14.00 }),
                PathEl::LineTo(Point { x: 18.00, y: 18.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 6.00, y: 6.00 }),
                PathEl::LineTo(Point { x: 6.00, y: 10.00 }),
                PathEl::LineTo(Point { x: 42.00, y: 10.00 }),
                PathEl::LineTo(Point { x: 42.00, y: 6.00 }),
                PathEl::LineTo(Point { x: 6.00, y: 6.00 }),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct Devices {
    size: f64,
    color: Color,
}

impl Devices {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for Devices {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 8.00, y: 12.00 }),
                PathEl::LineTo(Point { x: 44.00, y: 12.00 }),
                PathEl::LineTo(Point { x: 44.00, y: 8.00 }),
                PathEl::LineTo(Point { x: 8.00, y: 8.00 }),
                PathEl::CurveTo(
                    Point { x: 5.79, y: 8.00 },
                    Point { x: 4.00, y: 9.79 },
                    Point { x: 4.00, y: 12.00 },
                ),
                PathEl::LineTo(Point { x: 4.00, y: 34.00 }),
                PathEl::LineTo(Point { x: 0.00, y: 34.00 }),
                PathEl::LineTo(Point { x: 0.00, y: 40.00 }),
                PathEl::LineTo(Point { x: 28.00, y: 40.00 }),
                PathEl::LineTo(Point { x: 28.00, y: 34.00 }),
                PathEl::LineTo(Point { x: 8.00, y: 34.00 }),
                PathEl::LineTo(Point { x: 8.00, y: 12.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 46.00, y: 16.00 }),
                PathEl::LineTo(Point { x: 34.00, y: 16.00 }),
                PathEl::CurveTo(
                    Point { x: 32.90, y: 16.00 },
                    Point { x: 32.00, y: 16.90 },
                    Point { x: 32.00, y: 18.00 },
                ),
                PathEl::LineTo(Point { x: 32.00, y: 38.00 }),
                PathEl::CurveTo(
                    Point { x: 32.00, y: 39.10 },
                    Point { x: 32.90, y: 40.00 },
                    Point { x: 34.00, y: 40.00 },
                ),
                PathEl::LineTo(Point { x: 46.00, y: 40.00 }),
                PathEl::CurveTo(
                    Point { x: 47.10, y: 40.00 },
                    Point { x: 48.00, y: 39.10 },
                    Point { x: 48.00, y: 38.00 },
                ),
                PathEl::LineTo(Point { x: 48.00, y: 18.00 }),
                PathEl::CurveTo(
                    Point { x: 48.00, y: 16.90 },
                    Point { x: 47.10, y: 16.00 },
                    Point { x: 46.00, y: 16.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 44.00, y: 34.00 }),
                PathEl::LineTo(Point { x: 36.00, y: 34.00 }),
                PathEl::LineTo(Point { x: 36.00, y: 20.00 }),
                PathEl::LineTo(Point { x: 44.00, y: 20.00 }),
                PathEl::LineTo(Point { x: 44.00, y: 34.00 }),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct FileUpload {
    size: f64,
    color: Color,
}

impl FileUpload {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for FileUpload {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 18.00, y: 32.00 }),
                PathEl::LineTo(Point { x: 30.00, y: 32.00 }),
                PathEl::LineTo(Point { x: 30.00, y: 20.00 }),
                PathEl::LineTo(Point { x: 38.00, y: 20.00 }),
                PathEl::LineTo(Point { x: 24.00, y: 6.00 }),
                PathEl::LineTo(Point { x: 10.00, y: 20.00 }),
                PathEl::LineTo(Point { x: 18.00, y: 20.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 10.00, y: 36.00 }),
                PathEl::LineTo(Point { x: 38.00, y: 36.00 }),
                PathEl::LineTo(Point { x: 38.00, y: 40.00 }),
                PathEl::LineTo(Point { x: 10.00, y: 40.00 }),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct PlaylistAddCheck {
    size: f64,
    color: Color,
}

impl PlaylistAddCheck {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for PlaylistAddCheck {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 28.00, y: 20.00 }),
                PathEl::LineTo(Point { x: 4.00, y: 20.00 }),
                PathEl::LineTo(Point { x: 4.00, y: 24.00 }),
                PathEl::LineTo(Point { x: 28.00, y: 24.00 }),
                PathEl::LineTo(Point { x: 28.00, y: 20.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 28.00, y: 12.00 }),
                PathEl::LineTo(Point { x: 4.00, y: 12.00 }),
                PathEl::LineTo(Point { x: 4.00, y: 16.00 }),
                PathEl::LineTo(Point { x: 28.00, y: 16.00 }),
                PathEl::LineTo(Point { x: 28.00, y: 12.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 4.00, y: 32.00 }),
                PathEl::LineTo(Point { x: 20.00, y: 32.00 }),
                PathEl::LineTo(Point { x: 20.00, y: 28.00 }),
                PathEl::LineTo(Point { x: 4.00, y: 28.00 }),
                PathEl::LineTo(Point { x: 4.00, y: 32.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 43.00, y: 23.00 }),
                PathEl::LineTo(Point { x: 46.00, y: 26.00 }),
                PathEl::LineTo(Point { x: 32.01, y: 40.00 }),
                PathEl::LineTo(Point { x: 23.00, y: 31.00 }),
                PathEl::LineTo(Point { x: 26.00, y: 28.00 }),
                PathEl::LineTo(Point { x: 32.01, y: 34.00 }),
                PathEl::LineTo(Point { x: 43.00, y: 23.00 }),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct Markunread {
    size: f64,
    color: Color,
}

impl Markunread {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for Markunread {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 40.00, y: 8.00 }),
                PathEl::LineTo(Point { x: 8.00, y: 8.00 }),
                PathEl::CurveTo(
                    Point { x: 5.79, y: 8.00 },
                    Point { x: 4.02, y: 9.79 },
                    Point { x: 4.02, y: 12.00 },
                ),
                PathEl::LineTo(Point { x: 4.00, y: 36.00 }),
                PathEl::CurveTo(
                    Point { x: 4.00, y: 38.21 },
                    Point { x: 5.79, y: 40.00 },
                    Point { x: 8.00, y: 40.00 },
                ),
                PathEl::LineTo(Point { x: 40.00, y: 40.00 }),
                PathEl::CurveTo(
                    Point { x: 42.21, y: 40.00 },
                    Point { x: 44.00, y: 38.21 },
                    Point { x: 44.00, y: 36.00 },
                ),
                PathEl::LineTo(Point { x: 44.00, y: 12.00 }),
                PathEl::CurveTo(
                    Point { x: 44.00, y: 9.79 },
                    Point { x: 42.21, y: 8.00 },
                    Point { x: 40.00, y: 8.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 40.00, y: 16.00 }),
                PathEl::LineTo(Point { x: 24.00, y: 26.00 }),
                PathEl::LineTo(Point { x: 8.00, y: 16.00 }),
                PathEl::LineTo(Point { x: 8.00, y: 12.00 }),
                PathEl::LineTo(Point { x: 24.00, y: 22.00 }),
                PathEl::LineTo(Point { x: 40.00, y: 12.00 }),
                PathEl::LineTo(Point { x: 40.00, y: 16.00 }),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct PowerSettingsNew {
    size: f64,
    color: Color,
}

impl PowerSettingsNew {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for PowerSettingsNew {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 26.00, y: 6.00 }),
                PathEl::LineTo(Point { x: 22.00, y: 6.00 }),
                PathEl::LineTo(Point { x: 22.00, y: 26.00 }),
                PathEl::LineTo(Point { x: 26.00, y: 26.00 }),
                PathEl::LineTo(Point { x: 26.00, y: 6.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 35.67, y: 10.33 }),
                PathEl::LineTo(Point { x: 32.84, y: 13.16 }),
                PathEl::CurveTo(
                    Point { x: 35.98, y: 15.73 },
                    Point { x: 38.00, y: 19.62 },
                    Point { x: 38.00, y: 24.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 38.00, y: 31.73 },
                    Point { x: 31.73, y: 38.00 },
                    Point { x: 24.00, y: 38.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 16.27, y: 38.00 },
                    Point { x: 10.00, y: 31.73 },
                    Point { x: 10.00, y: 24.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 10.00, y: 19.62 },
                    Point { x: 12.02, y: 15.73 },
                    Point { x: 15.16, y: 13.16 },
                ),
                PathEl::LineTo(Point { x: 12.33, y: 10.33 }),
                PathEl::CurveTo(
                    Point { x: 8.47, y: 13.63 },
                    Point { x: 6.00, y: 18.52 },
                    Point { x: 6.00, y: 24.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 6.00, y: 33.94 },
                    Point { x: 14.06, y: 42.00 },
                    Point { x: 24.00, y: 42.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 33.94, y: 42.00 },
                    Point { x: 42.00, y: 33.94 },
                    Point { x: 42.00, y: 24.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 42.00, y: 18.52 },
                    Point { x: 39.53, y: 13.63 },
                    Point { x: 35.67, y: 10.33 },
                ),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct Poll {
    size: f64,
    color: Color,
}

impl Poll {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for Poll {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 38.00, y: 6.00 }),
                PathEl::LineTo(Point { x: 10.00, y: 6.00 }),
                PathEl::CurveTo(
                    Point { x: 7.79, y: 6.00 },
                    Point { x: 6.00, y: 7.79 },
                    Point { x: 6.00, y: 10.00 },
                ),
                PathEl::LineTo(Point { x: 6.00, y: 38.00 }),
                PathEl::CurveTo(
                    Point { x: 6.00, y: 40.21 },
                    Point { x: 7.79, y: 42.00 },
                    Point { x: 10.00, y: 42.00 },
                ),
                PathEl::LineTo(Point { x: 38.00, y: 42.00 }),
                PathEl::CurveTo(
                    Point { x: 40.21, y: 42.00 },
                    Point { x: 42.00, y: 40.21 },
                    Point { x: 42.00, y: 38.00 },
                ),
                PathEl::LineTo(Point { x: 42.00, y: 10.00 }),
                PathEl::CurveTo(
                    Point { x: 42.00, y: 7.79 },
                    Point { x: 40.21, y: 6.00 },
                    Point { x: 38.00, y: 6.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 18.00, y: 34.00 }),
                PathEl::LineTo(Point { x: 14.00, y: 34.00 }),
                PathEl::LineTo(Point { x: 14.00, y: 20.00 }),
                PathEl::LineTo(Point { x: 18.00, y: 20.00 }),
                PathEl::LineTo(Point { x: 18.00, y: 34.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 26.00, y: 34.00 }),
                PathEl::LineTo(Point { x: 22.00, y: 34.00 }),
                PathEl::LineTo(Point { x: 22.00, y: 14.00 }),
                PathEl::LineTo(Point { x: 26.00, y: 14.00 }),
                PathEl::LineTo(Point { x: 26.00, y: 34.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 34.00, y: 34.00 }),
                PathEl::LineTo(Point { x: 30.00, y: 34.00 }),
                PathEl::LineTo(Point { x: 30.00, y: 26.00 }),
                PathEl::LineTo(Point { x: 34.00, y: 26.00 }),
                PathEl::LineTo(Point { x: 34.00, y: 34.00 }),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct SignalCellularConnectedNoInternet3Bar {
    size: f64,
    color: Color,
}

impl SignalCellularConnectedNoInternet3Bar {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for SignalCellularConnectedNoInternet3Bar {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 44.00, y: 16.00 }),
                PathEl::LineTo(Point { x: 44.00, y: 4.00 }),
                PathEl::LineTo(Point { x: 4.00, y: 44.00 }),
                PathEl::LineTo(Point { x: 36.00, y: 44.00 }),
                PathEl::LineTo(Point { x: 36.00, y: 16.00 }),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 34.00, y: 44.00 }),
                PathEl::LineTo(Point { x: 34.00, y: 14.00 }),
                PathEl::LineTo(Point { x: 4.00, y: 44.00 }),
                PathEl::LineTo(Point { x: 34.00, y: 44.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 40.00, y: 20.00 }),
                PathEl::LineTo(Point { x: 40.00, y: 36.00 }),
                PathEl::LineTo(Point { x: 44.00, y: 36.00 }),
                PathEl::LineTo(Point { x: 44.00, y: 20.00 }),
                PathEl::LineTo(Point { x: 40.00, y: 20.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 40.00, y: 44.00 }),
                PathEl::LineTo(Point { x: 44.00, y: 44.00 }),
                PathEl::LineTo(Point { x: 44.00, y: 40.00 }),
                PathEl::LineTo(Point { x: 40.00, y: 40.00 }),
                PathEl::LineTo(Point { x: 40.00, y: 44.00 }),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct HdrOff {
    size: f64,
    color: Color,
}

impl HdrOff {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for HdrOff {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 35.00, y: 30.00 }),
                PathEl::LineTo(Point { x: 35.00, y: 26.00 }),
                PathEl::LineTo(Point { x: 37.30, y: 26.00 }),
                PathEl::LineTo(Point { x: 39.00, y: 30.00 }),
                PathEl::LineTo(Point { x: 42.00, y: 30.00 }),
                PathEl::LineTo(Point { x: 40.20, y: 25.80 }),
                PathEl::CurveTo(
                    Point { x: 41.30, y: 25.30 },
                    Point { x: 42.00, y: 24.30 },
                    Point { x: 42.00, y: 23.00 },
                ),
                PathEl::LineTo(Point { x: 42.00, y: 21.00 }),
                PathEl::CurveTo(
                    Point { x: 42.00, y: 19.30 },
                    Point { x: 40.70, y: 18.00 },
                    Point { x: 39.00, y: 18.00 },
                ),
                PathEl::LineTo(Point { x: 32.00, y: 18.00 }),
                PathEl::LineTo(Point { x: 32.00, y: 27.80 }),
                PathEl::LineTo(Point { x: 34.20, y: 30.00 }),
                PathEl::LineTo(Point { x: 35.00, y: 30.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 35.00, y: 21.00 }),
                PathEl::LineTo(Point { x: 39.00, y: 21.00 }),
                PathEl::LineTo(Point { x: 39.00, y: 23.00 }),
                PathEl::LineTo(Point { x: 35.00, y: 23.00 }),
                PathEl::LineTo(Point { x: 35.00, y: 21.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 26.00, y: 21.00 }),
                PathEl::LineTo(Point { x: 26.00, y: 21.80 }),
                PathEl::LineTo(Point { x: 29.00, y: 24.80 }),
                PathEl::LineTo(Point { x: 29.00, y: 21.00 }),
                PathEl::CurveTo(
                    Point { x: 29.00, y: 19.30 },
                    Point { x: 27.70, y: 18.00 },
                    Point { x: 26.00, y: 18.00 },
                ),
                PathEl::LineTo(Point { x: 22.20, y: 18.00 }),
                PathEl::LineTo(Point { x: 25.20, y: 21.00 }),
                PathEl::LineTo(Point { x: 26.00, y: 21.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 19.00, y: 19.00 }),
                PathEl::LineTo(Point { x: 4.90, y: 4.90 }),
                PathEl::LineTo(Point { x: 2.80, y: 7.00 }),
                PathEl::LineTo(Point { x: 13.80, y: 18.00 }),
                PathEl::LineTo(Point { x: 13.00, y: 18.00 }),
                PathEl::LineTo(Point { x: 13.00, y: 22.00 }),
                PathEl::LineTo(Point { x: 9.00, y: 22.00 }),
                PathEl::LineTo(Point { x: 9.00, y: 18.00 }),
                PathEl::LineTo(Point { x: 6.00, y: 18.00 }),
                PathEl::LineTo(Point { x: 6.00, y: 30.00 }),
                PathEl::LineTo(Point { x: 9.00, y: 30.00 }),
                PathEl::LineTo(Point { x: 9.00, y: 25.00 }),
                PathEl::LineTo(Point { x: 13.00, y: 25.00 }),
                PathEl::LineTo(Point { x: 13.00, y: 30.00 }),
                PathEl::LineTo(Point { x: 16.00, y: 30.00 }),
                PathEl::LineTo(Point { x: 16.00, y: 20.20 }),
                PathEl::LineTo(Point { x: 19.00, y: 23.20 }),
                PathEl::LineTo(Point { x: 19.00, y: 30.00 }),
                PathEl::LineTo(Point { x: 25.80, y: 30.00 }),
                PathEl::LineTo(Point { x: 41.00, y: 45.20 }),
                PathEl::LineTo(Point { x: 43.10, y: 43.10 }),
                PathEl::LineTo(Point { x: 19.00, y: 19.00 }),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct ExitToApp {
    size: f64,
    color: Color,
}

impl ExitToApp {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for ExitToApp {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 20.17, y: 31.17 }),
                PathEl::LineTo(Point { x: 23.00, y: 34.00 }),
                PathEl::LineTo(Point { x: 33.00, y: 24.00 }),
                PathEl::LineTo(Point { x: 23.00, y: 14.00 }),
                PathEl::LineTo(Point { x: 20.17, y: 16.83 }),
                PathEl::LineTo(Point { x: 25.34, y: 22.00 }),
                PathEl::LineTo(Point { x: 6.00, y: 22.00 }),
                PathEl::LineTo(Point { x: 6.00, y: 26.00 }),
                PathEl::LineTo(Point { x: 25.34, y: 26.00 }),
                PathEl::LineTo(Point { x: 20.17, y: 31.17 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 38.00, y: 6.00 }),
                PathEl::LineTo(Point { x: 10.00, y: 6.00 }),
                PathEl::CurveTo(
                    Point { x: 7.79, y: 6.00 },
                    Point { x: 6.00, y: 7.79 },
                    Point { x: 6.00, y: 10.00 },
                ),
                PathEl::LineTo(Point { x: 6.00, y: 18.00 }),
                PathEl::LineTo(Point { x: 10.00, y: 18.00 }),
                PathEl::LineTo(Point { x: 10.00, y: 10.00 }),
                PathEl::LineTo(Point { x: 38.00, y: 10.00 }),
                PathEl::LineTo(Point { x: 38.00, y: 38.00 }),
                PathEl::LineTo(Point { x: 10.00, y: 38.00 }),
                PathEl::LineTo(Point { x: 10.00, y: 30.00 }),
                PathEl::LineTo(Point { x: 6.00, y: 30.00 }),
                PathEl::LineTo(Point { x: 6.00, y: 38.00 }),
                PathEl::CurveTo(
                    Point { x: 6.00, y: 40.21 },
                    Point { x: 7.79, y: 42.00 },
                    Point { x: 10.00, y: 42.00 },
                ),
                PathEl::LineTo(Point { x: 38.00, y: 42.00 }),
                PathEl::CurveTo(
                    Point { x: 40.21, y: 42.00 },
                    Point { x: 42.00, y: 40.21 },
                    Point { x: 42.00, y: 38.00 },
                ),
                PathEl::LineTo(Point { x: 42.00, y: 10.00 }),
                PathEl::CurveTo(
                    Point { x: 42.00, y: 7.79 },
                    Point { x: 40.21, y: 6.00 },
                    Point { x: 38.00, y: 6.00 },
                ),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct Print {
    size: f64,
    color: Color,
}

impl Print {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for Print {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 38.00, y: 16.00 }),
                PathEl::LineTo(Point { x: 10.00, y: 16.00 }),
                PathEl::CurveTo(
                    Point { x: 6.69, y: 16.00 },
                    Point { x: 4.00, y: 18.69 },
                    Point { x: 4.00, y: 22.00 },
                ),
                PathEl::LineTo(Point { x: 4.00, y: 34.00 }),
                PathEl::LineTo(Point { x: 12.00, y: 34.00 }),
                PathEl::LineTo(Point { x: 12.00, y: 42.00 }),
                PathEl::LineTo(Point { x: 36.00, y: 42.00 }),
                PathEl::LineTo(Point { x: 36.00, y: 34.00 }),
                PathEl::LineTo(Point { x: 44.00, y: 34.00 }),
                PathEl::LineTo(Point { x: 44.00, y: 22.00 }),
                PathEl::CurveTo(
                    Point { x: 44.00, y: 18.69 },
                    Point { x: 41.31, y: 16.00 },
                    Point { x: 38.00, y: 16.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 32.00, y: 38.00 }),
                PathEl::LineTo(Point { x: 16.00, y: 38.00 }),
                PathEl::LineTo(Point { x: 16.00, y: 28.00 }),
                PathEl::LineTo(Point { x: 32.00, y: 28.00 }),
                PathEl::LineTo(Point { x: 32.00, y: 38.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 38.00, y: 24.00 }),
                PathEl::CurveTo(
                    Point { x: 36.89, y: 24.00 },
                    Point { x: 36.00, y: 23.11 },
                    Point { x: 36.00, y: 22.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 36.00, y: 20.89 },
                    Point { x: 36.89, y: 20.00 },
                    Point { x: 38.00, y: 20.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 39.11, y: 20.00 },
                    Point { x: 40.00, y: 20.89 },
                    Point { x: 40.00, y: 22.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 40.00, y: 23.11 },
                    Point { x: 39.11, y: 24.00 },
                    Point { x: 38.00, y: 24.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 36.00, y: 6.00 }),
                PathEl::LineTo(Point { x: 12.00, y: 6.00 }),
                PathEl::LineTo(Point { x: 12.00, y: 14.00 }),
                PathEl::LineTo(Point { x: 36.00, y: 14.00 }),
                PathEl::LineTo(Point { x: 36.00, y: 6.00 }),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct SdCard {
    size: f64,
    color: Color,
}

impl SdCard {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for SdCard {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 36.00, y: 4.00 }),
                PathEl::LineTo(Point { x: 20.00, y: 4.00 }),
                PathEl::LineTo(Point { x: 8.04, y: 16.00 }),
                PathEl::LineTo(Point { x: 8.00, y: 40.00 }),
                PathEl::CurveTo(
                    Point { x: 8.00, y: 42.20 },
                    Point { x: 9.80, y: 44.00 },
                    Point { x: 12.00, y: 44.00 },
                ),
                PathEl::LineTo(Point { x: 36.00, y: 44.00 }),
                PathEl::CurveTo(
                    Point { x: 38.20, y: 44.00 },
                    Point { x: 40.00, y: 42.20 },
                    Point { x: 40.00, y: 40.00 },
                ),
                PathEl::LineTo(Point { x: 40.00, y: 8.00 }),
                PathEl::CurveTo(
                    Point { x: 40.00, y: 5.80 },
                    Point { x: 38.20, y: 4.00 },
                    Point { x: 36.00, y: 4.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 24.00, y: 16.00 }),
                PathEl::LineTo(Point { x: 20.00, y: 16.00 }),
                PathEl::LineTo(Point { x: 20.00, y: 8.00 }),
                PathEl::LineTo(Point { x: 24.00, y: 8.00 }),
                PathEl::LineTo(Point { x: 24.00, y: 16.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 30.00, y: 16.00 }),
                PathEl::LineTo(Point { x: 26.00, y: 16.00 }),
                PathEl::LineTo(Point { x: 26.00, y: 8.00 }),
                PathEl::LineTo(Point { x: 30.00, y: 8.00 }),
                PathEl::LineTo(Point { x: 30.00, y: 16.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 36.00, y: 16.00 }),
                PathEl::LineTo(Point { x: 32.00, y: 16.00 }),
                PathEl::LineTo(Point { x: 32.00, y: 8.00 }),
                PathEl::LineTo(Point { x: 36.00, y: 8.00 }),
                PathEl::LineTo(Point { x: 36.00, y: 16.00 }),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct ImageAspectRatio {
    size: f64,
    color: Color,
}

impl ImageAspectRatio {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for ImageAspectRatio {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 32.00, y: 20.00 }),
                PathEl::LineTo(Point { x: 28.00, y: 20.00 }),
                PathEl::LineTo(Point { x: 28.00, y: 24.00 }),
                PathEl::LineTo(Point { x: 32.00, y: 24.00 }),
                PathEl::LineTo(Point { x: 32.00, y: 20.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 32.00, y: 28.00 }),
                PathEl::LineTo(Point { x: 28.00, y: 28.00 }),
                PathEl::LineTo(Point { x: 28.00, y: 32.00 }),
                PathEl::LineTo(Point { x: 32.00, y: 32.00 }),
                PathEl::LineTo(Point { x: 32.00, y: 28.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 16.00, y: 20.00 }),
                PathEl::LineTo(Point { x: 12.00, y: 20.00 }),
                PathEl::LineTo(Point { x: 12.00, y: 24.00 }),
                PathEl::LineTo(Point { x: 16.00, y: 24.00 }),
                PathEl::LineTo(Point { x: 16.00, y: 20.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 24.00, y: 20.00 }),
                PathEl::LineTo(Point { x: 20.00, y: 20.00 }),
                PathEl::LineTo(Point { x: 20.00, y: 24.00 }),
                PathEl::LineTo(Point { x: 24.00, y: 24.00 }),
                PathEl::LineTo(Point { x: 24.00, y: 20.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 40.00, y: 8.00 }),
                PathEl::LineTo(Point { x: 8.00, y: 8.00 }),
                PathEl::CurveTo(
                    Point { x: 5.79, y: 8.00 },
                    Point { x: 4.00, y: 9.79 },
                    Point { x: 4.00, y: 12.00 },
                ),
                PathEl::LineTo(Point { x: 4.00, y: 36.00 }),
                PathEl::CurveTo(
                    Point { x: 4.00, y: 38.21 },
                    Point { x: 5.79, y: 40.00 },
                    Point { x: 8.00, y: 40.00 },
                ),
                PathEl::LineTo(Point { x: 40.00, y: 40.00 }),
                PathEl::CurveTo(
                    Point { x: 42.21, y: 40.00 },
                    Point { x: 44.00, y: 38.21 },
                    Point { x: 44.00, y: 36.00 },
                ),
                PathEl::LineTo(Point { x: 44.00, y: 12.00 }),
                PathEl::CurveTo(
                    Point { x: 44.00, y: 9.79 },
                    Point { x: 42.21, y: 8.00 },
                    Point { x: 40.00, y: 8.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 40.00, y: 36.00 }),
                PathEl::LineTo(Point { x: 8.00, y: 36.00 }),
                PathEl::LineTo(Point { x: 8.00, y: 12.00 }),
                PathEl::LineTo(Point { x: 40.00, y: 12.00 }),
                PathEl::LineTo(Point { x: 40.00, y: 36.00 }),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct DirectionsSubway {
    size: f64,
    color: Color,
}

impl DirectionsSubway {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for DirectionsSubway {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 24.00, y: 4.00 }),
                PathEl::CurveTo(
                    Point { x: 15.16, y: 4.00 },
                    Point { x: 8.00, y: 5.00 },
                    Point { x: 8.00, y: 12.00 },
                ),
                PathEl::LineTo(Point { x: 8.00, y: 31.00 }),
                PathEl::CurveTo(
                    Point { x: 8.00, y: 34.87 },
                    Point { x: 11.14, y: 38.00 },
                    Point { x: 15.00, y: 38.00 },
                ),
                PathEl::LineTo(Point { x: 12.00, y: 41.00 }),
                PathEl::LineTo(Point { x: 12.00, y: 42.00 }),
                PathEl::LineTo(Point { x: 36.00, y: 42.00 }),
                PathEl::LineTo(Point { x: 36.00, y: 41.00 }),
                PathEl::LineTo(Point { x: 33.00, y: 38.00 }),
                PathEl::CurveTo(
                    Point { x: 36.87, y: 38.00 },
                    Point { x: 40.00, y: 34.87 },
                    Point { x: 40.00, y: 31.00 },
                ),
                PathEl::LineTo(Point { x: 40.00, y: 12.00 }),
                PathEl::CurveTo(
                    Point { x: 40.00, y: 5.00 },
                    Point { x: 32.84, y: 4.00 },
                    Point { x: 24.00, y: 4.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 15.00, y: 34.00 }),
                PathEl::CurveTo(
                    Point { x: 13.34, y: 34.00 },
                    Point { x: 12.00, y: 32.66 },
                    Point { x: 12.00, y: 31.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 12.00, y: 29.34 },
                    Point { x: 13.34, y: 28.00 },
                    Point { x: 15.00, y: 28.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 16.66, y: 28.00 },
                    Point { x: 18.00, y: 29.34 },
                    Point { x: 18.00, y: 31.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 18.00, y: 32.66 },
                    Point { x: 16.66, y: 34.00 },
                    Point { x: 15.00, y: 34.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 22.00, y: 22.00 }),
                PathEl::LineTo(Point { x: 12.00, y: 22.00 }),
                PathEl::LineTo(Point { x: 12.00, y: 12.00 }),
                PathEl::LineTo(Point { x: 22.00, y: 12.00 }),
                PathEl::LineTo(Point { x: 22.00, y: 22.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 33.00, y: 34.00 }),
                PathEl::CurveTo(
                    Point { x: 31.34, y: 34.00 },
                    Point { x: 30.00, y: 32.66 },
                    Point { x: 30.00, y: 31.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 30.00, y: 29.34 },
                    Point { x: 31.34, y: 28.00 },
                    Point { x: 33.00, y: 28.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 34.66, y: 28.00 },
                    Point { x: 36.00, y: 29.34 },
                    Point { x: 36.00, y: 31.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 36.00, y: 32.66 },
                    Point { x: 34.66, y: 34.00 },
                    Point { x: 33.00, y: 34.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 36.00, y: 22.00 }),
                PathEl::LineTo(Point { x: 26.00, y: 22.00 }),
                PathEl::LineTo(Point { x: 26.00, y: 12.00 }),
                PathEl::LineTo(Point { x: 36.00, y: 12.00 }),
                PathEl::LineTo(Point { x: 36.00, y: 22.00 }),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct PriorityHigh {
    size: f64,
    color: Color,
}

impl PriorityHigh {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for PriorityHigh {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            Circle {
                center: Point { x: 24.00, y: 38.00 },
                radius: 4.00,
            },
            &brush,
        );
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 20.00, y: 6.00 }),
                PathEl::LineTo(Point { x: 28.00, y: 6.00 }),
                PathEl::LineTo(Point { x: 28.00, y: 30.00 }),
                PathEl::LineTo(Point { x: 20.00, y: 30.00 }),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct IndeterminateCheckBox {
    size: f64,
    color: Color,
}

impl IndeterminateCheckBox {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for IndeterminateCheckBox {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 24.0, height / 24.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 19.00, y: 3.00 }),
                PathEl::LineTo(Point { x: 5.00, y: 3.00 }),
                PathEl::CurveTo(
                    Point { x: 3.90, y: 3.00 },
                    Point { x: 3.00, y: 3.90 },
                    Point { x: 3.00, y: 5.00 },
                ),
                PathEl::LineTo(Point { x: 3.00, y: 19.00 }),
                PathEl::CurveTo(
                    Point { x: 3.00, y: 20.10 },
                    Point { x: 3.90, y: 21.00 },
                    Point { x: 5.00, y: 21.00 },
                ),
                PathEl::LineTo(Point { x: 19.00, y: 21.00 }),
                PathEl::CurveTo(
                    Point { x: 20.10, y: 21.00 },
                    Point { x: 21.00, y: 20.10 },
                    Point { x: 21.00, y: 19.00 },
                ),
                PathEl::LineTo(Point { x: 21.00, y: 5.00 }),
                PathEl::CurveTo(
                    Point { x: 21.00, y: 3.90 },
                    Point { x: 20.10, y: 3.00 },
                    Point { x: 19.00, y: 3.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 17.00, y: 13.00 }),
                PathEl::LineTo(Point { x: 7.00, y: 13.00 }),
                PathEl::LineTo(Point { x: 7.00, y: 11.00 }),
                PathEl::LineTo(Point { x: 17.00, y: 11.00 }),
                PathEl::LineTo(Point { x: 17.00, y: 13.00 }),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct FilterNone {
    size: f64,
    color: Color,
}

impl FilterNone {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for FilterNone {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 6.00, y: 10.00 }),
                PathEl::LineTo(Point { x: 2.00, y: 10.00 }),
                PathEl::LineTo(Point { x: 2.00, y: 42.00 }),
                PathEl::CurveTo(
                    Point { x: 2.00, y: 44.21 },
                    Point { x: 3.79, y: 46.00 },
                    Point { x: 6.00, y: 46.00 },
                ),
                PathEl::LineTo(Point { x: 38.00, y: 46.00 }),
                PathEl::LineTo(Point { x: 38.00, y: 42.00 }),
                PathEl::LineTo(Point { x: 6.00, y: 42.00 }),
                PathEl::LineTo(Point { x: 6.00, y: 10.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 42.00, y: 2.00 }),
                PathEl::LineTo(Point { x: 14.00, y: 2.00 }),
                PathEl::CurveTo(
                    Point { x: 11.79, y: 2.00 },
                    Point { x: 10.00, y: 3.79 },
                    Point { x: 10.00, y: 6.00 },
                ),
                PathEl::LineTo(Point { x: 10.00, y: 34.00 }),
                PathEl::CurveTo(
                    Point { x: 10.00, y: 36.21 },
                    Point { x: 11.79, y: 38.00 },
                    Point { x: 14.00, y: 38.00 },
                ),
                PathEl::LineTo(Point { x: 42.00, y: 38.00 }),
                PathEl::CurveTo(
                    Point { x: 44.21, y: 38.00 },
                    Point { x: 46.00, y: 36.21 },
                    Point { x: 46.00, y: 34.00 },
                ),
                PathEl::LineTo(Point { x: 46.00, y: 6.00 }),
                PathEl::CurveTo(
                    Point { x: 46.00, y: 3.79 },
                    Point { x: 44.21, y: 2.00 },
                    Point { x: 42.00, y: 2.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 42.00, y: 34.00 }),
                PathEl::LineTo(Point { x: 14.00, y: 34.00 }),
                PathEl::LineTo(Point { x: 14.00, y: 6.00 }),
                PathEl::LineTo(Point { x: 42.00, y: 6.00 }),
                PathEl::LineTo(Point { x: 42.00, y: 34.00 }),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct Clear {
    size: f64,
    color: Color,
}

impl Clear {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for Clear {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 38.00, y: 12.83 }),
                PathEl::LineTo(Point { x: 35.17, y: 10.00 }),
                PathEl::LineTo(Point { x: 24.00, y: 21.17 }),
                PathEl::LineTo(Point { x: 12.83, y: 10.00 }),
                PathEl::LineTo(Point { x: 10.00, y: 12.83 }),
                PathEl::LineTo(Point { x: 21.17, y: 24.00 }),
                PathEl::LineTo(Point { x: 10.00, y: 35.17 }),
                PathEl::LineTo(Point { x: 12.83, y: 38.00 }),
                PathEl::LineTo(Point { x: 24.00, y: 26.83 }),
                PathEl::LineTo(Point { x: 35.17, y: 38.00 }),
                PathEl::LineTo(Point { x: 38.00, y: 35.17 }),
                PathEl::LineTo(Point { x: 26.83, y: 24.00 }),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct NetworkCell {
    size: f64,
    color: Color,
}

impl NetworkCell {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for NetworkCell {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 4.00, y: 44.00 }),
                PathEl::LineTo(Point { x: 44.00, y: 44.00 }),
                PathEl::LineTo(Point { x: 44.00, y: 4.00 }),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 34.00, y: 14.00 }),
                PathEl::LineTo(Point { x: 4.00, y: 44.00 }),
                PathEl::LineTo(Point { x: 34.00, y: 44.00 }),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct LeakAdd {
    size: f64,
    color: Color,
}

impl LeakAdd {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for LeakAdd {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 12.00, y: 6.00 }),
                PathEl::LineTo(Point { x: 6.00, y: 6.00 }),
                PathEl::LineTo(Point { x: 6.00, y: 12.00 }),
                PathEl::CurveTo(
                    Point { x: 9.31, y: 12.00 },
                    Point { x: 12.00, y: 9.31 },
                    Point { x: 12.00, y: 6.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 28.00, y: 6.00 }),
                PathEl::LineTo(Point { x: 24.00, y: 6.00 }),
                PathEl::CurveTo(
                    Point { x: 24.00, y: 15.94 },
                    Point { x: 15.94, y: 24.00 },
                    Point { x: 6.00, y: 24.00 },
                ),
                PathEl::LineTo(Point { x: 6.00, y: 28.00 }),
                PathEl::CurveTo(
                    Point { x: 18.15, y: 28.00 },
                    Point { x: 28.00, y: 18.15 },
                    Point { x: 28.00, y: 6.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 20.00, y: 6.00 }),
                PathEl::LineTo(Point { x: 16.00, y: 6.00 }),
                PathEl::CurveTo(
                    Point { x: 16.00, y: 11.52 },
                    Point { x: 11.52, y: 16.00 },
                    Point { x: 6.00, y: 16.00 },
                ),
                PathEl::LineTo(Point { x: 6.00, y: 20.00 }),
                PathEl::CurveTo(
                    Point { x: 13.73, y: 20.00 },
                    Point { x: 20.00, y: 13.73 },
                    Point { x: 20.00, y: 6.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 20.00, y: 42.00 }),
                PathEl::LineTo(Point { x: 24.00, y: 42.00 }),
                PathEl::CurveTo(
                    Point { x: 24.00, y: 32.06 },
                    Point { x: 32.06, y: 24.00 },
                    Point { x: 42.00, y: 24.00 },
                ),
                PathEl::LineTo(Point { x: 42.00, y: 20.00 }),
                PathEl::CurveTo(
                    Point { x: 29.85, y: 20.00 },
                    Point { x: 20.00, y: 29.85 },
                    Point { x: 20.00, y: 42.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 36.00, y: 42.00 }),
                PathEl::LineTo(Point { x: 42.00, y: 42.00 }),
                PathEl::LineTo(Point { x: 42.00, y: 36.00 }),
                PathEl::CurveTo(
                    Point { x: 38.69, y: 36.00 },
                    Point { x: 36.00, y: 38.69 },
                    Point { x: 36.00, y: 42.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 28.00, y: 42.00 }),
                PathEl::LineTo(Point { x: 32.00, y: 42.00 }),
                PathEl::CurveTo(
                    Point { x: 32.00, y: 36.48 },
                    Point { x: 36.48, y: 32.00 },
                    Point { x: 42.00, y: 32.00 },
                ),
                PathEl::LineTo(Point { x: 42.00, y: 28.00 }),
                PathEl::CurveTo(
                    Point { x: 34.27, y: 28.00 },
                    Point { x: 28.00, y: 34.27 },
                    Point { x: 28.00, y: 42.00 },
                ),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct ChangeHistory {
    size: f64,
    color: Color,
}

impl ChangeHistory {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for ChangeHistory {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 24.00, y: 15.55 }),
                PathEl::LineTo(Point { x: 36.78, y: 36.00 }),
                PathEl::LineTo(Point { x: 11.22, y: 36.00 }),
                PathEl::LineTo(Point { x: 24.00, y: 15.55 }),
                PathEl::MoveTo(Point { x: 24.00, y: 8.00 }),
                PathEl::LineTo(Point { x: 4.00, y: 40.00 }),
                PathEl::LineTo(Point { x: 44.00, y: 40.00 }),
                PathEl::LineTo(Point { x: 24.00, y: 8.00 }),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct PlayCircleOutline {
    size: f64,
    color: Color,
}

impl PlayCircleOutline {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for PlayCircleOutline {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 20.00, y: 33.00 }),
                PathEl::LineTo(Point { x: 32.00, y: 24.00 }),
                PathEl::LineTo(Point { x: 20.00, y: 15.00 }),
                PathEl::LineTo(Point { x: 20.00, y: 33.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 24.00, y: 4.00 }),
                PathEl::CurveTo(
                    Point { x: 12.95, y: 4.00 },
                    Point { x: 4.00, y: 12.95 },
                    Point { x: 4.00, y: 24.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 4.00, y: 35.05 },
                    Point { x: 12.95, y: 44.00 },
                    Point { x: 24.00, y: 44.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 35.05, y: 44.00 },
                    Point { x: 44.00, y: 35.05 },
                    Point { x: 44.00, y: 24.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 44.00, y: 12.95 },
                    Point { x: 35.05, y: 4.00 },
                    Point { x: 24.00, y: 4.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 24.00, y: 40.00 }),
                PathEl::CurveTo(
                    Point { x: 15.18, y: 40.00 },
                    Point { x: 8.00, y: 32.82 },
                    Point { x: 8.00, y: 24.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 8.00, y: 15.18 },
                    Point { x: 15.18, y: 8.00 },
                    Point { x: 24.00, y: 8.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 32.82, y: 8.00 },
                    Point { x: 40.00, y: 15.18 },
                    Point { x: 40.00, y: 24.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 40.00, y: 32.82 },
                    Point { x: 32.82, y: 40.00 },
                    Point { x: 24.00, y: 40.00 },
                ),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct Cached {
    size: f64,
    color: Color,
}

impl Cached {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for Cached {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 38.00, y: 16.00 }),
                PathEl::LineTo(Point { x: 30.00, y: 24.00 }),
                PathEl::LineTo(Point { x: 36.00, y: 24.00 }),
                PathEl::CurveTo(
                    Point { x: 36.00, y: 30.63 },
                    Point { x: 30.63, y: 36.00 },
                    Point { x: 24.00, y: 36.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 21.97, y: 36.00 },
                    Point { x: 20.07, y: 35.49 },
                    Point { x: 18.39, y: 34.61 },
                ),
                PathEl::LineTo(Point { x: 15.47, y: 37.53 }),
                PathEl::CurveTo(
                    Point { x: 17.95, y: 39.08 },
                    Point { x: 20.86, y: 40.00 },
                    Point { x: 24.00, y: 40.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 32.84, y: 40.00 },
                    Point { x: 40.00, y: 32.84 },
                    Point { x: 40.00, y: 24.00 },
                ),
                PathEl::LineTo(Point { x: 46.00, y: 24.00 }),
                PathEl::LineTo(Point { x: 38.00, y: 16.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 12.00, y: 24.00 }),
                PathEl::CurveTo(
                    Point { x: 12.00, y: 17.37 },
                    Point { x: 17.37, y: 12.00 },
                    Point { x: 24.00, y: 12.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 26.03, y: 12.00 },
                    Point { x: 27.93, y: 12.51 },
                    Point { x: 29.61, y: 13.39 },
                ),
                PathEl::LineTo(Point { x: 32.53, y: 10.47 }),
                PathEl::CurveTo(
                    Point { x: 30.05, y: 8.92 },
                    Point { x: 27.14, y: 8.00 },
                    Point { x: 24.00, y: 8.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 15.16, y: 8.00 },
                    Point { x: 8.00, y: 15.16 },
                    Point { x: 8.00, y: 24.00 },
                ),
                PathEl::LineTo(Point { x: 2.00, y: 24.00 }),
                PathEl::LineTo(Point { x: 10.00, y: 32.00 }),
                PathEl::LineTo(Point { x: 18.00, y: 24.00 }),
                PathEl::LineTo(Point { x: 12.00, y: 24.00 }),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct LocalPlay {
    size: f64,
    color: Color,
}

impl LocalPlay {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for LocalPlay {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 40.00, y: 24.00 }),
                PathEl::CurveTo(
                    Point { x: 40.00, y: 21.79 },
                    Point { x: 41.79, y: 20.00 },
                    Point { x: 44.00, y: 20.00 },
                ),
                PathEl::LineTo(Point { x: 44.00, y: 12.00 }),
                PathEl::CurveTo(
                    Point { x: 44.00, y: 9.79 },
                    Point { x: 42.21, y: 8.00 },
                    Point { x: 40.00, y: 8.00 },
                ),
                PathEl::LineTo(Point { x: 8.00, y: 8.00 }),
                PathEl::CurveTo(
                    Point { x: 5.79, y: 8.00 },
                    Point { x: 4.02, y: 9.79 },
                    Point { x: 4.02, y: 12.00 },
                ),
                PathEl::LineTo(Point { x: 4.01, y: 20.00 }),
                PathEl::CurveTo(
                    Point { x: 6.22, y: 20.01 },
                    Point { x: 8.00, y: 21.80 },
                    Point { x: 8.00, y: 24.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 8.00, y: 26.21 },
                    Point { x: 6.21, y: 28.00 },
                    Point { x: 4.01, y: 28.00 },
                ),
                PathEl::LineTo(Point { x: 4.00, y: 36.00 }),
                PathEl::CurveTo(
                    Point { x: 4.00, y: 38.21 },
                    Point { x: 5.79, y: 40.00 },
                    Point { x: 8.00, y: 40.00 },
                ),
                PathEl::LineTo(Point { x: 40.00, y: 40.00 }),
                PathEl::CurveTo(
                    Point { x: 42.21, y: 40.00 },
                    Point { x: 44.00, y: 38.21 },
                    Point { x: 44.00, y: 36.00 },
                ),
                PathEl::LineTo(Point { x: 44.00, y: 28.00 }),
                PathEl::CurveTo(
                    Point { x: 41.79, y: 28.00 },
                    Point { x: 40.00, y: 26.21 },
                    Point { x: 40.00, y: 24.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 31.16, y: 33.60 }),
                PathEl::LineTo(Point { x: 24.00, y: 29.00 }),
                PathEl::LineTo(Point { x: 16.84, y: 33.60 }),
                PathEl::LineTo(Point { x: 19.00, y: 25.37 }),
                PathEl::LineTo(Point { x: 12.42, y: 19.99 }),
                PathEl::LineTo(Point { x: 20.91, y: 19.49 }),
                PathEl::LineTo(Point { x: 24.00, y: 11.60 }),
                PathEl::LineTo(Point { x: 27.09, y: 19.49 }),
                PathEl::LineTo(Point { x: 35.58, y: 19.99 }),
                PathEl::LineTo(Point { x: 29.00, y: 25.37 }),
                PathEl::LineTo(Point { x: 31.16, y: 33.60 }),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct LinearScale {
    size: f64,
    color: Color,
}

impl LinearScale {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for LinearScale {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 39.00, y: 19.00 }),
                PathEl::CurveTo(
                    Point { x: 36.95, y: 19.00 },
                    Point { x: 35.19, y: 20.23 },
                    Point { x: 34.42, y: 22.00 },
                ),
                PathEl::LineTo(Point { x: 28.58, y: 22.00 }),
                PathEl::CurveTo(
                    Point { x: 27.81, y: 20.23 },
                    Point { x: 26.05, y: 19.00 },
                    Point { x: 24.00, y: 19.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 21.95, y: 19.00 },
                    Point { x: 20.19, y: 20.23 },
                    Point { x: 19.42, y: 22.00 },
                ),
                PathEl::LineTo(Point { x: 13.58, y: 22.00 }),
                PathEl::CurveTo(
                    Point { x: 12.81, y: 20.23 },
                    Point { x: 11.05, y: 19.00 },
                    Point { x: 9.00, y: 19.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 6.23, y: 19.00 },
                    Point { x: 4.00, y: 21.23 },
                    Point { x: 4.00, y: 24.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 4.00, y: 26.77 },
                    Point { x: 6.23, y: 29.00 },
                    Point { x: 9.00, y: 29.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 11.05, y: 29.00 },
                    Point { x: 12.81, y: 27.77 },
                    Point { x: 13.58, y: 26.00 },
                ),
                PathEl::LineTo(Point { x: 19.42, y: 26.00 }),
                PathEl::CurveTo(
                    Point { x: 20.19, y: 27.77 },
                    Point { x: 21.95, y: 29.00 },
                    Point { x: 24.00, y: 29.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 26.05, y: 29.00 },
                    Point { x: 27.81, y: 27.77 },
                    Point { x: 28.58, y: 26.00 },
                ),
                PathEl::LineTo(Point { x: 34.42, y: 26.00 }),
                PathEl::CurveTo(
                    Point { x: 35.19, y: 27.77 },
                    Point { x: 36.95, y: 29.00 },
                    Point { x: 39.00, y: 29.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 41.77, y: 29.00 },
                    Point { x: 44.00, y: 26.77 },
                    Point { x: 44.00, y: 24.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 44.00, y: 21.23 },
                    Point { x: 41.77, y: 19.00 },
                    Point { x: 39.00, y: 19.00 },
                ),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct Looks3 {
    size: f64,
    color: Color,
}

impl Looks3 {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for Looks3 {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 38.01, y: 6.00 }),
                PathEl::LineTo(Point { x: 10.01, y: 6.00 }),
                PathEl::CurveTo(
                    Point { x: 7.80, y: 6.00 },
                    Point { x: 6.01, y: 7.79 },
                    Point { x: 6.01, y: 10.00 },
                ),
                PathEl::LineTo(Point { x: 6.01, y: 38.00 }),
                PathEl::CurveTo(
                    Point { x: 6.01, y: 40.21 },
                    Point { x: 7.80, y: 42.00 },
                    Point { x: 10.01, y: 42.00 },
                ),
                PathEl::LineTo(Point { x: 38.01, y: 42.00 }),
                PathEl::CurveTo(
                    Point { x: 40.22, y: 42.00 },
                    Point { x: 42.01, y: 40.21 },
                    Point { x: 42.01, y: 38.00 },
                ),
                PathEl::LineTo(Point { x: 42.01, y: 10.00 }),
                PathEl::CurveTo(
                    Point { x: 42.01, y: 7.79 },
                    Point { x: 40.22, y: 6.00 },
                    Point { x: 38.01, y: 6.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 30.01, y: 21.00 }),
                PathEl::CurveTo(
                    Point { x: 30.01, y: 22.66 },
                    Point { x: 28.67, y: 24.00 },
                    Point { x: 27.01, y: 24.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 28.67, y: 24.00 },
                    Point { x: 30.01, y: 25.34 },
                    Point { x: 30.01, y: 27.00 },
                ),
                PathEl::LineTo(Point { x: 30.01, y: 30.00 }),
                PathEl::CurveTo(
                    Point { x: 30.01, y: 32.21 },
                    Point { x: 28.22, y: 34.00 },
                    Point { x: 26.01, y: 34.00 },
                ),
                PathEl::LineTo(Point { x: 18.01, y: 34.00 }),
                PathEl::LineTo(Point { x: 18.01, y: 30.00 }),
                PathEl::LineTo(Point { x: 26.01, y: 30.00 }),
                PathEl::LineTo(Point { x: 26.01, y: 26.00 }),
                PathEl::LineTo(Point { x: 22.01, y: 26.00 }),
                PathEl::LineTo(Point { x: 22.01, y: 22.00 }),
                PathEl::LineTo(Point { x: 26.01, y: 22.00 }),
                PathEl::LineTo(Point { x: 26.01, y: 18.00 }),
                PathEl::LineTo(Point { x: 18.01, y: 18.00 }),
                PathEl::LineTo(Point { x: 18.01, y: 14.00 }),
                PathEl::LineTo(Point { x: 26.01, y: 14.00 }),
                PathEl::CurveTo(
                    Point { x: 28.22, y: 14.00 },
                    Point { x: 30.01, y: 15.79 },
                    Point { x: 30.01, y: 18.00 },
                ),
                PathEl::LineTo(Point { x: 30.01, y: 21.00 }),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct Tablet {
    size: f64,
    color: Color,
}

impl Tablet {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for Tablet {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 42.00, y: 8.00 }),
                PathEl::LineTo(Point { x: 6.00, y: 8.00 }),
                PathEl::CurveTo(
                    Point { x: 3.79, y: 8.00 },
                    Point { x: 2.00, y: 9.79 },
                    Point { x: 2.00, y: 12.00 },
                ),
                PathEl::LineTo(Point { x: 2.00, y: 36.00 }),
                PathEl::CurveTo(
                    Point { x: 2.00, y: 38.21 },
                    Point { x: 3.79, y: 40.00 },
                    Point { x: 6.00, y: 40.00 },
                ),
                PathEl::LineTo(Point { x: 42.00, y: 40.00 }),
                PathEl::CurveTo(
                    Point { x: 44.21, y: 40.00 },
                    Point { x: 45.98, y: 38.21 },
                    Point { x: 45.98, y: 36.00 },
                ),
                PathEl::LineTo(Point { x: 46.00, y: 12.00 }),
                PathEl::CurveTo(
                    Point { x: 46.00, y: 9.79 },
                    Point { x: 44.21, y: 8.00 },
                    Point { x: 42.00, y: 8.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 38.00, y: 36.00 }),
                PathEl::LineTo(Point { x: 10.00, y: 36.00 }),
                PathEl::LineTo(Point { x: 10.00, y: 12.00 }),
                PathEl::LineTo(Point { x: 38.00, y: 12.00 }),
                PathEl::LineTo(Point { x: 38.00, y: 36.00 }),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct FiberDvr {
    size: f64,
    color: Color,
}

impl FiberDvr {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for FiberDvr {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 35.00, y: 21.00 }),
                PathEl::LineTo(Point { x: 39.00, y: 21.00 }),
                PathEl::LineTo(Point { x: 39.00, y: 23.00 }),
                PathEl::LineTo(Point { x: 35.00, y: 23.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 9.00, y: 21.00 }),
                PathEl::LineTo(Point { x: 13.00, y: 21.00 }),
                PathEl::LineTo(Point { x: 13.00, y: 27.00 }),
                PathEl::LineTo(Point { x: 9.00, y: 27.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 42.00, y: 6.00 }),
                PathEl::LineTo(Point { x: 6.00, y: 6.00 }),
                PathEl::CurveTo(
                    Point { x: 3.79, y: 6.00 },
                    Point { x: 2.00, y: 7.79 },
                    Point { x: 2.00, y: 10.00 },
                ),
                PathEl::LineTo(Point { x: 2.00, y: 38.00 }),
                PathEl::CurveTo(
                    Point { x: 2.00, y: 40.21 },
                    Point { x: 3.79, y: 42.00 },
                    Point { x: 6.00, y: 42.00 },
                ),
                PathEl::LineTo(Point { x: 42.00, y: 42.00 }),
                PathEl::CurveTo(
                    Point { x: 44.21, y: 42.00 },
                    Point { x: 46.00, y: 40.21 },
                    Point { x: 46.00, y: 38.00 },
                ),
                PathEl::LineTo(Point { x: 46.00, y: 10.00 }),
                PathEl::CurveTo(
                    Point { x: 46.00, y: 7.79 },
                    Point { x: 44.21, y: 6.00 },
                    Point { x: 42.00, y: 6.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 16.00, y: 27.00 }),
                PathEl::CurveTo(
                    Point { x: 16.00, y: 28.70 },
                    Point { x: 14.70, y: 30.00 },
                    Point { x: 13.00, y: 30.00 },
                ),
                PathEl::LineTo(Point { x: 6.00, y: 30.00 }),
                PathEl::LineTo(Point { x: 6.00, y: 18.00 }),
                PathEl::LineTo(Point { x: 13.00, y: 18.00 }),
                PathEl::CurveTo(
                    Point { x: 14.70, y: 18.00 },
                    Point { x: 16.00, y: 19.30 },
                    Point { x: 16.00, y: 21.00 },
                ),
                PathEl::LineTo(Point { x: 16.00, y: 27.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 25.24, y: 30.00 }),
                PathEl::LineTo(Point { x: 22.24, y: 30.00 }),
                PathEl::LineTo(Point { x: 18.74, y: 18.00 }),
                PathEl::LineTo(Point { x: 21.74, y: 18.00 }),
                PathEl::LineTo(Point { x: 23.74, y: 24.86 }),
                PathEl::LineTo(Point { x: 25.74, y: 18.00 }),
                PathEl::LineTo(Point { x: 28.74, y: 18.00 }),
                PathEl::LineTo(Point { x: 25.24, y: 30.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 42.00, y: 23.00 }),
                PathEl::CurveTo(
                    Point { x: 42.00, y: 24.20 },
                    Point { x: 41.20, y: 25.30 },
                    Point { x: 40.20, y: 25.80 },
                ),
                PathEl::LineTo(Point { x: 42.00, y: 30.00 }),
                PathEl::LineTo(Point { x: 39.00, y: 30.00 }),
                PathEl::LineTo(Point { x: 37.30, y: 26.00 }),
                PathEl::LineTo(Point { x: 35.00, y: 26.00 }),
                PathEl::LineTo(Point { x: 35.00, y: 30.00 }),
                PathEl::LineTo(Point { x: 32.00, y: 30.00 }),
                PathEl::LineTo(Point { x: 32.00, y: 18.00 }),
                PathEl::LineTo(Point { x: 39.00, y: 18.00 }),
                PathEl::CurveTo(
                    Point { x: 40.70, y: 18.00 },
                    Point { x: 42.00, y: 19.30 },
                    Point { x: 42.00, y: 21.00 },
                ),
                PathEl::LineTo(Point { x: 42.00, y: 23.00 }),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct CastConnected {
    size: f64,
    color: Color,
}

impl CastConnected {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for CastConnected {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 2.00, y: 36.00 }),
                PathEl::LineTo(Point { x: 2.00, y: 42.00 }),
                PathEl::LineTo(Point { x: 8.00, y: 42.00 }),
                PathEl::CurveTo(
                    Point { x: 8.00, y: 38.69 },
                    Point { x: 5.31, y: 36.00 },
                    Point { x: 2.00, y: 36.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 2.00, y: 28.00 }),
                PathEl::LineTo(Point { x: 2.00, y: 32.00 }),
                PathEl::CurveTo(
                    Point { x: 7.52, y: 32.00 },
                    Point { x: 12.00, y: 36.48 },
                    Point { x: 12.00, y: 42.00 },
                ),
                PathEl::LineTo(Point { x: 16.00, y: 42.00 }),
                PathEl::CurveTo(
                    Point { x: 16.00, y: 34.27 },
                    Point { x: 9.73, y: 28.00 },
                    Point { x: 2.00, y: 28.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 38.00, y: 14.00 }),
                PathEl::LineTo(Point { x: 10.00, y: 14.00 }),
                PathEl::LineTo(Point { x: 10.00, y: 17.27 }),
                PathEl::CurveTo(
                    Point { x: 17.92, y: 19.83 },
                    Point { x: 24.17, y: 26.08 },
                    Point { x: 26.73, y: 34.00 },
                ),
                PathEl::LineTo(Point { x: 38.00, y: 34.00 }),
                PathEl::LineTo(Point { x: 38.00, y: 14.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 2.00, y: 20.00 }),
                PathEl::LineTo(Point { x: 2.00, y: 24.00 }),
                PathEl::CurveTo(
                    Point { x: 11.94, y: 24.00 },
                    Point { x: 20.00, y: 32.06 },
                    Point { x: 20.00, y: 42.00 },
                ),
                PathEl::LineTo(Point { x: 24.00, y: 42.00 }),
                PathEl::CurveTo(
                    Point { x: 24.00, y: 29.85 },
                    Point { x: 14.15, y: 20.00 },
                    Point { x: 2.00, y: 20.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 42.00, y: 6.00 }),
                PathEl::LineTo(Point { x: 6.00, y: 6.00 }),
                PathEl::CurveTo(
                    Point { x: 3.79, y: 6.00 },
                    Point { x: 2.00, y: 7.79 },
                    Point { x: 2.00, y: 10.00 },
                ),
                PathEl::LineTo(Point { x: 2.00, y: 16.00 }),
                PathEl::LineTo(Point { x: 6.00, y: 16.00 }),
                PathEl::LineTo(Point { x: 6.00, y: 10.00 }),
                PathEl::LineTo(Point { x: 42.00, y: 10.00 }),
                PathEl::LineTo(Point { x: 42.00, y: 38.00 }),
                PathEl::LineTo(Point { x: 28.00, y: 38.00 }),
                PathEl::LineTo(Point { x: 28.00, y: 42.00 }),
                PathEl::LineTo(Point { x: 42.00, y: 42.00 }),
                PathEl::CurveTo(
                    Point { x: 44.21, y: 42.00 },
                    Point { x: 46.00, y: 40.21 },
                    Point { x: 46.00, y: 38.00 },
                ),
                PathEl::LineTo(Point { x: 46.00, y: 10.00 }),
                PathEl::CurveTo(
                    Point { x: 46.00, y: 7.79 },
                    Point { x: 44.21, y: 6.00 },
                    Point { x: 42.00, y: 6.00 },
                ),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct Chat {
    size: f64,
    color: Color,
}

impl Chat {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for Chat {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 40.00, y: 4.00 }),
                PathEl::LineTo(Point { x: 8.00, y: 4.00 }),
                PathEl::CurveTo(
                    Point { x: 5.79, y: 4.00 },
                    Point { x: 4.02, y: 5.79 },
                    Point { x: 4.02, y: 8.00 },
                ),
                PathEl::LineTo(Point { x: 4.00, y: 44.00 }),
                PathEl::LineTo(Point { x: 12.00, y: 36.00 }),
                PathEl::LineTo(Point { x: 40.00, y: 36.00 }),
                PathEl::CurveTo(
                    Point { x: 42.21, y: 36.00 },
                    Point { x: 44.00, y: 34.21 },
                    Point { x: 44.00, y: 32.00 },
                ),
                PathEl::LineTo(Point { x: 44.00, y: 8.00 }),
                PathEl::CurveTo(
                    Point { x: 44.00, y: 5.79 },
                    Point { x: 42.21, y: 4.00 },
                    Point { x: 40.00, y: 4.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 12.00, y: 18.00 }),
                PathEl::LineTo(Point { x: 36.00, y: 18.00 }),
                PathEl::LineTo(Point { x: 36.00, y: 22.00 }),
                PathEl::LineTo(Point { x: 12.00, y: 22.00 }),
                PathEl::LineTo(Point { x: 12.00, y: 18.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 28.00, y: 28.00 }),
                PathEl::LineTo(Point { x: 12.00, y: 28.00 }),
                PathEl::LineTo(Point { x: 12.00, y: 24.00 }),
                PathEl::LineTo(Point { x: 28.00, y: 24.00 }),
                PathEl::LineTo(Point { x: 28.00, y: 28.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 36.00, y: 16.00 }),
                PathEl::LineTo(Point { x: 12.00, y: 16.00 }),
                PathEl::LineTo(Point { x: 12.00, y: 12.00 }),
                PathEl::LineTo(Point { x: 36.00, y: 12.00 }),
                PathEl::LineTo(Point { x: 36.00, y: 16.00 }),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct PartyMode {
    size: f64,
    color: Color,
}

impl PartyMode {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for PartyMode {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 40.00, y: 8.00 }),
                PathEl::LineTo(Point { x: 33.66, y: 8.00 }),
                PathEl::LineTo(Point { x: 30.00, y: 4.00 }),
                PathEl::LineTo(Point { x: 18.00, y: 4.00 }),
                PathEl::LineTo(Point { x: 14.34, y: 8.00 }),
                PathEl::LineTo(Point { x: 8.00, y: 8.00 }),
                PathEl::CurveTo(
                    Point { x: 5.79, y: 8.00 },
                    Point { x: 4.00, y: 9.79 },
                    Point { x: 4.00, y: 12.00 },
                ),
                PathEl::LineTo(Point { x: 4.00, y: 36.00 }),
                PathEl::CurveTo(
                    Point { x: 4.00, y: 38.21 },
                    Point { x: 5.79, y: 40.00 },
                    Point { x: 8.00, y: 40.00 },
                ),
                PathEl::LineTo(Point { x: 40.00, y: 40.00 }),
                PathEl::CurveTo(
                    Point { x: 42.21, y: 40.00 },
                    Point { x: 44.00, y: 38.21 },
                    Point { x: 44.00, y: 36.00 },
                ),
                PathEl::LineTo(Point { x: 44.00, y: 12.00 }),
                PathEl::CurveTo(
                    Point { x: 44.00, y: 9.79 },
                    Point { x: 42.21, y: 8.00 },
                    Point { x: 40.00, y: 8.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 24.00, y: 14.00 }),
                PathEl::CurveTo(
                    Point { x: 27.26, y: 14.00 },
                    Point { x: 30.13, y: 15.59 },
                    Point { x: 31.96, y: 18.00 },
                ),
                PathEl::LineTo(Point { x: 24.00, y: 18.00 }),
                PathEl::CurveTo(
                    Point { x: 20.69, y: 18.00 },
                    Point { x: 18.00, y: 20.69 },
                    Point { x: 18.00, y: 24.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 18.00, y: 24.71 },
                    Point { x: 18.14, y: 25.37 },
                    Point { x: 18.37, y: 26.00 },
                ),
                PathEl::LineTo(Point { x: 14.20, y: 26.00 }),
                PathEl::CurveTo(
                    Point { x: 14.07, y: 25.35 },
                    Point { x: 14.00, y: 24.69 },
                    Point { x: 14.00, y: 24.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 14.00, y: 18.48 },
                    Point { x: 18.48, y: 14.00 },
                    Point { x: 24.00, y: 14.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 24.00, y: 34.00 }),
                PathEl::CurveTo(
                    Point { x: 20.74, y: 34.00 },
                    Point { x: 17.87, y: 32.42 },
                    Point { x: 16.05, y: 30.00 },
                ),
                PathEl::LineTo(Point { x: 24.00, y: 30.00 }),
                PathEl::CurveTo(
                    Point { x: 27.31, y: 30.00 },
                    Point { x: 30.00, y: 27.31 },
                    Point { x: 30.00, y: 24.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 30.00, y: 23.30 },
                    Point { x: 29.86, y: 22.63 },
                    Point { x: 29.63, y: 22.00 },
                ),
                PathEl::LineTo(Point { x: 33.80, y: 22.00 }),
                PathEl::CurveTo(
                    Point { x: 33.93, y: 22.65 },
                    Point { x: 34.00, y: 23.31 },
                    Point { x: 34.00, y: 24.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 34.00, y: 29.52 },
                    Point { x: 29.52, y: 34.00 },
                    Point { x: 24.00, y: 34.00 },
                ),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct Tab {
    size: f64,
    color: Color,
}

impl Tab {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for Tab {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 42.00, y: 6.00 }),
                PathEl::LineTo(Point { x: 6.00, y: 6.00 }),
                PathEl::CurveTo(
                    Point { x: 3.79, y: 6.00 },
                    Point { x: 2.00, y: 7.79 },
                    Point { x: 2.00, y: 10.00 },
                ),
                PathEl::LineTo(Point { x: 2.00, y: 38.00 }),
                PathEl::CurveTo(
                    Point { x: 2.00, y: 40.21 },
                    Point { x: 3.79, y: 42.00 },
                    Point { x: 6.00, y: 42.00 },
                ),
                PathEl::LineTo(Point { x: 42.00, y: 42.00 }),
                PathEl::CurveTo(
                    Point { x: 44.21, y: 42.00 },
                    Point { x: 46.00, y: 40.21 },
                    Point { x: 46.00, y: 38.00 },
                ),
                PathEl::LineTo(Point { x: 46.00, y: 10.00 }),
                PathEl::CurveTo(
                    Point { x: 46.00, y: 7.79 },
                    Point { x: 44.21, y: 6.00 },
                    Point { x: 42.00, y: 6.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 42.00, y: 38.00 }),
                PathEl::LineTo(Point { x: 6.00, y: 38.00 }),
                PathEl::LineTo(Point { x: 6.00, y: 10.00 }),
                PathEl::LineTo(Point { x: 26.00, y: 10.00 }),
                PathEl::LineTo(Point { x: 26.00, y: 18.00 }),
                PathEl::LineTo(Point { x: 42.00, y: 18.00 }),
                PathEl::LineTo(Point { x: 42.00, y: 38.00 }),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct CallMade {
    size: f64,
    color: Color,
}

impl CallMade {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for CallMade {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 18.00, y: 10.00 }),
                PathEl::LineTo(Point { x: 18.00, y: 14.00 }),
                PathEl::LineTo(Point { x: 31.17, y: 14.00 }),
                PathEl::LineTo(Point { x: 8.00, y: 37.17 }),
                PathEl::LineTo(Point { x: 10.83, y: 40.00 }),
                PathEl::LineTo(Point { x: 34.00, y: 16.83 }),
                PathEl::LineTo(Point { x: 34.00, y: 30.00 }),
                PathEl::LineTo(Point { x: 38.00, y: 30.00 }),
                PathEl::LineTo(Point { x: 38.00, y: 10.00 }),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct SystemUpdateAlt {
    size: f64,
    color: Color,
}

impl SystemUpdateAlt {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for SystemUpdateAlt {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 24.00, y: 32.50 }),
                PathEl::LineTo(Point { x: 32.00, y: 24.50 }),
                PathEl::LineTo(Point { x: 26.00, y: 24.50 }),
                PathEl::LineTo(Point { x: 26.00, y: 6.50 }),
                PathEl::LineTo(Point { x: 22.00, y: 6.50 }),
                PathEl::LineTo(Point { x: 22.00, y: 24.50 }),
                PathEl::LineTo(Point { x: 16.00, y: 24.50 }),
                PathEl::LineTo(Point { x: 24.00, y: 32.50 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 42.00, y: 6.50 }),
                PathEl::LineTo(Point { x: 30.00, y: 6.50 }),
                PathEl::LineTo(Point { x: 30.00, y: 10.47 }),
                PathEl::LineTo(Point { x: 42.00, y: 10.47 }),
                PathEl::LineTo(Point { x: 42.00, y: 38.53 }),
                PathEl::LineTo(Point { x: 6.00, y: 38.53 }),
                PathEl::LineTo(Point { x: 6.00, y: 10.47 }),
                PathEl::LineTo(Point { x: 18.00, y: 10.47 }),
                PathEl::LineTo(Point { x: 18.00, y: 6.50 }),
                PathEl::LineTo(Point { x: 6.00, y: 6.50 }),
                PathEl::CurveTo(
                    Point { x: 3.79, y: 6.50 },
                    Point { x: 2.00, y: 8.29 },
                    Point { x: 2.00, y: 10.50 },
                ),
                PathEl::LineTo(Point { x: 2.00, y: 38.50 }),
                PathEl::CurveTo(
                    Point { x: 2.00, y: 40.71 },
                    Point { x: 3.79, y: 42.50 },
                    Point { x: 6.00, y: 42.50 },
                ),
                PathEl::LineTo(Point { x: 42.00, y: 42.50 }),
                PathEl::CurveTo(
                    Point { x: 44.21, y: 42.50 },
                    Point { x: 46.00, y: 40.71 },
                    Point { x: 46.00, y: 38.50 },
                ),
                PathEl::LineTo(Point { x: 46.00, y: 10.50 }),
                PathEl::CurveTo(
                    Point { x: 46.00, y: 8.29 },
                    Point { x: 44.21, y: 6.50 },
                    Point { x: 42.00, y: 6.50 },
                ),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct Filter6 {
    size: f64,
    color: Color,
}

impl Filter6 {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for Filter6 {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 6.00, y: 10.00 }),
                PathEl::LineTo(Point { x: 2.00, y: 10.00 }),
                PathEl::LineTo(Point { x: 2.00, y: 42.00 }),
                PathEl::CurveTo(
                    Point { x: 2.00, y: 44.21 },
                    Point { x: 3.79, y: 46.00 },
                    Point { x: 6.00, y: 46.00 },
                ),
                PathEl::LineTo(Point { x: 38.00, y: 46.00 }),
                PathEl::LineTo(Point { x: 38.00, y: 42.00 }),
                PathEl::LineTo(Point { x: 6.00, y: 42.00 }),
                PathEl::LineTo(Point { x: 6.00, y: 10.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 42.00, y: 2.00 }),
                PathEl::LineTo(Point { x: 14.00, y: 2.00 }),
                PathEl::CurveTo(
                    Point { x: 11.79, y: 2.00 },
                    Point { x: 10.00, y: 3.79 },
                    Point { x: 10.00, y: 6.00 },
                ),
                PathEl::LineTo(Point { x: 10.00, y: 34.00 }),
                PathEl::CurveTo(
                    Point { x: 10.00, y: 36.21 },
                    Point { x: 11.79, y: 38.00 },
                    Point { x: 14.00, y: 38.00 },
                ),
                PathEl::LineTo(Point { x: 42.00, y: 38.00 }),
                PathEl::CurveTo(
                    Point { x: 44.21, y: 38.00 },
                    Point { x: 46.00, y: 36.21 },
                    Point { x: 46.00, y: 34.00 },
                ),
                PathEl::LineTo(Point { x: 46.00, y: 6.00 }),
                PathEl::CurveTo(
                    Point { x: 46.00, y: 3.79 },
                    Point { x: 44.21, y: 2.00 },
                    Point { x: 42.00, y: 2.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 42.00, y: 34.00 }),
                PathEl::LineTo(Point { x: 14.00, y: 34.00 }),
                PathEl::LineTo(Point { x: 14.00, y: 6.00 }),
                PathEl::LineTo(Point { x: 42.00, y: 6.00 }),
                PathEl::LineTo(Point { x: 42.00, y: 34.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 26.00, y: 30.00 }),
                PathEl::LineTo(Point { x: 30.00, y: 30.00 }),
                PathEl::CurveTo(
                    Point { x: 32.21, y: 30.00 },
                    Point { x: 34.00, y: 28.21 },
                    Point { x: 34.00, y: 26.00 },
                ),
                PathEl::LineTo(Point { x: 34.00, y: 22.00 }),
                PathEl::CurveTo(
                    Point { x: 34.00, y: 19.79 },
                    Point { x: 32.21, y: 18.00 },
                    Point { x: 30.00, y: 18.00 },
                ),
                PathEl::LineTo(Point { x: 26.00, y: 18.00 }),
                PathEl::LineTo(Point { x: 26.00, y: 14.00 }),
                PathEl::LineTo(Point { x: 34.00, y: 14.00 }),
                PathEl::LineTo(Point { x: 34.00, y: 10.00 }),
                PathEl::LineTo(Point { x: 26.00, y: 10.00 }),
                PathEl::CurveTo(
                    Point { x: 23.79, y: 10.00 },
                    Point { x: 22.00, y: 11.79 },
                    Point { x: 22.00, y: 14.00 },
                ),
                PathEl::LineTo(Point { x: 22.00, y: 26.00 }),
                PathEl::CurveTo(
                    Point { x: 22.00, y: 28.21 },
                    Point { x: 23.79, y: 30.00 },
                    Point { x: 26.00, y: 30.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 26.00, y: 22.00 }),
                PathEl::LineTo(Point { x: 30.00, y: 22.00 }),
                PathEl::LineTo(Point { x: 30.00, y: 26.00 }),
                PathEl::LineTo(Point { x: 26.00, y: 26.00 }),
                PathEl::LineTo(Point { x: 26.00, y: 22.00 }),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct PieChartOutlined {
    size: f64,
    color: Color,
}

impl PieChartOutlined {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for PieChartOutlined {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 24.00, y: 4.00 }),
                PathEl::CurveTo(
                    Point { x: 13.00, y: 4.00 },
                    Point { x: 4.00, y: 13.00 },
                    Point { x: 4.00, y: 24.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 4.00, y: 35.00 },
                    Point { x: 13.00, y: 44.00 },
                    Point { x: 24.00, y: 44.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 35.00, y: 44.00 },
                    Point { x: 44.00, y: 35.00 },
                    Point { x: 44.00, y: 24.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 44.00, y: 13.00 },
                    Point { x: 35.00, y: 4.00 },
                    Point { x: 24.00, y: 4.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 26.00, y: 8.13 }),
                PathEl::CurveTo(
                    Point { x: 33.21, y: 9.03 },
                    Point { x: 38.97, y: 14.79 },
                    Point { x: 39.87, y: 22.00 },
                ),
                PathEl::LineTo(Point { x: 26.00, y: 22.00 }),
                PathEl::LineTo(Point { x: 26.00, y: 8.13 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 8.00, y: 24.00 }),
                PathEl::CurveTo(
                    Point { x: 8.00, y: 15.88 },
                    Point { x: 14.13, y: 9.12 },
                    Point { x: 22.00, y: 8.13 },
                ),
                PathEl::LineTo(Point { x: 22.00, y: 39.87 }),
                PathEl::CurveTo(
                    Point { x: 14.13, y: 38.88 },
                    Point { x: 8.00, y: 32.12 },
                    Point { x: 8.00, y: 24.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 26.00, y: 39.87 }),
                PathEl::LineTo(Point { x: 26.00, y: 26.00 }),
                PathEl::LineTo(Point { x: 39.87, y: 26.00 }),
                PathEl::CurveTo(
                    Point { x: 38.97, y: 33.21 },
                    Point { x: 33.21, y: 38.97 },
                    Point { x: 26.00, y: 39.87 },
                ),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct LocalCafe {
    size: f64,
    color: Color,
}

impl LocalCafe {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for LocalCafe {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 40.00, y: 6.00 }),
                PathEl::LineTo(Point { x: 8.00, y: 6.00 }),
                PathEl::LineTo(Point { x: 8.00, y: 26.00 }),
                PathEl::CurveTo(
                    Point { x: 8.00, y: 30.42 },
                    Point { x: 11.58, y: 34.00 },
                    Point { x: 16.00, y: 34.00 },
                ),
                PathEl::LineTo(Point { x: 28.00, y: 34.00 }),
                PathEl::CurveTo(
                    Point { x: 32.42, y: 34.00 },
                    Point { x: 36.00, y: 30.42 },
                    Point { x: 36.00, y: 26.00 },
                ),
                PathEl::LineTo(Point { x: 36.00, y: 20.00 }),
                PathEl::LineTo(Point { x: 40.00, y: 20.00 }),
                PathEl::CurveTo(
                    Point { x: 42.21, y: 20.00 },
                    Point { x: 44.00, y: 18.21 },
                    Point { x: 44.00, y: 16.00 },
                ),
                PathEl::LineTo(Point { x: 44.00, y: 10.00 }),
                PathEl::CurveTo(
                    Point { x: 44.00, y: 7.79 },
                    Point { x: 42.21, y: 6.00 },
                    Point { x: 40.00, y: 6.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 40.00, y: 16.00 }),
                PathEl::LineTo(Point { x: 36.00, y: 16.00 }),
                PathEl::LineTo(Point { x: 36.00, y: 10.00 }),
                PathEl::LineTo(Point { x: 40.00, y: 10.00 }),
                PathEl::LineTo(Point { x: 40.00, y: 16.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 4.00, y: 42.00 }),
                PathEl::LineTo(Point { x: 40.00, y: 42.00 }),
                PathEl::LineTo(Point { x: 40.00, y: 38.00 }),
                PathEl::LineTo(Point { x: 4.00, y: 38.00 }),
                PathEl::LineTo(Point { x: 4.00, y: 42.00 }),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct RingVolume {
    size: f64,
    color: Color,
}

impl RingVolume {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for RingVolume {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 47.41, y: 33.34 }),
                PathEl::CurveTo(
                    Point { x: 41.32, y: 27.55 },
                    Point { x: 33.07, y: 24.00 },
                    Point { x: 24.00, y: 24.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 14.93, y: 24.00 },
                    Point { x: 6.68, y: 27.55 },
                    Point { x: 0.59, y: 33.34 },
                ),
                PathEl::CurveTo(
                    Point { x: 0.22, y: 33.70 },
                    Point { x: 0.00, y: 34.21 },
                    Point { x: 0.00, y: 34.76 },
                ),
                PathEl::CurveTo(
                    Point { x: 0.00, y: 35.31 },
                    Point { x: 0.22, y: 35.81 },
                    Point { x: 0.59, y: 36.17 },
                ),
                PathEl::LineTo(Point { x: 5.54, y: 41.12 }),
                PathEl::CurveTo(
                    Point { x: 5.90, y: 41.48 },
                    Point { x: 6.40, y: 41.71 },
                    Point { x: 6.95, y: 41.71 },
                ),
                PathEl::CurveTo(
                    Point { x: 7.49, y: 41.71 },
                    Point { x: 7.99, y: 41.49 },
                    Point { x: 8.35, y: 41.14 },
                ),
                PathEl::CurveTo(
                    Point { x: 9.94, y: 39.67 },
                    Point { x: 11.73, y: 38.42 },
                    Point { x: 13.68, y: 37.44 },
                ),
                PathEl::CurveTo(
                    Point { x: 14.34, y: 37.11 },
                    Point { x: 14.80, y: 36.43 },
                    Point { x: 14.80, y: 35.64 },
                ),
                PathEl::LineTo(Point { x: 14.80, y: 29.43 }),
                PathEl::CurveTo(
                    Point { x: 17.70, y: 28.50 },
                    Point { x: 20.79, y: 28.00 },
                    Point { x: 24.00, y: 28.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 27.21, y: 28.00 },
                    Point { x: 30.30, y: 28.50 },
                    Point { x: 33.20, y: 29.44 },
                ),
                PathEl::LineTo(Point { x: 33.20, y: 35.65 }),
                PathEl::CurveTo(
                    Point { x: 33.20, y: 36.44 },
                    Point { x: 33.66, y: 37.12 },
                    Point { x: 34.32, y: 37.45 },
                ),
                PathEl::CurveTo(
                    Point { x: 36.27, y: 38.43 },
                    Point { x: 38.07, y: 39.68 },
                    Point { x: 39.65, y: 41.15 },
                ),
                PathEl::CurveTo(
                    Point { x: 40.01, y: 41.50 },
                    Point { x: 40.50, y: 41.72 },
                    Point { x: 41.05, y: 41.72 },
                ),
                PathEl::CurveTo(
                    Point { x: 41.60, y: 41.72 },
                    Point { x: 42.10, y: 41.50 },
                    Point { x: 42.47, y: 41.13 },
                ),
                PathEl::LineTo(Point { x: 47.42, y: 36.18 }),
                PathEl::CurveTo(
                    Point { x: 47.78, y: 35.82 },
                    Point { x: 48.01, y: 35.32 },
                    Point { x: 48.01, y: 34.77 },
                ),
                PathEl::CurveTo(
                    Point { x: 48.00, y: 34.21 },
                    Point { x: 47.78, y: 33.70 },
                    Point { x: 47.41, y: 33.34 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 42.32, y: 12.51 }),
                PathEl::LineTo(Point { x: 39.49, y: 9.68 }),
                PathEl::LineTo(Point { x: 32.37, y: 16.80 }),
                PathEl::LineTo(Point { x: 35.20, y: 19.63 }),
                PathEl::CurveTo(
                    Point { x: 35.20, y: 19.63 },
                    Point { x: 42.10, y: 12.59 },
                    Point { x: 42.32, y: 12.51 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 26.00, y: 4.00 }),
                PathEl::LineTo(Point { x: 22.00, y: 4.00 }),
                PathEl::LineTo(Point { x: 22.00, y: 14.00 }),
                PathEl::LineTo(Point { x: 26.00, y: 14.00 }),
                PathEl::LineTo(Point { x: 26.00, y: 4.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 12.80, y: 19.63 }),
                PathEl::LineTo(Point { x: 15.63, y: 16.80 }),
                PathEl::LineTo(Point { x: 8.51, y: 9.68 }),
                PathEl::LineTo(Point { x: 5.68, y: 12.51 }),
                PathEl::CurveTo(
                    Point { x: 5.90, y: 12.59 },
                    Point { x: 12.80, y: 19.63 },
                    Point { x: 12.80, y: 19.63 },
                ),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct DirectionsBike {
    size: f64,
    color: Color,
}

impl DirectionsBike {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for DirectionsBike {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 31.00, y: 11.00 }),
                PathEl::CurveTo(
                    Point { x: 33.20, y: 11.00 },
                    Point { x: 35.00, y: 9.20 },
                    Point { x: 35.00, y: 7.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 35.00, y: 4.80 },
                    Point { x: 33.20, y: 3.00 },
                    Point { x: 31.00, y: 3.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 28.80, y: 3.00 },
                    Point { x: 27.00, y: 4.80 },
                    Point { x: 27.00, y: 7.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 27.00, y: 9.20 },
                    Point { x: 28.80, y: 11.00 },
                    Point { x: 31.00, y: 11.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 10.00, y: 24.00 }),
                PathEl::CurveTo(
                    Point { x: 4.50, y: 24.00 },
                    Point { x: 0.00, y: 28.50 },
                    Point { x: 0.00, y: 34.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 0.00, y: 39.50 },
                    Point { x: 4.50, y: 44.00 },
                    Point { x: 10.00, y: 44.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 15.50, y: 44.00 },
                    Point { x: 20.00, y: 39.50 },
                    Point { x: 20.00, y: 34.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 20.00, y: 28.50 },
                    Point { x: 15.50, y: 24.00 },
                    Point { x: 10.00, y: 24.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 10.00, y: 41.00 }),
                PathEl::CurveTo(
                    Point { x: 6.10, y: 41.00 },
                    Point { x: 3.00, y: 37.90 },
                    Point { x: 3.00, y: 34.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 3.00, y: 30.10 },
                    Point { x: 6.10, y: 27.00 },
                    Point { x: 10.00, y: 27.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 13.90, y: 27.00 },
                    Point { x: 17.00, y: 30.10 },
                    Point { x: 17.00, y: 34.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 17.00, y: 37.90 },
                    Point { x: 13.90, y: 41.00 },
                    Point { x: 10.00, y: 41.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 21.60, y: 21.10 }),
                PathEl::LineTo(Point { x: 26.30, y: 16.30 }),
                PathEl::LineTo(Point { x: 27.80, y: 17.80 }),
                PathEl::CurveTo(
                    Point { x: 30.30, y: 20.40 },
                    Point { x: 33.80, y: 21.90 },
                    Point { x: 37.90, y: 21.90 },
                ),
                PathEl::LineTo(Point { x: 37.90, y: 17.90 }),
                PathEl::CurveTo(
                    Point { x: 34.90, y: 17.90 },
                    Point { x: 32.40, y: 16.80 },
                    Point { x: 30.60, y: 15.00 },
                ),
                PathEl::LineTo(Point { x: 26.70, y: 11.20 }),
                PathEl::CurveTo(
                    Point { x: 26.10, y: 10.50 },
                    Point { x: 25.10, y: 10.00 },
                    Point { x: 24.00, y: 10.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 22.90, y: 10.00 },
                    Point { x: 21.90, y: 10.40 },
                    Point { x: 21.20, y: 11.20 },
                ),
                PathEl::LineTo(Point { x: 15.70, y: 16.70 }),
                PathEl::CurveTo(
                    Point { x: 15.00, y: 17.40 },
                    Point { x: 14.50, y: 18.40 },
                    Point { x: 14.50, y: 19.50 },
                ),
                PathEl::CurveTo(
                    Point { x: 14.50, y: 20.60 },
                    Point { x: 15.00, y: 21.60 },
                    Point { x: 15.70, y: 22.40 },
                ),
                PathEl::LineTo(Point { x: 22.00, y: 28.00 }),
                PathEl::LineTo(Point { x: 22.00, y: 38.00 }),
                PathEl::LineTo(Point { x: 26.00, y: 38.00 }),
                PathEl::LineTo(Point { x: 26.00, y: 25.50 }),
                PathEl::LineTo(Point { x: 21.60, y: 21.10 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 38.00, y: 24.00 }),
                PathEl::CurveTo(
                    Point { x: 32.50, y: 24.00 },
                    Point { x: 28.00, y: 28.50 },
                    Point { x: 28.00, y: 34.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 28.00, y: 39.50 },
                    Point { x: 32.50, y: 44.00 },
                    Point { x: 38.00, y: 44.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 43.50, y: 44.00 },
                    Point { x: 48.00, y: 39.50 },
                    Point { x: 48.00, y: 34.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 48.00, y: 28.50 },
                    Point { x: 43.50, y: 24.00 },
                    Point { x: 38.00, y: 24.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 38.00, y: 41.00 }),
                PathEl::CurveTo(
                    Point { x: 34.10, y: 41.00 },
                    Point { x: 31.00, y: 37.90 },
                    Point { x: 31.00, y: 34.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 31.00, y: 30.10 },
                    Point { x: 34.10, y: 27.00 },
                    Point { x: 38.00, y: 27.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 41.90, y: 27.00 },
                    Point { x: 45.00, y: 30.10 },
                    Point { x: 45.00, y: 34.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 45.00, y: 37.90 },
                    Point { x: 41.90, y: 41.00 },
                    Point { x: 38.00, y: 41.00 },
                ),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct Subject {
    size: f64,
    color: Color,
}

impl Subject {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for Subject {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 28.00, y: 34.00 }),
                PathEl::LineTo(Point { x: 8.00, y: 34.00 }),
                PathEl::LineTo(Point { x: 8.00, y: 38.00 }),
                PathEl::LineTo(Point { x: 28.00, y: 38.00 }),
                PathEl::LineTo(Point { x: 28.00, y: 34.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 40.00, y: 18.00 }),
                PathEl::LineTo(Point { x: 8.00, y: 18.00 }),
                PathEl::LineTo(Point { x: 8.00, y: 22.00 }),
                PathEl::LineTo(Point { x: 40.00, y: 22.00 }),
                PathEl::LineTo(Point { x: 40.00, y: 18.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 8.00, y: 30.00 }),
                PathEl::LineTo(Point { x: 40.00, y: 30.00 }),
                PathEl::LineTo(Point { x: 40.00, y: 26.00 }),
                PathEl::LineTo(Point { x: 8.00, y: 26.00 }),
                PathEl::LineTo(Point { x: 8.00, y: 30.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 8.00, y: 10.00 }),
                PathEl::LineTo(Point { x: 8.00, y: 14.00 }),
                PathEl::LineTo(Point { x: 40.00, y: 14.00 }),
                PathEl::LineTo(Point { x: 40.00, y: 10.00 }),
                PathEl::LineTo(Point { x: 8.00, y: 10.00 }),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct SettingsPhone {
    size: f64,
    color: Color,
}

impl SettingsPhone {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for SettingsPhone {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 26.00, y: 18.00 }),
                PathEl::LineTo(Point { x: 22.00, y: 18.00 }),
                PathEl::LineTo(Point { x: 22.00, y: 22.00 }),
                PathEl::LineTo(Point { x: 26.00, y: 22.00 }),
                PathEl::LineTo(Point { x: 26.00, y: 18.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 34.00, y: 18.00 }),
                PathEl::LineTo(Point { x: 30.00, y: 18.00 }),
                PathEl::LineTo(Point { x: 30.00, y: 22.00 }),
                PathEl::LineTo(Point { x: 34.00, y: 22.00 }),
                PathEl::LineTo(Point { x: 34.00, y: 18.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 40.00, y: 31.00 }),
                PathEl::CurveTo(
                    Point { x: 37.51, y: 31.00 },
                    Point { x: 35.11, y: 30.60 },
                    Point { x: 32.86, y: 29.86 },
                ),
                PathEl::CurveTo(
                    Point { x: 32.17, y: 29.64 },
                    Point { x: 31.38, y: 29.80 },
                    Point { x: 30.83, y: 30.35 },
                ),
                PathEl::LineTo(Point { x: 26.43, y: 34.76 }),
                PathEl::CurveTo(
                    Point { x: 20.76, y: 31.88 },
                    Point { x: 16.14, y: 27.25 },
                    Point { x: 13.25, y: 21.59 },
                ),
                PathEl::LineTo(Point { x: 17.65, y: 17.18 }),
                PathEl::CurveTo(
                    Point { x: 18.20, y: 16.63 },
                    Point { x: 18.36, y: 15.84 },
                    Point { x: 18.14, y: 15.15 },
                ),
                PathEl::CurveTo(
                    Point { x: 17.40, y: 12.90 },
                    Point { x: 17.00, y: 10.49 },
                    Point { x: 17.00, y: 8.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 17.00, y: 6.89 },
                    Point { x: 16.11, y: 6.00 },
                    Point { x: 15.00, y: 6.00 },
                ),
                PathEl::LineTo(Point { x: 8.00, y: 6.00 }),
                PathEl::CurveTo(
                    Point { x: 6.89, y: 6.00 },
                    Point { x: 6.00, y: 6.89 },
                    Point { x: 6.00, y: 8.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 6.00, y: 26.78 },
                    Point { x: 21.22, y: 42.00 },
                    Point { x: 40.00, y: 42.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 41.11, y: 42.00 },
                    Point { x: 42.00, y: 41.11 },
                    Point { x: 42.00, y: 40.00 },
                ),
                PathEl::LineTo(Point { x: 42.00, y: 33.00 }),
                PathEl::CurveTo(
                    Point { x: 42.00, y: 31.89 },
                    Point { x: 41.11, y: 31.00 },
                    Point { x: 40.00, y: 31.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 38.00, y: 18.00 }),
                PathEl::LineTo(Point { x: 38.00, y: 22.00 }),
                PathEl::LineTo(Point { x: 42.00, y: 22.00 }),
                PathEl::LineTo(Point { x: 42.00, y: 18.00 }),
                PathEl::LineTo(Point { x: 38.00, y: 18.00 }),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct Toll {
    size: f64,
    color: Color,
}

impl Toll {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for Toll {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 6.00, y: 24.00 }),
                PathEl::CurveTo(
                    Point { x: 6.00, y: 18.78 },
                    Point { x: 9.34, y: 14.35 },
                    Point { x: 14.00, y: 12.70 },
                ),
                PathEl::LineTo(Point { x: 14.00, y: 8.52 }),
                PathEl::CurveTo(
                    Point { x: 7.10, y: 10.30 },
                    Point { x: 2.00, y: 16.55 },
                    Point { x: 2.00, y: 24.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 2.00, y: 31.45 },
                    Point { x: 7.10, y: 37.70 },
                    Point { x: 14.00, y: 39.48 },
                ),
                PathEl::LineTo(Point { x: 14.00, y: 35.30 }),
                PathEl::CurveTo(
                    Point { x: 9.34, y: 33.65 },
                    Point { x: 6.00, y: 29.22 },
                    Point { x: 6.00, y: 24.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 30.00, y: 8.00 }),
                PathEl::CurveTo(
                    Point { x: 21.16, y: 8.00 },
                    Point { x: 14.00, y: 15.16 },
                    Point { x: 14.00, y: 24.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 14.00, y: 32.84 },
                    Point { x: 21.16, y: 40.00 },
                    Point { x: 30.00, y: 40.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 38.84, y: 40.00 },
                    Point { x: 46.00, y: 32.84 },
                    Point { x: 46.00, y: 24.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 46.00, y: 15.16 },
                    Point { x: 38.84, y: 8.00 },
                    Point { x: 30.00, y: 8.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 30.00, y: 36.00 }),
                PathEl::CurveTo(
                    Point { x: 23.37, y: 36.00 },
                    Point { x: 18.00, y: 30.63 },
                    Point { x: 18.00, y: 24.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 18.00, y: 17.37 },
                    Point { x: 23.37, y: 12.00 },
                    Point { x: 30.00, y: 12.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 36.63, y: 12.00 },
                    Point { x: 42.00, y: 17.37 },
                    Point { x: 42.00, y: 24.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 42.00, y: 30.63 },
                    Point { x: 36.63, y: 36.00 },
                    Point { x: 30.00, y: 36.00 },
                ),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct Computer {
    size: f64,
    color: Color,
}

impl Computer {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for Computer {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 40.00, y: 36.00 }),
                PathEl::CurveTo(
                    Point { x: 42.21, y: 36.00 },
                    Point { x: 43.98, y: 34.21 },
                    Point { x: 43.98, y: 32.00 },
                ),
                PathEl::LineTo(Point { x: 44.00, y: 12.00 }),
                PathEl::CurveTo(
                    Point { x: 44.00, y: 9.79 },
                    Point { x: 42.21, y: 8.00 },
                    Point { x: 40.00, y: 8.00 },
                ),
                PathEl::LineTo(Point { x: 8.00, y: 8.00 }),
                PathEl::CurveTo(
                    Point { x: 5.79, y: 8.00 },
                    Point { x: 4.00, y: 9.79 },
                    Point { x: 4.00, y: 12.00 },
                ),
                PathEl::LineTo(Point { x: 4.00, y: 32.00 }),
                PathEl::CurveTo(
                    Point { x: 4.00, y: 34.21 },
                    Point { x: 5.79, y: 36.00 },
                    Point { x: 8.00, y: 36.00 },
                ),
                PathEl::LineTo(Point { x: 0.00, y: 36.00 }),
                PathEl::LineTo(Point { x: 0.00, y: 40.00 }),
                PathEl::LineTo(Point { x: 48.00, y: 40.00 }),
                PathEl::LineTo(Point { x: 48.00, y: 36.00 }),
                PathEl::LineTo(Point { x: 40.00, y: 36.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 8.00, y: 12.00 }),
                PathEl::LineTo(Point { x: 40.00, y: 12.00 }),
                PathEl::LineTo(Point { x: 40.00, y: 32.00 }),
                PathEl::LineTo(Point { x: 8.00, y: 32.00 }),
                PathEl::LineTo(Point { x: 8.00, y: 12.00 }),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct AccountBalance {
    size: f64,
    color: Color,
}

impl AccountBalance {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for AccountBalance {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 8.00, y: 20.00 }),
                PathEl::LineTo(Point { x: 8.00, y: 34.00 }),
                PathEl::LineTo(Point { x: 14.00, y: 34.00 }),
                PathEl::LineTo(Point { x: 14.00, y: 20.00 }),
                PathEl::LineTo(Point { x: 8.00, y: 20.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 20.00, y: 20.00 }),
                PathEl::LineTo(Point { x: 20.00, y: 34.00 }),
                PathEl::LineTo(Point { x: 26.00, y: 34.00 }),
                PathEl::LineTo(Point { x: 26.00, y: 20.00 }),
                PathEl::LineTo(Point { x: 20.00, y: 20.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 4.00, y: 44.00 }),
                PathEl::LineTo(Point { x: 42.00, y: 44.00 }),
                PathEl::LineTo(Point { x: 42.00, y: 38.00 }),
                PathEl::LineTo(Point { x: 4.00, y: 38.00 }),
                PathEl::LineTo(Point { x: 4.00, y: 44.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 32.00, y: 20.00 }),
                PathEl::LineTo(Point { x: 32.00, y: 34.00 }),
                PathEl::LineTo(Point { x: 38.00, y: 34.00 }),
                PathEl::LineTo(Point { x: 38.00, y: 20.00 }),
                PathEl::LineTo(Point { x: 32.00, y: 20.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 23.00, y: 2.00 }),
                PathEl::LineTo(Point { x: 4.00, y: 12.00 }),
                PathEl::LineTo(Point { x: 4.00, y: 16.00 }),
                PathEl::LineTo(Point { x: 42.00, y: 16.00 }),
                PathEl::LineTo(Point { x: 42.00, y: 12.00 }),
                PathEl::LineTo(Point { x: 23.00, y: 2.00 }),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct ExposureNeg1 {
    size: f64,
    color: Color,
}

impl ExposureNeg1 {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for ExposureNeg1 {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 8.00, y: 22.00 }),
                PathEl::LineTo(Point { x: 8.00, y: 26.00 }),
                PathEl::LineTo(Point { x: 24.00, y: 26.00 }),
                PathEl::LineTo(Point { x: 24.00, y: 22.00 }),
                PathEl::LineTo(Point { x: 8.00, y: 22.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 38.00, y: 36.00 }),
                PathEl::LineTo(Point { x: 34.00, y: 36.00 }),
                PathEl::LineTo(Point { x: 34.00, y: 14.75 }),
                PathEl::LineTo(Point { x: 28.00, y: 16.80 }),
                PathEl::LineTo(Point { x: 28.00, y: 13.40 }),
                PathEl::LineTo(Point { x: 37.40, y: 10.00 }),
                PathEl::LineTo(Point { x: 38.00, y: 10.00 }),
                PathEl::LineTo(Point { x: 38.00, y: 36.00 }),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct FormatQuote {
    size: f64,
    color: Color,
}

impl FormatQuote {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for FormatQuote {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 12.00, y: 34.00 }),
                PathEl::LineTo(Point { x: 18.00, y: 34.00 }),
                PathEl::LineTo(Point { x: 22.00, y: 26.00 }),
                PathEl::LineTo(Point { x: 22.00, y: 14.00 }),
                PathEl::LineTo(Point { x: 10.00, y: 14.00 }),
                PathEl::LineTo(Point { x: 10.00, y: 26.00 }),
                PathEl::LineTo(Point { x: 16.00, y: 26.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 28.00, y: 34.00 }),
                PathEl::LineTo(Point { x: 34.00, y: 34.00 }),
                PathEl::LineTo(Point { x: 38.00, y: 26.00 }),
                PathEl::LineTo(Point { x: 38.00, y: 14.00 }),
                PathEl::LineTo(Point { x: 26.00, y: 14.00 }),
                PathEl::LineTo(Point { x: 26.00, y: 26.00 }),
                PathEl::LineTo(Point { x: 32.00, y: 26.00 }),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct Brush {
    size: f64,
    color: Color,
}

impl Brush {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for Brush {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 14.00, y: 28.00 }),
                PathEl::CurveTo(
                    Point { x: 10.69, y: 28.00 },
                    Point { x: 8.00, y: 30.69 },
                    Point { x: 8.00, y: 34.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 8.00, y: 36.62 },
                    Point { x: 5.69, y: 38.00 },
                    Point { x: 4.00, y: 38.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 5.84, y: 40.44 },
                    Point { x: 8.99, y: 42.00 },
                    Point { x: 12.00, y: 42.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 16.42, y: 42.00 },
                    Point { x: 20.00, y: 38.42 },
                    Point { x: 20.00, y: 34.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 20.00, y: 30.69 },
                    Point { x: 17.31, y: 28.00 },
                    Point { x: 14.00, y: 28.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 41.41, y: 9.26 }),
                PathEl::LineTo(Point { x: 38.74, y: 6.59 }),
                PathEl::CurveTo(
                    Point { x: 37.96, y: 5.81 },
                    Point { x: 36.69, y: 5.81 },
                    Point { x: 35.91, y: 6.59 },
                ),
                PathEl::LineTo(Point { x: 18.00, y: 24.50 }),
                PathEl::LineTo(Point { x: 23.50, y: 30.00 }),
                PathEl::LineTo(Point { x: 41.41, y: 12.09 }),
                PathEl::CurveTo(
                    Point { x: 42.20, y: 11.30 },
                    Point { x: 42.20, y: 10.04 },
                    Point { x: 41.41, y: 9.26 },
                ),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct Code {
    size: f64,
    color: Color,
}

impl Code {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for Code {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 18.80, y: 33.20 }),
                PathEl::LineTo(Point { x: 9.70, y: 24.00 }),
                PathEl::LineTo(Point { x: 18.90, y: 14.80 }),
                PathEl::LineTo(Point { x: 16.00, y: 12.00 }),
                PathEl::LineTo(Point { x: 4.00, y: 24.00 }),
                PathEl::LineTo(Point { x: 16.00, y: 36.00 }),
                PathEl::LineTo(Point { x: 18.80, y: 33.20 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 29.20, y: 33.20 }),
                PathEl::LineTo(Point { x: 38.40, y: 24.00 }),
                PathEl::LineTo(Point { x: 29.20, y: 14.80 }),
                PathEl::LineTo(Point { x: 32.00, y: 12.00 }),
                PathEl::LineTo(Point { x: 44.00, y: 24.00 }),
                PathEl::LineTo(Point { x: 32.00, y: 36.00 }),
                PathEl::LineTo(Point { x: 29.20, y: 33.20 }),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct ChatBubbleOutline {
    size: f64,
    color: Color,
}

impl ChatBubbleOutline {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for ChatBubbleOutline {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 40.00, y: 4.00 }),
                PathEl::LineTo(Point { x: 8.00, y: 4.00 }),
                PathEl::CurveTo(
                    Point { x: 5.79, y: 4.00 },
                    Point { x: 4.00, y: 5.79 },
                    Point { x: 4.00, y: 8.00 },
                ),
                PathEl::LineTo(Point { x: 4.00, y: 44.00 }),
                PathEl::LineTo(Point { x: 12.00, y: 36.00 }),
                PathEl::LineTo(Point { x: 40.00, y: 36.00 }),
                PathEl::CurveTo(
                    Point { x: 42.21, y: 36.00 },
                    Point { x: 44.00, y: 34.21 },
                    Point { x: 44.00, y: 32.00 },
                ),
                PathEl::LineTo(Point { x: 44.00, y: 8.00 }),
                PathEl::CurveTo(
                    Point { x: 44.00, y: 5.79 },
                    Point { x: 42.21, y: 4.00 },
                    Point { x: 40.00, y: 4.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 40.00, y: 32.00 }),
                PathEl::LineTo(Point { x: 12.00, y: 32.00 }),
                PathEl::LineTo(Point { x: 8.00, y: 36.00 }),
                PathEl::LineTo(Point { x: 8.00, y: 8.00 }),
                PathEl::LineTo(Point { x: 40.00, y: 8.00 }),
                PathEl::LineTo(Point { x: 40.00, y: 32.00 }),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct BorderAll {
    size: f64,
    color: Color,
}

impl BorderAll {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for BorderAll {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 6.00, y: 6.00 }),
                PathEl::LineTo(Point { x: 6.00, y: 42.00 }),
                PathEl::LineTo(Point { x: 42.00, y: 42.00 }),
                PathEl::LineTo(Point { x: 42.00, y: 6.00 }),
                PathEl::LineTo(Point { x: 6.00, y: 6.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 22.00, y: 38.00 }),
                PathEl::LineTo(Point { x: 10.00, y: 38.00 }),
                PathEl::LineTo(Point { x: 10.00, y: 26.00 }),
                PathEl::LineTo(Point { x: 22.00, y: 26.00 }),
                PathEl::LineTo(Point { x: 22.00, y: 38.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 22.00, y: 22.00 }),
                PathEl::LineTo(Point { x: 10.00, y: 22.00 }),
                PathEl::LineTo(Point { x: 10.00, y: 10.00 }),
                PathEl::LineTo(Point { x: 22.00, y: 10.00 }),
                PathEl::LineTo(Point { x: 22.00, y: 22.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 38.00, y: 38.00 }),
                PathEl::LineTo(Point { x: 26.00, y: 38.00 }),
                PathEl::LineTo(Point { x: 26.00, y: 26.00 }),
                PathEl::LineTo(Point { x: 38.00, y: 26.00 }),
                PathEl::LineTo(Point { x: 38.00, y: 38.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 38.00, y: 22.00 }),
                PathEl::LineTo(Point { x: 26.00, y: 22.00 }),
                PathEl::LineTo(Point { x: 26.00, y: 10.00 }),
                PathEl::LineTo(Point { x: 38.00, y: 10.00 }),
                PathEl::LineTo(Point { x: 38.00, y: 22.00 }),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct ImportantDevices {
    size: f64,
    color: Color,
}

impl ImportantDevices {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for ImportantDevices {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 30.00, y: 18.00 }),
                PathEl::LineTo(Point { x: 23.94, y: 18.00 }),
                PathEl::LineTo(Point { x: 22.00, y: 12.00 }),
                PathEl::LineTo(Point { x: 20.06, y: 18.00 }),
                PathEl::LineTo(Point { x: 14.00, y: 18.00 }),
                PathEl::LineTo(Point { x: 18.94, y: 21.52 }),
                PathEl::LineTo(Point { x: 17.06, y: 27.34 }),
                PathEl::LineTo(Point { x: 22.00, y: 23.74 }),
                PathEl::LineTo(Point { x: 26.94, y: 27.34 }),
                PathEl::LineTo(Point { x: 25.06, y: 21.52 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 30.00, y: 18.00 }),
                PathEl::LineTo(Point { x: 23.94, y: 18.00 }),
                PathEl::LineTo(Point { x: 22.00, y: 12.00 }),
                PathEl::LineTo(Point { x: 20.06, y: 18.00 }),
                PathEl::LineTo(Point { x: 14.00, y: 18.00 }),
                PathEl::LineTo(Point { x: 18.94, y: 21.52 }),
                PathEl::LineTo(Point { x: 17.06, y: 27.34 }),
                PathEl::LineTo(Point { x: 22.00, y: 23.74 }),
                PathEl::LineTo(Point { x: 26.94, y: 27.34 }),
                PathEl::LineTo(Point { x: 25.06, y: 21.52 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 46.00, y: 22.01 }),
                PathEl::LineTo(Point { x: 36.00, y: 22.00 }),
                PathEl::CurveTo(
                    Point { x: 34.90, y: 22.00 },
                    Point { x: 34.00, y: 22.90 },
                    Point { x: 34.00, y: 24.00 },
                ),
                PathEl::LineTo(Point { x: 34.00, y: 42.00 }),
                PathEl::CurveTo(
                    Point { x: 34.00, y: 43.10 },
                    Point { x: 34.90, y: 44.00 },
                    Point { x: 36.00, y: 44.00 },
                ),
                PathEl::LineTo(Point { x: 46.00, y: 44.00 }),
                PathEl::CurveTo(
                    Point { x: 47.10, y: 44.00 },
                    Point { x: 48.00, y: 43.10 },
                    Point { x: 48.00, y: 42.00 },
                ),
                PathEl::LineTo(Point { x: 48.00, y: 24.00 }),
                PathEl::CurveTo(
                    Point { x: 48.00, y: 22.90 },
                    Point { x: 47.10, y: 22.01 },
                    Point { x: 46.00, y: 22.01 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 46.00, y: 40.00 }),
                PathEl::LineTo(Point { x: 36.00, y: 40.00 }),
                PathEl::LineTo(Point { x: 36.00, y: 26.00 }),
                PathEl::LineTo(Point { x: 46.00, y: 26.00 }),
                PathEl::LineTo(Point { x: 46.00, y: 40.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 40.00, y: 4.00 }),
                PathEl::LineTo(Point { x: 4.00, y: 4.00 }),
                PathEl::CurveTo(
                    Point { x: 1.78, y: 4.00 },
                    Point { x: 0.00, y: 5.78 },
                    Point { x: 0.00, y: 8.00 },
                ),
                PathEl::LineTo(Point { x: 0.00, y: 32.00 }),
                PathEl::CurveTo(
                    Point { x: 0.00, y: 34.20 },
                    Point { x: 1.78, y: 36.00 },
                    Point { x: 4.00, y: 36.00 },
                ),
                PathEl::LineTo(Point { x: 18.00, y: 36.00 }),
                PathEl::LineTo(Point { x: 18.00, y: 40.00 }),
                PathEl::LineTo(Point { x: 14.00, y: 40.00 }),
                PathEl::LineTo(Point { x: 14.00, y: 44.00 }),
                PathEl::LineTo(Point { x: 30.00, y: 44.00 }),
                PathEl::LineTo(Point { x: 30.00, y: 40.00 }),
                PathEl::LineTo(Point { x: 26.00, y: 40.00 }),
                PathEl::LineTo(Point { x: 26.00, y: 36.00 }),
                PathEl::LineTo(Point { x: 30.00, y: 36.00 }),
                PathEl::LineTo(Point { x: 30.00, y: 32.00 }),
                PathEl::LineTo(Point { x: 4.00, y: 32.00 }),
                PathEl::LineTo(Point { x: 4.00, y: 8.00 }),
                PathEl::LineTo(Point { x: 40.00, y: 8.00 }),
                PathEl::LineTo(Point { x: 40.00, y: 18.00 }),
                PathEl::LineTo(Point { x: 44.00, y: 18.00 }),
                PathEl::LineTo(Point { x: 44.00, y: 8.00 }),
                PathEl::CurveTo(
                    Point { x: 44.00, y: 5.78 },
                    Point { x: 42.20, y: 4.00 },
                    Point { x: 40.00, y: 4.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 23.94, y: 18.00 }),
                PathEl::LineTo(Point { x: 22.00, y: 12.00 }),
                PathEl::LineTo(Point { x: 20.06, y: 18.00 }),
                PathEl::LineTo(Point { x: 14.00, y: 18.00 }),
                PathEl::LineTo(Point { x: 18.94, y: 21.52 }),
                PathEl::LineTo(Point { x: 17.06, y: 27.34 }),
                PathEl::LineTo(Point { x: 22.00, y: 23.74 }),
                PathEl::LineTo(Point { x: 26.94, y: 27.34 }),
                PathEl::LineTo(Point { x: 25.06, y: 21.52 }),
                PathEl::LineTo(Point { x: 30.00, y: 18.00 }),
                PathEl::LineTo(Point { x: 23.94, y: 18.00 }),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct Rotate90DegreesCcw {
    size: f64,
    color: Color,
}

impl Rotate90DegreesCcw {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for Rotate90DegreesCcw {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 14.69, y: 12.83 }),
                PathEl::LineTo(Point { x: 1.72, y: 25.80 }),
                PathEl::LineTo(Point { x: 14.69, y: 38.77 }),
                PathEl::LineTo(Point { x: 27.66, y: 25.80 }),
                PathEl::LineTo(Point { x: 14.69, y: 12.83 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 7.37, y: 25.80 }),
                PathEl::LineTo(Point { x: 14.68, y: 18.49 }),
                PathEl::LineTo(Point { x: 22.00, y: 25.80 }),
                PathEl::LineTo(Point { x: 14.69, y: 33.11 }),
                PathEl::LineTo(Point { x: 7.37, y: 25.80 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 38.73, y: 13.27 }),
                PathEl::CurveTo(
                    Point { x: 35.21, y: 9.76 },
                    Point { x: 30.61, y: 8.00 },
                    Point { x: 26.00, y: 8.00 },
                ),
                PathEl::LineTo(Point { x: 26.00, y: 1.51 }),
                PathEl::LineTo(Point { x: 17.51, y: 10.00 }),
                PathEl::LineTo(Point { x: 26.00, y: 18.48 }),
                PathEl::LineTo(Point { x: 26.00, y: 12.00 }),
                PathEl::CurveTo(
                    Point { x: 29.58, y: 12.00 },
                    Point { x: 33.17, y: 13.37 },
                    Point { x: 35.90, y: 16.10 },
                ),
                PathEl::CurveTo(
                    Point { x: 41.37, y: 21.57 },
                    Point { x: 41.37, y: 30.43 },
                    Point { x: 35.90, y: 35.90 },
                ),
                PathEl::CurveTo(
                    Point { x: 33.17, y: 38.63 },
                    Point { x: 29.58, y: 40.00 },
                    Point { x: 26.00, y: 40.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 24.06, y: 40.00 },
                    Point { x: 22.13, y: 39.59 },
                    Point { x: 20.33, y: 38.79 },
                ),
                PathEl::LineTo(Point { x: 17.35, y: 41.77 }),
                PathEl::CurveTo(
                    Point { x: 20.03, y: 43.25 },
                    Point { x: 23.01, y: 44.00 },
                    Point { x: 26.00, y: 44.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 30.61, y: 44.00 },
                    Point { x: 35.21, y: 42.24 },
                    Point { x: 38.73, y: 38.73 },
                ),
                PathEl::CurveTo(
                    Point { x: 45.76, y: 31.70 },
                    Point { x: 45.76, y: 20.30 },
                    Point { x: 38.73, y: 13.27 },
                ),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct ArrowBack {
    size: f64,
    color: Color,
}

impl ArrowBack {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for ArrowBack {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 40.00, y: 22.00 }),
                PathEl::LineTo(Point { x: 15.66, y: 22.00 }),
                PathEl::LineTo(Point { x: 26.83, y: 10.83 }),
                PathEl::LineTo(Point { x: 24.00, y: 8.00 }),
                PathEl::LineTo(Point { x: 8.00, y: 24.00 }),
                PathEl::LineTo(Point { x: 24.00, y: 40.00 }),
                PathEl::LineTo(Point { x: 26.83, y: 37.17 }),
                PathEl::LineTo(Point { x: 15.66, y: 26.00 }),
                PathEl::LineTo(Point { x: 40.00, y: 26.00 }),
                PathEl::LineTo(Point { x: 40.00, y: 22.00 }),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct History {
    size: f64,
    color: Color,
}

impl History {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for History {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 25.99, y: 6.00 }),
                PathEl::CurveTo(
                    Point { x: 16.04, y: 6.00 },
                    Point { x: 8.00, y: 14.06 },
                    Point { x: 8.00, y: 24.00 },
                ),
                PathEl::LineTo(Point { x: 2.00, y: 24.00 }),
                PathEl::LineTo(Point { x: 9.79, y: 31.79 }),
                PathEl::LineTo(Point { x: 9.93, y: 32.08 }),
                PathEl::LineTo(Point { x: 18.00, y: 24.00 }),
                PathEl::LineTo(Point { x: 12.00, y: 24.00 }),
                PathEl::CurveTo(
                    Point { x: 12.00, y: 16.27 },
                    Point { x: 18.27, y: 10.00 },
                    Point { x: 26.00, y: 10.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 33.73, y: 10.00 },
                    Point { x: 40.00, y: 16.27 },
                    Point { x: 40.00, y: 24.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 40.00, y: 31.73 },
                    Point { x: 33.73, y: 38.00 },
                    Point { x: 26.00, y: 38.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 22.13, y: 38.00 },
                    Point { x: 18.64, y: 36.42 },
                    Point { x: 16.11, y: 33.89 },
                ),
                PathEl::LineTo(Point { x: 13.28, y: 36.72 }),
                PathEl::CurveTo(
                    Point { x: 16.53, y: 39.98 },
                    Point { x: 21.02, y: 42.00 },
                    Point { x: 25.99, y: 42.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 35.94, y: 42.00 },
                    Point { x: 44.00, y: 33.94 },
                    Point { x: 44.00, y: 24.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 44.00, y: 14.06 },
                    Point { x: 35.94, y: 6.00 },
                    Point { x: 25.99, y: 6.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 24.00, y: 16.00 }),
                PathEl::LineTo(Point { x: 24.00, y: 26.00 }),
                PathEl::LineTo(Point { x: 32.56, y: 31.08 }),
                PathEl::LineTo(Point { x: 34.00, y: 28.65 }),
                PathEl::LineTo(Point { x: 27.00, y: 24.50 }),
                PathEl::LineTo(Point { x: 27.00, y: 16.00 }),
                PathEl::LineTo(Point { x: 24.00, y: 16.00 }),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct SettingsSystemDaydream {
    size: f64,
    color: Color,
}

impl SettingsSystemDaydream {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for SettingsSystemDaydream {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 18.00, y: 32.00 }),
                PathEl::LineTo(Point { x: 31.00, y: 32.00 }),
                PathEl::CurveTo(
                    Point { x: 33.76, y: 32.00 },
                    Point { x: 36.00, y: 29.76 },
                    Point { x: 36.00, y: 27.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 36.00, y: 24.24 },
                    Point { x: 33.76, y: 22.00 },
                    Point { x: 31.00, y: 22.00 },
                ),
                PathEl::LineTo(Point { x: 30.90, y: 22.00 }),
                PathEl::CurveTo(
                    Point { x: 30.41, y: 18.61 },
                    Point { x: 27.52, y: 16.00 },
                    Point { x: 24.00, y: 16.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 21.20, y: 16.00 },
                    Point { x: 18.80, y: 17.66 },
                    Point { x: 17.68, y: 20.04 },
                ),
                PathEl::LineTo(Point { x: 17.35, y: 20.04 }),
                PathEl::CurveTo(
                    Point { x: 14.34, y: 20.36 },
                    Point { x: 12.00, y: 22.91 },
                    Point { x: 12.00, y: 26.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 12.00, y: 29.31 },
                    Point { x: 14.69, y: 32.00 },
                    Point { x: 18.00, y: 32.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 42.00, y: 6.00 }),
                PathEl::LineTo(Point { x: 6.00, y: 6.00 }),
                PathEl::CurveTo(
                    Point { x: 3.79, y: 6.00 },
                    Point { x: 2.00, y: 7.79 },
                    Point { x: 2.00, y: 10.00 },
                ),
                PathEl::LineTo(Point { x: 2.00, y: 38.00 }),
                PathEl::CurveTo(
                    Point { x: 2.00, y: 40.21 },
                    Point { x: 3.79, y: 42.00 },
                    Point { x: 6.00, y: 42.00 },
                ),
                PathEl::LineTo(Point { x: 42.00, y: 42.00 }),
                PathEl::CurveTo(
                    Point { x: 44.21, y: 42.00 },
                    Point { x: 46.00, y: 40.21 },
                    Point { x: 46.00, y: 38.00 },
                ),
                PathEl::LineTo(Point { x: 46.00, y: 10.00 }),
                PathEl::CurveTo(
                    Point { x: 46.00, y: 7.79 },
                    Point { x: 44.21, y: 6.00 },
                    Point { x: 42.00, y: 6.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 42.00, y: 38.03 }),
                PathEl::LineTo(Point { x: 6.00, y: 38.03 }),
                PathEl::LineTo(Point { x: 6.00, y: 9.97 }),
                PathEl::LineTo(Point { x: 42.00, y: 9.97 }),
                PathEl::LineTo(Point { x: 42.00, y: 38.03 }),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct PhotoLibrary {
    size: f64,
    color: Color,
}

impl PhotoLibrary {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for PhotoLibrary {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 44.00, y: 32.00 }),
                PathEl::LineTo(Point { x: 44.00, y: 8.00 }),
                PathEl::CurveTo(
                    Point { x: 44.00, y: 5.79 },
                    Point { x: 42.21, y: 4.00 },
                    Point { x: 40.00, y: 4.00 },
                ),
                PathEl::LineTo(Point { x: 16.00, y: 4.00 }),
                PathEl::CurveTo(
                    Point { x: 13.79, y: 4.00 },
                    Point { x: 12.00, y: 5.79 },
                    Point { x: 12.00, y: 8.00 },
                ),
                PathEl::LineTo(Point { x: 12.00, y: 32.00 }),
                PathEl::CurveTo(
                    Point { x: 12.00, y: 34.21 },
                    Point { x: 13.79, y: 36.00 },
                    Point { x: 16.00, y: 36.00 },
                ),
                PathEl::LineTo(Point { x: 40.00, y: 36.00 }),
                PathEl::CurveTo(
                    Point { x: 42.21, y: 36.00 },
                    Point { x: 44.00, y: 34.21 },
                    Point { x: 44.00, y: 32.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 22.00, y: 24.00 }),
                PathEl::LineTo(Point { x: 26.06, y: 29.42 }),
                PathEl::LineTo(Point { x: 32.00, y: 22.00 }),
                PathEl::LineTo(Point { x: 40.00, y: 32.00 }),
                PathEl::LineTo(Point { x: 16.00, y: 32.00 }),
                PathEl::LineTo(Point { x: 22.00, y: 24.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 4.00, y: 12.00 }),
                PathEl::LineTo(Point { x: 4.00, y: 40.00 }),
                PathEl::CurveTo(
                    Point { x: 4.00, y: 42.21 },
                    Point { x: 5.79, y: 44.00 },
                    Point { x: 8.00, y: 44.00 },
                ),
                PathEl::LineTo(Point { x: 36.00, y: 44.00 }),
                PathEl::LineTo(Point { x: 36.00, y: 40.00 }),
                PathEl::LineTo(Point { x: 8.00, y: 40.00 }),
                PathEl::LineTo(Point { x: 8.00, y: 12.00 }),
                PathEl::LineTo(Point { x: 4.00, y: 12.00 }),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct LocalCarWash {
    size: f64,
    color: Color,
}

impl LocalCarWash {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for LocalCarWash {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 34.00, y: 10.00 }),
                PathEl::CurveTo(
                    Point { x: 35.66, y: 10.00 },
                    Point { x: 37.00, y: 8.66 },
                    Point { x: 37.00, y: 7.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 37.00, y: 5.00 },
                    Point { x: 34.00, y: 1.60 },
                    Point { x: 34.00, y: 1.60 },
                ),
                PathEl::CurveTo(
                    Point { x: 34.00, y: 1.60 },
                    Point { x: 31.00, y: 5.00 },
                    Point { x: 31.00, y: 7.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 31.00, y: 8.66 },
                    Point { x: 32.34, y: 10.00 },
                    Point { x: 34.00, y: 10.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 24.00, y: 10.00 }),
                PathEl::CurveTo(
                    Point { x: 25.66, y: 10.00 },
                    Point { x: 27.00, y: 8.66 },
                    Point { x: 27.00, y: 7.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 27.00, y: 5.00 },
                    Point { x: 24.00, y: 1.60 },
                    Point { x: 24.00, y: 1.60 },
                ),
                PathEl::CurveTo(
                    Point { x: 24.00, y: 1.60 },
                    Point { x: 21.00, y: 5.00 },
                    Point { x: 21.00, y: 7.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 21.00, y: 8.66 },
                    Point { x: 22.34, y: 10.00 },
                    Point { x: 24.00, y: 10.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 14.00, y: 10.00 }),
                PathEl::CurveTo(
                    Point { x: 15.66, y: 10.00 },
                    Point { x: 17.00, y: 8.66 },
                    Point { x: 17.00, y: 7.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 17.00, y: 5.00 },
                    Point { x: 14.00, y: 1.60 },
                    Point { x: 14.00, y: 1.60 },
                ),
                PathEl::CurveTo(
                    Point { x: 14.00, y: 1.60 },
                    Point { x: 11.00, y: 5.00 },
                    Point { x: 11.00, y: 7.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 11.00, y: 8.66 },
                    Point { x: 12.34, y: 10.00 },
                    Point { x: 14.00, y: 10.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 37.84, y: 16.02 }),
                PathEl::CurveTo(
                    Point { x: 37.43, y: 14.84 },
                    Point { x: 36.31, y: 14.00 },
                    Point { x: 35.00, y: 14.00 },
                ),
                PathEl::LineTo(Point { x: 13.00, y: 14.00 }),
                PathEl::CurveTo(
                    Point { x: 11.69, y: 14.00 },
                    Point { x: 10.57, y: 14.84 },
                    Point { x: 10.16, y: 16.02 },
                ),
                PathEl::LineTo(Point { x: 6.00, y: 28.00 }),
                PathEl::LineTo(Point { x: 6.00, y: 44.00 }),
                PathEl::CurveTo(
                    Point { x: 6.00, y: 45.10 },
                    Point { x: 6.90, y: 46.00 },
                    Point { x: 8.00, y: 46.00 },
                ),
                PathEl::LineTo(Point { x: 10.00, y: 46.00 }),
                PathEl::CurveTo(
                    Point { x: 11.11, y: 46.00 },
                    Point { x: 12.00, y: 45.10 },
                    Point { x: 12.00, y: 44.00 },
                ),
                PathEl::LineTo(Point { x: 12.00, y: 42.00 }),
                PathEl::LineTo(Point { x: 36.00, y: 42.00 }),
                PathEl::LineTo(Point { x: 36.00, y: 44.00 }),
                PathEl::CurveTo(
                    Point { x: 36.00, y: 45.10 },
                    Point { x: 36.90, y: 46.00 },
                    Point { x: 38.00, y: 46.00 },
                ),
                PathEl::LineTo(Point { x: 40.00, y: 46.00 }),
                PathEl::CurveTo(
                    Point { x: 41.11, y: 46.00 },
                    Point { x: 42.00, y: 45.10 },
                    Point { x: 42.00, y: 44.00 },
                ),
                PathEl::LineTo(Point { x: 42.00, y: 28.00 }),
                PathEl::LineTo(Point { x: 37.84, y: 16.02 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 13.00, y: 36.00 }),
                PathEl::CurveTo(
                    Point { x: 11.34, y: 36.00 },
                    Point { x: 10.00, y: 34.66 },
                    Point { x: 10.00, y: 33.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 10.00, y: 31.34 },
                    Point { x: 11.34, y: 30.00 },
                    Point { x: 13.00, y: 30.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 14.66, y: 30.00 },
                    Point { x: 16.00, y: 31.34 },
                    Point { x: 16.00, y: 33.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 16.00, y: 34.66 },
                    Point { x: 14.66, y: 36.00 },
                    Point { x: 13.00, y: 36.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 35.00, y: 36.00 }),
                PathEl::CurveTo(
                    Point { x: 33.34, y: 36.00 },
                    Point { x: 32.00, y: 34.66 },
                    Point { x: 32.00, y: 33.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 32.00, y: 31.34 },
                    Point { x: 33.34, y: 30.00 },
                    Point { x: 35.00, y: 30.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 36.66, y: 30.00 },
                    Point { x: 38.00, y: 31.34 },
                    Point { x: 38.00, y: 33.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 38.00, y: 34.66 },
                    Point { x: 36.66, y: 36.00 },
                    Point { x: 35.00, y: 36.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 10.00, y: 26.00 }),
                PathEl::LineTo(Point { x: 13.00, y: 17.00 }),
                PathEl::LineTo(Point { x: 35.00, y: 17.00 }),
                PathEl::LineTo(Point { x: 38.00, y: 26.00 }),
                PathEl::LineTo(Point { x: 10.00, y: 26.00 }),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct LocalFlorist {
    size: f64,
    color: Color,
}

impl LocalFlorist {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for LocalFlorist {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 24.00, y: 44.00 }),
                PathEl::CurveTo(
                    Point { x: 33.94, y: 44.00 },
                    Point { x: 42.00, y: 35.94 },
                    Point { x: 42.00, y: 26.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 32.06, y: 26.00 },
                    Point { x: 24.00, y: 34.06 },
                    Point { x: 24.00, y: 44.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 11.21, y: 20.50 }),
                PathEl::CurveTo(
                    Point { x: 11.21, y: 23.26 },
                    Point { x: 13.45, y: 25.50 },
                    Point { x: 16.21, y: 25.50 },
                ),
                PathEl::CurveTo(
                    Point { x: 17.26, y: 25.50 },
                    Point { x: 18.24, y: 25.17 },
                    Point { x: 19.04, y: 24.62 },
                ),
                PathEl::LineTo(Point { x: 19.00, y: 25.00 }),
                PathEl::CurveTo(
                    Point { x: 19.00, y: 27.76 },
                    Point { x: 21.24, y: 30.00 },
                    Point { x: 24.00, y: 30.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 26.76, y: 30.00 },
                    Point { x: 29.00, y: 27.76 },
                    Point { x: 29.00, y: 25.00 },
                ),
                PathEl::LineTo(Point { x: 28.96, y: 24.62 }),
                PathEl::CurveTo(
                    Point { x: 29.77, y: 25.18 },
                    Point { x: 30.74, y: 25.50 },
                    Point { x: 31.79, y: 25.50 },
                ),
                PathEl::CurveTo(
                    Point { x: 34.55, y: 25.50 },
                    Point { x: 36.79, y: 23.26 },
                    Point { x: 36.79, y: 20.50 },
                ),
                PathEl::CurveTo(
                    Point { x: 36.79, y: 18.51 },
                    Point { x: 35.62, y: 16.80 },
                    Point { x: 33.93, y: 16.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 35.61, y: 15.20 },
                    Point { x: 36.79, y: 13.49 },
                    Point { x: 36.79, y: 11.50 },
                ),
                PathEl::CurveTo(
                    Point { x: 36.79, y: 8.74 },
                    Point { x: 34.55, y: 6.50 },
                    Point { x: 31.79, y: 6.50 },
                ),
                PathEl::CurveTo(
                    Point { x: 30.74, y: 6.50 },
                    Point { x: 29.76, y: 6.83 },
                    Point { x: 28.96, y: 7.38 },
                ),
                PathEl::LineTo(Point { x: 29.00, y: 7.00 }),
                PathEl::CurveTo(
                    Point { x: 29.00, y: 4.24 },
                    Point { x: 26.76, y: 2.00 },
                    Point { x: 24.00, y: 2.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 21.24, y: 2.00 },
                    Point { x: 19.00, y: 4.24 },
                    Point { x: 19.00, y: 7.00 },
                ),
                PathEl::LineTo(Point { x: 19.04, y: 7.38 }),
                PathEl::CurveTo(
                    Point { x: 18.23, y: 6.82 },
                    Point { x: 17.26, y: 6.50 },
                    Point { x: 16.21, y: 6.50 },
                ),
                PathEl::CurveTo(
                    Point { x: 13.45, y: 6.50 },
                    Point { x: 11.21, y: 8.74 },
                    Point { x: 11.21, y: 11.50 },
                ),
                PathEl::CurveTo(
                    Point { x: 11.21, y: 13.49 },
                    Point { x: 12.38, y: 15.20 },
                    Point { x: 14.07, y: 16.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 12.38, y: 16.80 },
                    Point { x: 11.21, y: 18.51 },
                    Point { x: 11.21, y: 20.50 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 24.00, y: 11.00 }),
                PathEl::CurveTo(
                    Point { x: 26.76, y: 11.00 },
                    Point { x: 29.00, y: 13.24 },
                    Point { x: 29.00, y: 16.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 29.00, y: 18.76 },
                    Point { x: 26.76, y: 21.00 },
                    Point { x: 24.00, y: 21.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 21.24, y: 21.00 },
                    Point { x: 19.00, y: 18.76 },
                    Point { x: 19.00, y: 16.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 19.00, y: 13.24 },
                    Point { x: 21.24, y: 11.00 },
                    Point { x: 24.00, y: 11.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 6.00, y: 26.00 }),
                PathEl::CurveTo(
                    Point { x: 6.00, y: 35.94 },
                    Point { x: 14.06, y: 44.00 },
                    Point { x: 24.00, y: 44.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 24.00, y: 34.06 },
                    Point { x: 15.94, y: 26.00 },
                    Point { x: 6.00, y: 26.00 },
                ),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct More {
    size: f64,
    color: Color,
}

impl More {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for More {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 44.00, y: 6.00 }),
                PathEl::LineTo(Point { x: 14.00, y: 6.00 }),
                PathEl::CurveTo(
                    Point { x: 12.62, y: 6.00 },
                    Point { x: 11.53, y: 6.70 },
                    Point { x: 10.81, y: 7.76 },
                ),
                PathEl::LineTo(Point { x: 0.00, y: 23.99 }),
                PathEl::LineTo(Point { x: 10.81, y: 40.22 }),
                PathEl::CurveTo(
                    Point { x: 11.53, y: 41.28 },
                    Point { x: 12.75, y: 42.00 },
                    Point { x: 14.13, y: 42.00 },
                ),
                PathEl::LineTo(Point { x: 44.00, y: 42.00 }),
                PathEl::CurveTo(
                    Point { x: 46.21, y: 42.00 },
                    Point { x: 48.00, y: 40.21 },
                    Point { x: 48.00, y: 38.00 },
                ),
                PathEl::LineTo(Point { x: 48.00, y: 10.00 }),
                PathEl::CurveTo(
                    Point { x: 48.00, y: 7.79 },
                    Point { x: 46.21, y: 6.00 },
                    Point { x: 44.00, y: 6.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 18.00, y: 27.00 }),
                PathEl::CurveTo(
                    Point { x: 16.34, y: 27.00 },
                    Point { x: 15.00, y: 25.66 },
                    Point { x: 15.00, y: 24.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 15.00, y: 22.34 },
                    Point { x: 16.34, y: 21.00 },
                    Point { x: 18.00, y: 21.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 19.66, y: 21.00 },
                    Point { x: 21.00, y: 22.34 },
                    Point { x: 21.00, y: 24.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 21.00, y: 25.66 },
                    Point { x: 19.66, y: 27.00 },
                    Point { x: 18.00, y: 27.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 28.00, y: 27.00 }),
                PathEl::CurveTo(
                    Point { x: 26.34, y: 27.00 },
                    Point { x: 25.00, y: 25.66 },
                    Point { x: 25.00, y: 24.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 25.00, y: 22.34 },
                    Point { x: 26.34, y: 21.00 },
                    Point { x: 28.00, y: 21.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 29.66, y: 21.00 },
                    Point { x: 31.00, y: 22.34 },
                    Point { x: 31.00, y: 24.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 31.00, y: 25.66 },
                    Point { x: 29.66, y: 27.00 },
                    Point { x: 28.00, y: 27.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 38.00, y: 27.00 }),
                PathEl::CurveTo(
                    Point { x: 36.34, y: 27.00 },
                    Point { x: 35.00, y: 25.66 },
                    Point { x: 35.00, y: 24.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 35.00, y: 22.34 },
                    Point { x: 36.34, y: 21.00 },
                    Point { x: 38.00, y: 21.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 39.66, y: 21.00 },
                    Point { x: 41.00, y: 22.34 },
                    Point { x: 41.00, y: 24.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 41.00, y: 25.66 },
                    Point { x: 39.66, y: 27.00 },
                    Point { x: 38.00, y: 27.00 },
                ),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct ShowChart {
    size: f64,
    color: Color,
}

impl ShowChart {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for ShowChart {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 7.00, y: 36.99 }),
                PathEl::LineTo(Point { x: 19.00, y: 24.96 }),
                PathEl::LineTo(Point { x: 27.00, y: 32.96 }),
                PathEl::LineTo(Point { x: 44.00, y: 13.84 }),
                PathEl::LineTo(Point { x: 41.18, y: 11.01 }),
                PathEl::LineTo(Point { x: 27.00, y: 26.96 }),
                PathEl::LineTo(Point { x: 19.00, y: 18.96 }),
                PathEl::LineTo(Point { x: 4.00, y: 33.99 }),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct Pool {
    size: f64,
    color: Color,
}

impl Pool {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for Pool {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 44.00, y: 42.00 }),
                PathEl::CurveTo(
                    Point { x: 41.78, y: 42.00 },
                    Point { x: 40.54, y: 41.26 },
                    Point { x: 39.64, y: 40.71 },
                ),
                PathEl::CurveTo(
                    Point { x: 38.90, y: 40.27 },
                    Point { x: 38.45, y: 40.00 },
                    Point { x: 37.34, y: 40.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 36.23, y: 40.00 },
                    Point { x: 35.78, y: 40.27 },
                    Point { x: 35.04, y: 40.71 },
                ),
                PathEl::CurveTo(
                    Point { x: 34.14, y: 41.25 },
                    Point { x: 32.90, y: 42.00 },
                    Point { x: 30.68, y: 42.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 28.46, y: 42.00 },
                    Point { x: 27.22, y: 41.26 },
                    Point { x: 26.32, y: 40.71 },
                ),
                PathEl::CurveTo(
                    Point { x: 25.58, y: 40.26 },
                    Point { x: 25.13, y: 40.00 },
                    Point { x: 24.02, y: 40.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 22.91, y: 40.00 },
                    Point { x: 22.46, y: 40.27 },
                    Point { x: 21.72, y: 40.71 },
                ),
                PathEl::CurveTo(
                    Point { x: 20.80, y: 41.26 },
                    Point { x: 19.56, y: 42.00 },
                    Point { x: 17.34, y: 42.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 15.12, y: 42.00 },
                    Point { x: 13.88, y: 41.26 },
                    Point { x: 12.98, y: 40.72 },
                ),
                PathEl::CurveTo(
                    Point { x: 12.24, y: 40.27 },
                    Point { x: 11.79, y: 40.00 },
                    Point { x: 10.67, y: 40.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 9.55, y: 40.00 },
                    Point { x: 9.11, y: 40.27 },
                    Point { x: 8.36, y: 40.72 },
                ),
                PathEl::CurveTo(
                    Point { x: 7.46, y: 41.26 },
                    Point { x: 6.22, y: 42.00 },
                    Point { x: 4.00, y: 42.00 },
                ),
                PathEl::LineTo(Point { x: 4.00, y: 38.00 }),
                PathEl::CurveTo(
                    Point { x: 5.11, y: 38.00 },
                    Point { x: 5.56, y: 37.73 },
                    Point { x: 6.31, y: 37.28 },
                ),
                PathEl::CurveTo(
                    Point { x: 7.21, y: 36.74 },
                    Point { x: 8.45, y: 36.00 },
                    Point { x: 10.67, y: 36.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 12.89, y: 36.00 },
                    Point { x: 14.13, y: 36.74 },
                    Point { x: 15.03, y: 37.28 },
                ),
                PathEl::CurveTo(
                    Point { x: 15.77, y: 37.73 },
                    Point { x: 16.22, y: 38.00 },
                    Point { x: 17.34, y: 38.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 18.45, y: 38.00 },
                    Point { x: 18.90, y: 37.73 },
                    Point { x: 19.64, y: 37.29 },
                ),
                PathEl::CurveTo(
                    Point { x: 20.54, y: 36.75 },
                    Point { x: 21.78, y: 36.00 },
                    Point { x: 24.00, y: 36.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 26.22, y: 36.00 },
                    Point { x: 27.46, y: 36.74 },
                    Point { x: 28.36, y: 37.29 },
                ),
                PathEl::CurveTo(
                    Point { x: 29.10, y: 37.74 },
                    Point { x: 29.55, y: 38.00 },
                    Point { x: 30.66, y: 38.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 31.77, y: 38.00 },
                    Point { x: 32.22, y: 37.73 },
                    Point { x: 32.96, y: 37.29 },
                ),
                PathEl::CurveTo(
                    Point { x: 33.86, y: 36.75 },
                    Point { x: 35.10, y: 36.00 },
                    Point { x: 37.32, y: 36.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 39.54, y: 36.00 },
                    Point { x: 40.78, y: 36.74 },
                    Point { x: 41.68, y: 37.29 },
                ),
                PathEl::CurveTo(
                    Point { x: 42.44, y: 37.73 },
                    Point { x: 42.89, y: 38.00 },
                    Point { x: 44.00, y: 38.00 },
                ),
                PathEl::LineTo(Point { x: 44.00, y: 42.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 44.00, y: 33.00 }),
                PathEl::CurveTo(
                    Point { x: 41.78, y: 33.00 },
                    Point { x: 40.54, y: 32.26 },
                    Point { x: 39.64, y: 31.71 },
                ),
                PathEl::CurveTo(
                    Point { x: 38.90, y: 31.27 },
                    Point { x: 38.45, y: 31.00 },
                    Point { x: 37.34, y: 31.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 36.23, y: 31.00 },
                    Point { x: 35.78, y: 31.27 },
                    Point { x: 35.04, y: 31.71 },
                ),
                PathEl::CurveTo(
                    Point { x: 34.14, y: 32.25 },
                    Point { x: 32.90, y: 33.00 },
                    Point { x: 30.68, y: 33.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 28.46, y: 33.00 },
                    Point { x: 27.22, y: 32.26 },
                    Point { x: 26.32, y: 31.71 },
                ),
                PathEl::CurveTo(
                    Point { x: 25.58, y: 31.26 },
                    Point { x: 25.13, y: 31.00 },
                    Point { x: 24.02, y: 31.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 22.91, y: 31.00 },
                    Point { x: 22.46, y: 31.27 },
                    Point { x: 21.72, y: 31.71 },
                ),
                PathEl::CurveTo(
                    Point { x: 20.80, y: 32.26 },
                    Point { x: 19.56, y: 33.00 },
                    Point { x: 17.34, y: 33.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 15.12, y: 33.00 },
                    Point { x: 13.88, y: 32.26 },
                    Point { x: 12.98, y: 31.72 },
                ),
                PathEl::CurveTo(
                    Point { x: 12.24, y: 31.27 },
                    Point { x: 11.79, y: 31.00 },
                    Point { x: 10.67, y: 31.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 9.55, y: 31.00 },
                    Point { x: 9.11, y: 31.27 },
                    Point { x: 8.36, y: 31.72 },
                ),
                PathEl::CurveTo(
                    Point { x: 7.46, y: 32.26 },
                    Point { x: 6.22, y: 33.00 },
                    Point { x: 4.00, y: 33.00 },
                ),
                PathEl::LineTo(Point { x: 4.00, y: 29.00 }),
                PathEl::CurveTo(
                    Point { x: 5.11, y: 29.00 },
                    Point { x: 5.56, y: 28.73 },
                    Point { x: 6.31, y: 28.28 },
                ),
                PathEl::CurveTo(
                    Point { x: 7.21, y: 27.74 },
                    Point { x: 8.45, y: 27.00 },
                    Point { x: 10.67, y: 27.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 12.89, y: 27.00 },
                    Point { x: 14.13, y: 27.74 },
                    Point { x: 15.03, y: 28.28 },
                ),
                PathEl::CurveTo(
                    Point { x: 15.77, y: 28.73 },
                    Point { x: 16.22, y: 29.00 },
                    Point { x: 17.34, y: 29.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 18.45, y: 29.00 },
                    Point { x: 18.90, y: 28.73 },
                    Point { x: 19.64, y: 28.29 },
                ),
                PathEl::CurveTo(
                    Point { x: 20.54, y: 27.75 },
                    Point { x: 21.78, y: 27.00 },
                    Point { x: 24.00, y: 27.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 26.22, y: 27.00 },
                    Point { x: 27.46, y: 27.74 },
                    Point { x: 28.36, y: 28.29 },
                ),
                PathEl::CurveTo(
                    Point { x: 29.10, y: 28.74 },
                    Point { x: 29.55, y: 29.00 },
                    Point { x: 30.66, y: 29.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 31.77, y: 29.00 },
                    Point { x: 32.22, y: 28.73 },
                    Point { x: 32.96, y: 28.29 },
                ),
                PathEl::CurveTo(
                    Point { x: 33.86, y: 27.75 },
                    Point { x: 35.10, y: 27.00 },
                    Point { x: 37.32, y: 27.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 39.54, y: 27.00 },
                    Point { x: 40.78, y: 27.74 },
                    Point { x: 41.68, y: 28.29 },
                ),
                PathEl::CurveTo(
                    Point { x: 42.44, y: 28.73 },
                    Point { x: 42.89, y: 29.00 },
                    Point { x: 44.00, y: 29.00 },
                ),
                PathEl::LineTo(Point { x: 44.00, y: 33.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 17.34, y: 24.00 }),
                PathEl::CurveTo(
                    Point { x: 18.45, y: 24.00 },
                    Point { x: 18.90, y: 23.73 },
                    Point { x: 19.64, y: 23.29 },
                ),
                PathEl::CurveTo(
                    Point { x: 20.54, y: 22.75 },
                    Point { x: 21.78, y: 22.00 },
                    Point { x: 24.00, y: 22.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 26.22, y: 22.00 },
                    Point { x: 27.46, y: 22.74 },
                    Point { x: 28.36, y: 23.29 },
                ),
                PathEl::CurveTo(
                    Point { x: 29.10, y: 23.74 },
                    Point { x: 29.55, y: 24.00 },
                    Point { x: 30.66, y: 24.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 31.77, y: 24.00 },
                    Point { x: 32.22, y: 23.73 },
                    Point { x: 32.96, y: 23.29 },
                ),
                PathEl::CurveTo(
                    Point { x: 33.20, y: 23.14 },
                    Point { x: 33.47, y: 22.99 },
                    Point { x: 33.77, y: 22.83 },
                ),
                PathEl::LineTo(Point { x: 20.96, y: 10.00 }),
                PathEl::CurveTo(
                    Point { x: 17.85, y: 6.89 },
                    Point { x: 15.00, y: 5.98 },
                    Point { x: 10.00, y: 6.00 },
                ),
                PathEl::LineTo(Point { x: 10.00, y: 11.00 }),
                PathEl::CurveTo(
                    Point { x: 13.64, y: 10.98 },
                    Point { x: 15.77, y: 11.78 },
                    Point { x: 18.00, y: 14.00 },
                ),
                PathEl::LineTo(Point { x: 20.00, y: 16.00 }),
                PathEl::LineTo(Point { x: 13.50, y: 22.50 }),
                PathEl::CurveTo(
                    Point { x: 14.12, y: 22.74 },
                    Point { x: 14.62, y: 23.03 },
                    Point { x: 15.04, y: 23.28 },
                ),
                PathEl::CurveTo(
                    Point { x: 15.78, y: 23.73 },
                    Point { x: 16.23, y: 24.00 },
                    Point { x: 17.34, y: 24.00 },
                ),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
        ctx.fill(
            Circle {
                center: Point { x: 33.00, y: 11.00 },
                radius: 5.00,
            },
            &brush,
        );
    }
}

pub struct GroupAdd {
    size: f64,
    color: Color,
}

impl GroupAdd {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for GroupAdd {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 16.00, y: 20.00 }),
                PathEl::LineTo(Point { x: 10.00, y: 20.00 }),
                PathEl::LineTo(Point { x: 10.00, y: 14.00 }),
                PathEl::LineTo(Point { x: 6.00, y: 14.00 }),
                PathEl::LineTo(Point { x: 6.00, y: 20.00 }),
                PathEl::LineTo(Point { x: 0.00, y: 20.00 }),
                PathEl::LineTo(Point { x: 0.00, y: 24.00 }),
                PathEl::LineTo(Point { x: 6.00, y: 24.00 }),
                PathEl::LineTo(Point { x: 6.00, y: 30.00 }),
                PathEl::LineTo(Point { x: 10.00, y: 30.00 }),
                PathEl::LineTo(Point { x: 10.00, y: 24.00 }),
                PathEl::LineTo(Point { x: 16.00, y: 24.00 }),
                PathEl::LineTo(Point { x: 16.00, y: 20.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 36.00, y: 22.00 }),
                PathEl::CurveTo(
                    Point { x: 39.31, y: 22.00 },
                    Point { x: 41.98, y: 19.31 },
                    Point { x: 41.98, y: 16.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 41.98, y: 12.69 },
                    Point { x: 39.31, y: 10.00 },
                    Point { x: 36.00, y: 10.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 35.36, y: 10.00 },
                    Point { x: 34.75, y: 10.10 },
                    Point { x: 34.17, y: 10.29 },
                ),
                PathEl::CurveTo(
                    Point { x: 35.30, y: 11.91 },
                    Point { x: 35.98, y: 13.88 },
                    Point { x: 35.98, y: 16.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 35.98, y: 18.12 },
                    Point { x: 35.30, y: 20.09 },
                    Point { x: 34.17, y: 21.71 },
                ),
                PathEl::CurveTo(
                    Point { x: 34.75, y: 21.90 },
                    Point { x: 35.36, y: 22.00 },
                    Point { x: 36.00, y: 22.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 26.00, y: 22.00 }),
                PathEl::CurveTo(
                    Point { x: 29.31, y: 22.00 },
                    Point { x: 31.98, y: 19.31 },
                    Point { x: 31.98, y: 16.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 31.98, y: 12.69 },
                    Point { x: 29.31, y: 10.00 },
                    Point { x: 26.00, y: 10.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 22.69, y: 10.00 },
                    Point { x: 20.00, y: 12.69 },
                    Point { x: 20.00, y: 16.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 20.00, y: 19.31 },
                    Point { x: 22.69, y: 22.00 },
                    Point { x: 26.00, y: 22.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 39.24, y: 26.32 }),
                PathEl::CurveTo(
                    Point { x: 40.90, y: 27.77 },
                    Point { x: 42.00, y: 29.64 },
                    Point { x: 42.00, y: 32.00 },
                ),
                PathEl::LineTo(Point { x: 42.00, y: 36.00 }),
                PathEl::LineTo(Point { x: 48.00, y: 36.00 }),
                PathEl::LineTo(Point { x: 48.00, y: 32.00 }),
                PathEl::CurveTo(
                    Point { x: 48.00, y: 28.92 },
                    Point { x: 43.25, y: 27.03 },
                    Point { x: 39.24, y: 26.32 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 26.00, y: 26.00 }),
                PathEl::CurveTo(
                    Point { x: 22.00, y: 26.00 },
                    Point { x: 14.00, y: 28.00 },
                    Point { x: 14.00, y: 32.00 },
                ),
                PathEl::LineTo(Point { x: 14.00, y: 36.00 }),
                PathEl::LineTo(Point { x: 38.00, y: 36.00 }),
                PathEl::LineTo(Point { x: 38.00, y: 32.00 }),
                PathEl::CurveTo(
                    Point { x: 38.00, y: 28.00 },
                    Point { x: 30.00, y: 26.00 },
                    Point { x: 26.00, y: 26.00 },
                ),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct HeadsetMic {
    size: f64,
    color: Color,
}

impl HeadsetMic {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for HeadsetMic {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 24.00, y: 2.00 }),
                PathEl::CurveTo(
                    Point { x: 14.06, y: 2.00 },
                    Point { x: 6.00, y: 10.06 },
                    Point { x: 6.00, y: 20.00 },
                ),
                PathEl::LineTo(Point { x: 6.00, y: 34.00 }),
                PathEl::CurveTo(
                    Point { x: 6.00, y: 37.31 },
                    Point { x: 8.69, y: 40.00 },
                    Point { x: 12.00, y: 40.00 },
                ),
                PathEl::LineTo(Point { x: 18.00, y: 40.00 }),
                PathEl::LineTo(Point { x: 18.00, y: 24.00 }),
                PathEl::LineTo(Point { x: 10.00, y: 24.00 }),
                PathEl::LineTo(Point { x: 10.00, y: 20.00 }),
                PathEl::CurveTo(
                    Point { x: 10.00, y: 12.27 },
                    Point { x: 16.27, y: 6.00 },
                    Point { x: 24.00, y: 6.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 31.73, y: 6.00 },
                    Point { x: 38.00, y: 12.27 },
                    Point { x: 38.00, y: 20.00 },
                ),
                PathEl::LineTo(Point { x: 38.00, y: 24.00 }),
                PathEl::LineTo(Point { x: 30.00, y: 24.00 }),
                PathEl::LineTo(Point { x: 30.00, y: 40.00 }),
                PathEl::LineTo(Point { x: 38.00, y: 40.00 }),
                PathEl::LineTo(Point { x: 38.00, y: 42.00 }),
                PathEl::LineTo(Point { x: 24.00, y: 42.00 }),
                PathEl::LineTo(Point { x: 24.00, y: 46.00 }),
                PathEl::LineTo(Point { x: 36.00, y: 46.00 }),
                PathEl::CurveTo(
                    Point { x: 39.31, y: 46.00 },
                    Point { x: 42.00, y: 43.31 },
                    Point { x: 42.00, y: 40.00 },
                ),
                PathEl::LineTo(Point { x: 42.00, y: 20.00 }),
                PathEl::CurveTo(
                    Point { x: 42.00, y: 10.06 },
                    Point { x: 33.94, y: 2.00 },
                    Point { x: 24.00, y: 2.00 },
                ),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct DiscFull {
    size: f64,
    color: Color,
}

impl DiscFull {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for DiscFull {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 40.00, y: 32.00 }),
                PathEl::LineTo(Point { x: 44.00, y: 32.00 }),
                PathEl::LineTo(Point { x: 44.00, y: 28.00 }),
                PathEl::LineTo(Point { x: 40.00, y: 28.00 }),
                PathEl::LineTo(Point { x: 40.00, y: 32.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 40.00, y: 14.00 }),
                PathEl::LineTo(Point { x: 40.00, y: 24.00 }),
                PathEl::LineTo(Point { x: 44.00, y: 24.00 }),
                PathEl::LineTo(Point { x: 44.00, y: 14.00 }),
                PathEl::LineTo(Point { x: 40.00, y: 14.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 20.00, y: 8.00 }),
                PathEl::CurveTo(
                    Point { x: 11.16, y: 8.00 },
                    Point { x: 4.00, y: 15.16 },
                    Point { x: 4.00, y: 24.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 4.00, y: 32.84 },
                    Point { x: 11.16, y: 40.00 },
                    Point { x: 20.00, y: 40.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 28.84, y: 40.00 },
                    Point { x: 36.00, y: 32.84 },
                    Point { x: 36.00, y: 24.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 36.00, y: 15.16 },
                    Point { x: 28.84, y: 8.00 },
                    Point { x: 20.00, y: 8.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 20.00, y: 28.00 }),
                PathEl::CurveTo(
                    Point { x: 17.79, y: 28.00 },
                    Point { x: 16.00, y: 26.21 },
                    Point { x: 16.00, y: 24.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 16.00, y: 21.79 },
                    Point { x: 17.79, y: 20.00 },
                    Point { x: 20.00, y: 20.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 22.21, y: 20.00 },
                    Point { x: 24.00, y: 21.79 },
                    Point { x: 24.00, y: 24.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 24.00, y: 26.21 },
                    Point { x: 22.21, y: 28.00 },
                    Point { x: 20.00, y: 28.00 },
                ),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct SentimentDissatisfied {
    size: f64,
    color: Color,
}

impl SentimentDissatisfied {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for SentimentDissatisfied {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 31.00, y: 22.00 }),
                PathEl::CurveTo(
                    Point { x: 32.66, y: 22.00 },
                    Point { x: 34.00, y: 20.66 },
                    Point { x: 34.00, y: 19.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 34.00, y: 17.34 },
                    Point { x: 32.66, y: 16.00 },
                    Point { x: 31.00, y: 16.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 29.34, y: 16.00 },
                    Point { x: 28.00, y: 17.34 },
                    Point { x: 28.00, y: 19.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 28.00, y: 20.66 },
                    Point { x: 29.34, y: 22.00 },
                    Point { x: 31.00, y: 22.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 17.00, y: 22.00 }),
                PathEl::CurveTo(
                    Point { x: 18.66, y: 22.00 },
                    Point { x: 20.00, y: 20.66 },
                    Point { x: 20.00, y: 19.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 20.00, y: 17.34 },
                    Point { x: 18.66, y: 16.00 },
                    Point { x: 17.00, y: 16.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 15.34, y: 16.00 },
                    Point { x: 14.00, y: 17.34 },
                    Point { x: 14.00, y: 19.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 14.00, y: 20.66 },
                    Point { x: 15.34, y: 22.00 },
                    Point { x: 17.00, y: 22.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 23.98, y: 4.00 }),
                PathEl::CurveTo(
                    Point { x: 12.94, y: 4.00 },
                    Point { x: 4.00, y: 12.96 },
                    Point { x: 4.00, y: 24.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 4.00, y: 35.04 },
                    Point { x: 12.94, y: 44.00 },
                    Point { x: 23.98, y: 44.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 35.04, y: 44.00 },
                    Point { x: 44.00, y: 35.04 },
                    Point { x: 44.00, y: 24.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 44.00, y: 12.96 },
                    Point { x: 35.04, y: 4.00 },
                    Point { x: 23.98, y: 4.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 24.00, y: 40.00 }),
                PathEl::CurveTo(
                    Point { x: 15.16, y: 40.00 },
                    Point { x: 8.00, y: 32.84 },
                    Point { x: 8.00, y: 24.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 8.00, y: 15.16 },
                    Point { x: 15.16, y: 8.00 },
                    Point { x: 24.00, y: 8.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 32.84, y: 8.00 },
                    Point { x: 40.00, y: 15.16 },
                    Point { x: 40.00, y: 24.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 40.00, y: 32.84 },
                    Point { x: 32.84, y: 40.00 },
                    Point { x: 24.00, y: 40.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 24.00, y: 28.00 }),
                PathEl::CurveTo(
                    Point { x: 19.34, y: 28.00 },
                    Point { x: 15.36, y: 30.91 },
                    Point { x: 13.76, y: 35.00 },
                ),
                PathEl::LineTo(Point { x: 17.11, y: 35.00 }),
                PathEl::CurveTo(
                    Point { x: 18.50, y: 32.62 },
                    Point { x: 21.05, y: 31.00 },
                    Point { x: 24.00, y: 31.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 26.95, y: 31.00 },
                    Point { x: 29.50, y: 32.62 },
                    Point { x: 30.89, y: 35.00 },
                ),
                PathEl::LineTo(Point { x: 34.24, y: 35.00 }),
                PathEl::CurveTo(
                    Point { x: 32.64, y: 30.91 },
                    Point { x: 28.66, y: 28.00 },
                    Point { x: 24.00, y: 28.00 },
                ),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct FileDownload {
    size: f64,
    color: Color,
}

impl FileDownload {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for FileDownload {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 38.00, y: 18.00 }),
                PathEl::LineTo(Point { x: 30.00, y: 18.00 }),
                PathEl::LineTo(Point { x: 30.00, y: 6.00 }),
                PathEl::LineTo(Point { x: 18.00, y: 6.00 }),
                PathEl::LineTo(Point { x: 18.00, y: 18.00 }),
                PathEl::LineTo(Point { x: 10.00, y: 18.00 }),
                PathEl::LineTo(Point { x: 24.00, y: 32.00 }),
                PathEl::LineTo(Point { x: 38.00, y: 18.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 10.00, y: 36.00 }),
                PathEl::LineTo(Point { x: 10.00, y: 40.00 }),
                PathEl::LineTo(Point { x: 38.00, y: 40.00 }),
                PathEl::LineTo(Point { x: 38.00, y: 36.00 }),
                PathEl::LineTo(Point { x: 10.00, y: 36.00 }),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct BatteryCharging60 {
    size: f64,
    color: Color,
}

impl BatteryCharging60 {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for BatteryCharging60 {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 31.33, y: 8.00 }),
                PathEl::LineTo(Point { x: 28.00, y: 8.00 }),
                PathEl::LineTo(Point { x: 28.00, y: 4.00 }),
                PathEl::LineTo(Point { x: 20.00, y: 4.00 }),
                PathEl::LineTo(Point { x: 20.00, y: 8.00 }),
                PathEl::LineTo(Point { x: 16.67, y: 8.00 }),
                PathEl::CurveTo(
                    Point { x: 15.19, y: 8.00 },
                    Point { x: 14.00, y: 9.19 },
                    Point { x: 14.00, y: 10.67 },
                ),
                PathEl::LineTo(Point { x: 14.00, y: 22.00 }),
                PathEl::LineTo(Point { x: 21.73, y: 22.00 }),
                PathEl::LineTo(Point { x: 26.00, y: 14.00 }),
                PathEl::LineTo(Point { x: 26.00, y: 22.00 }),
                PathEl::LineTo(Point { x: 34.00, y: 22.00 }),
                PathEl::LineTo(Point { x: 34.00, y: 10.67 }),
                PathEl::CurveTo(
                    Point { x: 34.00, y: 9.19 },
                    Point { x: 32.81, y: 8.00 },
                    Point { x: 31.33, y: 8.00 },
                ),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 26.00, y: 25.00 }),
                PathEl::LineTo(Point { x: 30.00, y: 25.00 }),
                PathEl::LineTo(Point { x: 22.00, y: 40.00 }),
                PathEl::LineTo(Point { x: 22.00, y: 29.00 }),
                PathEl::LineTo(Point { x: 18.00, y: 29.00 }),
                PathEl::LineTo(Point { x: 21.73, y: 22.00 }),
                PathEl::LineTo(Point { x: 14.00, y: 22.00 }),
                PathEl::LineTo(Point { x: 14.00, y: 41.33 }),
                PathEl::CurveTo(
                    Point { x: 14.00, y: 42.80 },
                    Point { x: 15.19, y: 44.00 },
                    Point { x: 16.67, y: 44.00 },
                ),
                PathEl::LineTo(Point { x: 31.34, y: 44.00 }),
                PathEl::CurveTo(
                    Point { x: 32.81, y: 44.00 },
                    Point { x: 34.01, y: 42.81 },
                    Point { x: 34.01, y: 41.33 },
                ),
                PathEl::LineTo(Point { x: 34.01, y: 22.00 }),
                PathEl::LineTo(Point { x: 26.01, y: 22.00 }),
                PathEl::LineTo(Point { x: 26.01, y: 25.00 }),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct Portrait {
    size: f64,
    color: Color,
}

impl Portrait {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for Portrait {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 24.00, y: 24.50 }),
                PathEl::CurveTo(
                    Point { x: 26.48, y: 24.50 },
                    Point { x: 28.50, y: 22.49 },
                    Point { x: 28.50, y: 20.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 28.50, y: 17.52 },
                    Point { x: 26.48, y: 15.50 },
                    Point { x: 24.00, y: 15.50 },
                ),
                PathEl::CurveTo(
                    Point { x: 21.52, y: 15.50 },
                    Point { x: 19.50, y: 17.52 },
                    Point { x: 19.50, y: 20.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 19.50, y: 22.49 },
                    Point { x: 21.52, y: 24.50 },
                    Point { x: 24.00, y: 24.50 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 33.00, y: 32.50 }),
                PathEl::CurveTo(
                    Point { x: 33.00, y: 29.50 },
                    Point { x: 27.00, y: 28.00 },
                    Point { x: 24.00, y: 28.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 21.00, y: 28.00 },
                    Point { x: 15.00, y: 29.50 },
                    Point { x: 15.00, y: 32.50 },
                ),
                PathEl::LineTo(Point { x: 15.00, y: 34.00 }),
                PathEl::LineTo(Point { x: 33.00, y: 34.00 }),
                PathEl::LineTo(Point { x: 33.00, y: 32.50 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 38.00, y: 6.00 }),
                PathEl::LineTo(Point { x: 10.00, y: 6.00 }),
                PathEl::CurveTo(
                    Point { x: 7.79, y: 6.00 },
                    Point { x: 6.00, y: 7.79 },
                    Point { x: 6.00, y: 10.00 },
                ),
                PathEl::LineTo(Point { x: 6.00, y: 38.00 }),
                PathEl::CurveTo(
                    Point { x: 6.00, y: 40.21 },
                    Point { x: 7.79, y: 42.00 },
                    Point { x: 10.00, y: 42.00 },
                ),
                PathEl::LineTo(Point { x: 38.00, y: 42.00 }),
                PathEl::CurveTo(
                    Point { x: 40.21, y: 42.00 },
                    Point { x: 42.00, y: 40.21 },
                    Point { x: 42.00, y: 38.00 },
                ),
                PathEl::LineTo(Point { x: 42.00, y: 10.00 }),
                PathEl::CurveTo(
                    Point { x: 42.00, y: 7.79 },
                    Point { x: 40.21, y: 6.00 },
                    Point { x: 38.00, y: 6.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 38.00, y: 38.00 }),
                PathEl::LineTo(Point { x: 10.00, y: 38.00 }),
                PathEl::LineTo(Point { x: 10.00, y: 10.00 }),
                PathEl::LineTo(Point { x: 38.00, y: 10.00 }),
                PathEl::LineTo(Point { x: 38.00, y: 38.00 }),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct PhonelinkOff {
    size: f64,
    color: Color,
}

impl PhonelinkOff {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for PhonelinkOff {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 44.00, y: 12.00 }),
                PathEl::LineTo(Point { x: 44.00, y: 8.00 }),
                PathEl::LineTo(Point { x: 13.64, y: 8.00 }),
                PathEl::LineTo(Point { x: 17.64, y: 12.00 }),
                PathEl::LineTo(Point { x: 44.00, y: 12.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 3.84, y: 3.29 }),
                PathEl::LineTo(Point { x: 1.29, y: 5.84 }),
                PathEl::LineTo(Point { x: 4.92, y: 9.47 }),
                PathEl::CurveTo(
                    Point { x: 4.36, y: 10.16 },
                    Point { x: 4.00, y: 11.04 },
                    Point { x: 4.00, y: 12.00 },
                ),
                PathEl::LineTo(Point { x: 4.00, y: 34.00 }),
                PathEl::LineTo(Point { x: 0.00, y: 34.00 }),
                PathEl::LineTo(Point { x: 0.00, y: 40.00 }),
                PathEl::LineTo(Point { x: 35.46, y: 40.00 }),
                PathEl::LineTo(Point { x: 40.17, y: 44.71 }),
                PathEl::LineTo(Point { x: 42.71, y: 42.16 }),
                PathEl::LineTo(Point { x: 7.79, y: 7.24 }),
                PathEl::LineTo(Point { x: 3.84, y: 3.29 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 8.00, y: 12.55 }),
                PathEl::LineTo(Point { x: 29.46, y: 34.00 }),
                PathEl::LineTo(Point { x: 8.00, y: 34.00 }),
                PathEl::LineTo(Point { x: 8.00, y: 12.55 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 46.00, y: 16.00 }),
                PathEl::LineTo(Point { x: 34.00, y: 16.00 }),
                PathEl::CurveTo(
                    Point { x: 32.90, y: 16.00 },
                    Point { x: 32.00, y: 16.90 },
                    Point { x: 32.00, y: 18.00 },
                ),
                PathEl::LineTo(Point { x: 32.00, y: 26.36 }),
                PathEl::LineTo(Point { x: 36.00, y: 30.36 }),
                PathEl::LineTo(Point { x: 36.00, y: 20.00 }),
                PathEl::LineTo(Point { x: 44.00, y: 20.00 }),
                PathEl::LineTo(Point { x: 44.00, y: 34.00 }),
                PathEl::LineTo(Point { x: 39.64, y: 34.00 }),
                PathEl::LineTo(Point { x: 45.64, y: 40.00 }),
                PathEl::LineTo(Point { x: 46.00, y: 40.00 }),
                PathEl::CurveTo(
                    Point { x: 47.10, y: 40.00 },
                    Point { x: 48.00, y: 39.10 },
                    Point { x: 48.00, y: 38.00 },
                ),
                PathEl::LineTo(Point { x: 48.00, y: 18.00 }),
                PathEl::CurveTo(
                    Point { x: 48.00, y: 16.90 },
                    Point { x: 47.10, y: 16.00 },
                    Point { x: 46.00, y: 16.00 },
                ),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct UnfoldMore {
    size: f64,
    color: Color,
}

impl UnfoldMore {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for UnfoldMore {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 24.00, y: 11.66 }),
                PathEl::LineTo(Point { x: 30.34, y: 18.00 }),
                PathEl::LineTo(Point { x: 33.17, y: 15.17 }),
                PathEl::LineTo(Point { x: 24.00, y: 6.00 }),
                PathEl::LineTo(Point { x: 14.83, y: 15.17 }),
                PathEl::LineTo(Point { x: 17.66, y: 18.00 }),
                PathEl::LineTo(Point { x: 24.00, y: 11.66 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 24.00, y: 36.34 }),
                PathEl::LineTo(Point { x: 17.66, y: 30.00 }),
                PathEl::LineTo(Point { x: 14.83, y: 32.83 }),
                PathEl::LineTo(Point { x: 24.00, y: 42.00 }),
                PathEl::LineTo(Point { x: 33.17, y: 32.83 }),
                PathEl::LineTo(Point { x: 30.34, y: 30.00 }),
                PathEl::LineTo(Point { x: 24.00, y: 36.34 }),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct VerifiedUser {
    size: f64,
    color: Color,
}

impl VerifiedUser {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for VerifiedUser {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 24.00, y: 2.00 }),
                PathEl::LineTo(Point { x: 6.00, y: 10.00 }),
                PathEl::LineTo(Point { x: 6.00, y: 22.00 }),
                PathEl::CurveTo(
                    Point { x: 6.00, y: 33.11 },
                    Point { x: 13.67, y: 43.47 },
                    Point { x: 24.00, y: 46.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 34.33, y: 43.47 },
                    Point { x: 42.00, y: 33.11 },
                    Point { x: 42.00, y: 22.00 },
                ),
                PathEl::LineTo(Point { x: 42.00, y: 10.00 }),
                PathEl::LineTo(Point { x: 24.00, y: 2.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 20.00, y: 34.00 }),
                PathEl::LineTo(Point { x: 12.00, y: 26.00 }),
                PathEl::LineTo(Point { x: 14.83, y: 23.17 }),
                PathEl::LineTo(Point { x: 20.00, y: 28.34 }),
                PathEl::LineTo(Point { x: 33.17, y: 15.17 }),
                PathEl::LineTo(Point { x: 36.00, y: 18.00 }),
                PathEl::LineTo(Point { x: 20.00, y: 34.00 }),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct AspectRatio {
    size: f64,
    color: Color,
}

impl AspectRatio {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for AspectRatio {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 38.00, y: 24.00 }),
                PathEl::LineTo(Point { x: 34.00, y: 24.00 }),
                PathEl::LineTo(Point { x: 34.00, y: 30.00 }),
                PathEl::LineTo(Point { x: 28.00, y: 30.00 }),
                PathEl::LineTo(Point { x: 28.00, y: 34.00 }),
                PathEl::LineTo(Point { x: 38.00, y: 34.00 }),
                PathEl::LineTo(Point { x: 38.00, y: 24.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 14.00, y: 18.00 }),
                PathEl::LineTo(Point { x: 20.00, y: 18.00 }),
                PathEl::LineTo(Point { x: 20.00, y: 14.00 }),
                PathEl::LineTo(Point { x: 10.00, y: 14.00 }),
                PathEl::LineTo(Point { x: 10.00, y: 24.00 }),
                PathEl::LineTo(Point { x: 14.00, y: 24.00 }),
                PathEl::LineTo(Point { x: 14.00, y: 18.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 42.00, y: 6.00 }),
                PathEl::LineTo(Point { x: 6.00, y: 6.00 }),
                PathEl::CurveTo(
                    Point { x: 3.79, y: 6.00 },
                    Point { x: 2.00, y: 7.79 },
                    Point { x: 2.00, y: 10.00 },
                ),
                PathEl::LineTo(Point { x: 2.00, y: 38.00 }),
                PathEl::CurveTo(
                    Point { x: 2.00, y: 40.21 },
                    Point { x: 3.79, y: 42.00 },
                    Point { x: 6.00, y: 42.00 },
                ),
                PathEl::LineTo(Point { x: 42.00, y: 42.00 }),
                PathEl::CurveTo(
                    Point { x: 44.21, y: 42.00 },
                    Point { x: 46.00, y: 40.21 },
                    Point { x: 46.00, y: 38.00 },
                ),
                PathEl::LineTo(Point { x: 46.00, y: 10.00 }),
                PathEl::CurveTo(
                    Point { x: 46.00, y: 7.79 },
                    Point { x: 44.21, y: 6.00 },
                    Point { x: 42.00, y: 6.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 42.00, y: 38.03 }),
                PathEl::LineTo(Point { x: 6.00, y: 38.03 }),
                PathEl::LineTo(Point { x: 6.00, y: 9.97 }),
                PathEl::LineTo(Point { x: 42.00, y: 9.97 }),
                PathEl::LineTo(Point { x: 42.00, y: 38.03 }),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct Usb {
    size: f64,
    color: Color,
}

impl Usb {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for Usb {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 30.00, y: 14.00 }),
                PathEl::LineTo(Point { x: 30.00, y: 22.00 }),
                PathEl::LineTo(Point { x: 32.00, y: 22.00 }),
                PathEl::LineTo(Point { x: 32.00, y: 26.00 }),
                PathEl::LineTo(Point { x: 26.00, y: 26.00 }),
                PathEl::LineTo(Point { x: 26.00, y: 10.00 }),
                PathEl::LineTo(Point { x: 30.00, y: 10.00 }),
                PathEl::LineTo(Point { x: 24.00, y: 2.00 }),
                PathEl::LineTo(Point { x: 18.00, y: 10.00 }),
                PathEl::LineTo(Point { x: 22.00, y: 10.00 }),
                PathEl::LineTo(Point { x: 22.00, y: 26.00 }),
                PathEl::LineTo(Point { x: 16.00, y: 26.00 }),
                PathEl::LineTo(Point { x: 16.00, y: 21.86 }),
                PathEl::CurveTo(
                    Point { x: 17.41, y: 21.13 },
                    Point { x: 18.40, y: 19.70 },
                    Point { x: 18.40, y: 18.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 18.40, y: 15.57 },
                    Point { x: 16.43, y: 13.60 },
                    Point { x: 14.00, y: 13.60 },
                ),
                PathEl::CurveTo(
                    Point { x: 11.57, y: 13.60 },
                    Point { x: 9.60, y: 15.57 },
                    Point { x: 9.60, y: 18.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 9.60, y: 19.70 },
                    Point { x: 10.59, y: 21.13 },
                    Point { x: 12.00, y: 21.86 },
                ),
                PathEl::LineTo(Point { x: 12.00, y: 26.00 }),
                PathEl::CurveTo(
                    Point { x: 12.00, y: 28.21 },
                    Point { x: 13.79, y: 30.00 },
                    Point { x: 16.00, y: 30.00 },
                ),
                PathEl::LineTo(Point { x: 22.00, y: 30.00 }),
                PathEl::LineTo(Point { x: 22.00, y: 36.10 }),
                PathEl::CurveTo(
                    Point { x: 20.58, y: 36.83 },
                    Point { x: 19.60, y: 38.29 },
                    Point { x: 19.60, y: 40.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 19.60, y: 42.43 },
                    Point { x: 21.57, y: 44.40 },
                    Point { x: 24.00, y: 44.40 },
                ),
                PathEl::CurveTo(
                    Point { x: 26.43, y: 44.40 },
                    Point { x: 28.40, y: 42.43 },
                    Point { x: 28.40, y: 40.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 28.40, y: 38.29 },
                    Point { x: 27.42, y: 36.83 },
                    Point { x: 26.00, y: 36.10 },
                ),
                PathEl::LineTo(Point { x: 26.00, y: 30.00 }),
                PathEl::LineTo(Point { x: 32.00, y: 30.00 }),
                PathEl::CurveTo(
                    Point { x: 34.21, y: 30.00 },
                    Point { x: 36.00, y: 28.21 },
                    Point { x: 36.00, y: 26.00 },
                ),
                PathEl::LineTo(Point { x: 36.00, y: 22.00 }),
                PathEl::LineTo(Point { x: 38.00, y: 22.00 }),
                PathEl::LineTo(Point { x: 38.00, y: 14.00 }),
                PathEl::LineTo(Point { x: 30.00, y: 14.00 }),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct StayPrimaryLandscape {
    size: f64,
    color: Color,
}

impl StayPrimaryLandscape {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for StayPrimaryLandscape {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 2.02, y: 14.00 }),
                PathEl::LineTo(Point { x: 2.00, y: 34.00 }),
                PathEl::CurveTo(
                    Point { x: 2.00, y: 36.21 },
                    Point { x: 3.79, y: 38.00 },
                    Point { x: 6.00, y: 38.00 },
                ),
                PathEl::LineTo(Point { x: 42.00, y: 38.00 }),
                PathEl::CurveTo(
                    Point { x: 44.21, y: 38.00 },
                    Point { x: 46.00, y: 36.21 },
                    Point { x: 46.00, y: 34.00 },
                ),
                PathEl::LineTo(Point { x: 46.00, y: 14.00 }),
                PathEl::CurveTo(
                    Point { x: 46.00, y: 11.79 },
                    Point { x: 44.21, y: 10.00 },
                    Point { x: 42.00, y: 10.00 },
                ),
                PathEl::LineTo(Point { x: 6.00, y: 10.00 }),
                PathEl::CurveTo(
                    Point { x: 3.79, y: 10.00 },
                    Point { x: 2.02, y: 11.79 },
                    Point { x: 2.02, y: 14.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 38.00, y: 14.00 }),
                PathEl::LineTo(Point { x: 38.00, y: 34.00 }),
                PathEl::LineTo(Point { x: 10.00, y: 34.00 }),
                PathEl::LineTo(Point { x: 10.00, y: 14.00 }),
                PathEl::LineTo(Point { x: 38.00, y: 14.00 }),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct Vignette {
    size: f64,
    color: Color,
}

impl Vignette {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for Vignette {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 24.0, height / 24.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 21.00, y: 3.00 }),
                PathEl::LineTo(Point { x: 3.00, y: 3.00 }),
                PathEl::CurveTo(
                    Point { x: 1.90, y: 3.00 },
                    Point { x: 1.00, y: 3.90 },
                    Point { x: 1.00, y: 5.00 },
                ),
                PathEl::LineTo(Point { x: 1.00, y: 19.00 }),
                PathEl::CurveTo(
                    Point { x: 1.00, y: 20.10 },
                    Point { x: 1.90, y: 21.00 },
                    Point { x: 3.00, y: 21.00 },
                ),
                PathEl::LineTo(Point { x: 21.00, y: 21.00 }),
                PathEl::CurveTo(
                    Point { x: 22.10, y: 21.00 },
                    Point { x: 23.00, y: 20.10 },
                    Point { x: 23.00, y: 19.00 },
                ),
                PathEl::LineTo(Point { x: 23.00, y: 5.00 }),
                PathEl::CurveTo(
                    Point { x: 23.00, y: 3.90 },
                    Point { x: 22.10, y: 3.00 },
                    Point { x: 21.00, y: 3.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 12.00, y: 18.00 }),
                PathEl::CurveTo(
                    Point { x: 7.58, y: 18.00 },
                    Point { x: 4.00, y: 15.31 },
                    Point { x: 4.00, y: 12.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 4.00, y: 8.69 },
                    Point { x: 7.58, y: 6.00 },
                    Point { x: 12.00, y: 6.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 16.42, y: 6.00 },
                    Point { x: 20.00, y: 8.69 },
                    Point { x: 20.00, y: 12.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 20.00, y: 15.31 },
                    Point { x: 16.42, y: 18.00 },
                    Point { x: 12.00, y: 18.00 },
                ),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct SwapVert {
    size: f64,
    color: Color,
}

impl SwapVert {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for SwapVert {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 32.00, y: 34.02 }),
                PathEl::LineTo(Point { x: 32.00, y: 20.00 }),
                PathEl::LineTo(Point { x: 28.00, y: 20.00 }),
                PathEl::LineTo(Point { x: 28.00, y: 34.02 }),
                PathEl::LineTo(Point { x: 22.00, y: 34.02 }),
                PathEl::LineTo(Point { x: 30.00, y: 42.00 }),
                PathEl::LineTo(Point { x: 38.00, y: 34.02 }),
                PathEl::LineTo(Point { x: 32.00, y: 34.02 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 18.00, y: 6.00 }),
                PathEl::LineTo(Point { x: 10.00, y: 13.98 }),
                PathEl::LineTo(Point { x: 16.00, y: 13.98 }),
                PathEl::LineTo(Point { x: 16.00, y: 28.00 }),
                PathEl::LineTo(Point { x: 20.00, y: 28.00 }),
                PathEl::LineTo(Point { x: 20.00, y: 13.98 }),
                PathEl::LineTo(Point { x: 26.00, y: 13.98 }),
                PathEl::LineTo(Point { x: 18.00, y: 6.00 }),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct CollectionsBookmark {
    size: f64,
    color: Color,
}

impl CollectionsBookmark {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for CollectionsBookmark {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 24.0, height / 24.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 4.00, y: 6.00 }),
                PathEl::LineTo(Point { x: 2.00, y: 6.00 }),
                PathEl::LineTo(Point { x: 2.00, y: 20.00 }),
                PathEl::CurveTo(
                    Point { x: 2.00, y: 21.10 },
                    Point { x: 2.90, y: 22.00 },
                    Point { x: 4.00, y: 22.00 },
                ),
                PathEl::LineTo(Point { x: 18.00, y: 22.00 }),
                PathEl::LineTo(Point { x: 18.00, y: 20.00 }),
                PathEl::LineTo(Point { x: 4.00, y: 20.00 }),
                PathEl::LineTo(Point { x: 4.00, y: 6.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 20.00, y: 2.00 }),
                PathEl::LineTo(Point { x: 8.00, y: 2.00 }),
                PathEl::CurveTo(
                    Point { x: 6.90, y: 2.00 },
                    Point { x: 6.00, y: 2.90 },
                    Point { x: 6.00, y: 4.00 },
                ),
                PathEl::LineTo(Point { x: 6.00, y: 16.00 }),
                PathEl::CurveTo(
                    Point { x: 6.00, y: 17.10 },
                    Point { x: 6.90, y: 18.00 },
                    Point { x: 8.00, y: 18.00 },
                ),
                PathEl::LineTo(Point { x: 20.00, y: 18.00 }),
                PathEl::CurveTo(
                    Point { x: 21.10, y: 18.00 },
                    Point { x: 22.00, y: 17.10 },
                    Point { x: 22.00, y: 16.00 },
                ),
                PathEl::LineTo(Point { x: 22.00, y: 4.00 }),
                PathEl::CurveTo(
                    Point { x: 22.00, y: 2.90 },
                    Point { x: 21.10, y: 2.00 },
                    Point { x: 20.00, y: 2.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 20.00, y: 12.00 }),
                PathEl::LineTo(Point { x: 17.50, y: 10.50 }),
                PathEl::LineTo(Point { x: 15.00, y: 12.00 }),
                PathEl::LineTo(Point { x: 15.00, y: 4.00 }),
                PathEl::LineTo(Point { x: 20.00, y: 4.00 }),
                PathEl::LineTo(Point { x: 20.00, y: 12.00 }),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct Filter9 {
    size: f64,
    color: Color,
}

impl Filter9 {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for Filter9 {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 6.00, y: 10.00 }),
                PathEl::LineTo(Point { x: 2.00, y: 10.00 }),
                PathEl::LineTo(Point { x: 2.00, y: 42.00 }),
                PathEl::CurveTo(
                    Point { x: 2.00, y: 44.21 },
                    Point { x: 3.79, y: 46.00 },
                    Point { x: 6.00, y: 46.00 },
                ),
                PathEl::LineTo(Point { x: 38.00, y: 46.00 }),
                PathEl::LineTo(Point { x: 38.00, y: 42.00 }),
                PathEl::LineTo(Point { x: 6.00, y: 42.00 }),
                PathEl::LineTo(Point { x: 6.00, y: 10.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 42.00, y: 2.00 }),
                PathEl::LineTo(Point { x: 14.00, y: 2.00 }),
                PathEl::CurveTo(
                    Point { x: 11.79, y: 2.00 },
                    Point { x: 10.00, y: 3.79 },
                    Point { x: 10.00, y: 6.00 },
                ),
                PathEl::LineTo(Point { x: 10.00, y: 34.00 }),
                PathEl::CurveTo(
                    Point { x: 10.00, y: 36.21 },
                    Point { x: 11.79, y: 38.00 },
                    Point { x: 14.00, y: 38.00 },
                ),
                PathEl::LineTo(Point { x: 42.00, y: 38.00 }),
                PathEl::CurveTo(
                    Point { x: 44.21, y: 38.00 },
                    Point { x: 46.00, y: 36.21 },
                    Point { x: 46.00, y: 34.00 },
                ),
                PathEl::LineTo(Point { x: 46.00, y: 6.00 }),
                PathEl::CurveTo(
                    Point { x: 46.00, y: 3.79 },
                    Point { x: 44.21, y: 2.00 },
                    Point { x: 42.00, y: 2.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 42.00, y: 34.00 }),
                PathEl::LineTo(Point { x: 14.00, y: 34.00 }),
                PathEl::LineTo(Point { x: 14.00, y: 6.00 }),
                PathEl::LineTo(Point { x: 42.00, y: 6.00 }),
                PathEl::LineTo(Point { x: 42.00, y: 34.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 30.00, y: 10.00 }),
                PathEl::LineTo(Point { x: 26.00, y: 10.00 }),
                PathEl::CurveTo(
                    Point { x: 23.79, y: 10.00 },
                    Point { x: 22.00, y: 11.79 },
                    Point { x: 22.00, y: 14.00 },
                ),
                PathEl::LineTo(Point { x: 22.00, y: 18.00 }),
                PathEl::CurveTo(
                    Point { x: 22.00, y: 20.21 },
                    Point { x: 23.79, y: 22.00 },
                    Point { x: 26.00, y: 22.00 },
                ),
                PathEl::LineTo(Point { x: 30.00, y: 22.00 }),
                PathEl::LineTo(Point { x: 30.00, y: 26.00 }),
                PathEl::LineTo(Point { x: 22.00, y: 26.00 }),
                PathEl::LineTo(Point { x: 22.00, y: 30.00 }),
                PathEl::LineTo(Point { x: 30.00, y: 30.00 }),
                PathEl::CurveTo(
                    Point { x: 32.21, y: 30.00 },
                    Point { x: 34.00, y: 28.21 },
                    Point { x: 34.00, y: 26.00 },
                ),
                PathEl::LineTo(Point { x: 34.00, y: 14.00 }),
                PathEl::CurveTo(
                    Point { x: 34.00, y: 11.79 },
                    Point { x: 32.21, y: 10.00 },
                    Point { x: 30.00, y: 10.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 30.00, y: 18.00 }),
                PathEl::LineTo(Point { x: 26.00, y: 18.00 }),
                PathEl::LineTo(Point { x: 26.00, y: 14.00 }),
                PathEl::LineTo(Point { x: 30.00, y: 14.00 }),
                PathEl::LineTo(Point { x: 30.00, y: 18.00 }),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct PlusOne {
    size: f64,
    color: Color,
}

impl PlusOne {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for PlusOne {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 20.00, y: 16.00 }),
                PathEl::LineTo(Point { x: 16.00, y: 16.00 }),
                PathEl::LineTo(Point { x: 16.00, y: 24.00 }),
                PathEl::LineTo(Point { x: 8.00, y: 24.00 }),
                PathEl::LineTo(Point { x: 8.00, y: 28.00 }),
                PathEl::LineTo(Point { x: 16.00, y: 28.00 }),
                PathEl::LineTo(Point { x: 16.00, y: 36.00 }),
                PathEl::LineTo(Point { x: 20.00, y: 36.00 }),
                PathEl::LineTo(Point { x: 20.00, y: 28.00 }),
                PathEl::LineTo(Point { x: 28.00, y: 28.00 }),
                PathEl::LineTo(Point { x: 28.00, y: 24.00 }),
                PathEl::LineTo(Point { x: 20.00, y: 24.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 29.00, y: 12.16 }),
                PathEl::LineTo(Point { x: 29.00, y: 15.80 }),
                PathEl::LineTo(Point { x: 34.00, y: 14.80 }),
                PathEl::LineTo(Point { x: 34.00, y: 36.00 }),
                PathEl::LineTo(Point { x: 38.00, y: 36.00 }),
                PathEl::LineTo(Point { x: 38.00, y: 10.00 }),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct Https {
    size: f64,
    color: Color,
}

impl Https {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for Https {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 36.00, y: 16.00 }),
                PathEl::LineTo(Point { x: 34.00, y: 16.00 }),
                PathEl::LineTo(Point { x: 34.00, y: 12.00 }),
                PathEl::CurveTo(
                    Point { x: 34.00, y: 6.48 },
                    Point { x: 29.52, y: 2.00 },
                    Point { x: 24.00, y: 2.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 18.48, y: 2.00 },
                    Point { x: 14.00, y: 6.48 },
                    Point { x: 14.00, y: 12.00 },
                ),
                PathEl::LineTo(Point { x: 14.00, y: 16.00 }),
                PathEl::LineTo(Point { x: 12.00, y: 16.00 }),
                PathEl::CurveTo(
                    Point { x: 9.79, y: 16.00 },
                    Point { x: 8.00, y: 17.79 },
                    Point { x: 8.00, y: 20.00 },
                ),
                PathEl::LineTo(Point { x: 8.00, y: 40.00 }),
                PathEl::CurveTo(
                    Point { x: 8.00, y: 42.21 },
                    Point { x: 9.79, y: 44.00 },
                    Point { x: 12.00, y: 44.00 },
                ),
                PathEl::LineTo(Point { x: 36.00, y: 44.00 }),
                PathEl::CurveTo(
                    Point { x: 38.21, y: 44.00 },
                    Point { x: 40.00, y: 42.21 },
                    Point { x: 40.00, y: 40.00 },
                ),
                PathEl::LineTo(Point { x: 40.00, y: 20.00 }),
                PathEl::CurveTo(
                    Point { x: 40.00, y: 17.79 },
                    Point { x: 38.21, y: 16.00 },
                    Point { x: 36.00, y: 16.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 24.00, y: 34.00 }),
                PathEl::CurveTo(
                    Point { x: 21.79, y: 34.00 },
                    Point { x: 20.00, y: 32.21 },
                    Point { x: 20.00, y: 30.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 20.00, y: 27.79 },
                    Point { x: 21.79, y: 26.00 },
                    Point { x: 24.00, y: 26.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 26.21, y: 26.00 },
                    Point { x: 28.00, y: 27.79 },
                    Point { x: 28.00, y: 30.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 28.00, y: 32.21 },
                    Point { x: 26.21, y: 34.00 },
                    Point { x: 24.00, y: 34.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 30.20, y: 16.00 }),
                PathEl::LineTo(Point { x: 17.80, y: 16.00 }),
                PathEl::LineTo(Point { x: 17.80, y: 12.00 }),
                PathEl::CurveTo(
                    Point { x: 17.80, y: 8.58 },
                    Point { x: 20.58, y: 5.80 },
                    Point { x: 24.00, y: 5.80 },
                ),
                PathEl::CurveTo(
                    Point { x: 27.42, y: 5.80 },
                    Point { x: 30.20, y: 8.58 },
                    Point { x: 30.20, y: 12.00 },
                ),
                PathEl::LineTo(Point { x: 30.20, y: 16.00 }),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct ContentCopy {
    size: f64,
    color: Color,
}

impl ContentCopy {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for ContentCopy {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 32.00, y: 2.00 }),
                PathEl::LineTo(Point { x: 8.00, y: 2.00 }),
                PathEl::CurveTo(
                    Point { x: 5.79, y: 2.00 },
                    Point { x: 4.00, y: 3.79 },
                    Point { x: 4.00, y: 6.00 },
                ),
                PathEl::LineTo(Point { x: 4.00, y: 34.00 }),
                PathEl::LineTo(Point { x: 8.00, y: 34.00 }),
                PathEl::LineTo(Point { x: 8.00, y: 6.00 }),
                PathEl::LineTo(Point { x: 32.00, y: 6.00 }),
                PathEl::LineTo(Point { x: 32.00, y: 2.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 38.00, y: 10.00 }),
                PathEl::LineTo(Point { x: 16.00, y: 10.00 }),
                PathEl::CurveTo(
                    Point { x: 13.79, y: 10.00 },
                    Point { x: 12.00, y: 11.79 },
                    Point { x: 12.00, y: 14.00 },
                ),
                PathEl::LineTo(Point { x: 12.00, y: 42.00 }),
                PathEl::CurveTo(
                    Point { x: 12.00, y: 44.21 },
                    Point { x: 13.79, y: 46.00 },
                    Point { x: 16.00, y: 46.00 },
                ),
                PathEl::LineTo(Point { x: 38.00, y: 46.00 }),
                PathEl::CurveTo(
                    Point { x: 40.21, y: 46.00 },
                    Point { x: 42.00, y: 44.21 },
                    Point { x: 42.00, y: 42.00 },
                ),
                PathEl::LineTo(Point { x: 42.00, y: 14.00 }),
                PathEl::CurveTo(
                    Point { x: 42.00, y: 11.79 },
                    Point { x: 40.21, y: 10.00 },
                    Point { x: 38.00, y: 10.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 38.00, y: 42.00 }),
                PathEl::LineTo(Point { x: 16.00, y: 42.00 }),
                PathEl::LineTo(Point { x: 16.00, y: 14.00 }),
                PathEl::LineTo(Point { x: 38.00, y: 14.00 }),
                PathEl::LineTo(Point { x: 38.00, y: 42.00 }),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct ShopTwo {
    size: f64,
    color: Color,
}

impl ShopTwo {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for ShopTwo {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 36.00, y: 10.00 }),
                PathEl::LineTo(Point { x: 36.00, y: 6.00 }),
                PathEl::CurveTo(
                    Point { x: 36.00, y: 3.79 },
                    Point { x: 34.21, y: 2.00 },
                    Point { x: 32.00, y: 2.00 },
                ),
                PathEl::LineTo(Point { x: 24.00, y: 2.00 }),
                PathEl::CurveTo(
                    Point { x: 21.79, y: 2.00 },
                    Point { x: 20.00, y: 3.79 },
                    Point { x: 20.00, y: 6.00 },
                ),
                PathEl::LineTo(Point { x: 20.00, y: 10.00 }),
                PathEl::LineTo(Point { x: 10.00, y: 10.00 }),
                PathEl::LineTo(Point { x: 10.00, y: 32.00 }),
                PathEl::CurveTo(
                    Point { x: 10.00, y: 34.21 },
                    Point { x: 11.79, y: 36.00 },
                    Point { x: 14.00, y: 36.00 },
                ),
                PathEl::LineTo(Point { x: 42.00, y: 36.00 }),
                PathEl::CurveTo(
                    Point { x: 44.21, y: 36.00 },
                    Point { x: 46.00, y: 34.21 },
                    Point { x: 46.00, y: 32.00 },
                ),
                PathEl::LineTo(Point { x: 46.00, y: 10.00 }),
                PathEl::LineTo(Point { x: 36.00, y: 10.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 24.00, y: 6.00 }),
                PathEl::LineTo(Point { x: 32.00, y: 6.00 }),
                PathEl::LineTo(Point { x: 32.00, y: 10.00 }),
                PathEl::LineTo(Point { x: 24.00, y: 10.00 }),
                PathEl::LineTo(Point { x: 24.00, y: 6.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 24.00, y: 30.00 }),
                PathEl::LineTo(Point { x: 24.00, y: 16.00 }),
                PathEl::LineTo(Point { x: 35.00, y: 22.00 }),
                PathEl::LineTo(Point { x: 24.00, y: 30.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 6.00, y: 18.00 }),
                PathEl::LineTo(Point { x: 2.00, y: 18.00 }),
                PathEl::LineTo(Point { x: 2.00, y: 40.00 }),
                PathEl::CurveTo(
                    Point { x: 2.00, y: 42.21 },
                    Point { x: 3.79, y: 44.00 },
                    Point { x: 6.00, y: 44.00 },
                ),
                PathEl::LineTo(Point { x: 34.00, y: 44.00 }),
                PathEl::CurveTo(
                    Point { x: 36.21, y: 44.00 },
                    Point { x: 38.00, y: 42.21 },
                    Point { x: 38.00, y: 40.00 },
                ),
                PathEl::LineTo(Point { x: 6.00, y: 40.00 }),
                PathEl::LineTo(Point { x: 6.00, y: 18.00 }),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct Sms {
    size: f64,
    color: Color,
}

impl Sms {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for Sms {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 40.00, y: 4.00 }),
                PathEl::LineTo(Point { x: 8.00, y: 4.00 }),
                PathEl::CurveTo(
                    Point { x: 5.79, y: 4.00 },
                    Point { x: 4.02, y: 5.79 },
                    Point { x: 4.02, y: 8.00 },
                ),
                PathEl::LineTo(Point { x: 4.00, y: 44.00 }),
                PathEl::LineTo(Point { x: 12.00, y: 36.00 }),
                PathEl::LineTo(Point { x: 40.00, y: 36.00 }),
                PathEl::CurveTo(
                    Point { x: 42.21, y: 36.00 },
                    Point { x: 44.00, y: 34.21 },
                    Point { x: 44.00, y: 32.00 },
                ),
                PathEl::LineTo(Point { x: 44.00, y: 8.00 }),
                PathEl::CurveTo(
                    Point { x: 44.00, y: 5.79 },
                    Point { x: 42.21, y: 4.00 },
                    Point { x: 40.00, y: 4.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 18.00, y: 22.00 }),
                PathEl::LineTo(Point { x: 14.00, y: 22.00 }),
                PathEl::LineTo(Point { x: 14.00, y: 18.00 }),
                PathEl::LineTo(Point { x: 18.00, y: 18.00 }),
                PathEl::LineTo(Point { x: 18.00, y: 22.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 26.00, y: 22.00 }),
                PathEl::LineTo(Point { x: 22.00, y: 22.00 }),
                PathEl::LineTo(Point { x: 22.00, y: 18.00 }),
                PathEl::LineTo(Point { x: 26.00, y: 18.00 }),
                PathEl::LineTo(Point { x: 26.00, y: 22.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 34.00, y: 22.00 }),
                PathEl::LineTo(Point { x: 30.00, y: 22.00 }),
                PathEl::LineTo(Point { x: 30.00, y: 18.00 }),
                PathEl::LineTo(Point { x: 34.00, y: 18.00 }),
                PathEl::LineTo(Point { x: 34.00, y: 22.00 }),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct SystemUpdate {
    size: f64,
    color: Color,
}

impl SystemUpdate {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for SystemUpdate {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 34.00, y: 2.02 }),
                PathEl::LineTo(Point { x: 14.00, y: 2.00 }),
                PathEl::CurveTo(
                    Point { x: 11.79, y: 2.00 },
                    Point { x: 10.00, y: 3.79 },
                    Point { x: 10.00, y: 6.00 },
                ),
                PathEl::LineTo(Point { x: 10.00, y: 42.00 }),
                PathEl::CurveTo(
                    Point { x: 10.00, y: 44.21 },
                    Point { x: 11.79, y: 46.00 },
                    Point { x: 14.00, y: 46.00 },
                ),
                PathEl::LineTo(Point { x: 34.00, y: 46.00 }),
                PathEl::CurveTo(
                    Point { x: 36.21, y: 46.00 },
                    Point { x: 38.00, y: 44.21 },
                    Point { x: 38.00, y: 42.00 },
                ),
                PathEl::LineTo(Point { x: 38.00, y: 6.00 }),
                PathEl::CurveTo(
                    Point { x: 38.00, y: 3.79 },
                    Point { x: 36.21, y: 2.02 },
                    Point { x: 34.00, y: 2.02 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 34.00, y: 38.00 }),
                PathEl::LineTo(Point { x: 14.00, y: 38.00 }),
                PathEl::LineTo(Point { x: 14.00, y: 10.00 }),
                PathEl::LineTo(Point { x: 34.00, y: 10.00 }),
                PathEl::LineTo(Point { x: 34.00, y: 38.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 32.00, y: 26.00 }),
                PathEl::LineTo(Point { x: 26.00, y: 26.00 }),
                PathEl::LineTo(Point { x: 26.00, y: 16.00 }),
                PathEl::LineTo(Point { x: 22.00, y: 16.00 }),
                PathEl::LineTo(Point { x: 22.00, y: 26.00 }),
                PathEl::LineTo(Point { x: 16.00, y: 26.00 }),
                PathEl::LineTo(Point { x: 24.00, y: 34.00 }),
                PathEl::LineTo(Point { x: 32.00, y: 26.00 }),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct Share {
    size: f64,
    color: Color,
}

impl Share {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for Share {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 36.00, y: 32.17 }),
                PathEl::CurveTo(
                    Point { x: 34.48, y: 32.17 },
                    Point { x: 33.11, y: 32.76 },
                    Point { x: 32.07, y: 33.71 },
                ),
                PathEl::LineTo(Point { x: 17.82, y: 25.40 }),
                PathEl::CurveTo(
                    Point { x: 17.93, y: 24.95 },
                    Point { x: 18.00, y: 24.48 },
                    Point { x: 18.00, y: 24.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 18.00, y: 23.52 },
                    Point { x: 17.93, y: 23.05 },
                    Point { x: 17.82, y: 22.60 },
                ),
                PathEl::LineTo(Point { x: 31.92, y: 14.37 }),
                PathEl::CurveTo(
                    Point { x: 32.99, y: 15.37 },
                    Point { x: 34.42, y: 15.99 },
                    Point { x: 36.00, y: 15.99 },
                ),
                PathEl::CurveTo(
                    Point { x: 39.31, y: 15.99 },
                    Point { x: 42.00, y: 13.30 },
                    Point { x: 42.00, y: 9.99 },
                ),
                PathEl::CurveTo(
                    Point { x: 42.00, y: 6.68 },
                    Point { x: 39.31, y: 3.99 },
                    Point { x: 36.00, y: 3.99 },
                ),
                PathEl::CurveTo(
                    Point { x: 32.69, y: 3.99 },
                    Point { x: 30.00, y: 6.68 },
                    Point { x: 30.00, y: 9.99 },
                ),
                PathEl::CurveTo(
                    Point { x: 30.00, y: 10.47 },
                    Point { x: 30.07, y: 10.94 },
                    Point { x: 30.18, y: 11.39 },
                ),
                PathEl::LineTo(Point { x: 16.08, y: 19.62 }),
                PathEl::CurveTo(
                    Point { x: 15.01, y: 18.62 },
                    Point { x: 13.58, y: 18.00 },
                    Point { x: 12.00, y: 18.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 8.69, y: 18.00 },
                    Point { x: 6.00, y: 20.69 },
                    Point { x: 6.00, y: 24.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 6.00, y: 27.31 },
                    Point { x: 8.69, y: 30.00 },
                    Point { x: 12.00, y: 30.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 13.58, y: 30.00 },
                    Point { x: 15.01, y: 29.38 },
                    Point { x: 16.08, y: 28.38 },
                ),
                PathEl::LineTo(Point { x: 30.33, y: 36.69 }),
                PathEl::CurveTo(
                    Point { x: 30.23, y: 37.11 },
                    Point { x: 30.17, y: 37.55 },
                    Point { x: 30.17, y: 38.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 30.17, y: 41.22 },
                    Point { x: 32.78, y: 43.83 },
                    Point { x: 36.00, y: 43.83 },
                ),
                PathEl::CurveTo(
                    Point { x: 39.22, y: 43.83 },
                    Point { x: 41.83, y: 41.22 },
                    Point { x: 41.83, y: 38.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 41.83, y: 34.78 },
                    Point { x: 39.22, y: 32.17 },
                    Point { x: 36.00, y: 32.17 },
                ),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct FlipToBack {
    size: f64,
    color: Color,
}

impl FlipToBack {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for FlipToBack {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 18.00, y: 14.00 }),
                PathEl::LineTo(Point { x: 14.00, y: 14.00 }),
                PathEl::LineTo(Point { x: 14.00, y: 18.00 }),
                PathEl::LineTo(Point { x: 18.00, y: 18.00 }),
                PathEl::LineTo(Point { x: 18.00, y: 14.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 18.00, y: 22.00 }),
                PathEl::LineTo(Point { x: 14.00, y: 22.00 }),
                PathEl::LineTo(Point { x: 14.00, y: 26.00 }),
                PathEl::LineTo(Point { x: 18.00, y: 26.00 }),
                PathEl::LineTo(Point { x: 18.00, y: 22.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 18.00, y: 6.00 }),
                PathEl::CurveTo(
                    Point { x: 15.79, y: 6.00 },
                    Point { x: 14.00, y: 7.79 },
                    Point { x: 14.00, y: 10.00 },
                ),
                PathEl::LineTo(Point { x: 18.00, y: 10.00 }),
                PathEl::LineTo(Point { x: 18.00, y: 6.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 26.00, y: 30.00 }),
                PathEl::LineTo(Point { x: 22.00, y: 30.00 }),
                PathEl::LineTo(Point { x: 22.00, y: 34.00 }),
                PathEl::LineTo(Point { x: 26.00, y: 34.00 }),
                PathEl::LineTo(Point { x: 26.00, y: 30.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 38.00, y: 6.00 }),
                PathEl::LineTo(Point { x: 38.00, y: 10.00 }),
                PathEl::LineTo(Point { x: 42.00, y: 10.00 }),
                PathEl::CurveTo(
                    Point { x: 42.00, y: 7.79 },
                    Point { x: 40.21, y: 6.00 },
                    Point { x: 38.00, y: 6.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 26.00, y: 6.00 }),
                PathEl::LineTo(Point { x: 22.00, y: 6.00 }),
                PathEl::LineTo(Point { x: 22.00, y: 10.00 }),
                PathEl::LineTo(Point { x: 26.00, y: 10.00 }),
                PathEl::LineTo(Point { x: 26.00, y: 6.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 18.00, y: 34.00 }),
                PathEl::LineTo(Point { x: 18.00, y: 30.00 }),
                PathEl::LineTo(Point { x: 14.00, y: 30.00 }),
                PathEl::CurveTo(
                    Point { x: 14.00, y: 32.21 },
                    Point { x: 15.79, y: 34.00 },
                    Point { x: 18.00, y: 34.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 38.00, y: 26.00 }),
                PathEl::LineTo(Point { x: 42.00, y: 26.00 }),
                PathEl::LineTo(Point { x: 42.00, y: 22.00 }),
                PathEl::LineTo(Point { x: 38.00, y: 22.00 }),
                PathEl::LineTo(Point { x: 38.00, y: 26.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 38.00, y: 18.00 }),
                PathEl::LineTo(Point { x: 42.00, y: 18.00 }),
                PathEl::LineTo(Point { x: 42.00, y: 14.00 }),
                PathEl::LineTo(Point { x: 38.00, y: 14.00 }),
                PathEl::LineTo(Point { x: 38.00, y: 18.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 38.00, y: 34.00 }),
                PathEl::CurveTo(
                    Point { x: 40.21, y: 34.00 },
                    Point { x: 42.00, y: 32.21 },
                    Point { x: 42.00, y: 30.00 },
                ),
                PathEl::LineTo(Point { x: 38.00, y: 30.00 }),
                PathEl::LineTo(Point { x: 38.00, y: 34.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 10.00, y: 14.00 }),
                PathEl::LineTo(Point { x: 6.00, y: 14.00 }),
                PathEl::LineTo(Point { x: 6.00, y: 38.00 }),
                PathEl::CurveTo(
                    Point { x: 6.00, y: 40.21 },
                    Point { x: 7.79, y: 42.00 },
                    Point { x: 10.00, y: 42.00 },
                ),
                PathEl::LineTo(Point { x: 34.00, y: 42.00 }),
                PathEl::LineTo(Point { x: 34.00, y: 38.00 }),
                PathEl::LineTo(Point { x: 10.00, y: 38.00 }),
                PathEl::LineTo(Point { x: 10.00, y: 14.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 30.00, y: 10.00 }),
                PathEl::LineTo(Point { x: 34.00, y: 10.00 }),
                PathEl::LineTo(Point { x: 34.00, y: 6.00 }),
                PathEl::LineTo(Point { x: 30.00, y: 6.00 }),
                PathEl::LineTo(Point { x: 30.00, y: 10.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 30.00, y: 34.00 }),
                PathEl::LineTo(Point { x: 34.00, y: 34.00 }),
                PathEl::LineTo(Point { x: 34.00, y: 30.00 }),
                PathEl::LineTo(Point { x: 30.00, y: 30.00 }),
                PathEl::LineTo(Point { x: 30.00, y: 34.00 }),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct FilterDrama {
    size: f64,
    color: Color,
}

impl FilterDrama {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for FilterDrama {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 38.71, y: 20.07 }),
                PathEl::CurveTo(
                    Point { x: 37.35, y: 13.19 },
                    Point { x: 31.28, y: 8.00 },
                    Point { x: 24.00, y: 8.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 18.22, y: 8.00 },
                    Point { x: 13.22, y: 11.28 },
                    Point { x: 10.71, y: 16.07 },
                ),
                PathEl::CurveTo(
                    Point { x: 4.69, y: 16.71 },
                    Point { x: 0.00, y: 21.81 },
                    Point { x: 0.00, y: 28.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 0.00, y: 34.63 },
                    Point { x: 5.37, y: 40.00 },
                    Point { x: 12.00, y: 40.00 },
                ),
                PathEl::LineTo(Point { x: 38.00, y: 40.00 }),
                PathEl::CurveTo(
                    Point { x: 43.52, y: 40.00 },
                    Point { x: 48.00, y: 35.52 },
                    Point { x: 48.00, y: 30.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 48.00, y: 24.72 },
                    Point { x: 43.90, y: 20.44 },
                    Point { x: 38.71, y: 20.07 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 38.00, y: 36.00 }),
                PathEl::LineTo(Point { x: 12.00, y: 36.00 }),
                PathEl::CurveTo(
                    Point { x: 7.59, y: 36.00 },
                    Point { x: 4.00, y: 32.41 },
                    Point { x: 4.00, y: 28.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 4.00, y: 23.59 },
                    Point { x: 7.59, y: 20.00 },
                    Point { x: 12.00, y: 20.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 16.41, y: 20.00 },
                    Point { x: 20.00, y: 23.59 },
                    Point { x: 20.00, y: 28.00 },
                ),
                PathEl::LineTo(Point { x: 24.00, y: 28.00 }),
                PathEl::CurveTo(
                    Point { x: 24.00, y: 22.48 },
                    Point { x: 20.27, y: 17.85 },
                    Point { x: 15.20, y: 16.45 },
                ),
                PathEl::CurveTo(
                    Point { x: 17.21, y: 13.76 },
                    Point { x: 20.40, y: 12.00 },
                    Point { x: 24.00, y: 12.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 30.07, y: 12.00 },
                    Point { x: 35.00, y: 16.93 },
                    Point { x: 35.00, y: 23.00 },
                ),
                PathEl::LineTo(Point { x: 35.00, y: 24.00 }),
                PathEl::LineTo(Point { x: 38.00, y: 24.00 }),
                PathEl::CurveTo(
                    Point { x: 41.31, y: 24.00 },
                    Point { x: 44.00, y: 26.69 },
                    Point { x: 44.00, y: 30.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 44.00, y: 33.31 },
                    Point { x: 41.31, y: 36.00 },
                    Point { x: 38.00, y: 36.00 },
                ),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct ShoppingBasket {
    size: f64,
    color: Color,
}

impl ShoppingBasket {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for ShoppingBasket {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 34.42, y: 18.00 }),
                PathEl::LineTo(Point { x: 25.66, y: 4.89 }),
                PathEl::CurveTo(
                    Point { x: 25.28, y: 4.31 },
                    Point { x: 24.64, y: 4.04 },
                    Point { x: 24.00, y: 4.04 },
                ),
                PathEl::CurveTo(
                    Point { x: 23.36, y: 4.04 },
                    Point { x: 22.72, y: 4.32 },
                    Point { x: 22.34, y: 4.89 },
                ),
                PathEl::LineTo(Point { x: 13.58, y: 18.00 }),
                PathEl::LineTo(Point { x: 4.00, y: 18.00 }),
                PathEl::CurveTo(
                    Point { x: 2.90, y: 18.00 },
                    Point { x: 2.00, y: 18.90 },
                    Point { x: 2.00, y: 20.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 2.00, y: 20.19 },
                    Point { x: 2.03, y: 20.37 },
                    Point { x: 2.07, y: 20.54 },
                ),
                PathEl::LineTo(Point { x: 7.14, y: 39.08 }),
                PathEl::CurveTo(
                    Point { x: 7.61, y: 40.76 },
                    Point { x: 9.16, y: 42.00 },
                    Point { x: 11.00, y: 42.00 },
                ),
                PathEl::LineTo(Point { x: 37.00, y: 42.00 }),
                PathEl::CurveTo(
                    Point { x: 38.84, y: 42.00 },
                    Point { x: 40.39, y: 40.76 },
                    Point { x: 40.85, y: 39.07 },
                ),
                PathEl::LineTo(Point { x: 45.92, y: 20.53 }),
                PathEl::CurveTo(
                    Point { x: 45.97, y: 20.37 },
                    Point { x: 46.00, y: 20.19 },
                    Point { x: 46.00, y: 20.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 46.00, y: 18.90 },
                    Point { x: 45.10, y: 18.00 },
                    Point { x: 44.00, y: 18.00 },
                ),
                PathEl::LineTo(Point { x: 34.42, y: 18.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 18.00, y: 18.00 }),
                PathEl::LineTo(Point { x: 24.00, y: 9.20 }),
                PathEl::LineTo(Point { x: 30.00, y: 18.00 }),
                PathEl::LineTo(Point { x: 18.00, y: 18.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 24.00, y: 34.00 }),
                PathEl::CurveTo(
                    Point { x: 21.79, y: 34.00 },
                    Point { x: 20.00, y: 32.21 },
                    Point { x: 20.00, y: 30.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 20.00, y: 27.79 },
                    Point { x: 21.79, y: 26.00 },
                    Point { x: 24.00, y: 26.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 26.21, y: 26.00 },
                    Point { x: 28.00, y: 27.79 },
                    Point { x: 28.00, y: 30.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 28.00, y: 32.21 },
                    Point { x: 26.21, y: 34.00 },
                    Point { x: 24.00, y: 34.00 },
                ),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct DoNotDisturbAlt {
    size: f64,
    color: Color,
}

impl DoNotDisturbAlt {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for DoNotDisturbAlt {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 24.00, y: 4.00 }),
                PathEl::CurveTo(
                    Point { x: 13.00, y: 4.00 },
                    Point { x: 4.00, y: 13.00 },
                    Point { x: 4.00, y: 24.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 4.00, y: 35.00 },
                    Point { x: 13.00, y: 44.00 },
                    Point { x: 24.00, y: 44.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 35.00, y: 44.00 },
                    Point { x: 44.00, y: 35.00 },
                    Point { x: 44.00, y: 24.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 44.00, y: 13.00 },
                    Point { x: 35.00, y: 4.00 },
                    Point { x: 24.00, y: 4.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 8.00, y: 24.00 }),
                PathEl::CurveTo(
                    Point { x: 8.00, y: 15.20 },
                    Point { x: 15.20, y: 8.00 },
                    Point { x: 24.00, y: 8.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 27.70, y: 8.00 },
                    Point { x: 31.10, y: 9.30 },
                    Point { x: 33.80, y: 11.40 },
                ),
                PathEl::LineTo(Point { x: 11.40, y: 33.80 }),
                PathEl::CurveTo(
                    Point { x: 9.30, y: 31.10 },
                    Point { x: 8.00, y: 27.70 },
                    Point { x: 8.00, y: 24.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 24.00, y: 40.00 }),
                PathEl::CurveTo(
                    Point { x: 20.30, y: 40.00 },
                    Point { x: 16.90, y: 38.70 },
                    Point { x: 14.20, y: 36.60 },
                ),
                PathEl::LineTo(Point { x: 36.60, y: 14.20 }),
                PathEl::CurveTo(
                    Point { x: 38.70, y: 16.90 },
                    Point { x: 40.00, y: 20.30 },
                    Point { x: 40.00, y: 24.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 40.00, y: 32.80 },
                    Point { x: 32.80, y: 40.00 },
                    Point { x: 24.00, y: 40.00 },
                ),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct Wc {
    size: f64,
    color: Color,
}

impl Wc {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for Wc {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 11.00, y: 44.00 }),
                PathEl::LineTo(Point { x: 11.00, y: 29.00 }),
                PathEl::LineTo(Point { x: 8.00, y: 29.00 }),
                PathEl::LineTo(Point { x: 8.00, y: 18.00 }),
                PathEl::CurveTo(
                    Point { x: 8.00, y: 15.80 },
                    Point { x: 9.80, y: 14.00 },
                    Point { x: 12.00, y: 14.00 },
                ),
                PathEl::LineTo(Point { x: 18.00, y: 14.00 }),
                PathEl::CurveTo(
                    Point { x: 20.20, y: 14.00 },
                    Point { x: 22.00, y: 15.80 },
                    Point { x: 22.00, y: 18.00 },
                ),
                PathEl::LineTo(Point { x: 22.00, y: 29.00 }),
                PathEl::LineTo(Point { x: 19.00, y: 29.00 }),
                PathEl::LineTo(Point { x: 19.00, y: 44.00 }),
                PathEl::LineTo(Point { x: 11.00, y: 44.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 36.00, y: 44.00 }),
                PathEl::LineTo(Point { x: 36.00, y: 32.00 }),
                PathEl::LineTo(Point { x: 42.00, y: 32.00 }),
                PathEl::LineTo(Point { x: 36.91, y: 16.74 }),
                PathEl::CurveTo(
                    Point { x: 36.37, y: 15.10 },
                    Point { x: 34.84, y: 14.00 },
                    Point { x: 33.12, y: 14.00 },
                ),
                PathEl::LineTo(Point { x: 32.89, y: 14.00 }),
                PathEl::CurveTo(
                    Point { x: 31.17, y: 14.00 },
                    Point { x: 29.64, y: 15.10 },
                    Point { x: 29.10, y: 16.74 },
                ),
                PathEl::LineTo(Point { x: 24.00, y: 32.00 }),
                PathEl::LineTo(Point { x: 30.00, y: 32.00 }),
                PathEl::LineTo(Point { x: 30.00, y: 44.00 }),
                PathEl::LineTo(Point { x: 36.00, y: 44.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 15.00, y: 12.00 }),
                PathEl::CurveTo(
                    Point { x: 17.21, y: 12.00 },
                    Point { x: 19.00, y: 10.21 },
                    Point { x: 19.00, y: 8.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 19.00, y: 5.79 },
                    Point { x: 17.21, y: 4.00 },
                    Point { x: 15.00, y: 4.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 12.79, y: 4.00 },
                    Point { x: 11.00, y: 5.79 },
                    Point { x: 11.00, y: 8.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 11.00, y: 10.21 },
                    Point { x: 12.79, y: 12.00 },
                    Point { x: 15.00, y: 12.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 33.00, y: 12.00 }),
                PathEl::CurveTo(
                    Point { x: 35.21, y: 12.00 },
                    Point { x: 37.00, y: 10.21 },
                    Point { x: 37.00, y: 8.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 37.00, y: 5.79 },
                    Point { x: 35.21, y: 4.00 },
                    Point { x: 33.00, y: 4.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 30.79, y: 4.00 },
                    Point { x: 29.00, y: 5.79 },
                    Point { x: 29.00, y: 8.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 29.00, y: 10.21 },
                    Point { x: 30.79, y: 12.00 },
                    Point { x: 33.00, y: 12.00 },
                ),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct FilterBAndW {
    size: f64,
    color: Color,
}

impl FilterBAndW {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for FilterBAndW {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 38.00, y: 6.00 }),
                PathEl::LineTo(Point { x: 10.00, y: 6.00 }),
                PathEl::CurveTo(
                    Point { x: 7.79, y: 6.00 },
                    Point { x: 6.00, y: 7.79 },
                    Point { x: 6.00, y: 10.00 },
                ),
                PathEl::LineTo(Point { x: 6.00, y: 38.00 }),
                PathEl::CurveTo(
                    Point { x: 6.00, y: 40.21 },
                    Point { x: 7.79, y: 42.00 },
                    Point { x: 10.00, y: 42.00 },
                ),
                PathEl::LineTo(Point { x: 38.00, y: 42.00 }),
                PathEl::CurveTo(
                    Point { x: 40.21, y: 42.00 },
                    Point { x: 42.00, y: 40.21 },
                    Point { x: 42.00, y: 38.00 },
                ),
                PathEl::LineTo(Point { x: 42.00, y: 10.00 }),
                PathEl::CurveTo(
                    Point { x: 42.00, y: 7.79 },
                    Point { x: 40.21, y: 6.00 },
                    Point { x: 38.00, y: 6.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 38.00, y: 38.00 }),
                PathEl::LineTo(Point { x: 24.00, y: 22.00 }),
                PathEl::LineTo(Point { x: 24.00, y: 38.00 }),
                PathEl::LineTo(Point { x: 10.00, y: 38.00 }),
                PathEl::LineTo(Point { x: 24.00, y: 22.00 }),
                PathEl::LineTo(Point { x: 24.00, y: 10.00 }),
                PathEl::LineTo(Point { x: 38.00, y: 10.00 }),
                PathEl::LineTo(Point { x: 38.00, y: 38.00 }),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct NotificationsNone {
    size: f64,
    color: Color,
}

impl NotificationsNone {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for NotificationsNone {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 24.00, y: 44.00 }),
                PathEl::CurveTo(
                    Point { x: 26.21, y: 44.00 },
                    Point { x: 28.00, y: 42.21 },
                    Point { x: 28.00, y: 40.00 },
                ),
                PathEl::LineTo(Point { x: 20.00, y: 40.00 }),
                PathEl::CurveTo(
                    Point { x: 20.00, y: 42.21 },
                    Point { x: 21.79, y: 44.00 },
                    Point { x: 24.00, y: 44.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 36.00, y: 32.00 }),
                PathEl::LineTo(Point { x: 36.00, y: 22.00 }),
                PathEl::CurveTo(
                    Point { x: 36.00, y: 15.85 },
                    Point { x: 32.73, y: 10.72 },
                    Point { x: 27.00, y: 9.36 },
                ),
                PathEl::LineTo(Point { x: 27.00, y: 8.00 }),
                PathEl::CurveTo(
                    Point { x: 27.00, y: 6.34 },
                    Point { x: 25.66, y: 5.00 },
                    Point { x: 24.00, y: 5.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 22.34, y: 5.00 },
                    Point { x: 21.00, y: 6.34 },
                    Point { x: 21.00, y: 8.00 },
                ),
                PathEl::LineTo(Point { x: 21.00, y: 9.36 }),
                PathEl::CurveTo(
                    Point { x: 15.27, y: 10.72 },
                    Point { x: 12.00, y: 15.85 },
                    Point { x: 12.00, y: 22.00 },
                ),
                PathEl::LineTo(Point { x: 12.00, y: 32.00 }),
                PathEl::LineTo(Point { x: 8.00, y: 36.00 }),
                PathEl::LineTo(Point { x: 8.00, y: 38.00 }),
                PathEl::LineTo(Point { x: 40.00, y: 38.00 }),
                PathEl::LineTo(Point { x: 40.00, y: 36.00 }),
                PathEl::LineTo(Point { x: 36.00, y: 32.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 32.00, y: 34.00 }),
                PathEl::LineTo(Point { x: 16.00, y: 34.00 }),
                PathEl::LineTo(Point { x: 16.00, y: 22.00 }),
                PathEl::CurveTo(
                    Point { x: 16.00, y: 17.03 },
                    Point { x: 19.03, y: 13.00 },
                    Point { x: 24.00, y: 13.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 28.97, y: 13.00 },
                    Point { x: 32.00, y: 17.03 },
                    Point { x: 32.00, y: 22.00 },
                ),
                PathEl::LineTo(Point { x: 32.00, y: 34.00 }),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct DriveEta {
    size: f64,
    color: Color,
}

impl DriveEta {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for DriveEta {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 37.84, y: 10.02 }),
                PathEl::CurveTo(
                    Point { x: 37.43, y: 8.84 },
                    Point { x: 36.31, y: 8.00 },
                    Point { x: 35.00, y: 8.00 },
                ),
                PathEl::LineTo(Point { x: 13.00, y: 8.00 }),
                PathEl::CurveTo(
                    Point { x: 11.69, y: 8.00 },
                    Point { x: 10.57, y: 8.84 },
                    Point { x: 10.16, y: 10.02 },
                ),
                PathEl::LineTo(Point { x: 6.00, y: 22.00 }),
                PathEl::LineTo(Point { x: 6.00, y: 38.00 }),
                PathEl::CurveTo(
                    Point { x: 6.00, y: 39.10 },
                    Point { x: 6.90, y: 40.00 },
                    Point { x: 8.00, y: 40.00 },
                ),
                PathEl::LineTo(Point { x: 10.00, y: 40.00 }),
                PathEl::CurveTo(
                    Point { x: 11.11, y: 40.00 },
                    Point { x: 12.00, y: 39.10 },
                    Point { x: 12.00, y: 38.00 },
                ),
                PathEl::LineTo(Point { x: 12.00, y: 36.00 }),
                PathEl::LineTo(Point { x: 36.00, y: 36.00 }),
                PathEl::LineTo(Point { x: 36.00, y: 38.00 }),
                PathEl::CurveTo(
                    Point { x: 36.00, y: 39.10 },
                    Point { x: 36.90, y: 40.00 },
                    Point { x: 38.00, y: 40.00 },
                ),
                PathEl::LineTo(Point { x: 40.00, y: 40.00 }),
                PathEl::CurveTo(
                    Point { x: 41.11, y: 40.00 },
                    Point { x: 42.00, y: 39.10 },
                    Point { x: 42.00, y: 38.00 },
                ),
                PathEl::LineTo(Point { x: 42.00, y: 22.00 }),
                PathEl::LineTo(Point { x: 37.84, y: 10.02 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 13.00, y: 30.00 }),
                PathEl::CurveTo(
                    Point { x: 11.34, y: 30.00 },
                    Point { x: 10.00, y: 28.66 },
                    Point { x: 10.00, y: 27.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 10.00, y: 25.34 },
                    Point { x: 11.34, y: 24.00 },
                    Point { x: 13.00, y: 24.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 14.66, y: 24.00 },
                    Point { x: 16.00, y: 25.34 },
                    Point { x: 16.00, y: 27.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 16.00, y: 28.66 },
                    Point { x: 14.66, y: 30.00 },
                    Point { x: 13.00, y: 30.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 35.00, y: 30.00 }),
                PathEl::CurveTo(
                    Point { x: 33.34, y: 30.00 },
                    Point { x: 32.00, y: 28.66 },
                    Point { x: 32.00, y: 27.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 32.00, y: 25.34 },
                    Point { x: 33.34, y: 24.00 },
                    Point { x: 35.00, y: 24.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 36.66, y: 24.00 },
                    Point { x: 38.00, y: 25.34 },
                    Point { x: 38.00, y: 27.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 38.00, y: 28.66 },
                    Point { x: 36.66, y: 30.00 },
                    Point { x: 35.00, y: 30.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 10.00, y: 20.00 }),
                PathEl::LineTo(Point { x: 13.00, y: 11.00 }),
                PathEl::LineTo(Point { x: 35.00, y: 11.00 }),
                PathEl::LineTo(Point { x: 38.00, y: 20.00 }),
                PathEl::LineTo(Point { x: 10.00, y: 20.00 }),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct CameraEnhance {
    size: f64,
    color: Color,
}

impl CameraEnhance {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for CameraEnhance {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 24.0, height / 24.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 9.00, y: 3.00 }),
                PathEl::LineTo(Point { x: 7.17, y: 5.00 }),
                PathEl::LineTo(Point { x: 4.00, y: 5.00 }),
                PathEl::CurveTo(
                    Point { x: 2.90, y: 5.00 },
                    Point { x: 2.00, y: 5.90 },
                    Point { x: 2.00, y: 7.00 },
                ),
                PathEl::LineTo(Point { x: 2.00, y: 19.00 }),
                PathEl::CurveTo(
                    Point { x: 2.00, y: 20.10 },
                    Point { x: 2.90, y: 21.00 },
                    Point { x: 4.00, y: 21.00 },
                ),
                PathEl::LineTo(Point { x: 20.00, y: 21.00 }),
                PathEl::CurveTo(
                    Point { x: 21.10, y: 21.00 },
                    Point { x: 22.00, y: 20.10 },
                    Point { x: 22.00, y: 19.00 },
                ),
                PathEl::LineTo(Point { x: 22.00, y: 7.00 }),
                PathEl::CurveTo(
                    Point { x: 22.00, y: 5.90 },
                    Point { x: 21.10, y: 5.00 },
                    Point { x: 20.00, y: 5.00 },
                ),
                PathEl::LineTo(Point { x: 16.83, y: 5.00 }),
                PathEl::LineTo(Point { x: 15.00, y: 3.00 }),
                PathEl::LineTo(Point { x: 9.00, y: 3.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 12.00, y: 18.00 }),
                PathEl::CurveTo(
                    Point { x: 9.24, y: 18.00 },
                    Point { x: 7.00, y: 15.76 },
                    Point { x: 7.00, y: 13.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 7.00, y: 10.24 },
                    Point { x: 9.24, y: 8.00 },
                    Point { x: 12.00, y: 8.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 14.76, y: 8.00 },
                    Point { x: 17.00, y: 10.24 },
                    Point { x: 17.00, y: 13.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 17.00, y: 15.76 },
                    Point { x: 14.76, y: 18.00 },
                    Point { x: 12.00, y: 18.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 12.00, y: 17.00 }),
                PathEl::LineTo(Point { x: 13.25, y: 14.25 }),
                PathEl::LineTo(Point { x: 16.00, y: 13.00 }),
                PathEl::LineTo(Point { x: 13.25, y: 11.75 }),
                PathEl::LineTo(Point { x: 12.00, y: 9.00 }),
                PathEl::LineTo(Point { x: 10.75, y: 11.75 }),
                PathEl::LineTo(Point { x: 8.00, y: 13.00 }),
                PathEl::LineTo(Point { x: 10.75, y: 14.25 }),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct FiberNew {
    size: f64,
    color: Color,
}

impl FiberNew {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for FiberNew {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 40.00, y: 8.00 }),
                PathEl::LineTo(Point { x: 8.00, y: 8.00 }),
                PathEl::CurveTo(
                    Point { x: 5.79, y: 8.00 },
                    Point { x: 4.02, y: 9.79 },
                    Point { x: 4.02, y: 12.00 },
                ),
                PathEl::LineTo(Point { x: 4.00, y: 36.00 }),
                PathEl::CurveTo(
                    Point { x: 4.00, y: 38.21 },
                    Point { x: 5.79, y: 40.00 },
                    Point { x: 8.00, y: 40.00 },
                ),
                PathEl::LineTo(Point { x: 40.00, y: 40.00 }),
                PathEl::CurveTo(
                    Point { x: 42.21, y: 40.00 },
                    Point { x: 44.00, y: 38.21 },
                    Point { x: 44.00, y: 36.00 },
                ),
                PathEl::LineTo(Point { x: 44.00, y: 12.00 }),
                PathEl::CurveTo(
                    Point { x: 44.00, y: 9.79 },
                    Point { x: 42.21, y: 8.00 },
                    Point { x: 40.00, y: 8.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 17.00, y: 30.00 }),
                PathEl::LineTo(Point { x: 14.60, y: 30.00 }),
                PathEl::LineTo(Point { x: 9.50, y: 23.00 }),
                PathEl::LineTo(Point { x: 9.50, y: 30.00 }),
                PathEl::LineTo(Point { x: 7.00, y: 30.00 }),
                PathEl::LineTo(Point { x: 7.00, y: 18.00 }),
                PathEl::LineTo(Point { x: 9.50, y: 18.00 }),
                PathEl::LineTo(Point { x: 14.50, y: 25.00 }),
                PathEl::LineTo(Point { x: 14.50, y: 18.00 }),
                PathEl::LineTo(Point { x: 17.00, y: 18.00 }),
                PathEl::LineTo(Point { x: 17.00, y: 30.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 27.00, y: 20.51 }),
                PathEl::LineTo(Point { x: 22.00, y: 20.51 }),
                PathEl::LineTo(Point { x: 22.00, y: 22.75 }),
                PathEl::LineTo(Point { x: 27.00, y: 22.75 }),
                PathEl::LineTo(Point { x: 27.00, y: 25.26 }),
                PathEl::LineTo(Point { x: 22.00, y: 25.26 }),
                PathEl::LineTo(Point { x: 22.00, y: 27.49 }),
                PathEl::LineTo(Point { x: 27.00, y: 27.49 }),
                PathEl::LineTo(Point { x: 27.00, y: 30.00 }),
                PathEl::LineTo(Point { x: 19.00, y: 30.00 }),
                PathEl::LineTo(Point { x: 19.00, y: 18.00 }),
                PathEl::LineTo(Point { x: 27.00, y: 18.00 }),
                PathEl::LineTo(Point { x: 27.00, y: 20.51 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 41.00, y: 28.00 }),
                PathEl::CurveTo(
                    Point { x: 41.00, y: 29.10 },
                    Point { x: 40.10, y: 30.00 },
                    Point { x: 39.00, y: 30.00 },
                ),
                PathEl::LineTo(Point { x: 31.00, y: 30.00 }),
                PathEl::CurveTo(
                    Point { x: 29.90, y: 30.00 },
                    Point { x: 29.00, y: 29.10 },
                    Point { x: 29.00, y: 28.00 },
                ),
                PathEl::LineTo(Point { x: 29.00, y: 18.00 }),
                PathEl::LineTo(Point { x: 31.50, y: 18.00 }),
                PathEl::LineTo(Point { x: 31.50, y: 27.01 }),
                PathEl::LineTo(Point { x: 33.75, y: 27.01 }),
                PathEl::LineTo(Point { x: 33.75, y: 19.99 }),
                PathEl::LineTo(Point { x: 36.25, y: 19.99 }),
                PathEl::LineTo(Point { x: 36.25, y: 27.01 }),
                PathEl::LineTo(Point { x: 38.50, y: 27.01 }),
                PathEl::LineTo(Point { x: 38.50, y: 18.00 }),
                PathEl::LineTo(Point { x: 41.00, y: 18.00 }),
                PathEl::LineTo(Point { x: 41.00, y: 28.00 }),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct ContactMail {
    size: f64,
    color: Color,
}

impl ContactMail {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for ContactMail {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 42.00, y: 16.00 }),
                PathEl::LineTo(Point { x: 42.00, y: 14.00 }),
                PathEl::LineTo(Point { x: 36.00, y: 18.00 }),
                PathEl::LineTo(Point { x: 30.00, y: 14.00 }),
                PathEl::LineTo(Point { x: 30.00, y: 16.00 }),
                PathEl::LineTo(Point { x: 36.00, y: 20.00 }),
                PathEl::LineTo(Point { x: 42.00, y: 16.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 44.00, y: 6.00 }),
                PathEl::LineTo(Point { x: 4.00, y: 6.00 }),
                PathEl::CurveTo(
                    Point { x: 1.79, y: 6.00 },
                    Point { x: 0.00, y: 7.79 },
                    Point { x: 0.00, y: 10.00 },
                ),
                PathEl::LineTo(Point { x: 0.00, y: 38.00 }),
                PathEl::CurveTo(
                    Point { x: 0.00, y: 40.21 },
                    Point { x: 1.79, y: 42.00 },
                    Point { x: 4.00, y: 42.00 },
                ),
                PathEl::LineTo(Point { x: 44.00, y: 42.00 }),
                PathEl::CurveTo(
                    Point { x: 46.21, y: 42.00 },
                    Point { x: 47.98, y: 40.21 },
                    Point { x: 47.98, y: 38.00 },
                ),
                PathEl::LineTo(Point { x: 48.00, y: 10.00 }),
                PathEl::CurveTo(
                    Point { x: 48.00, y: 7.79 },
                    Point { x: 46.21, y: 6.00 },
                    Point { x: 44.00, y: 6.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 16.00, y: 12.00 }),
                PathEl::CurveTo(
                    Point { x: 19.31, y: 12.00 },
                    Point { x: 22.00, y: 14.69 },
                    Point { x: 22.00, y: 18.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 22.00, y: 21.32 },
                    Point { x: 19.31, y: 24.00 },
                    Point { x: 16.00, y: 24.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 12.69, y: 24.00 },
                    Point { x: 10.00, y: 21.32 },
                    Point { x: 10.00, y: 18.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 10.00, y: 14.69 },
                    Point { x: 12.69, y: 12.00 },
                    Point { x: 16.00, y: 12.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 28.00, y: 36.00 }),
                PathEl::LineTo(Point { x: 4.00, y: 36.00 }),
                PathEl::LineTo(Point { x: 4.00, y: 34.00 }),
                PathEl::CurveTo(
                    Point { x: 4.00, y: 30.00 },
                    Point { x: 12.00, y: 27.80 },
                    Point { x: 16.00, y: 27.80 },
                ),
                PathEl::CurveTo(
                    Point { x: 20.00, y: 27.80 },
                    Point { x: 28.00, y: 30.00 },
                    Point { x: 28.00, y: 34.00 },
                ),
                PathEl::LineTo(Point { x: 28.00, y: 36.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 44.00, y: 24.00 }),
                PathEl::LineTo(Point { x: 28.00, y: 24.00 }),
                PathEl::LineTo(Point { x: 28.00, y: 12.00 }),
                PathEl::LineTo(Point { x: 44.00, y: 12.00 }),
                PathEl::LineTo(Point { x: 44.00, y: 24.00 }),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct OpenInBrowser {
    size: f64,
    color: Color,
}

impl OpenInBrowser {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for OpenInBrowser {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 38.00, y: 8.00 }),
                PathEl::LineTo(Point { x: 10.00, y: 8.00 }),
                PathEl::CurveTo(
                    Point { x: 7.79, y: 8.00 },
                    Point { x: 6.00, y: 9.79 },
                    Point { x: 6.00, y: 12.00 },
                ),
                PathEl::LineTo(Point { x: 6.00, y: 36.00 }),
                PathEl::CurveTo(
                    Point { x: 6.00, y: 38.21 },
                    Point { x: 7.79, y: 40.00 },
                    Point { x: 10.00, y: 40.00 },
                ),
                PathEl::LineTo(Point { x: 18.00, y: 40.00 }),
                PathEl::LineTo(Point { x: 18.00, y: 36.00 }),
                PathEl::LineTo(Point { x: 10.00, y: 36.00 }),
                PathEl::LineTo(Point { x: 10.00, y: 16.00 }),
                PathEl::LineTo(Point { x: 38.00, y: 16.00 }),
                PathEl::LineTo(Point { x: 38.00, y: 36.00 }),
                PathEl::LineTo(Point { x: 30.00, y: 36.00 }),
                PathEl::LineTo(Point { x: 30.00, y: 40.00 }),
                PathEl::LineTo(Point { x: 38.00, y: 40.00 }),
                PathEl::CurveTo(
                    Point { x: 40.21, y: 40.00 },
                    Point { x: 42.00, y: 38.21 },
                    Point { x: 42.00, y: 36.00 },
                ),
                PathEl::LineTo(Point { x: 42.00, y: 12.00 }),
                PathEl::CurveTo(
                    Point { x: 42.00, y: 9.79 },
                    Point { x: 40.21, y: 8.00 },
                    Point { x: 38.00, y: 8.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 24.00, y: 20.00 }),
                PathEl::LineTo(Point { x: 16.00, y: 28.00 }),
                PathEl::LineTo(Point { x: 22.00, y: 28.00 }),
                PathEl::LineTo(Point { x: 22.00, y: 40.00 }),
                PathEl::LineTo(Point { x: 26.00, y: 40.00 }),
                PathEl::LineTo(Point { x: 26.00, y: 28.00 }),
                PathEl::LineTo(Point { x: 32.00, y: 28.00 }),
                PathEl::LineTo(Point { x: 24.00, y: 20.00 }),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct CropLandscape {
    size: f64,
    color: Color,
}

impl CropLandscape {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for CropLandscape {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 38.00, y: 10.00 }),
                PathEl::LineTo(Point { x: 10.00, y: 10.00 }),
                PathEl::CurveTo(
                    Point { x: 7.79, y: 10.00 },
                    Point { x: 6.00, y: 11.79 },
                    Point { x: 6.00, y: 14.00 },
                ),
                PathEl::LineTo(Point { x: 6.00, y: 34.00 }),
                PathEl::CurveTo(
                    Point { x: 6.00, y: 36.21 },
                    Point { x: 7.79, y: 38.00 },
                    Point { x: 10.00, y: 38.00 },
                ),
                PathEl::LineTo(Point { x: 38.00, y: 38.00 }),
                PathEl::CurveTo(
                    Point { x: 40.21, y: 38.00 },
                    Point { x: 42.00, y: 36.21 },
                    Point { x: 42.00, y: 34.00 },
                ),
                PathEl::LineTo(Point { x: 42.00, y: 14.00 }),
                PathEl::CurveTo(
                    Point { x: 42.00, y: 11.79 },
                    Point { x: 40.21, y: 10.00 },
                    Point { x: 38.00, y: 10.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 38.00, y: 34.00 }),
                PathEl::LineTo(Point { x: 10.00, y: 34.00 }),
                PathEl::LineTo(Point { x: 10.00, y: 14.00 }),
                PathEl::LineTo(Point { x: 38.00, y: 14.00 }),
                PathEl::LineTo(Point { x: 38.00, y: 34.00 }),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct Phone {
    size: f64,
    color: Color,
}

impl Phone {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for Phone {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 13.25, y: 21.59 }),
                PathEl::CurveTo(
                    Point { x: 16.13, y: 27.25 },
                    Point { x: 20.76, y: 31.88 },
                    Point { x: 26.43, y: 34.76 },
                ),
                PathEl::LineTo(Point { x: 30.83, y: 30.35 }),
                PathEl::CurveTo(
                    Point { x: 31.38, y: 29.80 },
                    Point { x: 32.17, y: 29.64 },
                    Point { x: 32.86, y: 29.86 },
                ),
                PathEl::CurveTo(
                    Point { x: 35.10, y: 30.60 },
                    Point { x: 37.51, y: 31.00 },
                    Point { x: 40.00, y: 31.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 41.11, y: 31.00 },
                    Point { x: 42.00, y: 31.89 },
                    Point { x: 42.00, y: 33.00 },
                ),
                PathEl::LineTo(Point { x: 42.00, y: 40.00 }),
                PathEl::CurveTo(
                    Point { x: 42.00, y: 41.11 },
                    Point { x: 41.11, y: 42.00 },
                    Point { x: 40.00, y: 42.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 21.22, y: 42.00 },
                    Point { x: 6.00, y: 26.78 },
                    Point { x: 6.00, y: 8.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 6.00, y: 6.89 },
                    Point { x: 6.90, y: 6.00 },
                    Point { x: 8.00, y: 6.00 },
                ),
                PathEl::LineTo(Point { x: 15.00, y: 6.00 }),
                PathEl::CurveTo(
                    Point { x: 16.11, y: 6.00 },
                    Point { x: 17.00, y: 6.89 },
                    Point { x: 17.00, y: 8.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 17.00, y: 10.49 },
                    Point { x: 17.40, y: 12.90 },
                    Point { x: 18.14, y: 15.14 },
                ),
                PathEl::CurveTo(
                    Point { x: 18.36, y: 15.83 },
                    Point { x: 18.20, y: 16.62 },
                    Point { x: 17.65, y: 17.17 },
                ),
                PathEl::LineTo(Point { x: 13.25, y: 21.59 }),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct CallMerge {
    size: f64,
    color: Color,
}

impl CallMerge {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for CallMerge {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 34.00, y: 40.83 }),
                PathEl::LineTo(Point { x: 36.83, y: 38.00 }),
                PathEl::LineTo(Point { x: 30.00, y: 31.17 }),
                PathEl::LineTo(Point { x: 27.17, y: 34.00 }),
                PathEl::LineTo(Point { x: 34.00, y: 40.83 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 15.00, y: 16.00 }),
                PathEl::LineTo(Point { x: 22.00, y: 16.00 }),
                PathEl::LineTo(Point { x: 22.00, y: 27.17 }),
                PathEl::LineTo(Point { x: 11.17, y: 38.00 }),
                PathEl::LineTo(Point { x: 14.00, y: 40.83 }),
                PathEl::LineTo(Point { x: 26.00, y: 28.83 }),
                PathEl::LineTo(Point { x: 26.00, y: 16.00 }),
                PathEl::LineTo(Point { x: 33.00, y: 16.00 }),
                PathEl::LineTo(Point { x: 24.00, y: 7.00 }),
                PathEl::LineTo(Point { x: 15.00, y: 16.00 }),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct LocalGroceryStore {
    size: f64,
    color: Color,
}

impl LocalGroceryStore {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for LocalGroceryStore {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 14.00, y: 36.00 }),
                PathEl::CurveTo(
                    Point { x: 11.79, y: 36.00 },
                    Point { x: 10.02, y: 37.79 },
                    Point { x: 10.02, y: 40.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 10.02, y: 42.21 },
                    Point { x: 11.79, y: 44.00 },
                    Point { x: 14.00, y: 44.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 16.21, y: 44.00 },
                    Point { x: 18.00, y: 42.21 },
                    Point { x: 18.00, y: 40.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 18.00, y: 37.79 },
                    Point { x: 16.21, y: 36.00 },
                    Point { x: 14.00, y: 36.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 2.00, y: 4.00 }),
                PathEl::LineTo(Point { x: 2.00, y: 8.00 }),
                PathEl::LineTo(Point { x: 6.00, y: 8.00 }),
                PathEl::LineTo(Point { x: 13.19, y: 23.17 }),
                PathEl::LineTo(Point { x: 10.49, y: 28.07 }),
                PathEl::CurveTo(
                    Point { x: 10.18, y: 28.65 },
                    Point { x: 10.00, y: 29.30 },
                    Point { x: 10.00, y: 30.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 10.00, y: 32.21 },
                    Point { x: 11.79, y: 34.00 },
                    Point { x: 14.00, y: 34.00 },
                ),
                PathEl::LineTo(Point { x: 38.00, y: 34.00 }),
                PathEl::LineTo(Point { x: 38.00, y: 30.00 }),
                PathEl::LineTo(Point { x: 14.85, y: 30.00 }),
                PathEl::CurveTo(
                    Point { x: 14.57, y: 30.00 },
                    Point { x: 14.35, y: 29.78 },
                    Point { x: 14.35, y: 29.50 },
                ),
                PathEl::CurveTo(
                    Point { x: 14.35, y: 29.41 },
                    Point { x: 14.37, y: 29.33 },
                    Point { x: 14.41, y: 29.26 },
                ),
                PathEl::LineTo(Point { x: 16.20, y: 26.00 }),
                PathEl::LineTo(Point { x: 31.10, y: 26.00 }),
                PathEl::CurveTo(
                    Point { x: 32.60, y: 26.00 },
                    Point { x: 33.91, y: 25.17 },
                    Point { x: 34.60, y: 23.94 },
                ),
                PathEl::LineTo(Point { x: 41.75, y: 10.96 }),
                PathEl::CurveTo(
                    Point { x: 41.91, y: 10.68 },
                    Point { x: 42.00, y: 10.35 },
                    Point { x: 42.00, y: 10.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 42.00, y: 8.89 },
                    Point { x: 41.10, y: 8.00 },
                    Point { x: 40.00, y: 8.00 },
                ),
                PathEl::LineTo(Point { x: 10.43, y: 8.00 }),
                PathEl::LineTo(Point { x: 8.53, y: 4.00 }),
                PathEl::LineTo(Point { x: 2.00, y: 4.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 34.00, y: 36.00 }),
                PathEl::CurveTo(
                    Point { x: 31.79, y: 36.00 },
                    Point { x: 30.02, y: 37.79 },
                    Point { x: 30.02, y: 40.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 30.02, y: 42.21 },
                    Point { x: 31.79, y: 44.00 },
                    Point { x: 34.00, y: 44.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 36.21, y: 44.00 },
                    Point { x: 38.00, y: 42.21 },
                    Point { x: 38.00, y: 40.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 38.00, y: 37.79 },
                    Point { x: 36.21, y: 36.00 },
                    Point { x: 34.00, y: 36.00 },
                ),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct LocalBar {
    size: f64,
    color: Color,
}

impl LocalBar {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for LocalBar {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 42.00, y: 10.00 }),
                PathEl::LineTo(Point { x: 42.00, y: 6.00 }),
                PathEl::LineTo(Point { x: 6.00, y: 6.00 }),
                PathEl::LineTo(Point { x: 6.00, y: 10.00 }),
                PathEl::LineTo(Point { x: 22.00, y: 28.00 }),
                PathEl::LineTo(Point { x: 22.00, y: 38.00 }),
                PathEl::LineTo(Point { x: 12.00, y: 38.00 }),
                PathEl::LineTo(Point { x: 12.00, y: 42.00 }),
                PathEl::LineTo(Point { x: 36.00, y: 42.00 }),
                PathEl::LineTo(Point { x: 36.00, y: 38.00 }),
                PathEl::LineTo(Point { x: 26.00, y: 38.00 }),
                PathEl::LineTo(Point { x: 26.00, y: 28.00 }),
                PathEl::LineTo(Point { x: 42.00, y: 10.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 14.87, y: 14.00 }),
                PathEl::LineTo(Point { x: 11.31, y: 10.00 }),
                PathEl::LineTo(Point { x: 36.69, y: 10.00 }),
                PathEl::LineTo(Point { x: 33.13, y: 14.00 }),
                PathEl::LineTo(Point { x: 14.87, y: 14.00 }),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct PauseCircleOutline {
    size: f64,
    color: Color,
}

impl PauseCircleOutline {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for PauseCircleOutline {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 18.00, y: 32.00 }),
                PathEl::LineTo(Point { x: 22.00, y: 32.00 }),
                PathEl::LineTo(Point { x: 22.00, y: 16.00 }),
                PathEl::LineTo(Point { x: 18.00, y: 16.00 }),
                PathEl::LineTo(Point { x: 18.00, y: 32.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 24.00, y: 4.00 }),
                PathEl::CurveTo(
                    Point { x: 12.95, y: 4.00 },
                    Point { x: 4.00, y: 12.95 },
                    Point { x: 4.00, y: 24.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 4.00, y: 35.05 },
                    Point { x: 12.95, y: 44.00 },
                    Point { x: 24.00, y: 44.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 35.05, y: 44.00 },
                    Point { x: 44.00, y: 35.05 },
                    Point { x: 44.00, y: 24.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 44.00, y: 12.95 },
                    Point { x: 35.05, y: 4.00 },
                    Point { x: 24.00, y: 4.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 24.00, y: 40.00 }),
                PathEl::CurveTo(
                    Point { x: 15.18, y: 40.00 },
                    Point { x: 8.00, y: 32.82 },
                    Point { x: 8.00, y: 24.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 8.00, y: 15.18 },
                    Point { x: 15.18, y: 8.00 },
                    Point { x: 24.00, y: 8.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 32.82, y: 8.00 },
                    Point { x: 40.00, y: 15.18 },
                    Point { x: 40.00, y: 24.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 40.00, y: 32.82 },
                    Point { x: 32.82, y: 40.00 },
                    Point { x: 24.00, y: 40.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 26.00, y: 32.00 }),
                PathEl::LineTo(Point { x: 30.00, y: 32.00 }),
                PathEl::LineTo(Point { x: 30.00, y: 16.00 }),
                PathEl::LineTo(Point { x: 26.00, y: 16.00 }),
                PathEl::LineTo(Point { x: 26.00, y: 32.00 }),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct Comment {
    size: f64,
    color: Color,
}

impl Comment {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for Comment {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 43.98, y: 8.00 }),
                PathEl::CurveTo(
                    Point { x: 43.98, y: 5.79 },
                    Point { x: 42.21, y: 4.00 },
                    Point { x: 40.00, y: 4.00 },
                ),
                PathEl::LineTo(Point { x: 8.00, y: 4.00 }),
                PathEl::CurveTo(
                    Point { x: 5.79, y: 4.00 },
                    Point { x: 4.00, y: 5.79 },
                    Point { x: 4.00, y: 8.00 },
                ),
                PathEl::LineTo(Point { x: 4.00, y: 32.00 }),
                PathEl::CurveTo(
                    Point { x: 4.00, y: 34.21 },
                    Point { x: 5.79, y: 36.00 },
                    Point { x: 8.00, y: 36.00 },
                ),
                PathEl::LineTo(Point { x: 36.00, y: 36.00 }),
                PathEl::LineTo(Point { x: 44.00, y: 44.00 }),
                PathEl::LineTo(Point { x: 43.98, y: 8.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 36.00, y: 28.00 }),
                PathEl::LineTo(Point { x: 12.00, y: 28.00 }),
                PathEl::LineTo(Point { x: 12.00, y: 24.00 }),
                PathEl::LineTo(Point { x: 36.00, y: 24.00 }),
                PathEl::LineTo(Point { x: 36.00, y: 28.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 36.00, y: 22.00 }),
                PathEl::LineTo(Point { x: 12.00, y: 22.00 }),
                PathEl::LineTo(Point { x: 12.00, y: 18.00 }),
                PathEl::LineTo(Point { x: 36.00, y: 18.00 }),
                PathEl::LineTo(Point { x: 36.00, y: 22.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 36.00, y: 16.00 }),
                PathEl::LineTo(Point { x: 12.00, y: 16.00 }),
                PathEl::LineTo(Point { x: 12.00, y: 12.00 }),
                PathEl::LineTo(Point { x: 36.00, y: 12.00 }),
                PathEl::LineTo(Point { x: 36.00, y: 16.00 }),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct LocationCity {
    size: f64,
    color: Color,
}

impl LocationCity {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for LocationCity {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 30.00, y: 22.00 }),
                PathEl::LineTo(Point { x: 30.00, y: 10.00 }),
                PathEl::LineTo(Point { x: 24.00, y: 4.00 }),
                PathEl::LineTo(Point { x: 18.00, y: 10.00 }),
                PathEl::LineTo(Point { x: 18.00, y: 14.00 }),
                PathEl::LineTo(Point { x: 6.00, y: 14.00 }),
                PathEl::LineTo(Point { x: 6.00, y: 42.00 }),
                PathEl::LineTo(Point { x: 42.00, y: 42.00 }),
                PathEl::LineTo(Point { x: 42.00, y: 22.00 }),
                PathEl::LineTo(Point { x: 30.00, y: 22.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 14.00, y: 38.00 }),
                PathEl::LineTo(Point { x: 10.00, y: 38.00 }),
                PathEl::LineTo(Point { x: 10.00, y: 34.00 }),
                PathEl::LineTo(Point { x: 14.00, y: 34.00 }),
                PathEl::LineTo(Point { x: 14.00, y: 38.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 14.00, y: 30.00 }),
                PathEl::LineTo(Point { x: 10.00, y: 30.00 }),
                PathEl::LineTo(Point { x: 10.00, y: 26.00 }),
                PathEl::LineTo(Point { x: 14.00, y: 26.00 }),
                PathEl::LineTo(Point { x: 14.00, y: 30.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 14.00, y: 22.00 }),
                PathEl::LineTo(Point { x: 10.00, y: 22.00 }),
                PathEl::LineTo(Point { x: 10.00, y: 18.00 }),
                PathEl::LineTo(Point { x: 14.00, y: 18.00 }),
                PathEl::LineTo(Point { x: 14.00, y: 22.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 26.00, y: 38.00 }),
                PathEl::LineTo(Point { x: 22.00, y: 38.00 }),
                PathEl::LineTo(Point { x: 22.00, y: 34.00 }),
                PathEl::LineTo(Point { x: 26.00, y: 34.00 }),
                PathEl::LineTo(Point { x: 26.00, y: 38.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 26.00, y: 30.00 }),
                PathEl::LineTo(Point { x: 22.00, y: 30.00 }),
                PathEl::LineTo(Point { x: 22.00, y: 26.00 }),
                PathEl::LineTo(Point { x: 26.00, y: 26.00 }),
                PathEl::LineTo(Point { x: 26.00, y: 30.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 26.00, y: 22.00 }),
                PathEl::LineTo(Point { x: 22.00, y: 22.00 }),
                PathEl::LineTo(Point { x: 22.00, y: 18.00 }),
                PathEl::LineTo(Point { x: 26.00, y: 18.00 }),
                PathEl::LineTo(Point { x: 26.00, y: 22.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 26.00, y: 14.00 }),
                PathEl::LineTo(Point { x: 22.00, y: 14.00 }),
                PathEl::LineTo(Point { x: 22.00, y: 10.00 }),
                PathEl::LineTo(Point { x: 26.00, y: 10.00 }),
                PathEl::LineTo(Point { x: 26.00, y: 14.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 38.00, y: 38.00 }),
                PathEl::LineTo(Point { x: 34.00, y: 38.00 }),
                PathEl::LineTo(Point { x: 34.00, y: 34.00 }),
                PathEl::LineTo(Point { x: 38.00, y: 34.00 }),
                PathEl::LineTo(Point { x: 38.00, y: 38.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 38.00, y: 30.00 }),
                PathEl::LineTo(Point { x: 34.00, y: 30.00 }),
                PathEl::LineTo(Point { x: 34.00, y: 26.00 }),
                PathEl::LineTo(Point { x: 38.00, y: 26.00 }),
                PathEl::LineTo(Point { x: 38.00, y: 30.00 }),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct PersonAdd {
    size: f64,
    color: Color,
}

impl PersonAdd {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for PersonAdd {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 30.00, y: 24.00 }),
                PathEl::CurveTo(
                    Point { x: 34.42, y: 24.00 },
                    Point { x: 38.00, y: 20.41 },
                    Point { x: 38.00, y: 16.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 38.00, y: 11.58 },
                    Point { x: 34.42, y: 8.00 },
                    Point { x: 30.00, y: 8.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 25.58, y: 8.00 },
                    Point { x: 22.00, y: 11.58 },
                    Point { x: 22.00, y: 16.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 22.00, y: 20.41 },
                    Point { x: 25.58, y: 24.00 },
                    Point { x: 30.00, y: 24.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 12.00, y: 20.00 }),
                PathEl::LineTo(Point { x: 12.00, y: 14.00 }),
                PathEl::LineTo(Point { x: 8.00, y: 14.00 }),
                PathEl::LineTo(Point { x: 8.00, y: 20.00 }),
                PathEl::LineTo(Point { x: 2.00, y: 20.00 }),
                PathEl::LineTo(Point { x: 2.00, y: 24.00 }),
                PathEl::LineTo(Point { x: 8.00, y: 24.00 }),
                PathEl::LineTo(Point { x: 8.00, y: 30.00 }),
                PathEl::LineTo(Point { x: 12.00, y: 30.00 }),
                PathEl::LineTo(Point { x: 12.00, y: 24.00 }),
                PathEl::LineTo(Point { x: 18.00, y: 24.00 }),
                PathEl::LineTo(Point { x: 18.00, y: 20.00 }),
                PathEl::LineTo(Point { x: 12.00, y: 20.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 30.00, y: 28.00 }),
                PathEl::CurveTo(
                    Point { x: 24.67, y: 28.00 },
                    Point { x: 14.00, y: 30.67 },
                    Point { x: 14.00, y: 36.00 },
                ),
                PathEl::LineTo(Point { x: 14.00, y: 40.00 }),
                PathEl::LineTo(Point { x: 46.00, y: 40.00 }),
                PathEl::LineTo(Point { x: 46.00, y: 36.00 }),
                PathEl::CurveTo(
                    Point { x: 46.00, y: 30.67 },
                    Point { x: 35.33, y: 28.00 },
                    Point { x: 30.00, y: 28.00 },
                ),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct HelpOutline {
    size: f64,
    color: Color,
}

impl HelpOutline {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for HelpOutline {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 24.0, height / 24.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 11.00, y: 18.00 }),
                PathEl::LineTo(Point { x: 13.00, y: 18.00 }),
                PathEl::LineTo(Point { x: 13.00, y: 16.00 }),
                PathEl::LineTo(Point { x: 11.00, y: 16.00 }),
                PathEl::LineTo(Point { x: 11.00, y: 18.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 12.00, y: 2.00 }),
                PathEl::CurveTo(
                    Point { x: 6.48, y: 2.00 },
                    Point { x: 2.00, y: 6.48 },
                    Point { x: 2.00, y: 12.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 2.00, y: 17.52 },
                    Point { x: 6.48, y: 22.00 },
                    Point { x: 12.00, y: 22.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 17.52, y: 22.00 },
                    Point { x: 22.00, y: 17.52 },
                    Point { x: 22.00, y: 12.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 22.00, y: 6.48 },
                    Point { x: 17.52, y: 2.00 },
                    Point { x: 12.00, y: 2.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 12.00, y: 20.00 }),
                PathEl::CurveTo(
                    Point { x: 7.59, y: 20.00 },
                    Point { x: 4.00, y: 16.41 },
                    Point { x: 4.00, y: 12.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 4.00, y: 7.59 },
                    Point { x: 7.59, y: 4.00 },
                    Point { x: 12.00, y: 4.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 16.41, y: 4.00 },
                    Point { x: 20.00, y: 7.59 },
                    Point { x: 20.00, y: 12.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 20.00, y: 16.41 },
                    Point { x: 16.41, y: 20.00 },
                    Point { x: 12.00, y: 20.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 12.00, y: 6.00 }),
                PathEl::CurveTo(
                    Point { x: 9.79, y: 6.00 },
                    Point { x: 8.00, y: 7.79 },
                    Point { x: 8.00, y: 10.00 },
                ),
                PathEl::LineTo(Point { x: 10.00, y: 10.00 }),
                PathEl::CurveTo(
                    Point { x: 10.00, y: 8.90 },
                    Point { x: 10.90, y: 8.00 },
                    Point { x: 12.00, y: 8.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 13.10, y: 8.00 },
                    Point { x: 14.00, y: 8.90 },
                    Point { x: 14.00, y: 10.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 14.00, y: 12.00 },
                    Point { x: 11.00, y: 11.75 },
                    Point { x: 11.00, y: 15.00 },
                ),
                PathEl::LineTo(Point { x: 13.00, y: 15.00 }),
                PathEl::CurveTo(
                    Point { x: 13.00, y: 12.75 },
                    Point { x: 16.00, y: 12.50 },
                    Point { x: 16.00, y: 10.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 16.00, y: 7.79 },
                    Point { x: 14.21, y: 6.00 },
                    Point { x: 12.00, y: 6.00 },
                ),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct SwapHoriz {
    size: f64,
    color: Color,
}

impl SwapHoriz {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for SwapHoriz {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 13.98, y: 22.00 }),
                PathEl::LineTo(Point { x: 6.00, y: 30.00 }),
                PathEl::LineTo(Point { x: 13.98, y: 38.00 }),
                PathEl::LineTo(Point { x: 13.98, y: 32.00 }),
                PathEl::LineTo(Point { x: 28.00, y: 32.00 }),
                PathEl::LineTo(Point { x: 28.00, y: 28.00 }),
                PathEl::LineTo(Point { x: 13.98, y: 28.00 }),
                PathEl::LineTo(Point { x: 13.98, y: 22.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 42.00, y: 18.00 }),
                PathEl::LineTo(Point { x: 34.02, y: 10.00 }),
                PathEl::LineTo(Point { x: 34.02, y: 16.00 }),
                PathEl::LineTo(Point { x: 20.00, y: 16.00 }),
                PathEl::LineTo(Point { x: 20.00, y: 20.00 }),
                PathEl::LineTo(Point { x: 34.02, y: 20.00 }),
                PathEl::LineTo(Point { x: 34.02, y: 26.00 }),
                PathEl::LineTo(Point { x: 42.00, y: 18.00 }),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct MusicVideo {
    size: f64,
    color: Color,
}

impl MusicVideo {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for MusicVideo {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 46.00, y: 10.00 }),
                PathEl::CurveTo(
                    Point { x: 46.00, y: 7.79 },
                    Point { x: 44.21, y: 6.00 },
                    Point { x: 42.00, y: 6.00 },
                ),
                PathEl::LineTo(Point { x: 6.00, y: 6.00 }),
                PathEl::CurveTo(
                    Point { x: 3.79, y: 6.00 },
                    Point { x: 2.00, y: 7.79 },
                    Point { x: 2.00, y: 10.00 },
                ),
                PathEl::LineTo(Point { x: 2.00, y: 38.00 }),
                PathEl::CurveTo(
                    Point { x: 2.00, y: 40.21 },
                    Point { x: 3.79, y: 42.00 },
                    Point { x: 6.00, y: 42.00 },
                ),
                PathEl::LineTo(Point { x: 42.00, y: 42.00 }),
                PathEl::CurveTo(
                    Point { x: 44.21, y: 42.00 },
                    Point { x: 46.00, y: 40.21 },
                    Point { x: 46.00, y: 38.00 },
                ),
                PathEl::LineTo(Point { x: 46.00, y: 10.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 42.00, y: 38.00 }),
                PathEl::LineTo(Point { x: 6.00, y: 38.00 }),
                PathEl::LineTo(Point { x: 6.00, y: 10.00 }),
                PathEl::LineTo(Point { x: 42.00, y: 10.00 }),
                PathEl::LineTo(Point { x: 42.00, y: 38.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 16.00, y: 30.00 }),
                PathEl::CurveTo(
                    Point { x: 16.00, y: 26.69 },
                    Point { x: 18.69, y: 24.00 },
                    Point { x: 22.00, y: 24.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 22.71, y: 24.00 },
                    Point { x: 23.00, y: 24.14 },
                    Point { x: 24.00, y: 24.37 },
                ),
                PathEl::LineTo(Point { x: 24.00, y: 12.00 }),
                PathEl::LineTo(Point { x: 34.00, y: 12.00 }),
                PathEl::LineTo(Point { x: 34.00, y: 16.00 }),
                PathEl::LineTo(Point { x: 28.00, y: 16.00 }),
                PathEl::LineTo(Point { x: 27.99, y: 30.05 }),
                PathEl::CurveTo(
                    Point { x: 27.96, y: 33.34 },
                    Point { x: 25.30, y: 36.00 },
                    Point { x: 22.00, y: 36.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 18.69, y: 36.00 },
                    Point { x: 16.00, y: 33.31 },
                    Point { x: 16.00, y: 30.00 },
                ),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct FormatSize {
    size: f64,
    color: Color,
}

impl FormatSize {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for FormatSize {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 18.00, y: 8.00 }),
                PathEl::LineTo(Point { x: 18.00, y: 14.00 }),
                PathEl::LineTo(Point { x: 28.00, y: 14.00 }),
                PathEl::LineTo(Point { x: 28.00, y: 38.00 }),
                PathEl::LineTo(Point { x: 34.00, y: 38.00 }),
                PathEl::LineTo(Point { x: 34.00, y: 14.00 }),
                PathEl::LineTo(Point { x: 44.00, y: 14.00 }),
                PathEl::LineTo(Point { x: 44.00, y: 8.00 }),
                PathEl::LineTo(Point { x: 18.00, y: 8.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 6.00, y: 24.00 }),
                PathEl::LineTo(Point { x: 12.00, y: 24.00 }),
                PathEl::LineTo(Point { x: 12.00, y: 38.00 }),
                PathEl::LineTo(Point { x: 18.00, y: 38.00 }),
                PathEl::LineTo(Point { x: 18.00, y: 24.00 }),
                PathEl::LineTo(Point { x: 24.00, y: 24.00 }),
                PathEl::LineTo(Point { x: 24.00, y: 18.00 }),
                PathEl::LineTo(Point { x: 6.00, y: 18.00 }),
                PathEl::LineTo(Point { x: 6.00, y: 24.00 }),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct Mail {
    size: f64,
    color: Color,
}

impl Mail {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for Mail {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 40.00, y: 8.00 }),
                PathEl::LineTo(Point { x: 8.00, y: 8.00 }),
                PathEl::CurveTo(
                    Point { x: 5.79, y: 8.00 },
                    Point { x: 4.02, y: 9.79 },
                    Point { x: 4.02, y: 12.00 },
                ),
                PathEl::LineTo(Point { x: 4.00, y: 36.00 }),
                PathEl::CurveTo(
                    Point { x: 4.00, y: 38.21 },
                    Point { x: 5.79, y: 40.00 },
                    Point { x: 8.00, y: 40.00 },
                ),
                PathEl::LineTo(Point { x: 40.00, y: 40.00 }),
                PathEl::CurveTo(
                    Point { x: 42.21, y: 40.00 },
                    Point { x: 44.00, y: 38.21 },
                    Point { x: 44.00, y: 36.00 },
                ),
                PathEl::LineTo(Point { x: 44.00, y: 12.00 }),
                PathEl::CurveTo(
                    Point { x: 44.00, y: 9.79 },
                    Point { x: 42.21, y: 8.00 },
                    Point { x: 40.00, y: 8.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 40.00, y: 16.00 }),
                PathEl::LineTo(Point { x: 24.00, y: 26.00 }),
                PathEl::LineTo(Point { x: 8.00, y: 16.00 }),
                PathEl::LineTo(Point { x: 8.00, y: 12.00 }),
                PathEl::LineTo(Point { x: 24.00, y: 22.00 }),
                PathEl::LineTo(Point { x: 40.00, y: 12.00 }),
                PathEl::LineTo(Point { x: 40.00, y: 16.00 }),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct ThreedRotation {
    size: f64,
    color: Color,
}

impl ThreedRotation {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for ThreedRotation {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 15.03, y: 42.97 }),
                PathEl::CurveTo(
                    Point { x: 8.50, y: 39.87 },
                    Point { x: 3.81, y: 33.52 },
                    Point { x: 3.10, y: 26.00 },
                ),
                PathEl::LineTo(Point { x: 0.10, y: 26.00 }),
                PathEl::CurveTo(
                    Point { x: 1.12, y: 38.32 },
                    Point { x: 11.42, y: 48.00 },
                    Point { x: 24.00, y: 48.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 24.45, y: 48.00 },
                    Point { x: 24.88, y: 47.96 },
                    Point { x: 25.32, y: 47.93 },
                ),
                PathEl::LineTo(Point { x: 17.70, y: 40.30 }),
                PathEl::LineTo(Point { x: 15.03, y: 42.97 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 16.81, y: 29.92 }),
                PathEl::CurveTo(
                    Point { x: 16.43, y: 29.92 },
                    Point { x: 16.08, y: 29.87 },
                    Point { x: 15.76, y: 29.75 },
                ),
                PathEl::CurveTo(
                    Point { x: 15.45, y: 29.64 },
                    Point { x: 15.18, y: 29.48 },
                    Point { x: 14.96, y: 29.28 },
                ),
                PathEl::CurveTo(
                    Point { x: 14.74, y: 29.08 },
                    Point { x: 14.57, y: 28.83 },
                    Point { x: 14.45, y: 28.55 },
                ),
                PathEl::CurveTo(
                    Point { x: 14.33, y: 28.26 },
                    Point { x: 14.27, y: 27.95 },
                    Point { x: 14.27, y: 27.61 },
                ),
                PathEl::LineTo(Point { x: 11.67, y: 27.61 }),
                PathEl::CurveTo(
                    Point { x: 11.67, y: 28.33 },
                    Point { x: 11.81, y: 28.96 },
                    Point { x: 12.09, y: 29.51 },
                ),
                PathEl::CurveTo(
                    Point { x: 12.37, y: 30.06 },
                    Point { x: 12.74, y: 30.52 },
                    Point { x: 13.21, y: 30.88 },
                ),
                PathEl::CurveTo(
                    Point { x: 13.68, y: 31.25 },
                    Point { x: 14.22, y: 31.52 },
                    Point { x: 14.84, y: 31.71 },
                ),
                PathEl::CurveTo(
                    Point { x: 15.46, y: 31.91 },
                    Point { x: 16.10, y: 32.00 },
                    Point { x: 16.78, y: 32.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 17.52, y: 32.00 },
                    Point { x: 18.21, y: 31.90 },
                    Point { x: 18.85, y: 31.70 },
                ),
                PathEl::CurveTo(
                    Point { x: 19.49, y: 31.50 },
                    Point { x: 20.04, y: 31.20 },
                    Point { x: 20.51, y: 30.81 },
                ),
                PathEl::CurveTo(
                    Point { x: 20.98, y: 30.42 },
                    Point { x: 21.34, y: 29.94 },
                    Point { x: 21.61, y: 29.37 },
                ),
                PathEl::CurveTo(
                    Point { x: 21.87, y: 28.80 },
                    Point { x: 22.01, y: 28.15 },
                    Point { x: 22.01, y: 27.42 },
                ),
                PathEl::CurveTo(
                    Point { x: 22.01, y: 27.03 },
                    Point { x: 21.96, y: 26.66 },
                    Point { x: 21.87, y: 26.30 },
                ),
                PathEl::CurveTo(
                    Point { x: 21.77, y: 25.94 },
                    Point { x: 21.62, y: 25.60 },
                    Point { x: 21.42, y: 25.28 },
                ),
                PathEl::CurveTo(
                    Point { x: 21.21, y: 24.96 },
                    Point { x: 20.94, y: 24.68 },
                    Point { x: 20.61, y: 24.42 },
                ),
                PathEl::CurveTo(
                    Point { x: 20.28, y: 24.17 },
                    Point { x: 19.87, y: 23.96 },
                    Point { x: 19.40, y: 23.79 },
                ),
                PathEl::CurveTo(
                    Point { x: 19.80, y: 23.61 },
                    Point { x: 20.15, y: 23.39 },
                    Point { x: 20.45, y: 23.13 },
                ),
                PathEl::CurveTo(
                    Point { x: 20.75, y: 22.87 },
                    Point { x: 21.00, y: 22.59 },
                    Point { x: 21.20, y: 22.30 },
                ),
                PathEl::CurveTo(
                    Point { x: 21.40, y: 22.00 },
                    Point { x: 21.55, y: 21.70 },
                    Point { x: 21.65, y: 21.38 },
                ),
                PathEl::CurveTo(
                    Point { x: 21.75, y: 21.06 },
                    Point { x: 21.80, y: 20.74 },
                    Point { x: 21.80, y: 20.43 },
                ),
                PathEl::CurveTo(
                    Point { x: 21.80, y: 19.70 },
                    Point { x: 21.68, y: 19.06 },
                    Point { x: 21.44, y: 18.51 },
                ),
                PathEl::CurveTo(
                    Point { x: 21.20, y: 17.96 },
                    Point { x: 20.86, y: 17.50 },
                    Point { x: 20.42, y: 17.13 },
                ),
                PathEl::CurveTo(
                    Point { x: 19.98, y: 16.76 },
                    Point { x: 19.46, y: 16.48 },
                    Point { x: 18.84, y: 16.29 },
                ),
                PathEl::CurveTo(
                    Point { x: 18.20, y: 16.09 },
                    Point { x: 17.52, y: 16.00 },
                    Point { x: 16.78, y: 16.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 16.06, y: 16.00 },
                    Point { x: 15.39, y: 16.11 },
                    Point { x: 14.78, y: 16.32 },
                ),
                PathEl::CurveTo(
                    Point { x: 14.17, y: 16.53 },
                    Point { x: 13.65, y: 16.83 },
                    Point { x: 13.21, y: 17.21 },
                ),
                PathEl::CurveTo(
                    Point { x: 12.77, y: 17.59 },
                    Point { x: 12.43, y: 18.04 },
                    Point { x: 12.18, y: 18.56 },
                ),
                PathEl::CurveTo(
                    Point { x: 11.93, y: 19.08 },
                    Point { x: 11.81, y: 19.65 },
                    Point { x: 11.81, y: 20.26 },
                ),
                PathEl::LineTo(Point { x: 14.41, y: 20.26 }),
                PathEl::CurveTo(
                    Point { x: 14.41, y: 19.92 },
                    Point { x: 14.47, y: 19.62 },
                    Point { x: 14.59, y: 19.36 },
                ),
                PathEl::CurveTo(
                    Point { x: 14.71, y: 19.09 },
                    Point { x: 14.88, y: 18.86 },
                    Point { x: 15.09, y: 18.68 },
                ),
                PathEl::CurveTo(
                    Point { x: 15.30, y: 18.49 },
                    Point { x: 15.56, y: 18.34 },
                    Point { x: 15.85, y: 18.24 },
                ),
                PathEl::CurveTo(
                    Point { x: 16.14, y: 18.14 },
                    Point { x: 16.46, y: 18.08 },
                    Point { x: 16.80, y: 18.08 },
                ),
                PathEl::CurveTo(
                    Point { x: 17.60, y: 18.08 },
                    Point { x: 18.19, y: 18.29 },
                    Point { x: 18.58, y: 18.70 },
                ),
                PathEl::CurveTo(
                    Point { x: 18.97, y: 19.11 },
                    Point { x: 19.16, y: 19.69 },
                    Point { x: 19.16, y: 20.43 },
                ),
                PathEl::CurveTo(
                    Point { x: 19.16, y: 20.79 },
                    Point { x: 19.11, y: 21.11 },
                    Point { x: 19.00, y: 21.40 },
                ),
                PathEl::CurveTo(
                    Point { x: 18.89, y: 21.69 },
                    Point { x: 18.73, y: 21.94 },
                    Point { x: 18.51, y: 22.15 },
                ),
                PathEl::CurveTo(
                    Point { x: 18.29, y: 22.36 },
                    Point { x: 18.01, y: 22.52 },
                    Point { x: 17.69, y: 22.64 },
                ),
                PathEl::CurveTo(
                    Point { x: 17.36, y: 22.76 },
                    Point { x: 16.97, y: 22.82 },
                    Point { x: 16.53, y: 22.82 },
                ),
                PathEl::LineTo(Point { x: 14.99, y: 22.82 }),
                PathEl::LineTo(Point { x: 14.99, y: 24.87 }),
                PathEl::LineTo(Point { x: 16.53, y: 24.87 }),
                PathEl::CurveTo(
                    Point { x: 16.97, y: 24.87 },
                    Point { x: 17.37, y: 24.92 },
                    Point { x: 17.72, y: 25.02 },
                ),
                PathEl::CurveTo(
                    Point { x: 18.07, y: 25.12 },
                    Point { x: 18.37, y: 25.27 },
                    Point { x: 18.62, y: 25.49 },
                ),
                PathEl::CurveTo(
                    Point { x: 18.87, y: 25.70 },
                    Point { x: 19.06, y: 25.97 },
                    Point { x: 19.20, y: 26.29 },
                ),
                PathEl::CurveTo(
                    Point { x: 19.33, y: 26.61 },
                    Point { x: 19.40, y: 26.99 },
                    Point { x: 19.40, y: 27.43 },
                ),
                PathEl::CurveTo(
                    Point { x: 19.40, y: 28.24 },
                    Point { x: 19.17, y: 28.86 },
                    Point { x: 18.70, y: 29.29 },
                ),
                PathEl::CurveTo(
                    Point { x: 18.25, y: 29.71 },
                    Point { x: 17.62, y: 29.92 },
                    Point { x: 16.81, y: 29.92 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 33.93, y: 18.07 }),
                PathEl::CurveTo(
                    Point { x: 33.30, y: 17.41 },
                    Point { x: 32.54, y: 16.90 },
                    Point { x: 31.66, y: 16.54 },
                ),
                PathEl::CurveTo(
                    Point { x: 30.77, y: 16.18 },
                    Point { x: 29.80, y: 16.00 },
                    Point { x: 28.73, y: 16.00 },
                ),
                PathEl::LineTo(Point { x: 24.00, y: 16.00 }),
                PathEl::LineTo(Point { x: 24.00, y: 32.00 }),
                PathEl::LineTo(Point { x: 28.59, y: 32.00 }),
                PathEl::CurveTo(
                    Point { x: 29.70, y: 32.00 },
                    Point { x: 30.70, y: 31.82 },
                    Point { x: 31.61, y: 31.46 },
                ),
                PathEl::CurveTo(
                    Point { x: 32.52, y: 31.10 },
                    Point { x: 33.29, y: 30.59 },
                    Point { x: 33.93, y: 29.93 },
                ),
                PathEl::CurveTo(
                    Point { x: 34.57, y: 29.27 },
                    Point { x: 35.07, y: 28.47 },
                    Point { x: 35.41, y: 27.54 },
                ),
                PathEl::CurveTo(
                    Point { x: 35.76, y: 26.61 },
                    Point { x: 35.93, y: 25.56 },
                    Point { x: 35.93, y: 24.40 },
                ),
                PathEl::LineTo(Point { x: 35.93, y: 23.61 }),
                PathEl::CurveTo(
                    Point { x: 35.93, y: 22.45 },
                    Point { x: 35.75, y: 21.41 },
                    Point { x: 35.40, y: 20.47 },
                ),
                PathEl::CurveTo(
                    Point { x: 35.05, y: 19.53 },
                    Point { x: 34.56, y: 18.73 },
                    Point { x: 33.93, y: 18.07 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 33.14, y: 24.41 }),
                PathEl::CurveTo(
                    Point { x: 33.14, y: 25.24 },
                    Point { x: 33.05, y: 26.00 },
                    Point { x: 32.85, y: 26.66 },
                ),
                PathEl::CurveTo(
                    Point { x: 32.66, y: 27.33 },
                    Point { x: 32.38, y: 27.89 },
                    Point { x: 32.00, y: 28.35 },
                ),
                PathEl::CurveTo(
                    Point { x: 31.62, y: 28.81 },
                    Point { x: 31.15, y: 29.16 },
                    Point { x: 30.58, y: 29.41 },
                ),
                PathEl::CurveTo(
                    Point { x: 30.01, y: 29.65 },
                    Point { x: 29.35, y: 29.78 },
                    Point { x: 28.59, y: 29.78 },
                ),
                PathEl::LineTo(Point { x: 26.78, y: 29.78 }),
                PathEl::LineTo(Point { x: 26.78, y: 18.24 }),
                PathEl::LineTo(Point { x: 28.73, y: 18.24 }),
                PathEl::CurveTo(
                    Point { x: 30.17, y: 18.24 },
                    Point { x: 31.26, y: 18.70 },
                    Point { x: 32.02, y: 19.61 },
                ),
                PathEl::CurveTo(
                    Point { x: 32.77, y: 20.53 },
                    Point { x: 33.15, y: 21.85 },
                    Point { x: 33.15, y: 23.59 },
                ),
                PathEl::LineTo(Point { x: 33.15, y: 24.41 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 24.00, y: 0.00 }),
                PathEl::CurveTo(
                    Point { x: 23.55, y: 0.00 },
                    Point { x: 23.12, y: 0.04 },
                    Point { x: 22.68, y: 0.07 },
                ),
                PathEl::LineTo(Point { x: 30.30, y: 7.70 }),
                PathEl::LineTo(Point { x: 32.96, y: 5.04 }),
                PathEl::CurveTo(
                    Point { x: 39.50, y: 8.13 },
                    Point { x: 44.19, y: 14.48 },
                    Point { x: 44.90, y: 22.00 },
                ),
                PathEl::LineTo(Point { x: 47.90, y: 22.00 }),
                PathEl::CurveTo(
                    Point { x: 46.88, y: 9.68 },
                    Point { x: 36.58, y: 0.00 },
                    Point { x: 24.00, y: 0.00 },
                ),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct ViewModule {
    size: f64,
    color: Color,
}

impl ViewModule {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for ViewModule {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 8.00, y: 22.00 }),
                PathEl::LineTo(Point { x: 18.00, y: 22.00 }),
                PathEl::LineTo(Point { x: 18.00, y: 10.00 }),
                PathEl::LineTo(Point { x: 8.00, y: 10.00 }),
                PathEl::LineTo(Point { x: 8.00, y: 22.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 8.00, y: 36.00 }),
                PathEl::LineTo(Point { x: 18.00, y: 36.00 }),
                PathEl::LineTo(Point { x: 18.00, y: 24.00 }),
                PathEl::LineTo(Point { x: 8.00, y: 24.00 }),
                PathEl::LineTo(Point { x: 8.00, y: 36.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 20.00, y: 36.00 }),
                PathEl::LineTo(Point { x: 30.00, y: 36.00 }),
                PathEl::LineTo(Point { x: 30.00, y: 24.00 }),
                PathEl::LineTo(Point { x: 20.00, y: 24.00 }),
                PathEl::LineTo(Point { x: 20.00, y: 36.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 32.00, y: 36.00 }),
                PathEl::LineTo(Point { x: 42.00, y: 36.00 }),
                PathEl::LineTo(Point { x: 42.00, y: 24.00 }),
                PathEl::LineTo(Point { x: 32.00, y: 24.00 }),
                PathEl::LineTo(Point { x: 32.00, y: 36.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 20.00, y: 22.00 }),
                PathEl::LineTo(Point { x: 30.00, y: 22.00 }),
                PathEl::LineTo(Point { x: 30.00, y: 10.00 }),
                PathEl::LineTo(Point { x: 20.00, y: 10.00 }),
                PathEl::LineTo(Point { x: 20.00, y: 22.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 32.00, y: 10.00 }),
                PathEl::LineTo(Point { x: 32.00, y: 22.00 }),
                PathEl::LineTo(Point { x: 42.00, y: 22.00 }),
                PathEl::LineTo(Point { x: 42.00, y: 10.00 }),
                PathEl::LineTo(Point { x: 32.00, y: 10.00 }),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct ArrowDropDownCircle {
    size: f64,
    color: Color,
}

impl ArrowDropDownCircle {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for ArrowDropDownCircle {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 24.00, y: 4.00 }),
                PathEl::CurveTo(
                    Point { x: 12.95, y: 4.00 },
                    Point { x: 4.00, y: 12.95 },
                    Point { x: 4.00, y: 24.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 4.00, y: 35.05 },
                    Point { x: 12.95, y: 44.00 },
                    Point { x: 24.00, y: 44.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 35.05, y: 44.00 },
                    Point { x: 44.00, y: 35.05 },
                    Point { x: 44.00, y: 24.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 44.00, y: 12.95 },
                    Point { x: 35.05, y: 4.00 },
                    Point { x: 24.00, y: 4.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 24.00, y: 28.00 }),
                PathEl::LineTo(Point { x: 16.00, y: 20.00 }),
                PathEl::LineTo(Point { x: 32.00, y: 20.00 }),
                PathEl::LineTo(Point { x: 24.00, y: 28.00 }),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct AirportShuttle {
    size: f64,
    color: Color,
}

impl AirportShuttle {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for AirportShuttle {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 34.00, y: 10.00 }),
                PathEl::LineTo(Point { x: 6.00, y: 10.00 }),
                PathEl::CurveTo(
                    Point { x: 3.79, y: 10.00 },
                    Point { x: 2.00, y: 11.79 },
                    Point { x: 2.00, y: 14.00 },
                ),
                PathEl::LineTo(Point { x: 2.00, y: 32.00 }),
                PathEl::LineTo(Point { x: 6.00, y: 32.00 }),
                PathEl::CurveTo(
                    Point { x: 6.00, y: 35.31 },
                    Point { x: 8.69, y: 38.00 },
                    Point { x: 12.00, y: 38.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 15.31, y: 38.00 },
                    Point { x: 18.00, y: 35.31 },
                    Point { x: 18.00, y: 32.00 },
                ),
                PathEl::LineTo(Point { x: 29.00, y: 32.00 }),
                PathEl::CurveTo(
                    Point { x: 29.00, y: 35.31 },
                    Point { x: 31.69, y: 38.00 },
                    Point { x: 35.00, y: 38.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 38.31, y: 38.00 },
                    Point { x: 41.00, y: 35.31 },
                    Point { x: 41.00, y: 32.00 },
                ),
                PathEl::LineTo(Point { x: 46.00, y: 32.00 }),
                PathEl::LineTo(Point { x: 46.00, y: 22.00 }),
                PathEl::LineTo(Point { x: 34.00, y: 10.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 6.00, y: 22.00 }),
                PathEl::LineTo(Point { x: 6.00, y: 14.00 }),
                PathEl::LineTo(Point { x: 14.00, y: 14.00 }),
                PathEl::LineTo(Point { x: 14.00, y: 22.00 }),
                PathEl::LineTo(Point { x: 6.00, y: 22.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 12.00, y: 35.00 }),
                PathEl::CurveTo(
                    Point { x: 10.34, y: 35.00 },
                    Point { x: 9.00, y: 33.66 },
                    Point { x: 9.00, y: 32.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 9.00, y: 30.34 },
                    Point { x: 10.34, y: 29.00 },
                    Point { x: 12.00, y: 29.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 13.66, y: 29.00 },
                    Point { x: 15.00, y: 30.34 },
                    Point { x: 15.00, y: 32.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 15.00, y: 33.66 },
                    Point { x: 13.66, y: 35.00 },
                    Point { x: 12.00, y: 35.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 26.00, y: 22.00 }),
                PathEl::LineTo(Point { x: 18.00, y: 22.00 }),
                PathEl::LineTo(Point { x: 18.00, y: 14.00 }),
                PathEl::LineTo(Point { x: 26.00, y: 14.00 }),
                PathEl::LineTo(Point { x: 26.00, y: 22.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 35.00, y: 35.00 }),
                PathEl::CurveTo(
                    Point { x: 33.34, y: 35.00 },
                    Point { x: 32.00, y: 33.66 },
                    Point { x: 32.00, y: 32.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 32.00, y: 30.34 },
                    Point { x: 33.34, y: 29.00 },
                    Point { x: 35.00, y: 29.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 36.66, y: 29.00 },
                    Point { x: 38.00, y: 30.34 },
                    Point { x: 38.00, y: 32.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 38.00, y: 33.66 },
                    Point { x: 36.66, y: 35.00 },
                    Point { x: 35.00, y: 35.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 30.00, y: 22.00 }),
                PathEl::LineTo(Point { x: 30.00, y: 14.00 }),
                PathEl::LineTo(Point { x: 32.00, y: 14.00 }),
                PathEl::LineTo(Point { x: 40.00, y: 22.00 }),
                PathEl::LineTo(Point { x: 30.00, y: 22.00 }),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct BatteryCharging80 {
    size: f64,
    color: Color,
}

impl BatteryCharging80 {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for BatteryCharging80 {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 31.33, y: 8.00 }),
                PathEl::LineTo(Point { x: 28.00, y: 8.00 }),
                PathEl::LineTo(Point { x: 28.00, y: 4.00 }),
                PathEl::LineTo(Point { x: 20.00, y: 4.00 }),
                PathEl::LineTo(Point { x: 20.00, y: 8.00 }),
                PathEl::LineTo(Point { x: 16.67, y: 8.00 }),
                PathEl::CurveTo(
                    Point { x: 15.19, y: 8.00 },
                    Point { x: 14.00, y: 9.19 },
                    Point { x: 14.00, y: 10.67 },
                ),
                PathEl::LineTo(Point { x: 14.00, y: 18.00 }),
                PathEl::LineTo(Point { x: 23.87, y: 18.00 }),
                PathEl::LineTo(Point { x: 26.00, y: 14.00 }),
                PathEl::LineTo(Point { x: 26.00, y: 18.00 }),
                PathEl::LineTo(Point { x: 34.00, y: 18.00 }),
                PathEl::LineTo(Point { x: 34.00, y: 10.67 }),
                PathEl::CurveTo(
                    Point { x: 34.00, y: 9.19 },
                    Point { x: 32.81, y: 8.00 },
                    Point { x: 31.33, y: 8.00 },
                ),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 26.00, y: 25.00 }),
                PathEl::LineTo(Point { x: 30.00, y: 25.00 }),
                PathEl::LineTo(Point { x: 22.00, y: 40.00 }),
                PathEl::LineTo(Point { x: 22.00, y: 29.00 }),
                PathEl::LineTo(Point { x: 18.00, y: 29.00 }),
                PathEl::LineTo(Point { x: 23.87, y: 18.00 }),
                PathEl::LineTo(Point { x: 14.00, y: 18.00 }),
                PathEl::LineTo(Point { x: 14.00, y: 41.33 }),
                PathEl::CurveTo(
                    Point { x: 14.00, y: 42.80 },
                    Point { x: 15.19, y: 44.00 },
                    Point { x: 16.67, y: 44.00 },
                ),
                PathEl::LineTo(Point { x: 31.34, y: 44.00 }),
                PathEl::CurveTo(
                    Point { x: 32.81, y: 44.00 },
                    Point { x: 34.01, y: 42.81 },
                    Point { x: 34.01, y: 41.33 },
                ),
                PathEl::LineTo(Point { x: 34.01, y: 18.00 }),
                PathEl::LineTo(Point { x: 26.01, y: 18.00 }),
                PathEl::LineTo(Point { x: 26.01, y: 25.00 }),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct UnfoldLess {
    size: f64,
    color: Color,
}

impl UnfoldLess {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for UnfoldLess {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 14.83, y: 37.17 }),
                PathEl::LineTo(Point { x: 17.66, y: 40.00 }),
                PathEl::LineTo(Point { x: 24.00, y: 33.66 }),
                PathEl::LineTo(Point { x: 30.34, y: 40.00 }),
                PathEl::LineTo(Point { x: 33.17, y: 37.17 }),
                PathEl::LineTo(Point { x: 24.00, y: 28.00 }),
                PathEl::LineTo(Point { x: 14.83, y: 37.17 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 33.17, y: 10.83 }),
                PathEl::LineTo(Point { x: 30.34, y: 8.00 }),
                PathEl::LineTo(Point { x: 24.00, y: 14.34 }),
                PathEl::LineTo(Point { x: 17.66, y: 8.00 }),
                PathEl::LineTo(Point { x: 14.83, y: 10.83 }),
                PathEl::LineTo(Point { x: 24.00, y: 20.00 }),
                PathEl::LineTo(Point { x: 33.17, y: 10.83 }),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct AddToQueue {
    size: f64,
    color: Color,
}

impl AddToQueue {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for AddToQueue {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 42.00, y: 6.00 }),
                PathEl::LineTo(Point { x: 6.00, y: 6.00 }),
                PathEl::CurveTo(
                    Point { x: 3.79, y: 6.00 },
                    Point { x: 2.00, y: 7.79 },
                    Point { x: 2.00, y: 10.00 },
                ),
                PathEl::LineTo(Point { x: 2.00, y: 34.00 }),
                PathEl::CurveTo(
                    Point { x: 2.00, y: 36.21 },
                    Point { x: 3.79, y: 38.00 },
                    Point { x: 6.00, y: 38.00 },
                ),
                PathEl::LineTo(Point { x: 16.00, y: 38.00 }),
                PathEl::LineTo(Point { x: 16.00, y: 42.00 }),
                PathEl::LineTo(Point { x: 32.00, y: 42.00 }),
                PathEl::LineTo(Point { x: 32.00, y: 38.00 }),
                PathEl::LineTo(Point { x: 42.00, y: 38.00 }),
                PathEl::CurveTo(
                    Point { x: 44.21, y: 38.00 },
                    Point { x: 45.98, y: 36.21 },
                    Point { x: 45.98, y: 34.00 },
                ),
                PathEl::LineTo(Point { x: 46.00, y: 10.00 }),
                PathEl::CurveTo(
                    Point { x: 46.00, y: 7.79 },
                    Point { x: 44.21, y: 6.00 },
                    Point { x: 42.00, y: 6.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 42.00, y: 34.00 }),
                PathEl::LineTo(Point { x: 6.00, y: 34.00 }),
                PathEl::LineTo(Point { x: 6.00, y: 10.00 }),
                PathEl::LineTo(Point { x: 42.00, y: 10.00 }),
                PathEl::LineTo(Point { x: 42.00, y: 34.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 32.00, y: 20.00 }),
                PathEl::LineTo(Point { x: 32.00, y: 24.00 }),
                PathEl::LineTo(Point { x: 26.00, y: 24.00 }),
                PathEl::LineTo(Point { x: 26.00, y: 30.00 }),
                PathEl::LineTo(Point { x: 22.00, y: 30.00 }),
                PathEl::LineTo(Point { x: 22.00, y: 24.00 }),
                PathEl::LineTo(Point { x: 16.00, y: 24.00 }),
                PathEl::LineTo(Point { x: 16.00, y: 20.00 }),
                PathEl::LineTo(Point { x: 22.00, y: 20.00 }),
                PathEl::LineTo(Point { x: 22.00, y: 14.00 }),
                PathEl::LineTo(Point { x: 26.00, y: 14.00 }),
                PathEl::LineTo(Point { x: 26.00, y: 20.00 }),
                PathEl::LineTo(Point { x: 32.00, y: 20.00 }),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct ErrorOutline {
    size: f64,
    color: Color,
}

impl ErrorOutline {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for ErrorOutline {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 22.00, y: 30.00 }),
                PathEl::LineTo(Point { x: 26.00, y: 30.00 }),
                PathEl::LineTo(Point { x: 26.00, y: 34.00 }),
                PathEl::LineTo(Point { x: 22.00, y: 34.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 22.00, y: 14.00 }),
                PathEl::LineTo(Point { x: 26.00, y: 14.00 }),
                PathEl::LineTo(Point { x: 26.00, y: 26.00 }),
                PathEl::LineTo(Point { x: 22.00, y: 26.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 23.99, y: 4.00 }),
                PathEl::CurveTo(
                    Point { x: 12.94, y: 4.00 },
                    Point { x: 4.00, y: 12.95 },
                    Point { x: 4.00, y: 24.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 4.00, y: 35.05 },
                    Point { x: 12.94, y: 44.00 },
                    Point { x: 23.99, y: 44.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 35.04, y: 44.00 },
                    Point { x: 44.00, y: 35.05 },
                    Point { x: 44.00, y: 24.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 44.00, y: 12.95 },
                    Point { x: 35.04, y: 4.00 },
                    Point { x: 23.99, y: 4.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 24.00, y: 40.00 }),
                PathEl::CurveTo(
                    Point { x: 15.16, y: 40.00 },
                    Point { x: 8.00, y: 32.84 },
                    Point { x: 8.00, y: 24.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 8.00, y: 15.16 },
                    Point { x: 15.16, y: 8.00 },
                    Point { x: 24.00, y: 8.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 32.84, y: 8.00 },
                    Point { x: 40.00, y: 15.16 },
                    Point { x: 40.00, y: 24.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 40.00, y: 32.84 },
                    Point { x: 32.84, y: 40.00 },
                    Point { x: 24.00, y: 40.00 },
                ),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct BorderInner {
    size: f64,
    color: Color,
}

impl BorderInner {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for BorderInner {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 6.00, y: 42.00 }),
                PathEl::LineTo(Point { x: 10.00, y: 42.00 }),
                PathEl::LineTo(Point { x: 10.00, y: 38.00 }),
                PathEl::LineTo(Point { x: 6.00, y: 38.00 }),
                PathEl::LineTo(Point { x: 6.00, y: 42.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 14.00, y: 42.00 }),
                PathEl::LineTo(Point { x: 18.00, y: 42.00 }),
                PathEl::LineTo(Point { x: 18.00, y: 38.00 }),
                PathEl::LineTo(Point { x: 14.00, y: 38.00 }),
                PathEl::LineTo(Point { x: 14.00, y: 42.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 10.00, y: 14.00 }),
                PathEl::LineTo(Point { x: 6.00, y: 14.00 }),
                PathEl::LineTo(Point { x: 6.00, y: 18.00 }),
                PathEl::LineTo(Point { x: 10.00, y: 18.00 }),
                PathEl::LineTo(Point { x: 10.00, y: 14.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 6.00, y: 34.00 }),
                PathEl::LineTo(Point { x: 10.00, y: 34.00 }),
                PathEl::LineTo(Point { x: 10.00, y: 30.00 }),
                PathEl::LineTo(Point { x: 6.00, y: 30.00 }),
                PathEl::LineTo(Point { x: 6.00, y: 34.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 18.00, y: 6.00 }),
                PathEl::LineTo(Point { x: 14.00, y: 6.00 }),
                PathEl::LineTo(Point { x: 14.00, y: 10.00 }),
                PathEl::LineTo(Point { x: 18.00, y: 10.00 }),
                PathEl::LineTo(Point { x: 18.00, y: 6.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 10.00, y: 6.00 }),
                PathEl::LineTo(Point { x: 6.00, y: 6.00 }),
                PathEl::LineTo(Point { x: 6.00, y: 10.00 }),
                PathEl::LineTo(Point { x: 10.00, y: 10.00 }),
                PathEl::LineTo(Point { x: 10.00, y: 6.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 34.00, y: 6.00 }),
                PathEl::LineTo(Point { x: 30.00, y: 6.00 }),
                PathEl::LineTo(Point { x: 30.00, y: 10.00 }),
                PathEl::LineTo(Point { x: 34.00, y: 10.00 }),
                PathEl::LineTo(Point { x: 34.00, y: 6.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 38.00, y: 18.00 }),
                PathEl::LineTo(Point { x: 42.00, y: 18.00 }),
                PathEl::LineTo(Point { x: 42.00, y: 14.00 }),
                PathEl::LineTo(Point { x: 38.00, y: 14.00 }),
                PathEl::LineTo(Point { x: 38.00, y: 18.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 38.00, y: 6.00 }),
                PathEl::LineTo(Point { x: 38.00, y: 10.00 }),
                PathEl::LineTo(Point { x: 42.00, y: 10.00 }),
                PathEl::LineTo(Point { x: 42.00, y: 6.00 }),
                PathEl::LineTo(Point { x: 38.00, y: 6.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 30.00, y: 42.00 }),
                PathEl::LineTo(Point { x: 34.00, y: 42.00 }),
                PathEl::LineTo(Point { x: 34.00, y: 38.00 }),
                PathEl::LineTo(Point { x: 30.00, y: 38.00 }),
                PathEl::LineTo(Point { x: 30.00, y: 42.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 26.00, y: 6.00 }),
                PathEl::LineTo(Point { x: 22.00, y: 6.00 }),
                PathEl::LineTo(Point { x: 22.00, y: 22.00 }),
                PathEl::LineTo(Point { x: 6.00, y: 22.00 }),
                PathEl::LineTo(Point { x: 6.00, y: 26.00 }),
                PathEl::LineTo(Point { x: 22.00, y: 26.00 }),
                PathEl::LineTo(Point { x: 22.00, y: 42.00 }),
                PathEl::LineTo(Point { x: 26.00, y: 42.00 }),
                PathEl::LineTo(Point { x: 26.00, y: 26.00 }),
                PathEl::LineTo(Point { x: 42.00, y: 26.00 }),
                PathEl::LineTo(Point { x: 42.00, y: 22.00 }),
                PathEl::LineTo(Point { x: 26.00, y: 22.00 }),
                PathEl::LineTo(Point { x: 26.00, y: 6.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 38.00, y: 42.00 }),
                PathEl::LineTo(Point { x: 42.00, y: 42.00 }),
                PathEl::LineTo(Point { x: 42.00, y: 38.00 }),
                PathEl::LineTo(Point { x: 38.00, y: 38.00 }),
                PathEl::LineTo(Point { x: 38.00, y: 42.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 38.00, y: 34.00 }),
                PathEl::LineTo(Point { x: 42.00, y: 34.00 }),
                PathEl::LineTo(Point { x: 42.00, y: 30.00 }),
                PathEl::LineTo(Point { x: 38.00, y: 30.00 }),
                PathEl::LineTo(Point { x: 38.00, y: 34.00 }),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct ShoppingCart {
    size: f64,
    color: Color,
}

impl ShoppingCart {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for ShoppingCart {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 14.00, y: 36.00 }),
                PathEl::CurveTo(
                    Point { x: 11.79, y: 36.00 },
                    Point { x: 10.02, y: 37.79 },
                    Point { x: 10.02, y: 40.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 10.02, y: 42.21 },
                    Point { x: 11.79, y: 44.00 },
                    Point { x: 14.00, y: 44.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 16.21, y: 44.00 },
                    Point { x: 18.00, y: 42.21 },
                    Point { x: 18.00, y: 40.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 18.00, y: 37.79 },
                    Point { x: 16.21, y: 36.00 },
                    Point { x: 14.00, y: 36.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 2.00, y: 4.00 }),
                PathEl::LineTo(Point { x: 2.00, y: 8.00 }),
                PathEl::LineTo(Point { x: 6.00, y: 8.00 }),
                PathEl::LineTo(Point { x: 13.19, y: 23.17 }),
                PathEl::LineTo(Point { x: 10.49, y: 28.07 }),
                PathEl::CurveTo(
                    Point { x: 10.18, y: 28.65 },
                    Point { x: 10.00, y: 29.30 },
                    Point { x: 10.00, y: 30.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 10.00, y: 32.21 },
                    Point { x: 11.79, y: 34.00 },
                    Point { x: 14.00, y: 34.00 },
                ),
                PathEl::LineTo(Point { x: 38.00, y: 34.00 }),
                PathEl::LineTo(Point { x: 38.00, y: 30.00 }),
                PathEl::LineTo(Point { x: 14.85, y: 30.00 }),
                PathEl::CurveTo(
                    Point { x: 14.57, y: 30.00 },
                    Point { x: 14.35, y: 29.78 },
                    Point { x: 14.35, y: 29.50 },
                ),
                PathEl::CurveTo(
                    Point { x: 14.35, y: 29.41 },
                    Point { x: 14.37, y: 29.33 },
                    Point { x: 14.41, y: 29.26 },
                ),
                PathEl::LineTo(Point { x: 16.20, y: 26.00 }),
                PathEl::LineTo(Point { x: 31.10, y: 26.00 }),
                PathEl::CurveTo(
                    Point { x: 32.60, y: 26.00 },
                    Point { x: 33.91, y: 25.17 },
                    Point { x: 34.60, y: 23.94 },
                ),
                PathEl::LineTo(Point { x: 41.75, y: 10.96 }),
                PathEl::CurveTo(
                    Point { x: 41.91, y: 10.68 },
                    Point { x: 42.00, y: 10.35 },
                    Point { x: 42.00, y: 10.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 42.00, y: 8.89 },
                    Point { x: 41.10, y: 8.00 },
                    Point { x: 40.00, y: 8.00 },
                ),
                PathEl::LineTo(Point { x: 10.43, y: 8.00 }),
                PathEl::LineTo(Point { x: 8.53, y: 4.00 }),
                PathEl::LineTo(Point { x: 2.00, y: 4.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 34.00, y: 36.00 }),
                PathEl::CurveTo(
                    Point { x: 31.79, y: 36.00 },
                    Point { x: 30.02, y: 37.79 },
                    Point { x: 30.02, y: 40.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 30.02, y: 42.21 },
                    Point { x: 31.79, y: 44.00 },
                    Point { x: 34.00, y: 44.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 36.21, y: 44.00 },
                    Point { x: 38.00, y: 42.21 },
                    Point { x: 38.00, y: 40.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 38.00, y: 37.79 },
                    Point { x: 36.21, y: 36.00 },
                    Point { x: 34.00, y: 36.00 },
                ),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct TrackChanges {
    size: f64,
    color: Color,
}

impl TrackChanges {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for TrackChanges {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 38.14, y: 9.86 }),
                PathEl::LineTo(Point { x: 35.32, y: 12.68 }),
                PathEl::CurveTo(
                    Point { x: 38.20, y: 15.58 },
                    Point { x: 40.00, y: 19.58 },
                    Point { x: 40.00, y: 24.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 40.00, y: 32.84 },
                    Point { x: 32.84, y: 40.00 },
                    Point { x: 24.00, y: 40.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 15.16, y: 40.00 },
                    Point { x: 8.00, y: 32.84 },
                    Point { x: 8.00, y: 24.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 8.00, y: 15.84 },
                    Point { x: 14.10, y: 9.12 },
                    Point { x: 22.00, y: 8.14 },
                ),
                PathEl::LineTo(Point { x: 22.00, y: 12.18 }),
                PathEl::CurveTo(
                    Point { x: 16.32, y: 13.14 },
                    Point { x: 12.00, y: 18.06 },
                    Point { x: 12.00, y: 24.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 12.00, y: 30.62 },
                    Point { x: 17.38, y: 36.00 },
                    Point { x: 24.00, y: 36.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 30.62, y: 36.00 },
                    Point { x: 36.00, y: 30.62 },
                    Point { x: 36.00, y: 24.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 36.00, y: 20.68 },
                    Point { x: 34.66, y: 17.68 },
                    Point { x: 32.48, y: 15.52 },
                ),
                PathEl::LineTo(Point { x: 29.66, y: 18.34 }),
                PathEl::CurveTo(
                    Point { x: 31.10, y: 19.80 },
                    Point { x: 32.00, y: 21.80 },
                    Point { x: 32.00, y: 24.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 32.00, y: 28.42 },
                    Point { x: 28.42, y: 32.00 },
                    Point { x: 24.00, y: 32.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 19.58, y: 32.00 },
                    Point { x: 16.00, y: 28.42 },
                    Point { x: 16.00, y: 24.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 16.00, y: 20.28 },
                    Point { x: 18.56, y: 17.18 },
                    Point { x: 22.00, y: 16.28 },
                ),
                PathEl::LineTo(Point { x: 22.00, y: 20.56 }),
                PathEl::CurveTo(
                    Point { x: 20.80, y: 21.26 },
                    Point { x: 20.00, y: 22.52 },
                    Point { x: 20.00, y: 24.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 20.00, y: 26.20 },
                    Point { x: 21.80, y: 28.00 },
                    Point { x: 24.00, y: 28.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 26.20, y: 28.00 },
                    Point { x: 28.00, y: 26.20 },
                    Point { x: 28.00, y: 24.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 28.00, y: 22.52 },
                    Point { x: 27.20, y: 21.24 },
                    Point { x: 26.00, y: 20.56 },
                ),
                PathEl::LineTo(Point { x: 26.00, y: 4.00 }),
                PathEl::LineTo(Point { x: 24.00, y: 4.00 }),
                PathEl::CurveTo(
                    Point { x: 12.96, y: 4.00 },
                    Point { x: 4.00, y: 12.96 },
                    Point { x: 4.00, y: 24.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 4.00, y: 35.04 },
                    Point { x: 12.96, y: 44.00 },
                    Point { x: 24.00, y: 44.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 35.04, y: 44.00 },
                    Point { x: 44.00, y: 35.04 },
                    Point { x: 44.00, y: 24.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 44.00, y: 18.48 },
                    Point { x: 41.76, y: 13.48 },
                    Point { x: 38.14, y: 9.86 },
                ),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct PermContactCalendar {
    size: f64,
    color: Color,
}

impl PermContactCalendar {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for PermContactCalendar {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 38.00, y: 6.00 }),
                PathEl::LineTo(Point { x: 36.00, y: 6.00 }),
                PathEl::LineTo(Point { x: 36.00, y: 2.00 }),
                PathEl::LineTo(Point { x: 32.00, y: 2.00 }),
                PathEl::LineTo(Point { x: 32.00, y: 6.00 }),
                PathEl::LineTo(Point { x: 16.00, y: 6.00 }),
                PathEl::LineTo(Point { x: 16.00, y: 2.00 }),
                PathEl::LineTo(Point { x: 12.00, y: 2.00 }),
                PathEl::LineTo(Point { x: 12.00, y: 6.00 }),
                PathEl::LineTo(Point { x: 10.00, y: 6.00 }),
                PathEl::CurveTo(
                    Point { x: 7.79, y: 6.00 },
                    Point { x: 6.00, y: 7.79 },
                    Point { x: 6.00, y: 10.00 },
                ),
                PathEl::LineTo(Point { x: 6.00, y: 38.00 }),
                PathEl::CurveTo(
                    Point { x: 6.00, y: 40.21 },
                    Point { x: 7.79, y: 42.00 },
                    Point { x: 10.00, y: 42.00 },
                ),
                PathEl::LineTo(Point { x: 38.00, y: 42.00 }),
                PathEl::CurveTo(
                    Point { x: 40.21, y: 42.00 },
                    Point { x: 42.00, y: 40.21 },
                    Point { x: 42.00, y: 38.00 },
                ),
                PathEl::LineTo(Point { x: 42.00, y: 10.00 }),
                PathEl::CurveTo(
                    Point { x: 42.00, y: 7.79 },
                    Point { x: 40.21, y: 6.00 },
                    Point { x: 38.00, y: 6.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 24.00, y: 12.00 }),
                PathEl::CurveTo(
                    Point { x: 27.31, y: 12.00 },
                    Point { x: 30.00, y: 14.69 },
                    Point { x: 30.00, y: 18.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 30.00, y: 21.32 },
                    Point { x: 27.31, y: 24.00 },
                    Point { x: 24.00, y: 24.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 20.69, y: 24.00 },
                    Point { x: 18.00, y: 21.32 },
                    Point { x: 18.00, y: 18.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 18.00, y: 14.69 },
                    Point { x: 20.69, y: 12.00 },
                    Point { x: 24.00, y: 12.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 36.00, y: 36.00 }),
                PathEl::LineTo(Point { x: 12.00, y: 36.00 }),
                PathEl::LineTo(Point { x: 12.00, y: 34.00 }),
                PathEl::CurveTo(
                    Point { x: 12.00, y: 30.00 },
                    Point { x: 20.00, y: 27.80 },
                    Point { x: 24.00, y: 27.80 },
                ),
                PathEl::CurveTo(
                    Point { x: 28.00, y: 27.80 },
                    Point { x: 36.00, y: 30.00 },
                    Point { x: 36.00, y: 34.00 },
                ),
                PathEl::LineTo(Point { x: 36.00, y: 36.00 }),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct Camera {
    size: f64,
    color: Color,
}

impl Camera {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for Camera {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 18.80, y: 21.00 }),
                PathEl::LineTo(Point { x: 28.33, y: 4.49 }),
                PathEl::CurveTo(
                    Point { x: 26.94, y: 4.18 },
                    Point { x: 25.49, y: 4.00 },
                    Point { x: 24.00, y: 4.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 19.20, y: 4.00 },
                    Point { x: 14.81, y: 5.69 },
                    Point { x: 11.36, y: 8.51 },
                ),
                PathEl::LineTo(Point { x: 18.69, y: 21.20 }),
                PathEl::LineTo(Point { x: 18.80, y: 21.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 43.08, y: 18.00 }),
                PathEl::CurveTo(
                    Point { x: 41.24, y: 12.15 },
                    Point { x: 36.78, y: 7.48 },
                    Point { x: 31.09, y: 5.32 },
                ),
                PathEl::LineTo(Point { x: 23.77, y: 18.00 }),
                PathEl::LineTo(Point { x: 43.08, y: 18.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 43.60, y: 20.00 }),
                PathEl::LineTo(Point { x: 28.62, y: 20.00 }),
                PathEl::LineTo(Point { x: 29.20, y: 21.00 }),
                PathEl::LineTo(Point { x: 38.73, y: 37.50 }),
                PathEl::CurveTo(
                    Point { x: 41.99, y: 33.94 },
                    Point { x: 44.00, y: 29.21 },
                    Point { x: 44.00, y: 24.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 44.00, y: 22.63 },
                    Point { x: 43.86, y: 21.29 },
                    Point { x: 43.60, y: 20.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 17.07, y: 24.00 }),
                PathEl::LineTo(Point { x: 9.27, y: 10.50 }),
                PathEl::CurveTo(
                    Point { x: 6.01, y: 14.06 },
                    Point { x: 4.00, y: 18.79 },
                    Point { x: 4.00, y: 24.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 4.00, y: 25.37 },
                    Point { x: 4.14, y: 26.71 },
                    Point { x: 4.40, y: 28.00 },
                ),
                PathEl::LineTo(Point { x: 19.38, y: 28.00 }),
                PathEl::LineTo(Point { x: 17.07, y: 24.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 4.92, y: 30.00 }),
                PathEl::CurveTo(
                    Point { x: 6.76, y: 35.85 },
                    Point { x: 11.22, y: 40.52 },
                    Point { x: 16.91, y: 42.68 },
                ),
                PathEl::LineTo(Point { x: 24.23, y: 30.00 }),
                PathEl::LineTo(Point { x: 4.92, y: 30.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 27.46, y: 30.00 }),
                PathEl::LineTo(Point { x: 19.66, y: 43.51 }),
                PathEl::CurveTo(
                    Point { x: 21.06, y: 43.82 },
                    Point { x: 22.51, y: 44.00 },
                    Point { x: 24.00, y: 44.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 28.80, y: 44.00 },
                    Point { x: 33.19, y: 42.31 },
                    Point { x: 36.64, y: 39.49 },
                ),
                PathEl::LineTo(Point { x: 29.31, y: 26.80 }),
                PathEl::LineTo(Point { x: 27.46, y: 30.00 }),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct ViewCompact {
    size: f64,
    color: Color,
}

impl ViewCompact {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for ViewCompact {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 6.00, y: 38.00 }),
                PathEl::LineTo(Point { x: 18.00, y: 38.00 }),
                PathEl::LineTo(Point { x: 18.00, y: 24.00 }),
                PathEl::LineTo(Point { x: 6.00, y: 24.00 }),
                PathEl::LineTo(Point { x: 6.00, y: 38.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 20.00, y: 38.00 }),
                PathEl::LineTo(Point { x: 44.00, y: 38.00 }),
                PathEl::LineTo(Point { x: 44.00, y: 24.00 }),
                PathEl::LineTo(Point { x: 20.00, y: 24.00 }),
                PathEl::LineTo(Point { x: 20.00, y: 38.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 6.00, y: 10.00 }),
                PathEl::LineTo(Point { x: 6.00, y: 22.00 }),
                PathEl::LineTo(Point { x: 44.00, y: 22.00 }),
                PathEl::LineTo(Point { x: 44.00, y: 10.00 }),
                PathEl::LineTo(Point { x: 6.00, y: 10.00 }),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct CallMissed {
    size: f64,
    color: Color,
}

impl CallMissed {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for CallMissed {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 39.17, y: 14.00 }),
                PathEl::LineTo(Point { x: 24.00, y: 29.17 }),
                PathEl::LineTo(Point { x: 12.83, y: 18.00 }),
                PathEl::LineTo(Point { x: 22.00, y: 18.00 }),
                PathEl::LineTo(Point { x: 22.00, y: 14.00 }),
                PathEl::LineTo(Point { x: 6.00, y: 14.00 }),
                PathEl::LineTo(Point { x: 6.00, y: 30.00 }),
                PathEl::LineTo(Point { x: 10.00, y: 30.00 }),
                PathEl::LineTo(Point { x: 10.00, y: 20.83 }),
                PathEl::LineTo(Point { x: 24.00, y: 34.83 }),
                PathEl::LineTo(Point { x: 42.00, y: 16.83 }),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct LocalPostOffice {
    size: f64,
    color: Color,
}

impl LocalPostOffice {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for LocalPostOffice {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 40.00, y: 8.00 }),
                PathEl::LineTo(Point { x: 8.00, y: 8.00 }),
                PathEl::CurveTo(
                    Point { x: 5.79, y: 8.00 },
                    Point { x: 4.02, y: 9.79 },
                    Point { x: 4.02, y: 12.00 },
                ),
                PathEl::LineTo(Point { x: 4.00, y: 36.00 }),
                PathEl::CurveTo(
                    Point { x: 4.00, y: 38.21 },
                    Point { x: 5.79, y: 40.00 },
                    Point { x: 8.00, y: 40.00 },
                ),
                PathEl::LineTo(Point { x: 40.00, y: 40.00 }),
                PathEl::CurveTo(
                    Point { x: 42.21, y: 40.00 },
                    Point { x: 44.00, y: 38.21 },
                    Point { x: 44.00, y: 36.00 },
                ),
                PathEl::LineTo(Point { x: 44.00, y: 12.00 }),
                PathEl::CurveTo(
                    Point { x: 44.00, y: 9.79 },
                    Point { x: 42.21, y: 8.00 },
                    Point { x: 40.00, y: 8.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 40.00, y: 16.00 }),
                PathEl::LineTo(Point { x: 24.00, y: 26.00 }),
                PathEl::LineTo(Point { x: 8.00, y: 16.00 }),
                PathEl::LineTo(Point { x: 8.00, y: 12.00 }),
                PathEl::LineTo(Point { x: 24.00, y: 22.00 }),
                PathEl::LineTo(Point { x: 40.00, y: 12.00 }),
                PathEl::LineTo(Point { x: 40.00, y: 16.00 }),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct PhotoSizeSelectSmall {
    size: f64,
    color: Color,
}

impl PhotoSizeSelectSmall {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for PhotoSizeSelectSmall {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 24.0, height / 24.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 23.00, y: 15.00 }),
                PathEl::LineTo(Point { x: 21.00, y: 15.00 }),
                PathEl::LineTo(Point { x: 21.00, y: 17.00 }),
                PathEl::LineTo(Point { x: 23.00, y: 17.00 }),
                PathEl::LineTo(Point { x: 23.00, y: 15.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 23.00, y: 11.00 }),
                PathEl::LineTo(Point { x: 21.00, y: 11.00 }),
                PathEl::LineTo(Point { x: 21.00, y: 13.00 }),
                PathEl::LineTo(Point { x: 23.00, y: 13.00 }),
                PathEl::LineTo(Point { x: 23.00, y: 11.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 23.00, y: 19.00 }),
                PathEl::LineTo(Point { x: 21.00, y: 19.00 }),
                PathEl::LineTo(Point { x: 21.00, y: 21.00 }),
                PathEl::CurveTo(
                    Point { x: 22.00, y: 21.00 },
                    Point { x: 23.00, y: 20.00 },
                    Point { x: 23.00, y: 19.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 15.00, y: 3.00 }),
                PathEl::LineTo(Point { x: 13.00, y: 3.00 }),
                PathEl::LineTo(Point { x: 13.00, y: 5.00 }),
                PathEl::LineTo(Point { x: 15.00, y: 5.00 }),
                PathEl::LineTo(Point { x: 15.00, y: 3.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 23.00, y: 7.00 }),
                PathEl::LineTo(Point { x: 21.00, y: 7.00 }),
                PathEl::LineTo(Point { x: 21.00, y: 9.00 }),
                PathEl::LineTo(Point { x: 23.00, y: 9.00 }),
                PathEl::LineTo(Point { x: 23.00, y: 7.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 21.00, y: 3.00 }),
                PathEl::LineTo(Point { x: 21.00, y: 5.00 }),
                PathEl::LineTo(Point { x: 23.00, y: 5.00 }),
                PathEl::CurveTo(
                    Point { x: 23.00, y: 4.00 },
                    Point { x: 22.00, y: 3.00 },
                    Point { x: 21.00, y: 3.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 3.00, y: 21.00 }),
                PathEl::LineTo(Point { x: 11.00, y: 21.00 }),
                PathEl::LineTo(Point { x: 11.00, y: 15.00 }),
                PathEl::LineTo(Point { x: 1.00, y: 15.00 }),
                PathEl::LineTo(Point { x: 1.00, y: 19.00 }),
                PathEl::CurveTo(
                    Point { x: 1.00, y: 20.10 },
                    Point { x: 1.90, y: 21.00 },
                    Point { x: 3.00, y: 21.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 3.00, y: 7.00 }),
                PathEl::LineTo(Point { x: 1.00, y: 7.00 }),
                PathEl::LineTo(Point { x: 1.00, y: 9.00 }),
                PathEl::LineTo(Point { x: 3.00, y: 9.00 }),
                PathEl::LineTo(Point { x: 3.00, y: 7.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 15.00, y: 19.00 }),
                PathEl::LineTo(Point { x: 13.00, y: 19.00 }),
                PathEl::LineTo(Point { x: 13.00, y: 21.00 }),
                PathEl::LineTo(Point { x: 15.00, y: 21.00 }),
                PathEl::LineTo(Point { x: 15.00, y: 19.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 19.00, y: 3.00 }),
                PathEl::LineTo(Point { x: 17.00, y: 3.00 }),
                PathEl::LineTo(Point { x: 17.00, y: 5.00 }),
                PathEl::LineTo(Point { x: 19.00, y: 5.00 }),
                PathEl::LineTo(Point { x: 19.00, y: 3.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 19.00, y: 19.00 }),
                PathEl::LineTo(Point { x: 17.00, y: 19.00 }),
                PathEl::LineTo(Point { x: 17.00, y: 21.00 }),
                PathEl::LineTo(Point { x: 19.00, y: 21.00 }),
                PathEl::LineTo(Point { x: 19.00, y: 19.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 3.00, y: 3.00 }),
                PathEl::CurveTo(
                    Point { x: 2.00, y: 3.00 },
                    Point { x: 1.00, y: 4.00 },
                    Point { x: 1.00, y: 5.00 },
                ),
                PathEl::LineTo(Point { x: 3.00, y: 5.00 }),
                PathEl::LineTo(Point { x: 3.00, y: 3.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 3.00, y: 11.00 }),
                PathEl::LineTo(Point { x: 1.00, y: 11.00 }),
                PathEl::LineTo(Point { x: 1.00, y: 13.00 }),
                PathEl::LineTo(Point { x: 3.00, y: 13.00 }),
                PathEl::LineTo(Point { x: 3.00, y: 11.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 11.00, y: 3.00 }),
                PathEl::LineTo(Point { x: 9.00, y: 3.00 }),
                PathEl::LineTo(Point { x: 9.00, y: 5.00 }),
                PathEl::LineTo(Point { x: 11.00, y: 5.00 }),
                PathEl::LineTo(Point { x: 11.00, y: 3.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 7.00, y: 3.00 }),
                PathEl::LineTo(Point { x: 5.00, y: 3.00 }),
                PathEl::LineTo(Point { x: 5.00, y: 5.00 }),
                PathEl::LineTo(Point { x: 7.00, y: 5.00 }),
                PathEl::LineTo(Point { x: 7.00, y: 3.00 }),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct BorderStyle {
    size: f64,
    color: Color,
}

impl BorderStyle {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for BorderStyle {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 30.00, y: 42.00 }),
                PathEl::LineTo(Point { x: 34.00, y: 42.00 }),
                PathEl::LineTo(Point { x: 34.00, y: 38.00 }),
                PathEl::LineTo(Point { x: 30.00, y: 38.00 }),
                PathEl::LineTo(Point { x: 30.00, y: 42.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 38.00, y: 42.00 }),
                PathEl::LineTo(Point { x: 42.00, y: 42.00 }),
                PathEl::LineTo(Point { x: 42.00, y: 38.00 }),
                PathEl::LineTo(Point { x: 38.00, y: 38.00 }),
                PathEl::LineTo(Point { x: 38.00, y: 42.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 14.00, y: 42.00 }),
                PathEl::LineTo(Point { x: 18.00, y: 42.00 }),
                PathEl::LineTo(Point { x: 18.00, y: 38.00 }),
                PathEl::LineTo(Point { x: 14.00, y: 38.00 }),
                PathEl::LineTo(Point { x: 14.00, y: 42.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 22.00, y: 42.00 }),
                PathEl::LineTo(Point { x: 26.00, y: 42.00 }),
                PathEl::LineTo(Point { x: 26.00, y: 38.00 }),
                PathEl::LineTo(Point { x: 22.00, y: 38.00 }),
                PathEl::LineTo(Point { x: 22.00, y: 42.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 38.00, y: 34.00 }),
                PathEl::LineTo(Point { x: 42.00, y: 34.00 }),
                PathEl::LineTo(Point { x: 42.00, y: 30.00 }),
                PathEl::LineTo(Point { x: 38.00, y: 30.00 }),
                PathEl::LineTo(Point { x: 38.00, y: 34.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 38.00, y: 26.00 }),
                PathEl::LineTo(Point { x: 42.00, y: 26.00 }),
                PathEl::LineTo(Point { x: 42.00, y: 22.00 }),
                PathEl::LineTo(Point { x: 38.00, y: 22.00 }),
                PathEl::LineTo(Point { x: 38.00, y: 26.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 6.00, y: 6.00 }),
                PathEl::LineTo(Point { x: 6.00, y: 42.00 }),
                PathEl::LineTo(Point { x: 10.00, y: 42.00 }),
                PathEl::LineTo(Point { x: 10.00, y: 10.00 }),
                PathEl::LineTo(Point { x: 42.00, y: 10.00 }),
                PathEl::LineTo(Point { x: 42.00, y: 6.00 }),
                PathEl::LineTo(Point { x: 6.00, y: 6.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 38.00, y: 18.00 }),
                PathEl::LineTo(Point { x: 42.00, y: 18.00 }),
                PathEl::LineTo(Point { x: 42.00, y: 14.00 }),
                PathEl::LineTo(Point { x: 38.00, y: 14.00 }),
                PathEl::LineTo(Point { x: 38.00, y: 18.00 }),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct MusicNote {
    size: f64,
    color: Color,
}

impl MusicNote {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for MusicNote {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 24.00, y: 6.00 }),
                PathEl::LineTo(Point { x: 24.00, y: 27.11 }),
                PathEl::CurveTo(
                    Point { x: 22.82, y: 26.42 },
                    Point { x: 21.46, y: 26.00 },
                    Point { x: 20.00, y: 26.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 15.58, y: 26.00 },
                    Point { x: 12.00, y: 29.58 },
                    Point { x: 12.00, y: 34.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 12.00, y: 38.42 },
                    Point { x: 15.58, y: 42.00 },
                    Point { x: 20.00, y: 42.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 24.42, y: 42.00 },
                    Point { x: 28.00, y: 38.42 },
                    Point { x: 28.00, y: 34.00 },
                ),
                PathEl::LineTo(Point { x: 28.00, y: 14.00 }),
                PathEl::LineTo(Point { x: 36.00, y: 14.00 }),
                PathEl::LineTo(Point { x: 36.00, y: 6.00 }),
                PathEl::LineTo(Point { x: 24.00, y: 6.00 }),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct LocalMovies {
    size: f64,
    color: Color,
}

impl LocalMovies {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for LocalMovies {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 36.00, y: 6.00 }),
                PathEl::LineTo(Point { x: 36.00, y: 10.00 }),
                PathEl::LineTo(Point { x: 32.00, y: 10.00 }),
                PathEl::LineTo(Point { x: 32.00, y: 6.00 }),
                PathEl::LineTo(Point { x: 16.00, y: 6.00 }),
                PathEl::LineTo(Point { x: 16.00, y: 10.00 }),
                PathEl::LineTo(Point { x: 12.00, y: 10.00 }),
                PathEl::LineTo(Point { x: 12.00, y: 6.00 }),
                PathEl::LineTo(Point { x: 8.00, y: 6.00 }),
                PathEl::LineTo(Point { x: 8.00, y: 42.00 }),
                PathEl::LineTo(Point { x: 12.00, y: 42.00 }),
                PathEl::LineTo(Point { x: 12.00, y: 38.00 }),
                PathEl::LineTo(Point { x: 16.00, y: 38.00 }),
                PathEl::LineTo(Point { x: 16.00, y: 42.00 }),
                PathEl::LineTo(Point { x: 32.00, y: 42.00 }),
                PathEl::LineTo(Point { x: 32.00, y: 38.00 }),
                PathEl::LineTo(Point { x: 36.00, y: 38.00 }),
                PathEl::LineTo(Point { x: 36.00, y: 42.00 }),
                PathEl::LineTo(Point { x: 40.00, y: 42.00 }),
                PathEl::LineTo(Point { x: 40.00, y: 6.00 }),
                PathEl::LineTo(Point { x: 36.00, y: 6.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 16.00, y: 34.00 }),
                PathEl::LineTo(Point { x: 12.00, y: 34.00 }),
                PathEl::LineTo(Point { x: 12.00, y: 30.00 }),
                PathEl::LineTo(Point { x: 16.00, y: 30.00 }),
                PathEl::LineTo(Point { x: 16.00, y: 34.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 16.00, y: 26.00 }),
                PathEl::LineTo(Point { x: 12.00, y: 26.00 }),
                PathEl::LineTo(Point { x: 12.00, y: 22.00 }),
                PathEl::LineTo(Point { x: 16.00, y: 22.00 }),
                PathEl::LineTo(Point { x: 16.00, y: 26.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 16.00, y: 18.00 }),
                PathEl::LineTo(Point { x: 12.00, y: 18.00 }),
                PathEl::LineTo(Point { x: 12.00, y: 14.00 }),
                PathEl::LineTo(Point { x: 16.00, y: 14.00 }),
                PathEl::LineTo(Point { x: 16.00, y: 18.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 36.00, y: 34.00 }),
                PathEl::LineTo(Point { x: 32.00, y: 34.00 }),
                PathEl::LineTo(Point { x: 32.00, y: 30.00 }),
                PathEl::LineTo(Point { x: 36.00, y: 30.00 }),
                PathEl::LineTo(Point { x: 36.00, y: 34.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 36.00, y: 26.00 }),
                PathEl::LineTo(Point { x: 32.00, y: 26.00 }),
                PathEl::LineTo(Point { x: 32.00, y: 22.00 }),
                PathEl::LineTo(Point { x: 36.00, y: 22.00 }),
                PathEl::LineTo(Point { x: 36.00, y: 26.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 36.00, y: 18.00 }),
                PathEl::LineTo(Point { x: 32.00, y: 18.00 }),
                PathEl::LineTo(Point { x: 32.00, y: 14.00 }),
                PathEl::LineTo(Point { x: 36.00, y: 14.00 }),
                PathEl::LineTo(Point { x: 36.00, y: 18.00 }),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct ExposurePlus1 {
    size: f64,
    color: Color,
}

impl ExposurePlus1 {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for ExposurePlus1 {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 20.00, y: 14.00 }),
                PathEl::LineTo(Point { x: 16.00, y: 14.00 }),
                PathEl::LineTo(Point { x: 16.00, y: 22.00 }),
                PathEl::LineTo(Point { x: 8.00, y: 22.00 }),
                PathEl::LineTo(Point { x: 8.00, y: 26.00 }),
                PathEl::LineTo(Point { x: 16.00, y: 26.00 }),
                PathEl::LineTo(Point { x: 16.00, y: 34.00 }),
                PathEl::LineTo(Point { x: 20.00, y: 34.00 }),
                PathEl::LineTo(Point { x: 20.00, y: 26.00 }),
                PathEl::LineTo(Point { x: 28.00, y: 26.00 }),
                PathEl::LineTo(Point { x: 28.00, y: 22.00 }),
                PathEl::LineTo(Point { x: 20.00, y: 22.00 }),
                PathEl::LineTo(Point { x: 20.00, y: 14.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 40.00, y: 36.00 }),
                PathEl::LineTo(Point { x: 36.00, y: 36.00 }),
                PathEl::LineTo(Point { x: 36.00, y: 14.75 }),
                PathEl::LineTo(Point { x: 30.00, y: 16.80 }),
                PathEl::LineTo(Point { x: 30.00, y: 13.40 }),
                PathEl::LineTo(Point { x: 39.40, y: 10.00 }),
                PathEl::LineTo(Point { x: 40.00, y: 10.00 }),
                PathEl::LineTo(Point { x: 40.00, y: 36.00 }),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct Filter1 {
    size: f64,
    color: Color,
}

impl Filter1 {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for Filter1 {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 6.00, y: 10.00 }),
                PathEl::LineTo(Point { x: 2.00, y: 10.00 }),
                PathEl::LineTo(Point { x: 2.00, y: 42.00 }),
                PathEl::CurveTo(
                    Point { x: 2.00, y: 44.21 },
                    Point { x: 3.79, y: 46.00 },
                    Point { x: 6.00, y: 46.00 },
                ),
                PathEl::LineTo(Point { x: 38.00, y: 46.00 }),
                PathEl::LineTo(Point { x: 38.00, y: 42.00 }),
                PathEl::LineTo(Point { x: 6.00, y: 42.00 }),
                PathEl::LineTo(Point { x: 6.00, y: 10.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 28.00, y: 30.00 }),
                PathEl::LineTo(Point { x: 32.00, y: 30.00 }),
                PathEl::LineTo(Point { x: 32.00, y: 10.00 }),
                PathEl::LineTo(Point { x: 24.00, y: 10.00 }),
                PathEl::LineTo(Point { x: 24.00, y: 14.00 }),
                PathEl::LineTo(Point { x: 28.00, y: 14.00 }),
                PathEl::LineTo(Point { x: 28.00, y: 30.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 42.00, y: 2.00 }),
                PathEl::LineTo(Point { x: 14.00, y: 2.00 }),
                PathEl::CurveTo(
                    Point { x: 11.79, y: 2.00 },
                    Point { x: 10.00, y: 3.79 },
                    Point { x: 10.00, y: 6.00 },
                ),
                PathEl::LineTo(Point { x: 10.00, y: 34.00 }),
                PathEl::CurveTo(
                    Point { x: 10.00, y: 36.21 },
                    Point { x: 11.79, y: 38.00 },
                    Point { x: 14.00, y: 38.00 },
                ),
                PathEl::LineTo(Point { x: 42.00, y: 38.00 }),
                PathEl::CurveTo(
                    Point { x: 44.21, y: 38.00 },
                    Point { x: 46.00, y: 36.21 },
                    Point { x: 46.00, y: 34.00 },
                ),
                PathEl::LineTo(Point { x: 46.00, y: 6.00 }),
                PathEl::CurveTo(
                    Point { x: 46.00, y: 3.79 },
                    Point { x: 44.21, y: 2.00 },
                    Point { x: 42.00, y: 2.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 42.00, y: 34.00 }),
                PathEl::LineTo(Point { x: 14.00, y: 34.00 }),
                PathEl::LineTo(Point { x: 14.00, y: 6.00 }),
                PathEl::LineTo(Point { x: 42.00, y: 6.00 }),
                PathEl::LineTo(Point { x: 42.00, y: 34.00 }),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct FormatColorFill {
    size: f64,
    color: Color,
}

impl FormatColorFill {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for FormatColorFill {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 33.12, y: 17.88 }),
                PathEl::LineTo(Point { x: 15.24, y: 0.00 }),
                PathEl::LineTo(Point { x: 12.41, y: 2.83 }),
                PathEl::LineTo(Point { x: 17.17, y: 7.59 }),
                PathEl::LineTo(Point { x: 6.88, y: 17.88 }),
                PathEl::CurveTo(
                    Point { x: 5.71, y: 19.05 },
                    Point { x: 5.71, y: 20.95 },
                    Point { x: 6.88, y: 22.12 },
                ),
                PathEl::LineTo(Point { x: 17.88, y: 33.12 }),
                PathEl::CurveTo(
                    Point { x: 18.46, y: 33.71 },
                    Point { x: 19.23, y: 34.00 },
                    Point { x: 20.00, y: 34.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 20.77, y: 34.00 },
                    Point { x: 21.54, y: 33.71 },
                    Point { x: 22.12, y: 33.12 },
                ),
                PathEl::LineTo(Point { x: 33.12, y: 22.12 }),
                PathEl::CurveTo(
                    Point { x: 34.29, y: 20.95 },
                    Point { x: 34.29, y: 19.05 },
                    Point { x: 33.12, y: 17.88 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 10.41, y: 20.00 }),
                PathEl::LineTo(Point { x: 20.00, y: 10.42 }),
                PathEl::LineTo(Point { x: 29.59, y: 20.00 }),
                PathEl::LineTo(Point { x: 10.41, y: 20.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 38.00, y: 23.00 }),
                PathEl::CurveTo(
                    Point { x: 38.00, y: 23.00 },
                    Point { x: 34.00, y: 27.33 },
                    Point { x: 34.00, y: 30.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 34.00, y: 32.21 },
                    Point { x: 35.79, y: 34.00 },
                    Point { x: 38.00, y: 34.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 40.21, y: 34.00 },
                    Point { x: 42.00, y: 32.21 },
                    Point { x: 42.00, y: 30.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 42.00, y: 27.33 },
                    Point { x: 38.00, y: 23.00 },
                    Point { x: 38.00, y: 23.00 },
                ),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 0.00, y: 40.00 }),
                PathEl::LineTo(Point { x: 48.00, y: 40.00 }),
                PathEl::LineTo(Point { x: 48.00, y: 48.00 }),
                PathEl::LineTo(Point { x: 0.00, y: 48.00 }),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct DoNotDisturb {
    size: f64,
    color: Color,
}

impl DoNotDisturb {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for DoNotDisturb {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 24.00, y: 4.00 }),
                PathEl::CurveTo(
                    Point { x: 12.95, y: 4.00 },
                    Point { x: 4.00, y: 12.95 },
                    Point { x: 4.00, y: 24.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 4.00, y: 35.05 },
                    Point { x: 12.95, y: 44.00 },
                    Point { x: 24.00, y: 44.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 35.05, y: 44.00 },
                    Point { x: 44.00, y: 35.05 },
                    Point { x: 44.00, y: 24.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 44.00, y: 12.95 },
                    Point { x: 35.05, y: 4.00 },
                    Point { x: 24.00, y: 4.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 24.00, y: 40.00 }),
                PathEl::CurveTo(
                    Point { x: 15.16, y: 40.00 },
                    Point { x: 8.00, y: 32.84 },
                    Point { x: 8.00, y: 24.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 8.00, y: 20.30 },
                    Point { x: 9.27, y: 16.91 },
                    Point { x: 11.37, y: 14.20 },
                ),
                PathEl::LineTo(Point { x: 33.80, y: 36.63 }),
                PathEl::CurveTo(
                    Point { x: 31.09, y: 38.73 },
                    Point { x: 27.70, y: 40.00 },
                    Point { x: 24.00, y: 40.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 36.63, y: 33.80 }),
                PathEl::LineTo(Point { x: 14.20, y: 11.37 }),
                PathEl::CurveTo(
                    Point { x: 16.91, y: 9.27 },
                    Point { x: 20.30, y: 8.00 },
                    Point { x: 24.00, y: 8.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 32.84, y: 8.00 },
                    Point { x: 40.00, y: 15.16 },
                    Point { x: 40.00, y: 24.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 40.00, y: 27.70 },
                    Point { x: 38.73, y: 31.09 },
                    Point { x: 36.63, y: 33.80 },
                ),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct LocalParking {
    size: f64,
    color: Color,
}

impl LocalParking {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for LocalParking {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 26.00, y: 6.00 }),
                PathEl::LineTo(Point { x: 12.00, y: 6.00 }),
                PathEl::LineTo(Point { x: 12.00, y: 42.00 }),
                PathEl::LineTo(Point { x: 20.00, y: 42.00 }),
                PathEl::LineTo(Point { x: 20.00, y: 30.00 }),
                PathEl::LineTo(Point { x: 26.00, y: 30.00 }),
                PathEl::CurveTo(
                    Point { x: 32.63, y: 30.00 },
                    Point { x: 38.00, y: 24.63 },
                    Point { x: 38.00, y: 18.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 38.00, y: 11.37 },
                    Point { x: 32.63, y: 6.00 },
                    Point { x: 26.00, y: 6.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 26.40, y: 22.00 }),
                PathEl::LineTo(Point { x: 20.00, y: 22.00 }),
                PathEl::LineTo(Point { x: 20.00, y: 14.00 }),
                PathEl::LineTo(Point { x: 26.40, y: 14.00 }),
                PathEl::CurveTo(
                    Point { x: 28.61, y: 14.00 },
                    Point { x: 30.40, y: 15.79 },
                    Point { x: 30.40, y: 18.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 30.40, y: 20.21 },
                    Point { x: 28.61, y: 22.00 },
                    Point { x: 26.40, y: 22.00 },
                ),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct Pause {
    size: f64,
    color: Color,
}

impl Pause {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for Pause {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 12.00, y: 38.00 }),
                PathEl::LineTo(Point { x: 20.00, y: 38.00 }),
                PathEl::LineTo(Point { x: 20.00, y: 10.00 }),
                PathEl::LineTo(Point { x: 12.00, y: 10.00 }),
                PathEl::LineTo(Point { x: 12.00, y: 38.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 28.00, y: 10.00 }),
                PathEl::LineTo(Point { x: 28.00, y: 38.00 }),
                PathEl::LineTo(Point { x: 36.00, y: 38.00 }),
                PathEl::LineTo(Point { x: 36.00, y: 10.00 }),
                PathEl::LineTo(Point { x: 28.00, y: 10.00 }),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct ExposureNeg2 {
    size: f64,
    color: Color,
}

impl ExposureNeg2 {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for ExposureNeg2 {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 30.09, y: 32.58 }),
                PathEl::LineTo(Point { x: 35.82, y: 26.45 }),
                PathEl::CurveTo(
                    Point { x: 36.57, y: 25.66 },
                    Point { x: 37.26, y: 24.88 },
                    Point { x: 37.90, y: 24.10 },
                ),
                PathEl::CurveTo(
                    Point { x: 38.53, y: 23.32 },
                    Point { x: 39.08, y: 22.54 },
                    Point { x: 39.54, y: 21.77 },
                ),
                PathEl::CurveTo(
                    Point { x: 40.00, y: 20.99 },
                    Point { x: 40.36, y: 20.22 },
                    Point { x: 40.61, y: 19.44 },
                ),
                PathEl::CurveTo(
                    Point { x: 40.87, y: 18.66 },
                    Point { x: 41.00, y: 17.87 },
                    Point { x: 41.00, y: 17.07 },
                ),
                PathEl::CurveTo(
                    Point { x: 41.00, y: 16.00 },
                    Point { x: 40.82, y: 15.03 },
                    Point { x: 40.46, y: 14.15 },
                ),
                PathEl::CurveTo(
                    Point { x: 40.10, y: 13.28 },
                    Point { x: 39.58, y: 12.53 },
                    Point { x: 38.89, y: 11.92 },
                ),
                PathEl::CurveTo(
                    Point { x: 38.20, y: 11.31 },
                    Point { x: 37.36, y: 10.84 },
                    Point { x: 36.36, y: 10.50 },
                ),
                PathEl::CurveTo(
                    Point { x: 35.36, y: 10.17 },
                    Point { x: 34.22, y: 10.00 },
                    Point { x: 32.94, y: 10.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 31.56, y: 10.00 },
                    Point { x: 30.32, y: 10.21 },
                    Point { x: 29.24, y: 10.64 },
                ),
                PathEl::CurveTo(
                    Point { x: 28.16, y: 11.07 },
                    Point { x: 27.25, y: 11.65 },
                    Point { x: 26.51, y: 12.39 },
                ),
                PathEl::CurveTo(
                    Point { x: 25.77, y: 13.13 },
                    Point { x: 25.21, y: 14.00 },
                    Point { x: 24.83, y: 14.99 },
                ),
                PathEl::CurveTo(
                    Point { x: 24.47, y: 15.93 },
                    Point { x: 24.29, y: 16.94 },
                    Point { x: 24.27, y: 18.00 },
                ),
                PathEl::LineTo(Point { x: 28.55, y: 18.00 }),
                PathEl::CurveTo(
                    Point { x: 28.56, y: 17.38 },
                    Point { x: 28.64, y: 16.79 },
                    Point { x: 28.81, y: 16.26 },
                ),
                PathEl::CurveTo(
                    Point { x: 28.99, y: 15.68 },
                    Point { x: 29.26, y: 15.18 },
                    Point { x: 29.62, y: 14.76 },
                ),
                PathEl::CurveTo(
                    Point { x: 29.98, y: 14.34 },
                    Point { x: 30.43, y: 14.02 },
                    Point { x: 30.97, y: 13.78 },
                ),
                PathEl::CurveTo(
                    Point { x: 31.52, y: 13.55 },
                    Point { x: 32.16, y: 13.43 },
                    Point { x: 32.90, y: 13.43 },
                ),
                PathEl::CurveTo(
                    Point { x: 33.51, y: 13.43 },
                    Point { x: 34.05, y: 13.53 },
                    Point { x: 34.52, y: 13.74 },
                ),
                PathEl::CurveTo(
                    Point { x: 34.99, y: 13.95 },
                    Point { x: 35.39, y: 14.23 },
                    Point { x: 35.71, y: 14.59 },
                ),
                PathEl::CurveTo(
                    Point { x: 36.03, y: 14.95 },
                    Point { x: 36.28, y: 15.39 },
                    Point { x: 36.45, y: 15.88 },
                ),
                PathEl::CurveTo(
                    Point { x: 36.62, y: 16.38 },
                    Point { x: 36.70, y: 16.92 },
                    Point { x: 36.70, y: 17.51 },
                ),
                PathEl::CurveTo(
                    Point { x: 36.70, y: 17.94 },
                    Point { x: 36.64, y: 18.38 },
                    Point { x: 36.53, y: 18.81 },
                ),
                PathEl::CurveTo(
                    Point { x: 36.42, y: 19.24 },
                    Point { x: 36.23, y: 19.71 },
                    Point { x: 35.95, y: 20.21 },
                ),
                PathEl::CurveTo(
                    Point { x: 35.67, y: 20.71 },
                    Point { x: 35.30, y: 21.26 },
                    Point { x: 34.84, y: 21.87 },
                ),
                PathEl::CurveTo(
                    Point { x: 34.38, y: 22.47 },
                    Point { x: 33.79, y: 23.16 },
                    Point { x: 33.09, y: 23.94 },
                ),
                PathEl::LineTo(Point { x: 24.74, y: 33.05 }),
                PathEl::LineTo(Point { x: 24.74, y: 36.00 }),
                PathEl::LineTo(Point { x: 42.00, y: 36.00 }),
                PathEl::LineTo(Point { x: 42.00, y: 32.58 }),
                PathEl::LineTo(Point { x: 30.09, y: 32.58 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 4.00, y: 22.00 }),
                PathEl::LineTo(Point { x: 4.00, y: 26.00 }),
                PathEl::LineTo(Point { x: 20.00, y: 26.00 }),
                PathEl::LineTo(Point { x: 20.00, y: 22.00 }),
                PathEl::LineTo(Point { x: 4.00, y: 22.00 }),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct InsertChart {
    size: f64,
    color: Color,
}

impl InsertChart {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for InsertChart {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 38.00, y: 6.00 }),
                PathEl::LineTo(Point { x: 10.00, y: 6.00 }),
                PathEl::CurveTo(
                    Point { x: 7.79, y: 6.00 },
                    Point { x: 6.00, y: 7.79 },
                    Point { x: 6.00, y: 10.00 },
                ),
                PathEl::LineTo(Point { x: 6.00, y: 38.00 }),
                PathEl::CurveTo(
                    Point { x: 6.00, y: 40.21 },
                    Point { x: 7.79, y: 42.00 },
                    Point { x: 10.00, y: 42.00 },
                ),
                PathEl::LineTo(Point { x: 38.00, y: 42.00 }),
                PathEl::CurveTo(
                    Point { x: 40.21, y: 42.00 },
                    Point { x: 42.00, y: 40.21 },
                    Point { x: 42.00, y: 38.00 },
                ),
                PathEl::LineTo(Point { x: 42.00, y: 10.00 }),
                PathEl::CurveTo(
                    Point { x: 42.00, y: 7.79 },
                    Point { x: 40.21, y: 6.00 },
                    Point { x: 38.00, y: 6.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 18.00, y: 34.00 }),
                PathEl::LineTo(Point { x: 14.00, y: 34.00 }),
                PathEl::LineTo(Point { x: 14.00, y: 20.00 }),
                PathEl::LineTo(Point { x: 18.00, y: 20.00 }),
                PathEl::LineTo(Point { x: 18.00, y: 34.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 26.00, y: 34.00 }),
                PathEl::LineTo(Point { x: 22.00, y: 34.00 }),
                PathEl::LineTo(Point { x: 22.00, y: 14.00 }),
                PathEl::LineTo(Point { x: 26.00, y: 14.00 }),
                PathEl::LineTo(Point { x: 26.00, y: 34.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 34.00, y: 34.00 }),
                PathEl::LineTo(Point { x: 30.00, y: 34.00 }),
                PathEl::LineTo(Point { x: 30.00, y: 26.00 }),
                PathEl::LineTo(Point { x: 34.00, y: 26.00 }),
                PathEl::LineTo(Point { x: 34.00, y: 34.00 }),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct BatteryChargingFull {
    size: f64,
    color: Color,
}

impl BatteryChargingFull {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for BatteryChargingFull {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 31.33, y: 8.00 }),
                PathEl::LineTo(Point { x: 28.00, y: 8.00 }),
                PathEl::LineTo(Point { x: 28.00, y: 4.00 }),
                PathEl::LineTo(Point { x: 20.00, y: 4.00 }),
                PathEl::LineTo(Point { x: 20.00, y: 8.00 }),
                PathEl::LineTo(Point { x: 16.67, y: 8.00 }),
                PathEl::CurveTo(
                    Point { x: 15.19, y: 8.00 },
                    Point { x: 14.00, y: 9.19 },
                    Point { x: 14.00, y: 10.67 },
                ),
                PathEl::LineTo(Point { x: 14.00, y: 41.34 }),
                PathEl::CurveTo(
                    Point { x: 14.00, y: 42.81 },
                    Point { x: 15.19, y: 44.01 },
                    Point { x: 16.67, y: 44.01 },
                ),
                PathEl::LineTo(Point { x: 31.34, y: 44.01 }),
                PathEl::CurveTo(
                    Point { x: 32.81, y: 44.01 },
                    Point { x: 34.01, y: 42.82 },
                    Point { x: 34.01, y: 41.34 },
                ),
                PathEl::LineTo(Point { x: 34.01, y: 10.67 }),
                PathEl::CurveTo(
                    Point { x: 34.00, y: 9.19 },
                    Point { x: 32.81, y: 8.00 },
                    Point { x: 31.33, y: 8.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 22.00, y: 40.00 }),
                PathEl::LineTo(Point { x: 22.00, y: 29.00 }),
                PathEl::LineTo(Point { x: 18.00, y: 29.00 }),
                PathEl::LineTo(Point { x: 26.00, y: 14.00 }),
                PathEl::LineTo(Point { x: 26.00, y: 25.00 }),
                PathEl::LineTo(Point { x: 30.00, y: 25.00 }),
                PathEl::LineTo(Point { x: 22.00, y: 40.00 }),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct Functions {
    size: f64,
    color: Color,
}

impl Functions {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for Functions {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 36.00, y: 8.00 }),
                PathEl::LineTo(Point { x: 12.00, y: 8.00 }),
                PathEl::LineTo(Point { x: 12.00, y: 12.00 }),
                PathEl::LineTo(Point { x: 25.00, y: 24.00 }),
                PathEl::LineTo(Point { x: 12.00, y: 36.00 }),
                PathEl::LineTo(Point { x: 12.00, y: 40.00 }),
                PathEl::LineTo(Point { x: 36.00, y: 40.00 }),
                PathEl::LineTo(Point { x: 36.00, y: 34.00 }),
                PathEl::LineTo(Point { x: 22.00, y: 34.00 }),
                PathEl::LineTo(Point { x: 32.00, y: 24.00 }),
                PathEl::LineTo(Point { x: 22.00, y: 14.00 }),
                PathEl::LineTo(Point { x: 36.00, y: 14.00 }),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct WrapText {
    size: f64,
    color: Color,
}

impl WrapText {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for WrapText {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 8.00, y: 38.00 }),
                PathEl::LineTo(Point { x: 20.00, y: 38.00 }),
                PathEl::LineTo(Point { x: 20.00, y: 34.00 }),
                PathEl::LineTo(Point { x: 8.00, y: 34.00 }),
                PathEl::LineTo(Point { x: 8.00, y: 38.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 40.00, y: 10.00 }),
                PathEl::LineTo(Point { x: 8.00, y: 10.00 }),
                PathEl::LineTo(Point { x: 8.00, y: 14.00 }),
                PathEl::LineTo(Point { x: 40.00, y: 14.00 }),
                PathEl::LineTo(Point { x: 40.00, y: 10.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 34.00, y: 22.00 }),
                PathEl::LineTo(Point { x: 8.00, y: 22.00 }),
                PathEl::LineTo(Point { x: 8.00, y: 26.00 }),
                PathEl::LineTo(Point { x: 34.50, y: 26.00 }),
                PathEl::CurveTo(
                    Point { x: 36.71, y: 26.00 },
                    Point { x: 38.50, y: 27.79 },
                    Point { x: 38.50, y: 30.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 38.50, y: 32.21 },
                    Point { x: 36.71, y: 34.00 },
                    Point { x: 34.50, y: 34.00 },
                ),
                PathEl::LineTo(Point { x: 30.00, y: 34.00 }),
                PathEl::LineTo(Point { x: 30.00, y: 30.00 }),
                PathEl::LineTo(Point { x: 24.00, y: 36.00 }),
                PathEl::LineTo(Point { x: 30.00, y: 42.00 }),
                PathEl::LineTo(Point { x: 30.00, y: 38.00 }),
                PathEl::LineTo(Point { x: 34.00, y: 38.00 }),
                PathEl::CurveTo(
                    Point { x: 38.41, y: 38.00 },
                    Point { x: 42.00, y: 34.41 },
                    Point { x: 42.00, y: 30.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 42.00, y: 25.59 },
                    Point { x: 38.41, y: 22.00 },
                    Point { x: 34.00, y: 22.00 },
                ),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct Opacity {
    size: f64,
    color: Color,
}

impl Opacity {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for Opacity {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 35.32, y: 15.99 }),
                PathEl::LineTo(Point { x: 24.00, y: 4.69 }),
                PathEl::LineTo(Point { x: 12.68, y: 15.99 }),
                PathEl::CurveTo(
                    Point { x: 9.56, y: 19.11 },
                    Point { x: 8.00, y: 23.27 },
                    Point { x: 8.00, y: 27.27 },
                ),
                PathEl::CurveTo(
                    Point { x: 8.00, y: 31.27 },
                    Point { x: 9.56, y: 35.49 },
                    Point { x: 12.68, y: 38.61 },
                ),
                PathEl::CurveTo(
                    Point { x: 15.80, y: 41.73 },
                    Point { x: 19.90, y: 43.31 },
                    Point { x: 24.00, y: 43.31 },
                ),
                PathEl::CurveTo(
                    Point { x: 28.10, y: 43.31 },
                    Point { x: 32.20, y: 41.73 },
                    Point { x: 35.32, y: 38.61 },
                ),
                PathEl::CurveTo(
                    Point { x: 38.44, y: 35.49 },
                    Point { x: 40.00, y: 31.27 },
                    Point { x: 40.00, y: 27.27 },
                ),
                PathEl::CurveTo(
                    Point { x: 40.00, y: 23.27 },
                    Point { x: 38.44, y: 19.11 },
                    Point { x: 35.32, y: 15.99 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 12.00, y: 28.00 }),
                PathEl::CurveTo(
                    Point { x: 12.02, y: 24.00 },
                    Point { x: 13.24, y: 21.45 },
                    Point { x: 15.52, y: 19.19 },
                ),
                PathEl::LineTo(Point { x: 24.00, y: 10.53 }),
                PathEl::LineTo(Point { x: 32.48, y: 19.28 }),
                PathEl::CurveTo(
                    Point { x: 34.76, y: 21.55 },
                    Point { x: 35.98, y: 24.00 },
                    Point { x: 36.00, y: 28.00 },
                ),
                PathEl::LineTo(Point { x: 12.00, y: 28.00 }),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct NotificationsOff {
    size: f64,
    color: Color,
}

impl NotificationsOff {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for NotificationsOff {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 40.00, y: 37.39 }),
                PathEl::LineTo(Point { x: 15.68, y: 12.30 }),
                PathEl::LineTo(Point { x: 10.55, y: 7.01 }),
                PathEl::LineTo(Point { x: 8.00, y: 9.55 }),
                PathEl::LineTo(Point { x: 13.60, y: 15.15 }),
                PathEl::LineTo(Point { x: 13.61, y: 15.16 }),
                PathEl::CurveTo(
                    Point { x: 12.56, y: 17.14 },
                    Point { x: 12.00, y: 19.48 },
                    Point { x: 12.00, y: 22.00 },
                ),
                PathEl::LineTo(Point { x: 12.00, y: 32.00 }),
                PathEl::LineTo(Point { x: 8.00, y: 36.00 }),
                PathEl::LineTo(Point { x: 8.00, y: 38.00 }),
                PathEl::LineTo(Point { x: 35.46, y: 38.00 }),
                PathEl::LineTo(Point { x: 39.46, y: 42.00 }),
                PathEl::LineTo(Point { x: 42.00, y: 39.45 }),
                PathEl::LineTo(Point { x: 40.00, y: 37.39 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 24.00, y: 44.00 }),
                PathEl::CurveTo(
                    Point { x: 26.21, y: 44.00 },
                    Point { x: 28.00, y: 42.21 },
                    Point { x: 28.00, y: 40.00 },
                ),
                PathEl::LineTo(Point { x: 20.00, y: 40.00 }),
                PathEl::CurveTo(
                    Point { x: 20.00, y: 42.21 },
                    Point { x: 21.79, y: 44.00 },
                    Point { x: 24.00, y: 44.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 36.00, y: 29.36 }),
                PathEl::LineTo(Point { x: 36.00, y: 22.00 }),
                PathEl::CurveTo(
                    Point { x: 36.00, y: 15.85 },
                    Point { x: 32.73, y: 10.72 },
                    Point { x: 27.00, y: 9.36 },
                ),
                PathEl::LineTo(Point { x: 27.00, y: 8.00 }),
                PathEl::CurveTo(
                    Point { x: 27.00, y: 6.34 },
                    Point { x: 25.66, y: 5.00 },
                    Point { x: 24.00, y: 5.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 22.34, y: 5.00 },
                    Point { x: 21.00, y: 6.34 },
                    Point { x: 21.00, y: 8.00 },
                ),
                PathEl::LineTo(Point { x: 21.00, y: 9.36 }),
                PathEl::CurveTo(
                    Point { x: 20.71, y: 9.43 },
                    Point { x: 20.43, y: 9.51 },
                    Point { x: 20.15, y: 9.60 },
                ),
                PathEl::CurveTo(
                    Point { x: 19.94, y: 9.67 },
                    Point { x: 19.74, y: 9.74 },
                    Point { x: 19.54, y: 9.82 },
                ),
                PathEl::CurveTo(
                    Point { x: 19.54, y: 9.82 },
                    Point { x: 19.53, y: 9.82 },
                    Point { x: 19.53, y: 9.83 },
                ),
                PathEl::CurveTo(
                    Point { x: 19.52, y: 9.83 },
                    Point { x: 19.51, y: 9.84 },
                    Point { x: 19.50, y: 9.84 },
                ),
                PathEl::CurveTo(
                    Point { x: 19.04, y: 10.02 },
                    Point { x: 18.59, y: 10.23 },
                    Point { x: 18.15, y: 10.46 },
                ),
                PathEl::CurveTo(
                    Point { x: 18.14, y: 10.46 },
                    Point { x: 18.13, y: 10.47 },
                    Point { x: 18.12, y: 10.47 },
                ),
                PathEl::LineTo(Point { x: 36.00, y: 29.36 }),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct InsertDriveFile {
    size: f64,
    color: Color,
}

impl InsertDriveFile {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for InsertDriveFile {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 12.00, y: 4.00 }),
                PathEl::CurveTo(
                    Point { x: 9.79, y: 4.00 },
                    Point { x: 8.02, y: 5.79 },
                    Point { x: 8.02, y: 8.00 },
                ),
                PathEl::LineTo(Point { x: 8.00, y: 40.00 }),
                PathEl::CurveTo(
                    Point { x: 8.00, y: 42.21 },
                    Point { x: 9.77, y: 44.00 },
                    Point { x: 11.98, y: 44.00 },
                ),
                PathEl::LineTo(Point { x: 36.00, y: 44.00 }),
                PathEl::CurveTo(
                    Point { x: 38.21, y: 44.00 },
                    Point { x: 40.00, y: 42.21 },
                    Point { x: 40.00, y: 40.00 },
                ),
                PathEl::LineTo(Point { x: 40.00, y: 16.00 }),
                PathEl::LineTo(Point { x: 28.00, y: 4.00 }),
                PathEl::LineTo(Point { x: 12.00, y: 4.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 26.00, y: 18.00 }),
                PathEl::LineTo(Point { x: 26.00, y: 7.00 }),
                PathEl::LineTo(Point { x: 37.00, y: 18.00 }),
                PathEl::LineTo(Point { x: 26.00, y: 18.00 }),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct MyLocation {
    size: f64,
    color: Color,
}

impl MyLocation {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for MyLocation {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 24.00, y: 16.00 }),
                PathEl::CurveTo(
                    Point { x: 19.58, y: 16.00 },
                    Point { x: 16.00, y: 19.58 },
                    Point { x: 16.00, y: 24.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 16.00, y: 28.42 },
                    Point { x: 19.58, y: 32.00 },
                    Point { x: 24.00, y: 32.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 28.42, y: 32.00 },
                    Point { x: 32.00, y: 28.42 },
                    Point { x: 32.00, y: 24.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 32.00, y: 19.58 },
                    Point { x: 28.42, y: 16.00 },
                    Point { x: 24.00, y: 16.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 41.88, y: 22.00 }),
                PathEl::CurveTo(
                    Point { x: 40.96, y: 13.66 },
                    Point { x: 34.34, y: 7.04 },
                    Point { x: 26.00, y: 6.12 },
                ),
                PathEl::LineTo(Point { x: 26.00, y: 2.00 }),
                PathEl::LineTo(Point { x: 22.00, y: 2.00 }),
                PathEl::LineTo(Point { x: 22.00, y: 6.12 }),
                PathEl::CurveTo(
                    Point { x: 13.66, y: 7.04 },
                    Point { x: 7.04, y: 13.66 },
                    Point { x: 6.12, y: 22.00 },
                ),
                PathEl::LineTo(Point { x: 2.00, y: 22.00 }),
                PathEl::LineTo(Point { x: 2.00, y: 26.00 }),
                PathEl::LineTo(Point { x: 6.12, y: 26.00 }),
                PathEl::CurveTo(
                    Point { x: 7.04, y: 34.34 },
                    Point { x: 13.66, y: 40.96 },
                    Point { x: 22.00, y: 41.88 },
                ),
                PathEl::LineTo(Point { x: 22.00, y: 46.00 }),
                PathEl::LineTo(Point { x: 26.00, y: 46.00 }),
                PathEl::LineTo(Point { x: 26.00, y: 41.88 }),
                PathEl::CurveTo(
                    Point { x: 34.34, y: 40.96 },
                    Point { x: 40.96, y: 34.34 },
                    Point { x: 41.88, y: 26.00 },
                ),
                PathEl::LineTo(Point { x: 46.00, y: 26.00 }),
                PathEl::LineTo(Point { x: 46.00, y: 22.00 }),
                PathEl::LineTo(Point { x: 41.88, y: 22.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 24.00, y: 38.00 }),
                PathEl::CurveTo(
                    Point { x: 16.27, y: 38.00 },
                    Point { x: 10.00, y: 31.73 },
                    Point { x: 10.00, y: 24.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 10.00, y: 16.27 },
                    Point { x: 16.27, y: 10.00 },
                    Point { x: 24.00, y: 10.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 31.73, y: 10.00 },
                    Point { x: 38.00, y: 16.27 },
                    Point { x: 38.00, y: 24.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 38.00, y: 31.73 },
                    Point { x: 31.73, y: 38.00 },
                    Point { x: 24.00, y: 38.00 },
                ),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct Audiotrack {
    size: f64,
    color: Color,
}

impl Audiotrack {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for Audiotrack {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 24.00, y: 6.00 }),
                PathEl::LineTo(Point { x: 24.00, y: 24.55 }),
                PathEl::CurveTo(
                    Point { x: 23.06, y: 24.22 },
                    Point { x: 22.06, y: 24.00 },
                    Point { x: 21.00, y: 24.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 16.03, y: 24.00 },
                    Point { x: 12.00, y: 28.03 },
                    Point { x: 12.00, y: 33.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 12.00, y: 37.97 },
                    Point { x: 16.03, y: 42.00 },
                    Point { x: 21.00, y: 42.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 25.63, y: 42.00 },
                    Point { x: 29.40, y: 38.49 },
                    Point { x: 29.90, y: 34.00 },
                ),
                PathEl::LineTo(Point { x: 30.00, y: 34.00 }),
                PathEl::LineTo(Point { x: 30.00, y: 12.00 }),
                PathEl::LineTo(Point { x: 38.00, y: 12.00 }),
                PathEl::LineTo(Point { x: 38.00, y: 6.00 }),
                PathEl::LineTo(Point { x: 24.00, y: 6.00 }),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct QueueMusic {
    size: f64,
    color: Color,
}

impl QueueMusic {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for QueueMusic {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 30.00, y: 12.00 }),
                PathEl::LineTo(Point { x: 6.00, y: 12.00 }),
                PathEl::LineTo(Point { x: 6.00, y: 16.00 }),
                PathEl::LineTo(Point { x: 30.00, y: 16.00 }),
                PathEl::LineTo(Point { x: 30.00, y: 12.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 30.00, y: 20.00 }),
                PathEl::LineTo(Point { x: 6.00, y: 20.00 }),
                PathEl::LineTo(Point { x: 6.00, y: 24.00 }),
                PathEl::LineTo(Point { x: 30.00, y: 24.00 }),
                PathEl::LineTo(Point { x: 30.00, y: 20.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 6.00, y: 32.00 }),
                PathEl::LineTo(Point { x: 22.00, y: 32.00 }),
                PathEl::LineTo(Point { x: 22.00, y: 28.00 }),
                PathEl::LineTo(Point { x: 6.00, y: 28.00 }),
                PathEl::LineTo(Point { x: 6.00, y: 32.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 34.00, y: 12.00 }),
                PathEl::LineTo(Point { x: 34.00, y: 28.37 }),
                PathEl::CurveTo(
                    Point { x: 33.37, y: 28.14 },
                    Point { x: 32.71, y: 28.00 },
                    Point { x: 32.00, y: 28.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 28.69, y: 28.00 },
                    Point { x: 26.00, y: 30.69 },
                    Point { x: 26.00, y: 34.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 26.00, y: 37.31 },
                    Point { x: 28.69, y: 40.00 },
                    Point { x: 32.00, y: 40.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 35.31, y: 40.00 },
                    Point { x: 38.00, y: 37.31 },
                    Point { x: 38.00, y: 34.00 },
                ),
                PathEl::LineTo(Point { x: 38.00, y: 16.00 }),
                PathEl::LineTo(Point { x: 44.00, y: 16.00 }),
                PathEl::LineTo(Point { x: 44.00, y: 12.00 }),
                PathEl::LineTo(Point { x: 34.00, y: 12.00 }),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct PhotoFilter {
    size: f64,
    color: Color,
}

impl PhotoFilter {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for PhotoFilter {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 38.04, y: 20.00 }),
                PathEl::LineTo(Point { x: 38.04, y: 38.00 }),
                PathEl::LineTo(Point { x: 10.00, y: 38.00 }),
                PathEl::LineTo(Point { x: 10.00, y: 10.00 }),
                PathEl::LineTo(Point { x: 28.00, y: 10.00 }),
                PathEl::LineTo(Point { x: 28.00, y: 6.00 }),
                PathEl::LineTo(Point { x: 10.04, y: 6.00 }),
                PathEl::CurveTo(
                    Point { x: 7.84, y: 6.00 },
                    Point { x: 6.04, y: 7.80 },
                    Point { x: 6.04, y: 10.00 },
                ),
                PathEl::LineTo(Point { x: 6.04, y: 38.00 }),
                PathEl::CurveTo(
                    Point { x: 6.04, y: 40.20 },
                    Point { x: 7.84, y: 42.00 },
                    Point { x: 10.04, y: 42.00 },
                ),
                PathEl::LineTo(Point { x: 38.04, y: 42.00 }),
                PathEl::CurveTo(
                    Point { x: 40.24, y: 42.00 },
                    Point { x: 42.04, y: 40.20 },
                    Point { x: 42.04, y: 38.00 },
                ),
                PathEl::LineTo(Point { x: 42.04, y: 20.00 }),
                PathEl::LineTo(Point { x: 38.04, y: 20.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 34.00, y: 20.00 }),
                PathEl::LineTo(Point { x: 35.88, y: 15.88 }),
                PathEl::LineTo(Point { x: 40.00, y: 14.00 }),
                PathEl::LineTo(Point { x: 35.88, y: 12.12 }),
                PathEl::LineTo(Point { x: 34.00, y: 8.00 }),
                PathEl::LineTo(Point { x: 32.12, y: 12.12 }),
                PathEl::LineTo(Point { x: 28.00, y: 14.00 }),
                PathEl::LineTo(Point { x: 32.12, y: 15.88 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 26.50, y: 21.50 }),
                PathEl::LineTo(Point { x: 24.00, y: 16.00 }),
                PathEl::LineTo(Point { x: 21.50, y: 21.50 }),
                PathEl::LineTo(Point { x: 16.00, y: 24.00 }),
                PathEl::LineTo(Point { x: 21.50, y: 26.50 }),
                PathEl::LineTo(Point { x: 24.00, y: 32.00 }),
                PathEl::LineTo(Point { x: 26.50, y: 26.50 }),
                PathEl::LineTo(Point { x: 32.00, y: 24.00 }),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct PauseCircleFilled {
    size: f64,
    color: Color,
}

impl PauseCircleFilled {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for PauseCircleFilled {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 24.00, y: 4.00 }),
                PathEl::CurveTo(
                    Point { x: 12.95, y: 4.00 },
                    Point { x: 4.00, y: 12.95 },
                    Point { x: 4.00, y: 24.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 4.00, y: 35.05 },
                    Point { x: 12.95, y: 44.00 },
                    Point { x: 24.00, y: 44.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 35.05, y: 44.00 },
                    Point { x: 44.00, y: 35.05 },
                    Point { x: 44.00, y: 24.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 44.00, y: 12.95 },
                    Point { x: 35.05, y: 4.00 },
                    Point { x: 24.00, y: 4.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 22.00, y: 32.00 }),
                PathEl::LineTo(Point { x: 18.00, y: 32.00 }),
                PathEl::LineTo(Point { x: 18.00, y: 16.00 }),
                PathEl::LineTo(Point { x: 22.00, y: 16.00 }),
                PathEl::LineTo(Point { x: 22.00, y: 32.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 30.00, y: 32.00 }),
                PathEl::LineTo(Point { x: 26.00, y: 32.00 }),
                PathEl::LineTo(Point { x: 26.00, y: 16.00 }),
                PathEl::LineTo(Point { x: 30.00, y: 16.00 }),
                PathEl::LineTo(Point { x: 30.00, y: 32.00 }),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct ImportExport {
    size: f64,
    color: Color,
}

impl ImportExport {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for ImportExport {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 18.00, y: 6.00 }),
                PathEl::LineTo(Point { x: 10.00, y: 13.98 }),
                PathEl::LineTo(Point { x: 16.00, y: 13.98 }),
                PathEl::LineTo(Point { x: 16.00, y: 28.00 }),
                PathEl::LineTo(Point { x: 20.00, y: 28.00 }),
                PathEl::LineTo(Point { x: 20.00, y: 13.98 }),
                PathEl::LineTo(Point { x: 26.00, y: 13.98 }),
                PathEl::LineTo(Point { x: 18.00, y: 6.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 32.00, y: 34.02 }),
                PathEl::LineTo(Point { x: 32.00, y: 20.00 }),
                PathEl::LineTo(Point { x: 28.00, y: 20.00 }),
                PathEl::LineTo(Point { x: 28.00, y: 34.02 }),
                PathEl::LineTo(Point { x: 22.00, y: 34.02 }),
                PathEl::LineTo(Point { x: 30.00, y: 42.00 }),
                PathEl::LineTo(Point { x: 38.00, y: 34.02 }),
                PathEl::LineTo(Point { x: 32.00, y: 34.02 }),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct FormatShapes {
    size: f64,
    color: Color,
}

impl FormatShapes {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for FormatShapes {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 46.00, y: 14.00 }),
                PathEl::LineTo(Point { x: 46.00, y: 2.00 }),
                PathEl::LineTo(Point { x: 34.00, y: 2.00 }),
                PathEl::LineTo(Point { x: 34.00, y: 6.00 }),
                PathEl::LineTo(Point { x: 14.00, y: 6.00 }),
                PathEl::LineTo(Point { x: 14.00, y: 2.00 }),
                PathEl::LineTo(Point { x: 2.00, y: 2.00 }),
                PathEl::LineTo(Point { x: 2.00, y: 14.00 }),
                PathEl::LineTo(Point { x: 6.00, y: 14.00 }),
                PathEl::LineTo(Point { x: 6.00, y: 34.00 }),
                PathEl::LineTo(Point { x: 2.00, y: 34.00 }),
                PathEl::LineTo(Point { x: 2.00, y: 46.00 }),
                PathEl::LineTo(Point { x: 14.00, y: 46.00 }),
                PathEl::LineTo(Point { x: 14.00, y: 42.00 }),
                PathEl::LineTo(Point { x: 34.00, y: 42.00 }),
                PathEl::LineTo(Point { x: 34.00, y: 46.00 }),
                PathEl::LineTo(Point { x: 46.00, y: 46.00 }),
                PathEl::LineTo(Point { x: 46.00, y: 34.00 }),
                PathEl::LineTo(Point { x: 42.00, y: 34.00 }),
                PathEl::LineTo(Point { x: 42.00, y: 14.00 }),
                PathEl::LineTo(Point { x: 46.00, y: 14.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 6.00, y: 6.00 }),
                PathEl::LineTo(Point { x: 10.00, y: 6.00 }),
                PathEl::LineTo(Point { x: 10.00, y: 10.00 }),
                PathEl::LineTo(Point { x: 6.00, y: 10.00 }),
                PathEl::LineTo(Point { x: 6.00, y: 6.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 10.00, y: 42.00 }),
                PathEl::LineTo(Point { x: 6.00, y: 42.00 }),
                PathEl::LineTo(Point { x: 6.00, y: 38.00 }),
                PathEl::LineTo(Point { x: 10.00, y: 38.00 }),
                PathEl::LineTo(Point { x: 10.00, y: 42.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 34.00, y: 38.00 }),
                PathEl::LineTo(Point { x: 14.00, y: 38.00 }),
                PathEl::LineTo(Point { x: 14.00, y: 34.00 }),
                PathEl::LineTo(Point { x: 10.00, y: 34.00 }),
                PathEl::LineTo(Point { x: 10.00, y: 14.00 }),
                PathEl::LineTo(Point { x: 14.00, y: 14.00 }),
                PathEl::LineTo(Point { x: 14.00, y: 10.00 }),
                PathEl::LineTo(Point { x: 34.00, y: 10.00 }),
                PathEl::LineTo(Point { x: 34.00, y: 14.00 }),
                PathEl::LineTo(Point { x: 38.00, y: 14.00 }),
                PathEl::LineTo(Point { x: 38.00, y: 34.00 }),
                PathEl::LineTo(Point { x: 34.00, y: 34.00 }),
                PathEl::LineTo(Point { x: 34.00, y: 38.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 42.00, y: 42.00 }),
                PathEl::LineTo(Point { x: 38.00, y: 42.00 }),
                PathEl::LineTo(Point { x: 38.00, y: 38.00 }),
                PathEl::LineTo(Point { x: 42.00, y: 38.00 }),
                PathEl::LineTo(Point { x: 42.00, y: 42.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 38.00, y: 10.00 }),
                PathEl::LineTo(Point { x: 38.00, y: 6.00 }),
                PathEl::LineTo(Point { x: 42.00, y: 6.00 }),
                PathEl::LineTo(Point { x: 42.00, y: 10.00 }),
                PathEl::LineTo(Point { x: 38.00, y: 10.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 27.47, y: 28.00 }),
                PathEl::LineTo(Point { x: 20.50, y: 28.00 }),
                PathEl::LineTo(Point { x: 19.04, y: 32.00 }),
                PathEl::LineTo(Point { x: 15.79, y: 32.00 }),
                PathEl::LineTo(Point { x: 22.59, y: 14.00 }),
                PathEl::LineTo(Point { x: 25.40, y: 14.00 }),
                PathEl::LineTo(Point { x: 32.21, y: 32.00 }),
                PathEl::LineTo(Point { x: 28.95, y: 32.00 }),
                PathEl::LineTo(Point { x: 27.47, y: 28.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 21.37, y: 25.48 }),
                PathEl::LineTo(Point { x: 26.59, y: 25.48 }),
                PathEl::LineTo(Point { x: 23.98, y: 17.82 }),
                PathEl::LineTo(Point { x: 21.37, y: 25.48 }),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct DeviceHub {
    size: f64,
    color: Color,
}

impl DeviceHub {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for DeviceHub {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 24.0, height / 24.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 17.00, y: 16.00 }),
                PathEl::LineTo(Point { x: 13.00, y: 12.00 }),
                PathEl::LineTo(Point { x: 13.00, y: 8.82 }),
                PathEl::CurveTo(
                    Point { x: 14.16, y: 8.40 },
                    Point { x: 15.00, y: 7.30 },
                    Point { x: 15.00, y: 6.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 15.00, y: 4.34 },
                    Point { x: 13.66, y: 3.00 },
                    Point { x: 12.00, y: 3.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 10.34, y: 3.00 },
                    Point { x: 9.00, y: 4.34 },
                    Point { x: 9.00, y: 6.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 9.00, y: 7.30 },
                    Point { x: 9.84, y: 8.40 },
                    Point { x: 11.00, y: 8.82 },
                ),
                PathEl::LineTo(Point { x: 11.00, y: 12.00 }),
                PathEl::LineTo(Point { x: 7.00, y: 16.00 }),
                PathEl::LineTo(Point { x: 3.00, y: 16.00 }),
                PathEl::LineTo(Point { x: 3.00, y: 21.00 }),
                PathEl::LineTo(Point { x: 8.00, y: 21.00 }),
                PathEl::LineTo(Point { x: 8.00, y: 17.95 }),
                PathEl::LineTo(Point { x: 12.00, y: 13.75 }),
                PathEl::LineTo(Point { x: 16.00, y: 17.95 }),
                PathEl::LineTo(Point { x: 16.00, y: 21.00 }),
                PathEl::LineTo(Point { x: 21.00, y: 21.00 }),
                PathEl::LineTo(Point { x: 21.00, y: 16.00 }),
                PathEl::LineTo(Point { x: 17.00, y: 16.00 }),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct Palette {
    size: f64,
    color: Color,
}

impl Palette {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for Palette {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 24.00, y: 6.00 }),
                PathEl::CurveTo(
                    Point { x: 14.06, y: 6.00 },
                    Point { x: 6.00, y: 14.06 },
                    Point { x: 6.00, y: 24.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 6.00, y: 33.94 },
                    Point { x: 14.06, y: 42.00 },
                    Point { x: 24.00, y: 42.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 25.66, y: 42.00 },
                    Point { x: 27.00, y: 40.66 },
                    Point { x: 27.00, y: 39.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 27.00, y: 38.22 },
                    Point { x: 26.71, y: 37.52 },
                    Point { x: 26.22, y: 36.99 },
                ),
                PathEl::CurveTo(
                    Point { x: 25.75, y: 36.46 },
                    Point { x: 25.47, y: 35.77 },
                    Point { x: 25.47, y: 35.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 25.47, y: 33.34 },
                    Point { x: 26.81, y: 32.00 },
                    Point { x: 28.47, y: 32.00 },
                ),
                PathEl::LineTo(Point { x: 32.00, y: 32.00 }),
                PathEl::CurveTo(
                    Point { x: 37.52, y: 32.00 },
                    Point { x: 42.00, y: 27.52 },
                    Point { x: 42.00, y: 22.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 42.00, y: 13.16 },
                    Point { x: 33.94, y: 6.00 },
                    Point { x: 24.00, y: 6.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 13.00, y: 24.00 }),
                PathEl::CurveTo(
                    Point { x: 11.34, y: 24.00 },
                    Point { x: 10.00, y: 22.66 },
                    Point { x: 10.00, y: 21.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 10.00, y: 19.34 },
                    Point { x: 11.34, y: 18.00 },
                    Point { x: 13.00, y: 18.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 14.66, y: 18.00 },
                    Point { x: 16.00, y: 19.34 },
                    Point { x: 16.00, y: 21.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 16.00, y: 22.66 },
                    Point { x: 14.66, y: 24.00 },
                    Point { x: 13.00, y: 24.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 19.00, y: 16.00 }),
                PathEl::CurveTo(
                    Point { x: 17.34, y: 16.00 },
                    Point { x: 16.00, y: 14.66 },
                    Point { x: 16.00, y: 13.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 16.00, y: 11.34 },
                    Point { x: 17.34, y: 10.00 },
                    Point { x: 19.00, y: 10.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 20.66, y: 10.00 },
                    Point { x: 22.00, y: 11.34 },
                    Point { x: 22.00, y: 13.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 22.00, y: 14.66 },
                    Point { x: 20.66, y: 16.00 },
                    Point { x: 19.00, y: 16.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 29.00, y: 16.00 }),
                PathEl::CurveTo(
                    Point { x: 27.34, y: 16.00 },
                    Point { x: 26.00, y: 14.66 },
                    Point { x: 26.00, y: 13.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 26.00, y: 11.34 },
                    Point { x: 27.34, y: 10.00 },
                    Point { x: 29.00, y: 10.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 30.66, y: 10.00 },
                    Point { x: 32.00, y: 11.34 },
                    Point { x: 32.00, y: 13.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 32.00, y: 14.66 },
                    Point { x: 30.66, y: 16.00 },
                    Point { x: 29.00, y: 16.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 35.00, y: 24.00 }),
                PathEl::CurveTo(
                    Point { x: 33.34, y: 24.00 },
                    Point { x: 32.00, y: 22.66 },
                    Point { x: 32.00, y: 21.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 32.00, y: 19.34 },
                    Point { x: 33.34, y: 18.00 },
                    Point { x: 35.00, y: 18.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 36.66, y: 18.00 },
                    Point { x: 38.00, y: 19.34 },
                    Point { x: 38.00, y: 21.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 38.00, y: 22.66 },
                    Point { x: 36.66, y: 24.00 },
                    Point { x: 35.00, y: 24.00 },
                ),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct Star {
    size: f64,
    color: Color,
}

impl Star {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for Star {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 24.0, height / 24.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 12.00, y: 17.27 }),
                PathEl::LineTo(Point { x: 18.18, y: 21.00 }),
                PathEl::LineTo(Point { x: 16.54, y: 13.97 }),
                PathEl::LineTo(Point { x: 22.00, y: 9.24 }),
                PathEl::LineTo(Point { x: 14.81, y: 8.63 }),
                PathEl::LineTo(Point { x: 12.00, y: 2.00 }),
                PathEl::LineTo(Point { x: 9.19, y: 8.63 }),
                PathEl::LineTo(Point { x: 2.00, y: 9.24 }),
                PathEl::LineTo(Point { x: 7.46, y: 13.97 }),
                PathEl::LineTo(Point { x: 5.82, y: 21.00 }),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct Brightness5 {
    size: f64,
    color: Color,
}

impl Brightness5 {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for Brightness5 {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 40.00, y: 30.63 }),
                PathEl::LineTo(Point { x: 46.63, y: 24.00 }),
                PathEl::LineTo(Point { x: 40.00, y: 17.37 }),
                PathEl::LineTo(Point { x: 40.00, y: 8.00 }),
                PathEl::LineTo(Point { x: 30.63, y: 8.00 }),
                PathEl::LineTo(Point { x: 24.00, y: 1.37 }),
                PathEl::LineTo(Point { x: 17.37, y: 8.00 }),
                PathEl::LineTo(Point { x: 8.00, y: 8.00 }),
                PathEl::LineTo(Point { x: 8.00, y: 17.37 }),
                PathEl::LineTo(Point { x: 1.37, y: 24.00 }),
                PathEl::LineTo(Point { x: 8.00, y: 30.63 }),
                PathEl::LineTo(Point { x: 8.00, y: 40.00 }),
                PathEl::LineTo(Point { x: 17.37, y: 40.00 }),
                PathEl::LineTo(Point { x: 24.00, y: 46.63 }),
                PathEl::LineTo(Point { x: 30.63, y: 40.00 }),
                PathEl::LineTo(Point { x: 40.00, y: 40.00 }),
                PathEl::LineTo(Point { x: 40.00, y: 30.63 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 24.00, y: 36.00 }),
                PathEl::CurveTo(
                    Point { x: 17.37, y: 36.00 },
                    Point { x: 12.00, y: 30.63 },
                    Point { x: 12.00, y: 24.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 12.00, y: 17.37 },
                    Point { x: 17.37, y: 12.00 },
                    Point { x: 24.00, y: 12.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 30.63, y: 12.00 },
                    Point { x: 36.00, y: 17.37 },
                    Point { x: 36.00, y: 24.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 36.00, y: 30.63 },
                    Point { x: 30.63, y: 36.00 },
                    Point { x: 24.00, y: 36.00 },
                ),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct NaturePeople {
    size: f64,
    color: Color,
}

impl NaturePeople {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for NaturePeople {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 44.34, y: 18.34 }),
                PathEl::CurveTo(
                    Point { x: 44.34, y: 10.61 },
                    Point { x: 38.07, y: 4.34 },
                    Point { x: 30.34, y: 4.34 },
                ),
                PathEl::CurveTo(
                    Point { x: 22.61, y: 4.34 },
                    Point { x: 16.34, y: 10.61 },
                    Point { x: 16.34, y: 18.34 },
                ),
                PathEl::CurveTo(
                    Point { x: 16.34, y: 25.27 },
                    Point { x: 21.38, y: 31.01 },
                    Point { x: 28.00, y: 32.13 },
                ),
                PathEl::LineTo(Point { x: 28.00, y: 40.00 }),
                PathEl::LineTo(Point { x: 12.00, y: 40.00 }),
                PathEl::LineTo(Point { x: 12.00, y: 34.00 }),
                PathEl::LineTo(Point { x: 14.00, y: 34.00 }),
                PathEl::LineTo(Point { x: 14.00, y: 26.00 }),
                PathEl::CurveTo(
                    Point { x: 14.00, y: 24.90 },
                    Point { x: 13.10, y: 24.00 },
                    Point { x: 12.00, y: 24.00 },
                ),
                PathEl::LineTo(Point { x: 6.00, y: 24.00 }),
                PathEl::CurveTo(
                    Point { x: 4.90, y: 24.00 },
                    Point { x: 4.00, y: 24.90 },
                    Point { x: 4.00, y: 26.00 },
                ),
                PathEl::LineTo(Point { x: 4.00, y: 34.00 }),
                PathEl::LineTo(Point { x: 6.00, y: 34.00 }),
                PathEl::LineTo(Point { x: 6.00, y: 44.00 }),
                PathEl::LineTo(Point { x: 38.00, y: 44.00 }),
                PathEl::LineTo(Point { x: 38.00, y: 40.00 }),
                PathEl::LineTo(Point { x: 32.00, y: 40.00 }),
                PathEl::LineTo(Point { x: 32.00, y: 32.24 }),
                PathEl::CurveTo(
                    Point { x: 38.95, y: 31.42 },
                    Point { x: 44.34, y: 25.51 },
                    Point { x: 44.34, y: 18.34 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 9.00, y: 22.00 }),
                PathEl::CurveTo(
                    Point { x: 10.66, y: 22.00 },
                    Point { x: 12.00, y: 20.66 },
                    Point { x: 12.00, y: 19.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 12.00, y: 17.34 },
                    Point { x: 10.66, y: 16.00 },
                    Point { x: 9.00, y: 16.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 7.34, y: 16.00 },
                    Point { x: 6.00, y: 17.34 },
                    Point { x: 6.00, y: 19.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 6.00, y: 20.66 },
                    Point { x: 7.34, y: 22.00 },
                    Point { x: 9.00, y: 22.00 },
                ),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct FiberManualRecord {
    size: f64,
    color: Color,
}

impl FiberManualRecord {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for FiberManualRecord {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            Circle {
                center: Point { x: 40.00, y: 12.00 },
                radius: 16.00,
            },
            &brush,
        );
    }
}

pub struct CameraRoll {
    size: f64,
    color: Color,
}

impl CameraRoll {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for CameraRoll {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 28.00, y: 10.00 }),
                PathEl::CurveTo(
                    Point { x: 28.00, y: 7.79 },
                    Point { x: 26.21, y: 6.00 },
                    Point { x: 24.00, y: 6.00 },
                ),
                PathEl::LineTo(Point { x: 22.00, y: 6.00 }),
                PathEl::LineTo(Point { x: 22.00, y: 4.00 }),
                PathEl::CurveTo(
                    Point { x: 22.00, y: 2.90 },
                    Point { x: 21.10, y: 2.00 },
                    Point { x: 20.00, y: 2.00 },
                ),
                PathEl::LineTo(Point { x: 12.00, y: 2.00 }),
                PathEl::CurveTo(
                    Point { x: 10.90, y: 2.00 },
                    Point { x: 10.00, y: 2.90 },
                    Point { x: 10.00, y: 4.00 },
                ),
                PathEl::LineTo(Point { x: 10.00, y: 6.00 }),
                PathEl::LineTo(Point { x: 8.00, y: 6.00 }),
                PathEl::CurveTo(
                    Point { x: 5.79, y: 6.00 },
                    Point { x: 4.00, y: 7.79 },
                    Point { x: 4.00, y: 10.00 },
                ),
                PathEl::LineTo(Point { x: 4.00, y: 40.00 }),
                PathEl::CurveTo(
                    Point { x: 4.00, y: 42.21 },
                    Point { x: 5.79, y: 44.00 },
                    Point { x: 8.00, y: 44.00 },
                ),
                PathEl::LineTo(Point { x: 24.00, y: 44.00 }),
                PathEl::CurveTo(
                    Point { x: 26.21, y: 44.00 },
                    Point { x: 28.00, y: 42.21 },
                    Point { x: 28.00, y: 40.00 },
                ),
                PathEl::LineTo(Point { x: 44.00, y: 40.00 }),
                PathEl::LineTo(Point { x: 44.00, y: 10.00 }),
                PathEl::LineTo(Point { x: 28.00, y: 10.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 24.00, y: 36.00 }),
                PathEl::LineTo(Point { x: 20.00, y: 36.00 }),
                PathEl::LineTo(Point { x: 20.00, y: 32.00 }),
                PathEl::LineTo(Point { x: 24.00, y: 32.00 }),
                PathEl::LineTo(Point { x: 24.00, y: 36.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 24.00, y: 18.00 }),
                PathEl::LineTo(Point { x: 20.00, y: 18.00 }),
                PathEl::LineTo(Point { x: 20.00, y: 14.00 }),
                PathEl::LineTo(Point { x: 24.00, y: 14.00 }),
                PathEl::LineTo(Point { x: 24.00, y: 18.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 32.00, y: 36.00 }),
                PathEl::LineTo(Point { x: 28.00, y: 36.00 }),
                PathEl::LineTo(Point { x: 28.00, y: 32.00 }),
                PathEl::LineTo(Point { x: 32.00, y: 32.00 }),
                PathEl::LineTo(Point { x: 32.00, y: 36.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 32.00, y: 18.00 }),
                PathEl::LineTo(Point { x: 28.00, y: 18.00 }),
                PathEl::LineTo(Point { x: 28.00, y: 14.00 }),
                PathEl::LineTo(Point { x: 32.00, y: 14.00 }),
                PathEl::LineTo(Point { x: 32.00, y: 18.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 40.00, y: 36.00 }),
                PathEl::LineTo(Point { x: 36.00, y: 36.00 }),
                PathEl::LineTo(Point { x: 36.00, y: 32.00 }),
                PathEl::LineTo(Point { x: 40.00, y: 32.00 }),
                PathEl::LineTo(Point { x: 40.00, y: 36.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 40.00, y: 18.00 }),
                PathEl::LineTo(Point { x: 36.00, y: 18.00 }),
                PathEl::LineTo(Point { x: 36.00, y: 14.00 }),
                PathEl::LineTo(Point { x: 40.00, y: 14.00 }),
                PathEl::LineTo(Point { x: 40.00, y: 18.00 }),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct AcUnit {
    size: f64,
    color: Color,
}

impl AcUnit {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for AcUnit {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 44.00, y: 22.00 }),
                PathEl::LineTo(Point { x: 35.66, y: 22.00 }),
                PathEl::LineTo(Point { x: 42.14, y: 15.51 }),
                PathEl::LineTo(Point { x: 39.31, y: 12.69 }),
                PathEl::LineTo(Point { x: 30.00, y: 22.00 }),
                PathEl::LineTo(Point { x: 26.00, y: 22.00 }),
                PathEl::LineTo(Point { x: 26.00, y: 18.00 }),
                PathEl::LineTo(Point { x: 35.31, y: 8.69 }),
                PathEl::LineTo(Point { x: 32.49, y: 5.86 }),
                PathEl::LineTo(Point { x: 26.00, y: 12.34 }),
                PathEl::LineTo(Point { x: 26.00, y: 4.00 }),
                PathEl::LineTo(Point { x: 22.00, y: 4.00 }),
                PathEl::LineTo(Point { x: 22.00, y: 12.34 }),
                PathEl::LineTo(Point { x: 15.51, y: 5.86 }),
                PathEl::LineTo(Point { x: 12.69, y: 8.69 }),
                PathEl::LineTo(Point { x: 22.00, y: 18.00 }),
                PathEl::LineTo(Point { x: 22.00, y: 22.00 }),
                PathEl::LineTo(Point { x: 18.00, y: 22.00 }),
                PathEl::LineTo(Point { x: 8.69, y: 12.69 }),
                PathEl::LineTo(Point { x: 5.86, y: 15.51 }),
                PathEl::LineTo(Point { x: 12.34, y: 22.00 }),
                PathEl::LineTo(Point { x: 4.00, y: 22.00 }),
                PathEl::LineTo(Point { x: 4.00, y: 26.00 }),
                PathEl::LineTo(Point { x: 12.34, y: 26.00 }),
                PathEl::LineTo(Point { x: 5.86, y: 32.49 }),
                PathEl::LineTo(Point { x: 8.69, y: 35.31 }),
                PathEl::LineTo(Point { x: 18.00, y: 26.00 }),
                PathEl::LineTo(Point { x: 22.00, y: 26.00 }),
                PathEl::LineTo(Point { x: 22.00, y: 30.00 }),
                PathEl::LineTo(Point { x: 12.69, y: 39.31 }),
                PathEl::LineTo(Point { x: 15.51, y: 42.14 }),
                PathEl::LineTo(Point { x: 22.00, y: 35.66 }),
                PathEl::LineTo(Point { x: 22.00, y: 44.00 }),
                PathEl::LineTo(Point { x: 26.00, y: 44.00 }),
                PathEl::LineTo(Point { x: 26.00, y: 35.66 }),
                PathEl::LineTo(Point { x: 32.49, y: 42.14 }),
                PathEl::LineTo(Point { x: 35.31, y: 39.31 }),
                PathEl::LineTo(Point { x: 26.00, y: 30.00 }),
                PathEl::LineTo(Point { x: 26.00, y: 26.00 }),
                PathEl::LineTo(Point { x: 30.00, y: 26.00 }),
                PathEl::LineTo(Point { x: 39.31, y: 35.31 }),
                PathEl::LineTo(Point { x: 42.14, y: 32.49 }),
                PathEl::LineTo(Point { x: 35.66, y: 26.00 }),
                PathEl::LineTo(Point { x: 44.00, y: 26.00 }),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct NotificationsActive {
    size: f64,
    color: Color,
}

impl NotificationsActive {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for NotificationsActive {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 15.16, y: 8.16 }),
                PathEl::LineTo(Point { x: 12.30, y: 5.30 }),
                PathEl::CurveTo(
                    Point { x: 7.51, y: 8.95 },
                    Point { x: 4.35, y: 14.59 },
                    Point { x: 4.05, y: 21.00 },
                ),
                PathEl::LineTo(Point { x: 8.05, y: 21.00 }),
                PathEl::CurveTo(
                    Point { x: 8.36, y: 15.70 },
                    Point { x: 11.09, y: 11.06 },
                    Point { x: 15.16, y: 8.16 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 39.95, y: 21.00 }),
                PathEl::LineTo(Point { x: 43.95, y: 21.00 }),
                PathEl::CurveTo(
                    Point { x: 43.65, y: 14.59 },
                    Point { x: 40.49, y: 8.95 },
                    Point { x: 35.70, y: 5.30 },
                ),
                PathEl::LineTo(Point { x: 32.85, y: 8.15 }),
                PathEl::CurveTo(
                    Point { x: 36.91, y: 11.06 },
                    Point { x: 39.64, y: 15.70 },
                    Point { x: 39.95, y: 21.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 36.00, y: 22.00 }),
                PathEl::CurveTo(
                    Point { x: 36.00, y: 15.85 },
                    Point { x: 32.73, y: 10.72 },
                    Point { x: 27.00, y: 9.36 },
                ),
                PathEl::LineTo(Point { x: 27.00, y: 8.00 }),
                PathEl::CurveTo(
                    Point { x: 27.00, y: 6.34 },
                    Point { x: 25.66, y: 5.00 },
                    Point { x: 24.00, y: 5.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 22.34, y: 5.00 },
                    Point { x: 21.00, y: 6.34 },
                    Point { x: 21.00, y: 8.00 },
                ),
                PathEl::LineTo(Point { x: 21.00, y: 9.36 }),
                PathEl::CurveTo(
                    Point { x: 15.27, y: 10.72 },
                    Point { x: 12.00, y: 15.85 },
                    Point { x: 12.00, y: 22.00 },
                ),
                PathEl::LineTo(Point { x: 12.00, y: 32.00 }),
                PathEl::LineTo(Point { x: 8.00, y: 36.00 }),
                PathEl::LineTo(Point { x: 8.00, y: 38.00 }),
                PathEl::LineTo(Point { x: 40.00, y: 38.00 }),
                PathEl::LineTo(Point { x: 40.00, y: 36.00 }),
                PathEl::LineTo(Point { x: 36.00, y: 32.00 }),
                PathEl::LineTo(Point { x: 36.00, y: 22.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 24.00, y: 44.00 }),
                PathEl::CurveTo(
                    Point { x: 24.28, y: 44.00 },
                    Point { x: 24.55, y: 43.97 },
                    Point { x: 24.81, y: 43.92 },
                ),
                PathEl::CurveTo(
                    Point { x: 26.11, y: 43.65 },
                    Point { x: 27.18, y: 42.75 },
                    Point { x: 27.69, y: 41.56 },
                ),
                PathEl::CurveTo(
                    Point { x: 27.89, y: 41.08 },
                    Point { x: 28.00, y: 40.56 },
                    Point { x: 28.00, y: 40.00 },
                ),
                PathEl::LineTo(Point { x: 20.00, y: 40.00 }),
                PathEl::CurveTo(
                    Point { x: 20.00, y: 42.21 },
                    Point { x: 21.79, y: 44.00 },
                    Point { x: 24.00, y: 44.00 },
                ),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct Style {
    size: f64,
    color: Color,
}

impl Style {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for Style {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 5.06, y: 39.31 }),
                PathEl::LineTo(Point { x: 7.75, y: 40.42 }),
                PathEl::LineTo(Point { x: 7.75, y: 22.37 }),
                PathEl::LineTo(Point { x: 2.90, y: 34.08 }),
                PathEl::CurveTo(
                    Point { x: 2.06, y: 36.11 },
                    Point { x: 3.03, y: 38.46 },
                    Point { x: 5.06, y: 39.31 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 44.06, y: 31.89 }),
                PathEl::LineTo(Point { x: 34.14, y: 7.96 }),
                PathEl::CurveTo(
                    Point { x: 33.52, y: 6.46 },
                    Point { x: 32.06, y: 5.53 },
                    Point { x: 30.53, y: 5.50 },
                ),
                PathEl::CurveTo(
                    Point { x: 30.00, y: 5.49 },
                    Point { x: 29.46, y: 5.59 },
                    Point { x: 28.93, y: 5.80 },
                ),
                PathEl::LineTo(Point { x: 14.20, y: 11.90 }),
                PathEl::CurveTo(
                    Point { x: 12.70, y: 12.52 },
                    Point { x: 11.78, y: 13.97 },
                    Point { x: 11.74, y: 15.50 },
                ),
                PathEl::CurveTo(
                    Point { x: 11.73, y: 16.04 },
                    Point { x: 11.82, y: 16.58 },
                    Point { x: 12.04, y: 17.11 },
                ),
                PathEl::LineTo(Point { x: 21.95, y: 41.04 }),
                PathEl::CurveTo(
                    Point { x: 22.58, y: 42.56 },
                    Point { x: 24.05, y: 43.48 },
                    Point { x: 25.61, y: 43.50 },
                ),
                PathEl::CurveTo(
                    Point { x: 26.13, y: 43.50 },
                    Point { x: 26.65, y: 43.41 },
                    Point { x: 27.16, y: 43.20 },
                ),
                PathEl::LineTo(Point { x: 41.89, y: 37.10 }),
                PathEl::CurveTo(
                    Point { x: 43.92, y: 36.26 },
                    Point { x: 44.90, y: 33.92 },
                    Point { x: 44.06, y: 31.89 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 15.75, y: 17.50 }),
                PathEl::CurveTo(
                    Point { x: 14.65, y: 17.50 },
                    Point { x: 13.75, y: 16.60 },
                    Point { x: 13.75, y: 15.50 },
                ),
                PathEl::CurveTo(
                    Point { x: 13.75, y: 14.40 },
                    Point { x: 14.65, y: 13.50 },
                    Point { x: 15.75, y: 13.50 },
                ),
                PathEl::CurveTo(
                    Point { x: 16.85, y: 13.50 },
                    Point { x: 17.75, y: 14.40 },
                    Point { x: 17.75, y: 15.50 },
                ),
                PathEl::CurveTo(
                    Point { x: 17.75, y: 16.60 },
                    Point { x: 16.85, y: 17.50 },
                    Point { x: 15.75, y: 17.50 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 11.75, y: 39.50 }),
                PathEl::CurveTo(
                    Point { x: 11.75, y: 41.70 },
                    Point { x: 13.55, y: 43.50 },
                    Point { x: 15.75, y: 43.50 },
                ),
                PathEl::LineTo(Point { x: 18.66, y: 43.50 }),
                PathEl::LineTo(Point { x: 11.75, y: 26.82 }),
                PathEl::LineTo(Point { x: 11.75, y: 39.50 }),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct TrendingFlat {
    size: f64,
    color: Color,
}

impl TrendingFlat {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for TrendingFlat {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 44.00, y: 24.00 }),
                PathEl::LineTo(Point { x: 36.00, y: 16.00 }),
                PathEl::LineTo(Point { x: 36.00, y: 22.00 }),
                PathEl::LineTo(Point { x: 6.00, y: 22.00 }),
                PathEl::LineTo(Point { x: 6.00, y: 26.00 }),
                PathEl::LineTo(Point { x: 36.00, y: 26.00 }),
                PathEl::LineTo(Point { x: 36.00, y: 32.00 }),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct NetworkWifi {
    size: f64,
    color: Color,
}

impl NetworkWifi {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for NetworkWifi {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 24.02, y: 42.98 }),
                PathEl::LineTo(Point { x: 47.28, y: 14.00 }),
                PathEl::CurveTo(
                    Point { x: 46.38, y: 13.32 },
                    Point { x: 37.43, y: 6.00 },
                    Point { x: 24.00, y: 6.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 10.57, y: 6.00 },
                    Point { x: 1.62, y: 13.32 },
                    Point { x: 0.72, y: 14.00 },
                ),
                PathEl::LineTo(Point { x: 23.98, y: 42.98 }),
                PathEl::LineTo(Point { x: 24.00, y: 43.00 }),
                PathEl::LineTo(Point { x: 24.02, y: 42.98 }),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 7.07, y: 21.91 }),
                PathEl::LineTo(Point { x: 23.99, y: 42.98 }),
                PathEl::LineTo(Point { x: 24.00, y: 43.00 }),
                PathEl::LineTo(Point { x: 24.02, y: 42.98 }),
                PathEl::LineTo(Point { x: 40.94, y: 21.91 }),
                PathEl::CurveTo(
                    Point { x: 40.08, y: 21.25 },
                    Point { x: 33.62, y: 16.00 },
                    Point { x: 24.00, y: 16.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 14.37, y: 16.00 },
                    Point { x: 7.92, y: 21.25 },
                    Point { x: 7.07, y: 21.91 },
                ),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct List {
    size: f64,
    color: Color,
}

impl List {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for List {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 6.00, y: 26.00 }),
                PathEl::LineTo(Point { x: 10.00, y: 26.00 }),
                PathEl::LineTo(Point { x: 10.00, y: 22.00 }),
                PathEl::LineTo(Point { x: 6.00, y: 22.00 }),
                PathEl::LineTo(Point { x: 6.00, y: 26.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 6.00, y: 34.00 }),
                PathEl::LineTo(Point { x: 10.00, y: 34.00 }),
                PathEl::LineTo(Point { x: 10.00, y: 30.00 }),
                PathEl::LineTo(Point { x: 6.00, y: 30.00 }),
                PathEl::LineTo(Point { x: 6.00, y: 34.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 6.00, y: 18.00 }),
                PathEl::LineTo(Point { x: 10.00, y: 18.00 }),
                PathEl::LineTo(Point { x: 10.00, y: 14.00 }),
                PathEl::LineTo(Point { x: 6.00, y: 14.00 }),
                PathEl::LineTo(Point { x: 6.00, y: 18.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 14.00, y: 26.00 }),
                PathEl::LineTo(Point { x: 42.00, y: 26.00 }),
                PathEl::LineTo(Point { x: 42.00, y: 22.00 }),
                PathEl::LineTo(Point { x: 14.00, y: 22.00 }),
                PathEl::LineTo(Point { x: 14.00, y: 26.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 14.00, y: 34.00 }),
                PathEl::LineTo(Point { x: 42.00, y: 34.00 }),
                PathEl::LineTo(Point { x: 42.00, y: 30.00 }),
                PathEl::LineTo(Point { x: 14.00, y: 30.00 }),
                PathEl::LineTo(Point { x: 14.00, y: 34.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 14.00, y: 14.00 }),
                PathEl::LineTo(Point { x: 14.00, y: 18.00 }),
                PathEl::LineTo(Point { x: 42.00, y: 18.00 }),
                PathEl::LineTo(Point { x: 42.00, y: 14.00 }),
                PathEl::LineTo(Point { x: 14.00, y: 14.00 }),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct Contacts {
    size: f64,
    color: Color,
}

impl Contacts {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for Contacts {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 40.00, y: 0.00 }),
                PathEl::LineTo(Point { x: 8.00, y: 0.00 }),
                PathEl::LineTo(Point { x: 8.00, y: 4.00 }),
                PathEl::LineTo(Point { x: 40.00, y: 4.00 }),
                PathEl::LineTo(Point { x: 40.00, y: 0.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 8.00, y: 48.00 }),
                PathEl::LineTo(Point { x: 40.00, y: 48.00 }),
                PathEl::LineTo(Point { x: 40.00, y: 44.00 }),
                PathEl::LineTo(Point { x: 8.00, y: 44.00 }),
                PathEl::LineTo(Point { x: 8.00, y: 48.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 40.00, y: 8.00 }),
                PathEl::LineTo(Point { x: 8.00, y: 8.00 }),
                PathEl::CurveTo(
                    Point { x: 5.79, y: 8.00 },
                    Point { x: 4.00, y: 9.79 },
                    Point { x: 4.00, y: 12.00 },
                ),
                PathEl::LineTo(Point { x: 4.00, y: 36.00 }),
                PathEl::CurveTo(
                    Point { x: 4.00, y: 38.21 },
                    Point { x: 5.79, y: 40.00 },
                    Point { x: 8.00, y: 40.00 },
                ),
                PathEl::LineTo(Point { x: 40.00, y: 40.00 }),
                PathEl::CurveTo(
                    Point { x: 42.21, y: 40.00 },
                    Point { x: 44.00, y: 38.21 },
                    Point { x: 44.00, y: 36.00 },
                ),
                PathEl::LineTo(Point { x: 44.00, y: 12.00 }),
                PathEl::CurveTo(
                    Point { x: 44.00, y: 9.79 },
                    Point { x: 42.21, y: 8.00 },
                    Point { x: 40.00, y: 8.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 24.00, y: 13.50 }),
                PathEl::CurveTo(
                    Point { x: 26.48, y: 13.50 },
                    Point { x: 28.50, y: 15.52 },
                    Point { x: 28.50, y: 18.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 28.50, y: 20.49 },
                    Point { x: 26.48, y: 22.50 },
                    Point { x: 24.00, y: 22.50 },
                ),
                PathEl::CurveTo(
                    Point { x: 21.52, y: 22.50 },
                    Point { x: 19.50, y: 20.49 },
                    Point { x: 19.50, y: 18.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 19.50, y: 15.52 },
                    Point { x: 21.52, y: 13.50 },
                    Point { x: 24.00, y: 13.50 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 34.00, y: 34.00 }),
                PathEl::LineTo(Point { x: 14.00, y: 34.00 }),
                PathEl::LineTo(Point { x: 14.00, y: 31.00 }),
                PathEl::CurveTo(
                    Point { x: 14.00, y: 27.67 },
                    Point { x: 20.67, y: 26.00 },
                    Point { x: 24.00, y: 26.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 27.33, y: 26.00 },
                    Point { x: 34.00, y: 27.67 },
                    Point { x: 34.00, y: 31.00 },
                ),
                PathEl::LineTo(Point { x: 34.00, y: 34.00 }),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct LocalPharmacy {
    size: f64,
    color: Color,
}

impl LocalPharmacy {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for LocalPharmacy {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 42.00, y: 10.00 }),
                PathEl::LineTo(Point { x: 36.71, y: 10.00 }),
                PathEl::LineTo(Point { x: 39.00, y: 3.71 }),
                PathEl::LineTo(Point { x: 34.30, y: 2.00 }),
                PathEl::LineTo(Point { x: 31.39, y: 10.00 }),
                PathEl::LineTo(Point { x: 6.00, y: 10.00 }),
                PathEl::LineTo(Point { x: 6.00, y: 14.00 }),
                PathEl::LineTo(Point { x: 10.00, y: 26.00 }),
                PathEl::LineTo(Point { x: 6.00, y: 38.00 }),
                PathEl::LineTo(Point { x: 6.00, y: 42.00 }),
                PathEl::LineTo(Point { x: 42.00, y: 42.00 }),
                PathEl::LineTo(Point { x: 42.00, y: 38.00 }),
                PathEl::LineTo(Point { x: 38.00, y: 26.00 }),
                PathEl::LineTo(Point { x: 42.00, y: 14.00 }),
                PathEl::LineTo(Point { x: 42.00, y: 10.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 32.00, y: 28.00 }),
                PathEl::LineTo(Point { x: 26.00, y: 28.00 }),
                PathEl::LineTo(Point { x: 26.00, y: 34.00 }),
                PathEl::LineTo(Point { x: 22.00, y: 34.00 }),
                PathEl::LineTo(Point { x: 22.00, y: 28.00 }),
                PathEl::LineTo(Point { x: 16.00, y: 28.00 }),
                PathEl::LineTo(Point { x: 16.00, y: 24.00 }),
                PathEl::LineTo(Point { x: 22.00, y: 24.00 }),
                PathEl::LineTo(Point { x: 22.00, y: 18.00 }),
                PathEl::LineTo(Point { x: 26.00, y: 18.00 }),
                PathEl::LineTo(Point { x: 26.00, y: 24.00 }),
                PathEl::LineTo(Point { x: 32.00, y: 24.00 }),
                PathEl::LineTo(Point { x: 32.00, y: 28.00 }),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct EnhancedEncryption {
    size: f64,
    color: Color,
}

impl EnhancedEncryption {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for EnhancedEncryption {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 36.00, y: 16.00 }),
                PathEl::LineTo(Point { x: 34.00, y: 16.00 }),
                PathEl::LineTo(Point { x: 34.00, y: 12.00 }),
                PathEl::CurveTo(
                    Point { x: 34.00, y: 6.48 },
                    Point { x: 29.52, y: 2.00 },
                    Point { x: 24.00, y: 2.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 18.48, y: 2.00 },
                    Point { x: 14.00, y: 6.48 },
                    Point { x: 14.00, y: 12.00 },
                ),
                PathEl::LineTo(Point { x: 14.00, y: 16.00 }),
                PathEl::LineTo(Point { x: 12.00, y: 16.00 }),
                PathEl::CurveTo(
                    Point { x: 9.80, y: 16.00 },
                    Point { x: 8.00, y: 17.80 },
                    Point { x: 8.00, y: 20.00 },
                ),
                PathEl::LineTo(Point { x: 8.00, y: 40.00 }),
                PathEl::CurveTo(
                    Point { x: 8.00, y: 42.20 },
                    Point { x: 9.80, y: 44.00 },
                    Point { x: 12.00, y: 44.00 },
                ),
                PathEl::LineTo(Point { x: 36.00, y: 44.00 }),
                PathEl::CurveTo(
                    Point { x: 38.20, y: 44.00 },
                    Point { x: 40.00, y: 42.20 },
                    Point { x: 40.00, y: 40.00 },
                ),
                PathEl::LineTo(Point { x: 40.00, y: 20.00 }),
                PathEl::CurveTo(
                    Point { x: 40.00, y: 17.80 },
                    Point { x: 38.20, y: 16.00 },
                    Point { x: 36.00, y: 16.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 17.80, y: 12.00 }),
                PathEl::CurveTo(
                    Point { x: 17.80, y: 8.58 },
                    Point { x: 20.58, y: 5.80 },
                    Point { x: 24.00, y: 5.80 },
                ),
                PathEl::CurveTo(
                    Point { x: 27.42, y: 5.80 },
                    Point { x: 30.20, y: 8.58 },
                    Point { x: 30.20, y: 12.00 },
                ),
                PathEl::LineTo(Point { x: 30.20, y: 16.00 }),
                PathEl::LineTo(Point { x: 17.80, y: 16.00 }),
                PathEl::LineTo(Point { x: 17.80, y: 12.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 32.00, y: 32.00 }),
                PathEl::LineTo(Point { x: 26.00, y: 32.00 }),
                PathEl::LineTo(Point { x: 26.00, y: 38.00 }),
                PathEl::LineTo(Point { x: 22.00, y: 38.00 }),
                PathEl::LineTo(Point { x: 22.00, y: 32.00 }),
                PathEl::LineTo(Point { x: 16.00, y: 32.00 }),
                PathEl::LineTo(Point { x: 16.00, y: 28.00 }),
                PathEl::LineTo(Point { x: 22.00, y: 28.00 }),
                PathEl::LineTo(Point { x: 22.00, y: 22.00 }),
                PathEl::LineTo(Point { x: 26.00, y: 22.00 }),
                PathEl::LineTo(Point { x: 26.00, y: 28.00 }),
                PathEl::LineTo(Point { x: 32.00, y: 28.00 }),
                PathEl::LineTo(Point { x: 32.00, y: 32.00 }),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct PermDataSetting {
    size: f64,
    color: Color,
}

impl PermDataSetting {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for PermDataSetting {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 37.98, y: 23.00 }),
                PathEl::CurveTo(
                    Point { x: 38.66, y: 23.00 },
                    Point { x: 39.34, y: 23.06 },
                    Point { x: 40.00, y: 23.15 },
                ),
                PathEl::LineTo(Point { x: 40.00, y: 0.00 }),
                PathEl::LineTo(Point { x: 0.00, y: 40.00 }),
                PathEl::LineTo(Point { x: 23.13, y: 40.00 }),
                PathEl::CurveTo(
                    Point { x: 23.04, y: 39.34 },
                    Point { x: 22.98, y: 38.68 },
                    Point { x: 22.98, y: 38.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 22.98, y: 29.72 },
                    Point { x: 29.70, y: 23.00 },
                    Point { x: 37.98, y: 23.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 45.41, y: 38.98 }),
                PathEl::CurveTo(
                    Point { x: 45.45, y: 38.66 },
                    Point { x: 45.48, y: 38.34 },
                    Point { x: 45.48, y: 38.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 45.48, y: 37.67 },
                    Point { x: 45.45, y: 37.34 },
                    Point { x: 45.41, y: 37.02 },
                ),
                PathEl::LineTo(Point { x: 47.52, y: 35.37 }),
                PathEl::CurveTo(
                    Point { x: 47.71, y: 35.22 },
                    Point { x: 47.76, y: 34.95 },
                    Point { x: 47.64, y: 34.73 },
                ),
                PathEl::LineTo(Point { x: 45.64, y: 31.27 }),
                PathEl::CurveTo(
                    Point { x: 45.52, y: 31.05 },
                    Point { x: 45.25, y: 30.97 },
                    Point { x: 45.03, y: 31.05 },
                ),
                PathEl::LineTo(Point { x: 42.54, y: 32.05 }),
                PathEl::CurveTo(
                    Point { x: 42.02, y: 31.65 },
                    Point { x: 41.46, y: 31.32 },
                    Point { x: 40.85, y: 31.07 },
                ),
                PathEl::LineTo(Point { x: 40.48, y: 28.42 }),
                PathEl::CurveTo(
                    Point { x: 40.44, y: 28.18 },
                    Point { x: 40.23, y: 28.00 },
                    Point { x: 39.98, y: 28.00 },
                ),
                PathEl::LineTo(Point { x: 35.98, y: 28.00 }),
                PathEl::CurveTo(
                    Point { x: 35.73, y: 28.00 },
                    Point { x: 35.52, y: 28.18 },
                    Point { x: 35.49, y: 28.42 },
                ),
                PathEl::LineTo(Point { x: 35.12, y: 31.07 }),
                PathEl::CurveTo(
                    Point { x: 34.51, y: 31.32 },
                    Point { x: 33.95, y: 31.66 },
                    Point { x: 33.43, y: 32.05 },
                ),
                PathEl::LineTo(Point { x: 30.94, y: 31.05 }),
                PathEl::CurveTo(
                    Point { x: 30.71, y: 30.96 },
                    Point { x: 30.45, y: 31.05 },
                    Point { x: 30.33, y: 31.27 },
                ),
                PathEl::LineTo(Point { x: 28.33, y: 34.73 }),
                PathEl::CurveTo(
                    Point { x: 28.20, y: 34.95 },
                    Point { x: 28.26, y: 35.22 },
                    Point { x: 28.45, y: 35.37 },
                ),
                PathEl::LineTo(Point { x: 30.56, y: 37.02 }),
                PathEl::CurveTo(
                    Point { x: 30.52, y: 37.34 },
                    Point { x: 30.49, y: 37.67 },
                    Point { x: 30.49, y: 38.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 30.49, y: 38.33 },
                    Point { x: 30.52, y: 38.66 },
                    Point { x: 30.56, y: 38.98 },
                ),
                PathEl::LineTo(Point { x: 28.45, y: 40.63 }),
                PathEl::CurveTo(
                    Point { x: 28.26, y: 40.78 },
                    Point { x: 28.21, y: 41.05 },
                    Point { x: 28.33, y: 41.27 },
                ),
                PathEl::LineTo(Point { x: 30.33, y: 44.73 }),
                PathEl::CurveTo(
                    Point { x: 30.46, y: 44.95 },
                    Point { x: 30.72, y: 45.03 },
                    Point { x: 30.94, y: 44.95 },
                ),
                PathEl::LineTo(Point { x: 33.43, y: 43.95 }),
                PathEl::CurveTo(
                    Point { x: 33.95, y: 44.35 },
                    Point { x: 34.51, y: 44.68 },
                    Point { x: 35.12, y: 44.93 },
                ),
                PathEl::LineTo(Point { x: 35.49, y: 47.58 }),
                PathEl::CurveTo(
                    Point { x: 35.53, y: 47.82 },
                    Point { x: 35.74, y: 48.00 },
                    Point { x: 35.98, y: 48.00 },
                ),
                PathEl::LineTo(Point { x: 39.98, y: 48.00 }),
                PathEl::CurveTo(
                    Point { x: 40.23, y: 48.00 },
                    Point { x: 40.43, y: 47.82 },
                    Point { x: 40.47, y: 47.58 },
                ),
                PathEl::LineTo(Point { x: 40.84, y: 44.93 }),
                PathEl::CurveTo(
                    Point { x: 41.45, y: 44.68 },
                    Point { x: 42.01, y: 44.34 },
                    Point { x: 42.53, y: 43.95 },
                ),
                PathEl::LineTo(Point { x: 45.02, y: 44.95 }),
                PathEl::CurveTo(
                    Point { x: 45.25, y: 45.04 },
                    Point { x: 45.51, y: 44.95 },
                    Point { x: 45.63, y: 44.73 },
                ),
                PathEl::LineTo(Point { x: 47.63, y: 41.27 }),
                PathEl::CurveTo(
                    Point { x: 47.76, y: 41.05 },
                    Point { x: 47.70, y: 40.78 },
                    Point { x: 47.51, y: 40.63 },
                ),
                PathEl::LineTo(Point { x: 45.41, y: 38.98 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 37.98, y: 41.00 }),
                PathEl::CurveTo(
                    Point { x: 36.32, y: 41.00 },
                    Point { x: 34.98, y: 39.66 },
                    Point { x: 34.98, y: 38.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 34.98, y: 36.34 },
                    Point { x: 36.32, y: 35.00 },
                    Point { x: 37.98, y: 35.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 39.64, y: 35.00 },
                    Point { x: 40.98, y: 36.34 },
                    Point { x: 40.98, y: 38.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 40.98, y: 39.66 },
                    Point { x: 39.64, y: 41.00 },
                    Point { x: 37.98, y: 41.00 },
                ),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct RemoveRedEye {
    size: f64,
    color: Color,
}

impl RemoveRedEye {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for RemoveRedEye {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 24.00, y: 9.00 }),
                PathEl::CurveTo(
                    Point { x: 14.00, y: 9.00 },
                    Point { x: 5.46, y: 15.22 },
                    Point { x: 2.00, y: 24.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 5.46, y: 32.78 },
                    Point { x: 14.00, y: 39.00 },
                    Point { x: 24.00, y: 39.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 34.00, y: 39.00 },
                    Point { x: 42.54, y: 32.78 },
                    Point { x: 46.00, y: 24.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 42.54, y: 15.22 },
                    Point { x: 34.01, y: 9.00 },
                    Point { x: 24.00, y: 9.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 24.00, y: 34.00 }),
                PathEl::CurveTo(
                    Point { x: 18.48, y: 34.00 },
                    Point { x: 14.00, y: 29.52 },
                    Point { x: 14.00, y: 24.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 14.00, y: 18.48 },
                    Point { x: 18.48, y: 14.00 },
                    Point { x: 24.00, y: 14.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 29.52, y: 14.00 },
                    Point { x: 34.00, y: 18.48 },
                    Point { x: 34.00, y: 24.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 34.00, y: 29.52 },
                    Point { x: 29.52, y: 34.00 },
                    Point { x: 24.00, y: 34.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 24.00, y: 18.00 }),
                PathEl::CurveTo(
                    Point { x: 20.69, y: 18.00 },
                    Point { x: 18.00, y: 20.69 },
                    Point { x: 18.00, y: 24.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 18.00, y: 27.31 },
                    Point { x: 20.69, y: 30.00 },
                    Point { x: 24.00, y: 30.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 27.31, y: 30.00 },
                    Point { x: 30.00, y: 27.31 },
                    Point { x: 30.00, y: 24.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 30.00, y: 20.69 },
                    Point { x: 27.31, y: 18.00 },
                    Point { x: 24.00, y: 18.00 },
                ),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct LocalActivity {
    size: f64,
    color: Color,
}

impl LocalActivity {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for LocalActivity {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 40.00, y: 24.00 }),
                PathEl::CurveTo(
                    Point { x: 40.00, y: 21.79 },
                    Point { x: 41.79, y: 20.00 },
                    Point { x: 44.00, y: 20.00 },
                ),
                PathEl::LineTo(Point { x: 44.00, y: 12.00 }),
                PathEl::CurveTo(
                    Point { x: 44.00, y: 9.79 },
                    Point { x: 42.21, y: 8.00 },
                    Point { x: 40.00, y: 8.00 },
                ),
                PathEl::LineTo(Point { x: 8.00, y: 8.00 }),
                PathEl::CurveTo(
                    Point { x: 5.79, y: 8.00 },
                    Point { x: 4.02, y: 9.79 },
                    Point { x: 4.02, y: 12.00 },
                ),
                PathEl::LineTo(Point { x: 4.01, y: 20.00 }),
                PathEl::CurveTo(
                    Point { x: 6.22, y: 20.01 },
                    Point { x: 8.00, y: 21.80 },
                    Point { x: 8.00, y: 24.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 8.00, y: 26.21 },
                    Point { x: 6.21, y: 28.00 },
                    Point { x: 4.01, y: 28.00 },
                ),
                PathEl::LineTo(Point { x: 4.00, y: 36.00 }),
                PathEl::CurveTo(
                    Point { x: 4.00, y: 38.21 },
                    Point { x: 5.79, y: 40.00 },
                    Point { x: 8.00, y: 40.00 },
                ),
                PathEl::LineTo(Point { x: 40.00, y: 40.00 }),
                PathEl::CurveTo(
                    Point { x: 42.21, y: 40.00 },
                    Point { x: 44.00, y: 38.21 },
                    Point { x: 44.00, y: 36.00 },
                ),
                PathEl::LineTo(Point { x: 44.00, y: 28.00 }),
                PathEl::CurveTo(
                    Point { x: 41.79, y: 28.00 },
                    Point { x: 40.00, y: 26.21 },
                    Point { x: 40.00, y: 24.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 31.16, y: 33.60 }),
                PathEl::LineTo(Point { x: 24.00, y: 29.00 }),
                PathEl::LineTo(Point { x: 16.84, y: 33.60 }),
                PathEl::LineTo(Point { x: 19.00, y: 25.37 }),
                PathEl::LineTo(Point { x: 12.42, y: 19.99 }),
                PathEl::LineTo(Point { x: 20.91, y: 19.49 }),
                PathEl::LineTo(Point { x: 24.00, y: 11.60 }),
                PathEl::LineTo(Point { x: 27.09, y: 19.49 }),
                PathEl::LineTo(Point { x: 35.58, y: 19.99 }),
                PathEl::LineTo(Point { x: 29.00, y: 25.37 }),
                PathEl::LineTo(Point { x: 31.16, y: 33.60 }),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct SentimentVerySatisfied {
    size: f64,
    color: Color,
}

impl SentimentVerySatisfied {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for SentimentVerySatisfied {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 23.99, y: 4.00 }),
                PathEl::CurveTo(
                    Point { x: 12.94, y: 4.00 },
                    Point { x: 4.00, y: 12.95 },
                    Point { x: 4.00, y: 24.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 4.00, y: 35.05 },
                    Point { x: 12.94, y: 44.00 },
                    Point { x: 23.99, y: 44.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 35.04, y: 44.00 },
                    Point { x: 44.00, y: 35.05 },
                    Point { x: 44.00, y: 24.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 44.00, y: 12.95 },
                    Point { x: 35.04, y: 4.00 },
                    Point { x: 23.99, y: 4.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 24.00, y: 40.00 }),
                PathEl::CurveTo(
                    Point { x: 15.16, y: 40.00 },
                    Point { x: 8.00, y: 32.84 },
                    Point { x: 8.00, y: 24.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 8.00, y: 15.16 },
                    Point { x: 15.16, y: 8.00 },
                    Point { x: 24.00, y: 8.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 32.84, y: 8.00 },
                    Point { x: 40.00, y: 15.16 },
                    Point { x: 40.00, y: 24.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 40.00, y: 32.84 },
                    Point { x: 32.84, y: 40.00 },
                    Point { x: 24.00, y: 40.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 26.00, y: 19.88 }),
                PathEl::LineTo(Point { x: 28.12, y: 22.00 }),
                PathEl::LineTo(Point { x: 30.24, y: 19.88 }),
                PathEl::LineTo(Point { x: 32.36, y: 22.00 }),
                PathEl::LineTo(Point { x: 34.49, y: 19.88 }),
                PathEl::LineTo(Point { x: 30.24, y: 15.64 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 17.76, y: 19.88 }),
                PathEl::LineTo(Point { x: 19.88, y: 22.00 }),
                PathEl::LineTo(Point { x: 22.00, y: 19.88 }),
                PathEl::LineTo(Point { x: 17.76, y: 15.64 }),
                PathEl::LineTo(Point { x: 13.51, y: 19.88 }),
                PathEl::LineTo(Point { x: 15.64, y: 22.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 24.00, y: 35.00 }),
                PathEl::CurveTo(
                    Point { x: 28.66, y: 35.00 },
                    Point { x: 32.62, y: 32.08 },
                    Point { x: 34.22, y: 28.00 },
                ),
                PathEl::LineTo(Point { x: 13.78, y: 28.00 }),
                PathEl::CurveTo(
                    Point { x: 15.38, y: 32.08 },
                    Point { x: 19.34, y: 35.00 },
                    Point { x: 24.00, y: 35.00 },
                ),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct MicOff {
    size: f64,
    color: Color,
}

impl MicOff {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for MicOff {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 38.00, y: 22.00 }),
                PathEl::LineTo(Point { x: 34.60, y: 22.00 }),
                PathEl::CurveTo(
                    Point { x: 34.60, y: 23.49 },
                    Point { x: 34.29, y: 24.87 },
                    Point { x: 33.73, y: 26.10 },
                ),
                PathEl::LineTo(Point { x: 36.19, y: 28.56 }),
                PathEl::CurveTo(
                    Point { x: 37.33, y: 26.61 },
                    Point { x: 38.00, y: 24.38 },
                    Point { x: 38.00, y: 22.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 29.97, y: 22.33 }),
                PathEl::CurveTo(
                    Point { x: 29.97, y: 22.22 },
                    Point { x: 30.00, y: 22.11 },
                    Point { x: 30.00, y: 22.00 },
                ),
                PathEl::LineTo(Point { x: 30.00, y: 10.00 }),
                PathEl::CurveTo(
                    Point { x: 30.00, y: 6.68 },
                    Point { x: 27.31, y: 4.00 },
                    Point { x: 24.00, y: 4.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 20.69, y: 4.00 },
                    Point { x: 18.00, y: 6.68 },
                    Point { x: 18.00, y: 10.00 },
                ),
                PathEl::LineTo(Point { x: 18.00, y: 10.37 }),
                PathEl::LineTo(Point { x: 29.97, y: 22.33 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 8.55, y: 6.00 }),
                PathEl::LineTo(Point { x: 6.00, y: 8.55 }),
                PathEl::LineTo(Point { x: 18.02, y: 20.57 }),
                PathEl::LineTo(Point { x: 18.02, y: 22.01 }),
                PathEl::CurveTo(
                    Point { x: 18.02, y: 25.32 },
                    Point { x: 20.69, y: 28.01 },
                    Point { x: 24.00, y: 28.01 },
                ),
                PathEl::CurveTo(
                    Point { x: 24.45, y: 28.01 },
                    Point { x: 24.88, y: 27.95 },
                    Point { x: 25.30, y: 27.86 },
                ),
                PathEl::LineTo(Point { x: 28.62, y: 31.18 }),
                PathEl::CurveTo(
                    Point { x: 27.19, y: 31.84 },
                    Point { x: 25.62, y: 32.21 },
                    Point { x: 24.00, y: 32.21 },
                ),
                PathEl::CurveTo(
                    Point { x: 18.48, y: 32.21 },
                    Point { x: 13.40, y: 28.01 },
                    Point { x: 13.40, y: 22.01 },
                ),
                PathEl::LineTo(Point { x: 10.00, y: 22.01 }),
                PathEl::CurveTo(
                    Point { x: 10.00, y: 28.84 },
                    Point { x: 15.44, y: 34.48 },
                    Point { x: 22.00, y: 35.45 },
                ),
                PathEl::LineTo(Point { x: 22.00, y: 42.00 }),
                PathEl::LineTo(Point { x: 26.00, y: 42.00 }),
                PathEl::LineTo(Point { x: 26.00, y: 35.44 }),
                PathEl::CurveTo(
                    Point { x: 27.81, y: 35.17 },
                    Point { x: 29.53, y: 34.54 },
                    Point { x: 31.08, y: 33.63 },
                ),
                PathEl::LineTo(Point { x: 39.45, y: 42.00 }),
                PathEl::LineTo(Point { x: 42.00, y: 39.46 }),
                PathEl::LineTo(Point { x: 8.55, y: 6.00 }),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct LocationOff {
    size: f64,
    color: Color,
}

impl LocationOff {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for LocationOff {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 24.00, y: 13.00 }),
                PathEl::CurveTo(
                    Point { x: 26.76, y: 13.00 },
                    Point { x: 29.00, y: 15.24 },
                    Point { x: 29.00, y: 18.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 29.00, y: 19.47 },
                    Point { x: 28.35, y: 20.78 },
                    Point { x: 27.34, y: 21.70 },
                ),
                PathEl::LineTo(Point { x: 34.60, y: 28.96 }),
                PathEl::CurveTo(
                    Point { x: 36.55, y: 25.24 },
                    Point { x: 38.00, y: 21.37 },
                    Point { x: 38.00, y: 18.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 38.00, y: 10.27 },
                    Point { x: 31.73, y: 4.00 },
                    Point { x: 24.00, y: 4.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 20.04, y: 4.00 },
                    Point { x: 16.47, y: 5.65 },
                    Point { x: 13.93, y: 8.29 },
                ),
                PathEl::LineTo(Point { x: 20.30, y: 14.66 }),
                PathEl::CurveTo(
                    Point { x: 21.21, y: 13.65 },
                    Point { x: 22.53, y: 13.00 },
                    Point { x: 24.00, y: 13.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 32.75, y: 32.20 }),
                PathEl::LineTo(Point { x: 23.50, y: 22.95 }),
                PathEl::LineTo(Point { x: 23.28, y: 22.73 }),
                PathEl::LineTo(Point { x: 6.54, y: 6.00 }),
                PathEl::LineTo(Point { x: 4.00, y: 8.55 }),
                PathEl::LineTo(Point { x: 10.36, y: 14.91 }),
                PathEl::CurveTo(
                    Point { x: 10.13, y: 15.90 },
                    Point { x: 10.00, y: 16.93 },
                    Point { x: 10.00, y: 18.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 10.00, y: 28.50 },
                    Point { x: 24.00, y: 44.00 },
                    Point { x: 24.00, y: 44.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 24.00, y: 44.00 },
                    Point { x: 27.34, y: 40.30 },
                    Point { x: 30.75, y: 35.30 },
                ),
                PathEl::LineTo(Point { x: 37.45, y: 42.00 }),
                PathEl::LineTo(Point { x: 40.00, y: 39.45 }),
                PathEl::LineTo(Point { x: 32.75, y: 32.20 }),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct Create {
    size: f64,
    color: Color,
}

impl Create {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for Create {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 6.00, y: 34.50 }),
                PathEl::LineTo(Point { x: 6.00, y: 42.00 }),
                PathEl::LineTo(Point { x: 13.50, y: 42.00 }),
                PathEl::LineTo(Point { x: 35.63, y: 19.87 }),
                PathEl::LineTo(Point { x: 28.13, y: 12.37 }),
                PathEl::LineTo(Point { x: 6.00, y: 34.50 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 41.41, y: 14.09 }),
                PathEl::CurveTo(
                    Point { x: 42.19, y: 13.31 },
                    Point { x: 42.19, y: 12.04 },
                    Point { x: 41.41, y: 11.26 },
                ),
                PathEl::LineTo(Point { x: 36.74, y: 6.59 }),
                PathEl::CurveTo(
                    Point { x: 35.96, y: 5.81 },
                    Point { x: 34.69, y: 5.81 },
                    Point { x: 33.91, y: 6.59 },
                ),
                PathEl::LineTo(Point { x: 30.25, y: 10.25 }),
                PathEl::LineTo(Point { x: 37.75, y: 17.75 }),
                PathEl::LineTo(Point { x: 41.41, y: 14.09 }),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct FreeBreakfast {
    size: f64,
    color: Color,
}

impl FreeBreakfast {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for FreeBreakfast {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 40.00, y: 6.00 }),
                PathEl::LineTo(Point { x: 8.00, y: 6.00 }),
                PathEl::LineTo(Point { x: 8.00, y: 26.00 }),
                PathEl::CurveTo(
                    Point { x: 8.00, y: 30.42 },
                    Point { x: 11.58, y: 34.00 },
                    Point { x: 16.00, y: 34.00 },
                ),
                PathEl::LineTo(Point { x: 28.00, y: 34.00 }),
                PathEl::CurveTo(
                    Point { x: 32.42, y: 34.00 },
                    Point { x: 36.00, y: 30.42 },
                    Point { x: 36.00, y: 26.00 },
                ),
                PathEl::LineTo(Point { x: 36.00, y: 20.00 }),
                PathEl::LineTo(Point { x: 40.00, y: 20.00 }),
                PathEl::CurveTo(
                    Point { x: 42.21, y: 20.00 },
                    Point { x: 44.00, y: 18.21 },
                    Point { x: 44.00, y: 16.00 },
                ),
                PathEl::LineTo(Point { x: 44.00, y: 10.00 }),
                PathEl::CurveTo(
                    Point { x: 44.00, y: 7.79 },
                    Point { x: 42.21, y: 6.00 },
                    Point { x: 40.00, y: 6.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 40.00, y: 16.00 }),
                PathEl::LineTo(Point { x: 36.00, y: 16.00 }),
                PathEl::LineTo(Point { x: 36.00, y: 10.00 }),
                PathEl::LineTo(Point { x: 40.00, y: 10.00 }),
                PathEl::LineTo(Point { x: 40.00, y: 16.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 8.00, y: 38.00 }),
                PathEl::LineTo(Point { x: 40.00, y: 38.00 }),
                PathEl::LineTo(Point { x: 40.00, y: 42.00 }),
                PathEl::LineTo(Point { x: 8.00, y: 42.00 }),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct KeyboardArrowDown {
    size: f64,
    color: Color,
}

impl KeyboardArrowDown {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for KeyboardArrowDown {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 14.83, y: 16.42 }),
                PathEl::LineTo(Point { x: 24.00, y: 25.59 }),
                PathEl::LineTo(Point { x: 33.17, y: 16.42 }),
                PathEl::LineTo(Point { x: 36.00, y: 19.25 }),
                PathEl::LineTo(Point { x: 24.00, y: 31.25 }),
                PathEl::LineTo(Point { x: 12.00, y: 19.25 }),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct CropPortrait {
    size: f64,
    color: Color,
}

impl CropPortrait {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for CropPortrait {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 34.00, y: 6.00 }),
                PathEl::LineTo(Point { x: 14.00, y: 6.00 }),
                PathEl::CurveTo(
                    Point { x: 11.79, y: 6.00 },
                    Point { x: 10.00, y: 7.79 },
                    Point { x: 10.00, y: 10.00 },
                ),
                PathEl::LineTo(Point { x: 10.00, y: 38.00 }),
                PathEl::CurveTo(
                    Point { x: 10.00, y: 40.21 },
                    Point { x: 11.79, y: 42.00 },
                    Point { x: 14.00, y: 42.00 },
                ),
                PathEl::LineTo(Point { x: 34.00, y: 42.00 }),
                PathEl::CurveTo(
                    Point { x: 36.21, y: 42.00 },
                    Point { x: 38.00, y: 40.21 },
                    Point { x: 38.00, y: 38.00 },
                ),
                PathEl::LineTo(Point { x: 38.00, y: 10.00 }),
                PathEl::CurveTo(
                    Point { x: 38.00, y: 7.79 },
                    Point { x: 36.21, y: 6.00 },
                    Point { x: 34.00, y: 6.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 34.00, y: 38.00 }),
                PathEl::LineTo(Point { x: 14.00, y: 38.00 }),
                PathEl::LineTo(Point { x: 14.00, y: 10.00 }),
                PathEl::LineTo(Point { x: 34.00, y: 10.00 }),
                PathEl::LineTo(Point { x: 34.00, y: 38.00 }),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct GpsNotFixed {
    size: f64,
    color: Color,
}

impl GpsNotFixed {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for GpsNotFixed {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 41.88, y: 22.00 }),
                PathEl::CurveTo(
                    Point { x: 40.96, y: 13.66 },
                    Point { x: 34.34, y: 7.04 },
                    Point { x: 26.00, y: 6.12 },
                ),
                PathEl::LineTo(Point { x: 26.00, y: 2.00 }),
                PathEl::LineTo(Point { x: 22.00, y: 2.00 }),
                PathEl::LineTo(Point { x: 22.00, y: 6.12 }),
                PathEl::CurveTo(
                    Point { x: 13.66, y: 7.04 },
                    Point { x: 7.04, y: 13.66 },
                    Point { x: 6.12, y: 22.00 },
                ),
                PathEl::LineTo(Point { x: 2.00, y: 22.00 }),
                PathEl::LineTo(Point { x: 2.00, y: 26.00 }),
                PathEl::LineTo(Point { x: 6.12, y: 26.00 }),
                PathEl::CurveTo(
                    Point { x: 7.04, y: 34.34 },
                    Point { x: 13.66, y: 40.96 },
                    Point { x: 22.00, y: 41.88 },
                ),
                PathEl::LineTo(Point { x: 22.00, y: 46.00 }),
                PathEl::LineTo(Point { x: 26.00, y: 46.00 }),
                PathEl::LineTo(Point { x: 26.00, y: 41.88 }),
                PathEl::CurveTo(
                    Point { x: 34.34, y: 40.96 },
                    Point { x: 40.96, y: 34.34 },
                    Point { x: 41.88, y: 26.00 },
                ),
                PathEl::LineTo(Point { x: 46.00, y: 26.00 }),
                PathEl::LineTo(Point { x: 46.00, y: 22.00 }),
                PathEl::LineTo(Point { x: 41.88, y: 22.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 24.00, y: 38.00 }),
                PathEl::CurveTo(
                    Point { x: 16.27, y: 38.00 },
                    Point { x: 10.00, y: 31.73 },
                    Point { x: 10.00, y: 24.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 10.00, y: 16.27 },
                    Point { x: 16.27, y: 10.00 },
                    Point { x: 24.00, y: 10.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 31.73, y: 10.00 },
                    Point { x: 38.00, y: 16.27 },
                    Point { x: 38.00, y: 24.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 38.00, y: 31.73 },
                    Point { x: 31.73, y: 38.00 },
                    Point { x: 24.00, y: 38.00 },
                ),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct RecordVoiceOver {
    size: f64,
    color: Color,
}

impl RecordVoiceOver {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for RecordVoiceOver {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            Circle {
                center: Point { x: 18.00, y: 18.00 },
                radius: 8.00,
            },
            &brush,
        );
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 18.00, y: 30.00 }),
                PathEl::CurveTo(
                    Point { x: 12.66, y: 30.00 },
                    Point { x: 2.00, y: 32.68 },
                    Point { x: 2.00, y: 38.00 },
                ),
                PathEl::LineTo(Point { x: 2.00, y: 42.00 }),
                PathEl::LineTo(Point { x: 34.00, y: 42.00 }),
                PathEl::LineTo(Point { x: 34.00, y: 38.00 }),
                PathEl::CurveTo(
                    Point { x: 34.00, y: 32.68 },
                    Point { x: 23.34, y: 30.00 },
                    Point { x: 18.00, y: 30.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 33.52, y: 10.73 }),
                PathEl::LineTo(Point { x: 30.15, y: 14.11 }),
                PathEl::CurveTo(
                    Point { x: 31.83, y: 16.48 },
                    Point { x: 31.83, y: 19.52 },
                    Point { x: 30.15, y: 21.89 },
                ),
                PathEl::LineTo(Point { x: 33.52, y: 25.27 }),
                PathEl::CurveTo(
                    Point { x: 37.56, y: 21.21 },
                    Point { x: 37.56, y: 15.12 },
                    Point { x: 33.52, y: 10.73 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 40.15, y: 4.00 }),
                PathEl::LineTo(Point { x: 36.89, y: 7.26 }),
                PathEl::CurveTo(
                    Point { x: 42.43, y: 13.31 },
                    Point { x: 42.43, y: 22.37 },
                    Point { x: 36.88, y: 28.73 },
                ),
                PathEl::LineTo(Point { x: 40.15, y: 32.00 }),
                PathEl::CurveTo(
                    Point { x: 47.95, y: 24.23 },
                    Point { x: 47.95, y: 12.09 },
                    Point { x: 40.15, y: 4.00 },
                ),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct AlarmOff {
    size: f64,
    color: Color,
}

impl AlarmOff {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for AlarmOff {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 24.00, y: 12.00 }),
                PathEl::CurveTo(
                    Point { x: 31.73, y: 12.00 },
                    Point { x: 38.00, y: 18.27 },
                    Point { x: 38.00, y: 26.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 38.00, y: 27.69 },
                    Point { x: 37.69, y: 29.30 },
                    Point { x: 37.14, y: 30.80 },
                ),
                PathEl::LineTo(Point { x: 40.18, y: 33.84 }),
                PathEl::CurveTo(
                    Point { x: 41.34, y: 31.47 },
                    Point { x: 42.00, y: 28.81 },
                    Point { x: 42.00, y: 26.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 42.00, y: 16.06 },
                    Point { x: 33.94, y: 8.00 },
                    Point { x: 23.99, y: 8.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 21.18, y: 8.00 },
                    Point { x: 18.53, y: 8.66 },
                    Point { x: 16.15, y: 9.81 },
                ),
                PathEl::LineTo(Point { x: 19.20, y: 12.86 }),
                PathEl::CurveTo(
                    Point { x: 20.70, y: 12.31 },
                    Point { x: 22.31, y: 12.00 },
                    Point { x: 24.00, y: 12.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 44.00, y: 11.44 }),
                PathEl::LineTo(Point { x: 34.81, y: 3.73 }),
                PathEl::LineTo(Point { x: 32.24, y: 6.79 }),
                PathEl::LineTo(Point { x: 41.43, y: 14.50 }),
                PathEl::LineTo(Point { x: 44.00, y: 11.44 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 5.84, y: 4.59 }),
                PathEl::LineTo(Point { x: 3.29, y: 7.13 }),
                PathEl::LineTo(Point { x: 5.95, y: 9.79 }),
                PathEl::LineTo(Point { x: 3.73, y: 11.65 }),
                PathEl::LineTo(Point { x: 6.57, y: 14.49 }),
                PathEl::LineTo(Point { x: 8.79, y: 12.63 }),
                PathEl::LineTo(Point { x: 10.39, y: 14.23 }),
                PathEl::CurveTo(
                    Point { x: 7.66, y: 17.39 },
                    Point { x: 6.00, y: 21.50 },
                    Point { x: 6.00, y: 26.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 6.00, y: 35.94 },
                    Point { x: 14.04, y: 44.00 },
                    Point { x: 23.99, y: 44.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 28.50, y: 44.00 },
                    Point { x: 32.61, y: 42.33 },
                    Point { x: 35.76, y: 39.60 },
                ),
                PathEl::LineTo(Point { x: 40.16, y: 44.00 }),
                PathEl::LineTo(Point { x: 42.70, y: 41.45 }),
                PathEl::LineTo(Point { x: 7.79, y: 6.54 }),
                PathEl::LineTo(Point { x: 5.84, y: 4.59 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 32.94, y: 36.78 }),
                PathEl::CurveTo(
                    Point { x: 30.51, y: 38.79 },
                    Point { x: 27.40, y: 40.00 },
                    Point { x: 24.00, y: 40.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 16.27, y: 40.00 },
                    Point { x: 10.00, y: 33.73 },
                    Point { x: 10.00, y: 26.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 10.00, y: 22.60 },
                    Point { x: 11.21, y: 19.49 },
                    Point { x: 13.22, y: 17.06 },
                ),
                PathEl::LineTo(Point { x: 32.94, y: 36.78 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 16.03, y: 6.55 }),
                PathEl::LineTo(Point { x: 13.19, y: 3.71 }),
                PathEl::LineTo(Point { x: 11.49, y: 5.14 }),
                PathEl::LineTo(Point { x: 14.33, y: 7.98 }),
                PathEl::LineTo(Point { x: 16.03, y: 6.55 }),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct Book {
    size: f64,
    color: Color,
}

impl Book {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for Book {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 36.00, y: 4.00 }),
                PathEl::LineTo(Point { x: 12.00, y: 4.00 }),
                PathEl::CurveTo(
                    Point { x: 9.79, y: 4.00 },
                    Point { x: 8.00, y: 5.79 },
                    Point { x: 8.00, y: 8.00 },
                ),
                PathEl::LineTo(Point { x: 8.00, y: 40.00 }),
                PathEl::CurveTo(
                    Point { x: 8.00, y: 42.21 },
                    Point { x: 9.79, y: 44.00 },
                    Point { x: 12.00, y: 44.00 },
                ),
                PathEl::LineTo(Point { x: 36.00, y: 44.00 }),
                PathEl::CurveTo(
                    Point { x: 38.21, y: 44.00 },
                    Point { x: 40.00, y: 42.21 },
                    Point { x: 40.00, y: 40.00 },
                ),
                PathEl::LineTo(Point { x: 40.00, y: 8.00 }),
                PathEl::CurveTo(
                    Point { x: 40.00, y: 5.79 },
                    Point { x: 38.21, y: 4.00 },
                    Point { x: 36.00, y: 4.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 12.00, y: 8.00 }),
                PathEl::LineTo(Point { x: 22.00, y: 8.00 }),
                PathEl::LineTo(Point { x: 22.00, y: 24.00 }),
                PathEl::LineTo(Point { x: 17.00, y: 21.00 }),
                PathEl::LineTo(Point { x: 12.00, y: 24.00 }),
                PathEl::LineTo(Point { x: 12.00, y: 8.00 }),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct PermIdentity {
    size: f64,
    color: Color,
}

impl PermIdentity {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for PermIdentity {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 24.00, y: 11.80 }),
                PathEl::CurveTo(
                    Point { x: 26.32, y: 11.80 },
                    Point { x: 28.20, y: 13.68 },
                    Point { x: 28.20, y: 16.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 28.20, y: 18.32 },
                    Point { x: 26.32, y: 20.20 },
                    Point { x: 24.00, y: 20.20 },
                ),
                PathEl::CurveTo(
                    Point { x: 21.68, y: 20.20 },
                    Point { x: 19.80, y: 18.32 },
                    Point { x: 19.80, y: 16.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 19.80, y: 13.68 },
                    Point { x: 21.68, y: 11.80 },
                    Point { x: 24.00, y: 11.80 },
                ),
                PathEl::MoveTo(Point { x: 24.00, y: 29.80 }),
                PathEl::CurveTo(
                    Point { x: 29.95, y: 29.80 },
                    Point { x: 36.20, y: 32.71 },
                    Point { x: 36.20, y: 34.00 },
                ),
                PathEl::LineTo(Point { x: 36.20, y: 36.20 }),
                PathEl::LineTo(Point { x: 11.80, y: 36.20 }),
                PathEl::LineTo(Point { x: 11.80, y: 34.00 }),
                PathEl::CurveTo(
                    Point { x: 11.80, y: 32.71 },
                    Point { x: 18.05, y: 29.80 },
                    Point { x: 24.00, y: 29.80 },
                ),
                PathEl::MoveTo(Point { x: 24.00, y: 8.00 }),
                PathEl::CurveTo(
                    Point { x: 19.58, y: 8.00 },
                    Point { x: 16.00, y: 11.58 },
                    Point { x: 16.00, y: 16.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 16.00, y: 20.41 },
                    Point { x: 19.58, y: 24.00 },
                    Point { x: 24.00, y: 24.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 28.42, y: 24.00 },
                    Point { x: 32.00, y: 20.41 },
                    Point { x: 32.00, y: 16.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 32.00, y: 11.58 },
                    Point { x: 28.42, y: 8.00 },
                    Point { x: 24.00, y: 8.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 24.00, y: 26.00 }),
                PathEl::CurveTo(
                    Point { x: 18.67, y: 26.00 },
                    Point { x: 8.00, y: 28.67 },
                    Point { x: 8.00, y: 34.00 },
                ),
                PathEl::LineTo(Point { x: 8.00, y: 40.00 }),
                PathEl::LineTo(Point { x: 40.00, y: 40.00 }),
                PathEl::LineTo(Point { x: 40.00, y: 34.00 }),
                PathEl::CurveTo(
                    Point { x: 40.00, y: 28.67 },
                    Point { x: 29.33, y: 26.00 },
                    Point { x: 24.00, y: 26.00 },
                ),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct RepeatOne {
    size: f64,
    color: Color,
}

impl RepeatOne {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for RepeatOne {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 14.00, y: 14.00 }),
                PathEl::LineTo(Point { x: 34.00, y: 14.00 }),
                PathEl::LineTo(Point { x: 34.00, y: 20.00 }),
                PathEl::LineTo(Point { x: 42.00, y: 12.00 }),
                PathEl::LineTo(Point { x: 34.00, y: 4.00 }),
                PathEl::LineTo(Point { x: 34.00, y: 10.00 }),
                PathEl::LineTo(Point { x: 10.00, y: 10.00 }),
                PathEl::LineTo(Point { x: 10.00, y: 22.00 }),
                PathEl::LineTo(Point { x: 14.00, y: 22.00 }),
                PathEl::LineTo(Point { x: 14.00, y: 14.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 34.00, y: 34.00 }),
                PathEl::LineTo(Point { x: 14.00, y: 34.00 }),
                PathEl::LineTo(Point { x: 14.00, y: 28.00 }),
                PathEl::LineTo(Point { x: 6.00, y: 36.00 }),
                PathEl::LineTo(Point { x: 14.00, y: 44.00 }),
                PathEl::LineTo(Point { x: 14.00, y: 38.00 }),
                PathEl::LineTo(Point { x: 38.00, y: 38.00 }),
                PathEl::LineTo(Point { x: 38.00, y: 26.00 }),
                PathEl::LineTo(Point { x: 34.00, y: 26.00 }),
                PathEl::LineTo(Point { x: 34.00, y: 34.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 26.00, y: 30.00 }),
                PathEl::LineTo(Point { x: 26.00, y: 18.00 }),
                PathEl::LineTo(Point { x: 24.00, y: 18.00 }),
                PathEl::LineTo(Point { x: 20.00, y: 20.00 }),
                PathEl::LineTo(Point { x: 20.00, y: 22.00 }),
                PathEl::LineTo(Point { x: 23.00, y: 22.00 }),
                PathEl::LineTo(Point { x: 23.00, y: 30.00 }),
                PathEl::LineTo(Point { x: 26.00, y: 30.00 }),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct GraphicEq {
    size: f64,
    color: Color,
}

impl GraphicEq {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for GraphicEq {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 14.00, y: 36.00 }),
                PathEl::LineTo(Point { x: 18.00, y: 36.00 }),
                PathEl::LineTo(Point { x: 18.00, y: 12.00 }),
                PathEl::LineTo(Point { x: 14.00, y: 12.00 }),
                PathEl::LineTo(Point { x: 14.00, y: 36.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 22.00, y: 44.00 }),
                PathEl::LineTo(Point { x: 26.00, y: 44.00 }),
                PathEl::LineTo(Point { x: 26.00, y: 4.00 }),
                PathEl::LineTo(Point { x: 22.00, y: 4.00 }),
                PathEl::LineTo(Point { x: 22.00, y: 44.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 6.00, y: 28.00 }),
                PathEl::LineTo(Point { x: 10.00, y: 28.00 }),
                PathEl::LineTo(Point { x: 10.00, y: 20.00 }),
                PathEl::LineTo(Point { x: 6.00, y: 20.00 }),
                PathEl::LineTo(Point { x: 6.00, y: 28.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 30.00, y: 36.00 }),
                PathEl::LineTo(Point { x: 34.00, y: 36.00 }),
                PathEl::LineTo(Point { x: 34.00, y: 12.00 }),
                PathEl::LineTo(Point { x: 30.00, y: 12.00 }),
                PathEl::LineTo(Point { x: 30.00, y: 36.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 38.00, y: 20.00 }),
                PathEl::LineTo(Point { x: 38.00, y: 28.00 }),
                PathEl::LineTo(Point { x: 42.00, y: 28.00 }),
                PathEl::LineTo(Point { x: 42.00, y: 20.00 }),
                PathEl::LineTo(Point { x: 38.00, y: 20.00 }),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct Memory {
    size: f64,
    color: Color,
}

impl Memory {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for Memory {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 30.00, y: 18.00 }),
                PathEl::LineTo(Point { x: 18.00, y: 18.00 }),
                PathEl::LineTo(Point { x: 18.00, y: 30.00 }),
                PathEl::LineTo(Point { x: 30.00, y: 30.00 }),
                PathEl::LineTo(Point { x: 30.00, y: 18.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 26.00, y: 26.00 }),
                PathEl::LineTo(Point { x: 22.00, y: 26.00 }),
                PathEl::LineTo(Point { x: 22.00, y: 22.00 }),
                PathEl::LineTo(Point { x: 26.00, y: 22.00 }),
                PathEl::LineTo(Point { x: 26.00, y: 26.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 42.00, y: 22.00 }),
                PathEl::LineTo(Point { x: 42.00, y: 18.00 }),
                PathEl::LineTo(Point { x: 38.00, y: 18.00 }),
                PathEl::LineTo(Point { x: 38.00, y: 14.00 }),
                PathEl::CurveTo(
                    Point { x: 38.00, y: 11.79 },
                    Point { x: 36.21, y: 10.00 },
                    Point { x: 34.00, y: 10.00 },
                ),
                PathEl::LineTo(Point { x: 30.00, y: 10.00 }),
                PathEl::LineTo(Point { x: 30.00, y: 6.00 }),
                PathEl::LineTo(Point { x: 26.00, y: 6.00 }),
                PathEl::LineTo(Point { x: 26.00, y: 10.00 }),
                PathEl::LineTo(Point { x: 22.00, y: 10.00 }),
                PathEl::LineTo(Point { x: 22.00, y: 6.00 }),
                PathEl::LineTo(Point { x: 18.00, y: 6.00 }),
                PathEl::LineTo(Point { x: 18.00, y: 10.00 }),
                PathEl::LineTo(Point { x: 14.00, y: 10.00 }),
                PathEl::CurveTo(
                    Point { x: 11.79, y: 10.00 },
                    Point { x: 10.00, y: 11.79 },
                    Point { x: 10.00, y: 14.00 },
                ),
                PathEl::LineTo(Point { x: 10.00, y: 18.00 }),
                PathEl::LineTo(Point { x: 6.00, y: 18.00 }),
                PathEl::LineTo(Point { x: 6.00, y: 22.00 }),
                PathEl::LineTo(Point { x: 10.00, y: 22.00 }),
                PathEl::LineTo(Point { x: 10.00, y: 26.00 }),
                PathEl::LineTo(Point { x: 6.00, y: 26.00 }),
                PathEl::LineTo(Point { x: 6.00, y: 30.00 }),
                PathEl::LineTo(Point { x: 10.00, y: 30.00 }),
                PathEl::LineTo(Point { x: 10.00, y: 34.00 }),
                PathEl::CurveTo(
                    Point { x: 10.00, y: 36.21 },
                    Point { x: 11.79, y: 38.00 },
                    Point { x: 14.00, y: 38.00 },
                ),
                PathEl::LineTo(Point { x: 18.00, y: 38.00 }),
                PathEl::LineTo(Point { x: 18.00, y: 42.00 }),
                PathEl::LineTo(Point { x: 22.00, y: 42.00 }),
                PathEl::LineTo(Point { x: 22.00, y: 38.00 }),
                PathEl::LineTo(Point { x: 26.00, y: 38.00 }),
                PathEl::LineTo(Point { x: 26.00, y: 42.00 }),
                PathEl::LineTo(Point { x: 30.00, y: 42.00 }),
                PathEl::LineTo(Point { x: 30.00, y: 38.00 }),
                PathEl::LineTo(Point { x: 34.00, y: 38.00 }),
                PathEl::CurveTo(
                    Point { x: 36.21, y: 38.00 },
                    Point { x: 38.00, y: 36.21 },
                    Point { x: 38.00, y: 34.00 },
                ),
                PathEl::LineTo(Point { x: 38.00, y: 30.00 }),
                PathEl::LineTo(Point { x: 42.00, y: 30.00 }),
                PathEl::LineTo(Point { x: 42.00, y: 26.00 }),
                PathEl::LineTo(Point { x: 38.00, y: 26.00 }),
                PathEl::LineTo(Point { x: 38.00, y: 22.00 }),
                PathEl::LineTo(Point { x: 42.00, y: 22.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 34.00, y: 34.00 }),
                PathEl::LineTo(Point { x: 14.00, y: 34.00 }),
                PathEl::LineTo(Point { x: 14.00, y: 14.00 }),
                PathEl::LineTo(Point { x: 34.00, y: 14.00 }),
                PathEl::LineTo(Point { x: 34.00, y: 34.00 }),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct Brightness6 {
    size: f64,
    color: Color,
}

impl Brightness6 {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for Brightness6 {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 40.00, y: 30.63 }),
                PathEl::LineTo(Point { x: 46.63, y: 24.00 }),
                PathEl::LineTo(Point { x: 40.00, y: 17.37 }),
                PathEl::LineTo(Point { x: 40.00, y: 8.00 }),
                PathEl::LineTo(Point { x: 30.63, y: 8.00 }),
                PathEl::LineTo(Point { x: 24.00, y: 1.37 }),
                PathEl::LineTo(Point { x: 17.37, y: 8.00 }),
                PathEl::LineTo(Point { x: 8.00, y: 8.00 }),
                PathEl::LineTo(Point { x: 8.00, y: 17.37 }),
                PathEl::LineTo(Point { x: 1.37, y: 24.00 }),
                PathEl::LineTo(Point { x: 8.00, y: 30.63 }),
                PathEl::LineTo(Point { x: 8.00, y: 40.00 }),
                PathEl::LineTo(Point { x: 17.37, y: 40.00 }),
                PathEl::LineTo(Point { x: 24.00, y: 46.63 }),
                PathEl::LineTo(Point { x: 30.63, y: 40.00 }),
                PathEl::LineTo(Point { x: 40.00, y: 40.00 }),
                PathEl::LineTo(Point { x: 40.00, y: 30.63 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 24.00, y: 36.00 }),
                PathEl::LineTo(Point { x: 24.00, y: 12.00 }),
                PathEl::CurveTo(
                    Point { x: 30.63, y: 12.00 },
                    Point { x: 36.00, y: 17.37 },
                    Point { x: 36.00, y: 24.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 36.00, y: 30.63 },
                    Point { x: 30.63, y: 36.00 },
                    Point { x: 24.00, y: 36.00 },
                ),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct BlurLinear {
    size: f64,
    color: Color,
}

impl BlurLinear {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for BlurLinear {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 10.00, y: 35.00 }),
                PathEl::CurveTo(
                    Point { x: 11.66, y: 35.00 },
                    Point { x: 13.00, y: 33.66 },
                    Point { x: 13.00, y: 32.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 13.00, y: 30.34 },
                    Point { x: 11.66, y: 29.00 },
                    Point { x: 10.00, y: 29.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 8.34, y: 29.00 },
                    Point { x: 7.00, y: 30.34 },
                    Point { x: 7.00, y: 32.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 7.00, y: 33.66 },
                    Point { x: 8.34, y: 35.00 },
                    Point { x: 10.00, y: 35.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 18.00, y: 26.00 }),
                PathEl::CurveTo(
                    Point { x: 19.10, y: 26.00 },
                    Point { x: 20.00, y: 25.10 },
                    Point { x: 20.00, y: 24.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 20.00, y: 22.90 },
                    Point { x: 19.10, y: 22.00 },
                    Point { x: 18.00, y: 22.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 16.90, y: 22.00 },
                    Point { x: 16.00, y: 22.90 },
                    Point { x: 16.00, y: 24.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 16.00, y: 25.10 },
                    Point { x: 16.90, y: 26.00 },
                    Point { x: 18.00, y: 26.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 18.00, y: 18.00 }),
                PathEl::CurveTo(
                    Point { x: 19.10, y: 18.00 },
                    Point { x: 20.00, y: 17.10 },
                    Point { x: 20.00, y: 16.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 20.00, y: 14.90 },
                    Point { x: 19.10, y: 14.00 },
                    Point { x: 18.00, y: 14.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 16.90, y: 14.00 },
                    Point { x: 16.00, y: 14.90 },
                    Point { x: 16.00, y: 16.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 16.00, y: 17.10 },
                    Point { x: 16.90, y: 18.00 },
                    Point { x: 18.00, y: 18.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 6.00, y: 42.00 }),
                PathEl::LineTo(Point { x: 42.00, y: 42.00 }),
                PathEl::LineTo(Point { x: 42.00, y: 38.00 }),
                PathEl::LineTo(Point { x: 6.00, y: 38.00 }),
                PathEl::LineTo(Point { x: 6.00, y: 42.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 10.00, y: 19.00 }),
                PathEl::CurveTo(
                    Point { x: 11.66, y: 19.00 },
                    Point { x: 13.00, y: 17.66 },
                    Point { x: 13.00, y: 16.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 13.00, y: 14.34 },
                    Point { x: 11.66, y: 13.00 },
                    Point { x: 10.00, y: 13.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 8.34, y: 13.00 },
                    Point { x: 7.00, y: 14.34 },
                    Point { x: 7.00, y: 16.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 7.00, y: 17.66 },
                    Point { x: 8.34, y: 19.00 },
                    Point { x: 10.00, y: 19.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 10.00, y: 27.00 }),
                PathEl::CurveTo(
                    Point { x: 11.66, y: 27.00 },
                    Point { x: 13.00, y: 25.66 },
                    Point { x: 13.00, y: 24.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 13.00, y: 22.34 },
                    Point { x: 11.66, y: 21.00 },
                    Point { x: 10.00, y: 21.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 8.34, y: 21.00 },
                    Point { x: 7.00, y: 22.34 },
                    Point { x: 7.00, y: 24.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 7.00, y: 25.66 },
                    Point { x: 8.34, y: 27.00 },
                    Point { x: 10.00, y: 27.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 18.00, y: 34.00 }),
                PathEl::CurveTo(
                    Point { x: 19.10, y: 34.00 },
                    Point { x: 20.00, y: 33.10 },
                    Point { x: 20.00, y: 32.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 20.00, y: 30.90 },
                    Point { x: 19.10, y: 30.00 },
                    Point { x: 18.00, y: 30.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 16.90, y: 30.00 },
                    Point { x: 16.00, y: 30.90 },
                    Point { x: 16.00, y: 32.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 16.00, y: 33.10 },
                    Point { x: 16.90, y: 34.00 },
                    Point { x: 18.00, y: 34.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 34.00, y: 33.00 }),
                PathEl::CurveTo(
                    Point { x: 34.55, y: 33.00 },
                    Point { x: 35.00, y: 32.55 },
                    Point { x: 35.00, y: 32.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 35.00, y: 31.45 },
                    Point { x: 34.55, y: 31.00 },
                    Point { x: 34.00, y: 31.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 33.45, y: 31.00 },
                    Point { x: 33.00, y: 31.45 },
                    Point { x: 33.00, y: 32.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 33.00, y: 32.55 },
                    Point { x: 33.45, y: 33.00 },
                    Point { x: 34.00, y: 33.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 6.00, y: 6.00 }),
                PathEl::LineTo(Point { x: 6.00, y: 10.00 }),
                PathEl::LineTo(Point { x: 42.00, y: 10.00 }),
                PathEl::LineTo(Point { x: 42.00, y: 6.00 }),
                PathEl::LineTo(Point { x: 6.00, y: 6.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 34.00, y: 17.00 }),
                PathEl::CurveTo(
                    Point { x: 34.55, y: 17.00 },
                    Point { x: 35.00, y: 16.55 },
                    Point { x: 35.00, y: 16.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 35.00, y: 15.45 },
                    Point { x: 34.55, y: 15.00 },
                    Point { x: 34.00, y: 15.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 33.45, y: 15.00 },
                    Point { x: 33.00, y: 15.45 },
                    Point { x: 33.00, y: 16.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 33.00, y: 16.55 },
                    Point { x: 33.45, y: 17.00 },
                    Point { x: 34.00, y: 17.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 34.00, y: 25.00 }),
                PathEl::CurveTo(
                    Point { x: 34.55, y: 25.00 },
                    Point { x: 35.00, y: 24.55 },
                    Point { x: 35.00, y: 24.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 35.00, y: 23.45 },
                    Point { x: 34.55, y: 23.00 },
                    Point { x: 34.00, y: 23.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 33.45, y: 23.00 },
                    Point { x: 33.00, y: 23.45 },
                    Point { x: 33.00, y: 24.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 33.00, y: 24.55 },
                    Point { x: 33.45, y: 25.00 },
                    Point { x: 34.00, y: 25.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 26.00, y: 18.00 }),
                PathEl::CurveTo(
                    Point { x: 27.10, y: 18.00 },
                    Point { x: 28.00, y: 17.10 },
                    Point { x: 28.00, y: 16.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 28.00, y: 14.90 },
                    Point { x: 27.10, y: 14.00 },
                    Point { x: 26.00, y: 14.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 24.90, y: 14.00 },
                    Point { x: 24.00, y: 14.90 },
                    Point { x: 24.00, y: 16.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 24.00, y: 17.10 },
                    Point { x: 24.90, y: 18.00 },
                    Point { x: 26.00, y: 18.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 26.00, y: 26.00 }),
                PathEl::CurveTo(
                    Point { x: 27.10, y: 26.00 },
                    Point { x: 28.00, y: 25.10 },
                    Point { x: 28.00, y: 24.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 28.00, y: 22.90 },
                    Point { x: 27.10, y: 22.00 },
                    Point { x: 26.00, y: 22.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 24.90, y: 22.00 },
                    Point { x: 24.00, y: 22.90 },
                    Point { x: 24.00, y: 24.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 24.00, y: 25.10 },
                    Point { x: 24.90, y: 26.00 },
                    Point { x: 26.00, y: 26.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 26.00, y: 34.00 }),
                PathEl::CurveTo(
                    Point { x: 27.10, y: 34.00 },
                    Point { x: 28.00, y: 33.10 },
                    Point { x: 28.00, y: 32.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 28.00, y: 30.90 },
                    Point { x: 27.10, y: 30.00 },
                    Point { x: 26.00, y: 30.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 24.90, y: 30.00 },
                    Point { x: 24.00, y: 30.90 },
                    Point { x: 24.00, y: 32.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 24.00, y: 33.10 },
                    Point { x: 24.90, y: 34.00 },
                    Point { x: 26.00, y: 34.00 },
                ),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct Colorize {
    size: f64,
    color: Color,
}

impl Colorize {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for Colorize {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 41.41, y: 11.26 }),
                PathEl::LineTo(Point { x: 36.74, y: 6.59 }),
                PathEl::CurveTo(
                    Point { x: 35.96, y: 5.81 },
                    Point { x: 34.69, y: 5.81 },
                    Point { x: 33.91, y: 6.59 },
                ),
                PathEl::LineTo(Point { x: 27.66, y: 12.84 }),
                PathEl::LineTo(Point { x: 23.83, y: 9.00 }),
                PathEl::LineTo(Point { x: 21.00, y: 11.83 }),
                PathEl::LineTo(Point { x: 23.84, y: 14.67 }),
                PathEl::LineTo(Point { x: 6.00, y: 32.50 }),
                PathEl::LineTo(Point { x: 6.00, y: 42.00 }),
                PathEl::LineTo(Point { x: 15.50, y: 42.00 }),
                PathEl::LineTo(Point { x: 33.34, y: 24.16 }),
                PathEl::LineTo(Point { x: 36.17, y: 27.00 }),
                PathEl::LineTo(Point { x: 39.00, y: 24.17 }),
                PathEl::LineTo(Point { x: 35.16, y: 20.33 }),
                PathEl::LineTo(Point { x: 41.41, y: 14.08 }),
                PathEl::CurveTo(
                    Point { x: 42.20, y: 13.30 },
                    Point { x: 42.20, y: 12.04 },
                    Point { x: 41.41, y: 11.26 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 13.84, y: 38.00 }),
                PathEl::LineTo(Point { x: 10.00, y: 34.16 }),
                PathEl::LineTo(Point { x: 26.13, y: 18.03 }),
                PathEl::LineTo(Point { x: 29.97, y: 21.87 }),
                PathEl::LineTo(Point { x: 13.84, y: 38.00 }),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct DragHandle {
    size: f64,
    color: Color,
}

impl DragHandle {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for DragHandle {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 40.00, y: 18.00 }),
                PathEl::LineTo(Point { x: 8.00, y: 18.00 }),
                PathEl::LineTo(Point { x: 8.00, y: 22.00 }),
                PathEl::LineTo(Point { x: 40.00, y: 22.00 }),
                PathEl::LineTo(Point { x: 40.00, y: 18.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 8.00, y: 30.00 }),
                PathEl::LineTo(Point { x: 40.00, y: 30.00 }),
                PathEl::LineTo(Point { x: 40.00, y: 26.00 }),
                PathEl::LineTo(Point { x: 8.00, y: 26.00 }),
                PathEl::LineTo(Point { x: 8.00, y: 30.00 }),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct StoreMallDirectory {
    size: f64,
    color: Color,
}

impl StoreMallDirectory {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for StoreMallDirectory {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 40.00, y: 8.00 }),
                PathEl::LineTo(Point { x: 8.00, y: 8.00 }),
                PathEl::LineTo(Point { x: 8.00, y: 12.00 }),
                PathEl::LineTo(Point { x: 40.00, y: 12.00 }),
                PathEl::LineTo(Point { x: 40.00, y: 8.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 42.00, y: 28.00 }),
                PathEl::LineTo(Point { x: 42.00, y: 24.00 }),
                PathEl::LineTo(Point { x: 40.00, y: 14.00 }),
                PathEl::LineTo(Point { x: 8.00, y: 14.00 }),
                PathEl::LineTo(Point { x: 6.00, y: 24.00 }),
                PathEl::LineTo(Point { x: 6.00, y: 28.00 }),
                PathEl::LineTo(Point { x: 8.00, y: 28.00 }),
                PathEl::LineTo(Point { x: 8.00, y: 40.00 }),
                PathEl::LineTo(Point { x: 28.00, y: 40.00 }),
                PathEl::LineTo(Point { x: 28.00, y: 28.00 }),
                PathEl::LineTo(Point { x: 36.00, y: 28.00 }),
                PathEl::LineTo(Point { x: 36.00, y: 40.00 }),
                PathEl::LineTo(Point { x: 40.00, y: 40.00 }),
                PathEl::LineTo(Point { x: 40.00, y: 28.00 }),
                PathEl::LineTo(Point { x: 42.00, y: 28.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 24.00, y: 36.00 }),
                PathEl::LineTo(Point { x: 12.00, y: 36.00 }),
                PathEl::LineTo(Point { x: 12.00, y: 28.00 }),
                PathEl::LineTo(Point { x: 24.00, y: 28.00 }),
                PathEl::LineTo(Point { x: 24.00, y: 36.00 }),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct SignalWifi2BarLock {
    size: f64,
    color: Color,
}

impl SignalWifi2BarLock {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for SignalWifi2BarLock {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 41.00, y: 19.00 }),
                PathEl::CurveTo(
                    Point { x: 41.70, y: 19.00 },
                    Point { x: 42.40, y: 19.10 },
                    Point { x: 43.10, y: 19.20 },
                ),
                PathEl::LineTo(Point { x: 47.30, y: 14.00 }),
                PathEl::CurveTo(
                    Point { x: 46.40, y: 13.30 },
                    Point { x: 37.40, y: 6.00 },
                    Point { x: 24.00, y: 6.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 10.60, y: 6.00 },
                    Point { x: 1.60, y: 13.30 },
                    Point { x: 0.70, y: 14.00 },
                ),
                PathEl::LineTo(Point { x: 24.00, y: 43.00 }),
                PathEl::LineTo(Point { x: 31.00, y: 34.30 }),
                PathEl::LineTo(Point { x: 31.00, y: 29.00 }),
                PathEl::CurveTo(
                    Point { x: 31.00, y: 23.50 },
                    Point { x: 35.50, y: 19.00 },
                    Point { x: 41.00, y: 19.00 },
                ),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 46.00, y: 32.00 }),
                PathEl::LineTo(Point { x: 46.00, y: 29.00 }),
                PathEl::CurveTo(
                    Point { x: 46.00, y: 26.20 },
                    Point { x: 43.80, y: 24.00 },
                    Point { x: 41.00, y: 24.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 38.20, y: 24.00 },
                    Point { x: 36.00, y: 26.20 },
                    Point { x: 36.00, y: 29.00 },
                ),
                PathEl::LineTo(Point { x: 36.00, y: 32.00 }),
                PathEl::CurveTo(
                    Point { x: 34.90, y: 32.00 },
                    Point { x: 34.00, y: 32.90 },
                    Point { x: 34.00, y: 34.00 },
                ),
                PathEl::LineTo(Point { x: 34.00, y: 42.00 }),
                PathEl::CurveTo(
                    Point { x: 34.00, y: 43.10 },
                    Point { x: 34.90, y: 44.00 },
                    Point { x: 36.00, y: 44.00 },
                ),
                PathEl::LineTo(Point { x: 46.00, y: 44.00 }),
                PathEl::CurveTo(
                    Point { x: 47.10, y: 44.00 },
                    Point { x: 48.00, y: 43.10 },
                    Point { x: 48.00, y: 42.00 },
                ),
                PathEl::LineTo(Point { x: 48.00, y: 34.00 }),
                PathEl::CurveTo(
                    Point { x: 48.00, y: 32.90 },
                    Point { x: 47.10, y: 32.00 },
                    Point { x: 46.00, y: 32.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 44.00, y: 32.00 }),
                PathEl::LineTo(Point { x: 38.00, y: 32.00 }),
                PathEl::LineTo(Point { x: 38.00, y: 29.00 }),
                PathEl::CurveTo(
                    Point { x: 38.00, y: 27.30 },
                    Point { x: 39.30, y: 26.00 },
                    Point { x: 41.00, y: 26.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 42.70, y: 26.00 },
                    Point { x: 44.00, y: 27.30 },
                    Point { x: 44.00, y: 29.00 },
                ),
                PathEl::LineTo(Point { x: 44.00, y: 32.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 9.60, y: 25.00 }),
                PathEl::LineTo(Point { x: 24.00, y: 43.00 }),
                PathEl::LineTo(Point { x: 31.00, y: 34.30 }),
                PathEl::LineTo(Point { x: 31.00, y: 29.00 }),
                PathEl::CurveTo(
                    Point { x: 31.00, y: 26.40 },
                    Point { x: 32.00, y: 24.00 },
                    Point { x: 33.70, y: 22.20 },
                ),
                PathEl::CurveTo(
                    Point { x: 31.20, y: 21.00 },
                    Point { x: 27.90, y: 20.00 },
                    Point { x: 24.00, y: 20.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 15.80, y: 20.00 },
                    Point { x: 10.30, y: 24.50 },
                    Point { x: 9.60, y: 25.00 },
                ),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct ViewStream {
    size: f64,
    color: Color,
}

impl ViewStream {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for ViewStream {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 8.00, y: 36.00 }),
                PathEl::LineTo(Point { x: 42.00, y: 36.00 }),
                PathEl::LineTo(Point { x: 42.00, y: 24.00 }),
                PathEl::LineTo(Point { x: 8.00, y: 24.00 }),
                PathEl::LineTo(Point { x: 8.00, y: 36.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 8.00, y: 10.00 }),
                PathEl::LineTo(Point { x: 8.00, y: 22.00 }),
                PathEl::LineTo(Point { x: 42.00, y: 22.00 }),
                PathEl::LineTo(Point { x: 42.00, y: 10.00 }),
                PathEl::LineTo(Point { x: 8.00, y: 10.00 }),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct ChildCare {
    size: f64,
    color: Color,
}

impl ChildCare {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for ChildCare {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            Circle {
                center: Point { x: 29.00, y: 21.00 },
                radius: 2.50,
            },
            &brush,
        );
        ctx.fill(
            Circle {
                center: Point { x: 19.00, y: 21.00 },
                radius: 2.50,
            },
            &brush,
        );
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 45.89, y: 25.33 }),
                PathEl::CurveTo(
                    Point { x: 45.96, y: 24.90 },
                    Point { x: 46.00, y: 24.45 },
                    Point { x: 46.00, y: 24.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 46.00, y: 23.55 },
                    Point { x: 45.96, y: 23.10 },
                    Point { x: 45.89, y: 22.67 },
                ),
                PathEl::CurveTo(
                    Point { x: 45.38, y: 19.65 },
                    Point { x: 43.17, y: 17.20 },
                    Point { x: 40.28, y: 16.33 },
                ),
                PathEl::CurveTo(
                    Point { x: 39.23, y: 14.10 },
                    Point { x: 37.72, y: 12.12 },
                    Point { x: 35.89, y: 10.51 },
                ),
                PathEl::CurveTo(
                    Point { x: 32.72, y: 7.71 },
                    Point { x: 28.56, y: 6.00 },
                    Point { x: 24.00, y: 6.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 19.44, y: 6.00 },
                    Point { x: 15.28, y: 7.71 },
                    Point { x: 12.11, y: 10.51 },
                ),
                PathEl::CurveTo(
                    Point { x: 10.28, y: 12.13 },
                    Point { x: 8.78, y: 14.10 },
                    Point { x: 7.72, y: 16.33 },
                ),
                PathEl::CurveTo(
                    Point { x: 4.83, y: 17.19 },
                    Point { x: 2.62, y: 19.64 },
                    Point { x: 2.11, y: 22.67 },
                ),
                PathEl::CurveTo(
                    Point { x: 2.04, y: 23.10 },
                    Point { x: 2.00, y: 23.55 },
                    Point { x: 2.00, y: 24.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 2.00, y: 24.45 },
                    Point { x: 2.04, y: 24.90 },
                    Point { x: 2.11, y: 25.33 },
                ),
                PathEl::CurveTo(
                    Point { x: 2.62, y: 28.35 },
                    Point { x: 4.83, y: 30.80 },
                    Point { x: 7.72, y: 31.67 },
                ),
                PathEl::CurveTo(
                    Point { x: 8.76, y: 33.88 },
                    Point { x: 10.25, y: 35.84 },
                    Point { x: 12.06, y: 37.45 },
                ),
                PathEl::CurveTo(
                    Point { x: 15.24, y: 40.27 },
                    Point { x: 19.41, y: 42.00 },
                    Point { x: 24.00, y: 42.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 28.59, y: 42.00 },
                    Point { x: 32.76, y: 40.27 },
                    Point { x: 35.94, y: 37.45 },
                ),
                PathEl::CurveTo(
                    Point { x: 37.75, y: 35.84 },
                    Point { x: 39.24, y: 33.88 },
                    Point { x: 40.28, y: 31.67 },
                ),
                PathEl::CurveTo(
                    Point { x: 43.17, y: 30.80 },
                    Point { x: 45.38, y: 28.35 },
                    Point { x: 45.89, y: 25.33 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 38.00, y: 28.00 }),
                PathEl::CurveTo(
                    Point { x: 37.80, y: 28.00 },
                    Point { x: 37.61, y: 27.97 },
                    Point { x: 37.43, y: 27.94 },
                ),
                PathEl::CurveTo(
                    Point { x: 37.04, y: 29.27 },
                    Point { x: 36.45, y: 30.52 },
                    Point { x: 35.71, y: 31.66 },
                ),
                PathEl::CurveTo(
                    Point { x: 33.20, y: 35.47 },
                    Point { x: 28.89, y: 38.00 },
                    Point { x: 24.00, y: 38.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 19.11, y: 38.00 },
                    Point { x: 14.80, y: 35.47 },
                    Point { x: 12.30, y: 31.66 },
                ),
                PathEl::CurveTo(
                    Point { x: 11.55, y: 30.52 },
                    Point { x: 10.97, y: 29.27 },
                    Point { x: 10.58, y: 27.94 },
                ),
                PathEl::CurveTo(
                    Point { x: 10.39, y: 27.97 },
                    Point { x: 10.20, y: 28.00 },
                    Point { x: 10.00, y: 28.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 7.80, y: 28.00 },
                    Point { x: 6.00, y: 26.20 },
                    Point { x: 6.00, y: 24.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 6.00, y: 21.80 },
                    Point { x: 7.80, y: 20.00 },
                    Point { x: 10.00, y: 20.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 10.20, y: 20.00 },
                    Point { x: 10.39, y: 20.03 },
                    Point { x: 10.57, y: 20.06 },
                ),
                PathEl::CurveTo(
                    Point { x: 10.96, y: 18.73 },
                    Point { x: 11.55, y: 17.48 },
                    Point { x: 12.29, y: 16.34 },
                ),
                PathEl::CurveTo(
                    Point { x: 14.80, y: 12.53 },
                    Point { x: 19.11, y: 10.00 },
                    Point { x: 24.00, y: 10.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 28.89, y: 10.00 },
                    Point { x: 33.20, y: 12.53 },
                    Point { x: 35.70, y: 16.34 },
                ),
                PathEl::CurveTo(
                    Point { x: 36.45, y: 17.48 },
                    Point { x: 37.03, y: 18.73 },
                    Point { x: 37.42, y: 20.06 },
                ),
                PathEl::CurveTo(
                    Point { x: 37.61, y: 20.03 },
                    Point { x: 37.80, y: 20.00 },
                    Point { x: 38.00, y: 20.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 40.20, y: 20.00 },
                    Point { x: 42.00, y: 21.80 },
                    Point { x: 42.00, y: 24.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 42.00, y: 26.20 },
                    Point { x: 40.20, y: 28.00 },
                    Point { x: 38.00, y: 28.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 15.00, y: 28.00 }),
                PathEl::CurveTo(
                    Point { x: 16.52, y: 31.53 },
                    Point { x: 19.97, y: 34.00 },
                    Point { x: 24.00, y: 34.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 28.03, y: 34.00 },
                    Point { x: 31.48, y: 31.53 },
                    Point { x: 33.00, y: 28.00 },
                ),
                PathEl::LineTo(Point { x: 15.00, y: 28.00 }),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct FindInPage {
    size: f64,
    color: Color,
}

impl FindInPage {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for FindInPage {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 40.00, y: 39.17 }),
                PathEl::LineTo(Point { x: 40.00, y: 16.00 }),
                PathEl::LineTo(Point { x: 28.00, y: 4.00 }),
                PathEl::LineTo(Point { x: 12.00, y: 4.00 }),
                PathEl::CurveTo(
                    Point { x: 9.79, y: 4.00 },
                    Point { x: 8.02, y: 5.79 },
                    Point { x: 8.02, y: 8.00 },
                ),
                PathEl::LineTo(Point { x: 8.00, y: 40.00 }),
                PathEl::CurveTo(
                    Point { x: 8.00, y: 42.21 },
                    Point { x: 9.77, y: 44.00 },
                    Point { x: 11.98, y: 44.00 },
                ),
                PathEl::LineTo(Point { x: 36.00, y: 44.00 }),
                PathEl::CurveTo(
                    Point { x: 36.89, y: 44.00 },
                    Point { x: 37.71, y: 43.70 },
                    Point { x: 38.37, y: 43.20 },
                ),
                PathEl::LineTo(Point { x: 29.50, y: 34.33 }),
                PathEl::CurveTo(
                    Point { x: 27.93, y: 35.38 },
                    Point { x: 26.04, y: 36.00 },
                    Point { x: 24.00, y: 36.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 18.48, y: 36.00 },
                    Point { x: 14.00, y: 31.52 },
                    Point { x: 14.00, y: 26.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 14.00, y: 20.48 },
                    Point { x: 18.48, y: 16.00 },
                    Point { x: 24.00, y: 16.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 29.52, y: 16.00 },
                    Point { x: 34.00, y: 20.48 },
                    Point { x: 34.00, y: 26.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 34.00, y: 28.04 },
                    Point { x: 33.38, y: 29.93 },
                    Point { x: 32.34, y: 31.51 },
                ),
                PathEl::LineTo(Point { x: 40.00, y: 39.17 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 18.00, y: 26.00 }),
                PathEl::CurveTo(
                    Point { x: 18.00, y: 29.31 },
                    Point { x: 20.69, y: 32.00 },
                    Point { x: 24.00, y: 32.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 27.31, y: 32.00 },
                    Point { x: 30.00, y: 29.31 },
                    Point { x: 30.00, y: 26.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 30.00, y: 22.69 },
                    Point { x: 27.31, y: 20.00 },
                    Point { x: 24.00, y: 20.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 20.69, y: 20.00 },
                    Point { x: 18.00, y: 22.69 },
                    Point { x: 18.00, y: 26.00 },
                ),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct PictureInPictureAlt {
    size: f64,
    color: Color,
}

impl PictureInPictureAlt {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for PictureInPictureAlt {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 38.00, y: 22.00 }),
                PathEl::LineTo(Point { x: 22.00, y: 22.00 }),
                PathEl::LineTo(Point { x: 22.00, y: 33.99 }),
                PathEl::LineTo(Point { x: 38.00, y: 33.99 }),
                PathEl::LineTo(Point { x: 38.00, y: 22.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 46.00, y: 38.00 }),
                PathEl::LineTo(Point { x: 46.00, y: 9.96 }),
                PathEl::CurveTo(
                    Point { x: 46.00, y: 7.76 },
                    Point { x: 44.20, y: 6.00 },
                    Point { x: 42.00, y: 6.00 },
                ),
                PathEl::LineTo(Point { x: 6.00, y: 6.00 }),
                PathEl::CurveTo(
                    Point { x: 3.80, y: 6.00 },
                    Point { x: 2.00, y: 7.76 },
                    Point { x: 2.00, y: 9.96 },
                ),
                PathEl::LineTo(Point { x: 2.00, y: 38.00 }),
                PathEl::CurveTo(
                    Point { x: 2.00, y: 40.20 },
                    Point { x: 3.80, y: 42.00 },
                    Point { x: 6.00, y: 42.00 },
                ),
                PathEl::LineTo(Point { x: 42.00, y: 42.00 }),
                PathEl::CurveTo(
                    Point { x: 44.20, y: 42.00 },
                    Point { x: 46.00, y: 40.20 },
                    Point { x: 46.00, y: 38.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 42.00, y: 38.04 }),
                PathEl::LineTo(Point { x: 6.00, y: 38.04 }),
                PathEl::LineTo(Point { x: 6.00, y: 9.94 }),
                PathEl::LineTo(Point { x: 42.00, y: 9.94 }),
                PathEl::LineTo(Point { x: 42.00, y: 38.04 }),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct Brightness2 {
    size: f64,
    color: Color,
}

impl Brightness2 {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for Brightness2 {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 20.00, y: 4.00 }),
                PathEl::CurveTo(
                    Point { x: 16.35, y: 4.00 },
                    Point { x: 12.94, y: 4.99 },
                    Point { x: 10.00, y: 6.70 },
                ),
                PathEl::CurveTo(
                    Point { x: 15.97, y: 10.16 },
                    Point { x: 20.00, y: 16.60 },
                    Point { x: 20.00, y: 24.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 20.00, y: 31.40 },
                    Point { x: 15.97, y: 37.84 },
                    Point { x: 10.00, y: 41.30 },
                ),
                PathEl::CurveTo(
                    Point { x: 12.94, y: 43.01 },
                    Point { x: 16.35, y: 44.00 },
                    Point { x: 20.00, y: 44.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 31.05, y: 44.00 },
                    Point { x: 40.00, y: 35.05 },
                    Point { x: 40.00, y: 24.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 40.00, y: 12.95 },
                    Point { x: 31.05, y: 4.00 },
                    Point { x: 20.00, y: 4.00 },
                ),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct BatteryStd {
    size: f64,
    color: Color,
}

impl BatteryStd {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for BatteryStd {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 31.33, y: 8.00 }),
                PathEl::LineTo(Point { x: 28.00, y: 8.00 }),
                PathEl::LineTo(Point { x: 28.00, y: 4.00 }),
                PathEl::LineTo(Point { x: 20.00, y: 4.00 }),
                PathEl::LineTo(Point { x: 20.00, y: 8.00 }),
                PathEl::LineTo(Point { x: 16.67, y: 8.00 }),
                PathEl::CurveTo(
                    Point { x: 15.19, y: 8.00 },
                    Point { x: 14.00, y: 9.19 },
                    Point { x: 14.00, y: 10.67 },
                ),
                PathEl::LineTo(Point { x: 14.00, y: 41.34 }),
                PathEl::CurveTo(
                    Point { x: 14.00, y: 42.81 },
                    Point { x: 15.19, y: 44.01 },
                    Point { x: 16.67, y: 44.01 },
                ),
                PathEl::LineTo(Point { x: 31.34, y: 44.01 }),
                PathEl::CurveTo(
                    Point { x: 32.81, y: 44.01 },
                    Point { x: 34.01, y: 42.82 },
                    Point { x: 34.01, y: 41.34 },
                ),
                PathEl::LineTo(Point { x: 34.01, y: 10.67 }),
                PathEl::CurveTo(
                    Point { x: 34.00, y: 9.19 },
                    Point { x: 32.81, y: 8.00 },
                    Point { x: 31.33, y: 8.00 },
                ),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct Event {
    size: f64,
    color: Color,
}

impl Event {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for Event {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 34.00, y: 24.00 }),
                PathEl::LineTo(Point { x: 24.00, y: 24.00 }),
                PathEl::LineTo(Point { x: 24.00, y: 34.00 }),
                PathEl::LineTo(Point { x: 34.00, y: 34.00 }),
                PathEl::LineTo(Point { x: 34.00, y: 24.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 32.00, y: 2.00 }),
                PathEl::LineTo(Point { x: 32.00, y: 6.00 }),
                PathEl::LineTo(Point { x: 16.00, y: 6.00 }),
                PathEl::LineTo(Point { x: 16.00, y: 2.00 }),
                PathEl::LineTo(Point { x: 12.00, y: 2.00 }),
                PathEl::LineTo(Point { x: 12.00, y: 6.00 }),
                PathEl::LineTo(Point { x: 10.00, y: 6.00 }),
                PathEl::CurveTo(
                    Point { x: 7.79, y: 6.00 },
                    Point { x: 6.02, y: 7.79 },
                    Point { x: 6.02, y: 10.00 },
                ),
                PathEl::LineTo(Point { x: 6.00, y: 38.00 }),
                PathEl::CurveTo(
                    Point { x: 6.00, y: 40.21 },
                    Point { x: 7.79, y: 42.00 },
                    Point { x: 10.00, y: 42.00 },
                ),
                PathEl::LineTo(Point { x: 38.00, y: 42.00 }),
                PathEl::CurveTo(
                    Point { x: 40.21, y: 42.00 },
                    Point { x: 42.00, y: 40.21 },
                    Point { x: 42.00, y: 38.00 },
                ),
                PathEl::LineTo(Point { x: 42.00, y: 10.00 }),
                PathEl::CurveTo(
                    Point { x: 42.00, y: 7.79 },
                    Point { x: 40.21, y: 6.00 },
                    Point { x: 38.00, y: 6.00 },
                ),
                PathEl::LineTo(Point { x: 36.00, y: 6.00 }),
                PathEl::LineTo(Point { x: 36.00, y: 2.00 }),
                PathEl::LineTo(Point { x: 32.00, y: 2.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 38.00, y: 38.00 }),
                PathEl::LineTo(Point { x: 10.00, y: 38.00 }),
                PathEl::LineTo(Point { x: 10.00, y: 16.00 }),
                PathEl::LineTo(Point { x: 38.00, y: 16.00 }),
                PathEl::LineTo(Point { x: 38.00, y: 38.00 }),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct Explicit {
    size: f64,
    color: Color,
}

impl Explicit {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for Explicit {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 38.00, y: 6.00 }),
                PathEl::LineTo(Point { x: 10.00, y: 6.00 }),
                PathEl::CurveTo(
                    Point { x: 7.79, y: 6.00 },
                    Point { x: 6.00, y: 7.79 },
                    Point { x: 6.00, y: 10.00 },
                ),
                PathEl::LineTo(Point { x: 6.00, y: 38.00 }),
                PathEl::CurveTo(
                    Point { x: 6.00, y: 40.21 },
                    Point { x: 7.79, y: 42.00 },
                    Point { x: 10.00, y: 42.00 },
                ),
                PathEl::LineTo(Point { x: 38.00, y: 42.00 }),
                PathEl::CurveTo(
                    Point { x: 40.21, y: 42.00 },
                    Point { x: 42.00, y: 40.21 },
                    Point { x: 42.00, y: 38.00 },
                ),
                PathEl::LineTo(Point { x: 42.00, y: 10.00 }),
                PathEl::CurveTo(
                    Point { x: 42.00, y: 7.79 },
                    Point { x: 40.21, y: 6.00 },
                    Point { x: 38.00, y: 6.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 30.00, y: 18.00 }),
                PathEl::LineTo(Point { x: 22.00, y: 18.00 }),
                PathEl::LineTo(Point { x: 22.00, y: 22.00 }),
                PathEl::LineTo(Point { x: 30.00, y: 22.00 }),
                PathEl::LineTo(Point { x: 30.00, y: 26.00 }),
                PathEl::LineTo(Point { x: 22.00, y: 26.00 }),
                PathEl::LineTo(Point { x: 22.00, y: 30.00 }),
                PathEl::LineTo(Point { x: 30.00, y: 30.00 }),
                PathEl::LineTo(Point { x: 30.00, y: 34.00 }),
                PathEl::LineTo(Point { x: 18.00, y: 34.00 }),
                PathEl::LineTo(Point { x: 18.00, y: 14.00 }),
                PathEl::LineTo(Point { x: 30.00, y: 14.00 }),
                PathEl::LineTo(Point { x: 30.00, y: 18.00 }),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct Lock {
    size: f64,
    color: Color,
}

impl Lock {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for Lock {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 36.00, y: 16.00 }),
                PathEl::LineTo(Point { x: 34.00, y: 16.00 }),
                PathEl::LineTo(Point { x: 34.00, y: 12.00 }),
                PathEl::CurveTo(
                    Point { x: 34.00, y: 6.48 },
                    Point { x: 29.52, y: 2.00 },
                    Point { x: 24.00, y: 2.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 18.48, y: 2.00 },
                    Point { x: 14.00, y: 6.48 },
                    Point { x: 14.00, y: 12.00 },
                ),
                PathEl::LineTo(Point { x: 14.00, y: 16.00 }),
                PathEl::LineTo(Point { x: 12.00, y: 16.00 }),
                PathEl::CurveTo(
                    Point { x: 9.79, y: 16.00 },
                    Point { x: 8.00, y: 17.79 },
                    Point { x: 8.00, y: 20.00 },
                ),
                PathEl::LineTo(Point { x: 8.00, y: 40.00 }),
                PathEl::CurveTo(
                    Point { x: 8.00, y: 42.21 },
                    Point { x: 9.79, y: 44.00 },
                    Point { x: 12.00, y: 44.00 },
                ),
                PathEl::LineTo(Point { x: 36.00, y: 44.00 }),
                PathEl::CurveTo(
                    Point { x: 38.21, y: 44.00 },
                    Point { x: 40.00, y: 42.21 },
                    Point { x: 40.00, y: 40.00 },
                ),
                PathEl::LineTo(Point { x: 40.00, y: 20.00 }),
                PathEl::CurveTo(
                    Point { x: 40.00, y: 17.79 },
                    Point { x: 38.21, y: 16.00 },
                    Point { x: 36.00, y: 16.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 24.00, y: 34.00 }),
                PathEl::CurveTo(
                    Point { x: 21.79, y: 34.00 },
                    Point { x: 20.00, y: 32.21 },
                    Point { x: 20.00, y: 30.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 20.00, y: 27.79 },
                    Point { x: 21.79, y: 26.00 },
                    Point { x: 24.00, y: 26.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 26.21, y: 26.00 },
                    Point { x: 28.00, y: 27.79 },
                    Point { x: 28.00, y: 30.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 28.00, y: 32.21 },
                    Point { x: 26.21, y: 34.00 },
                    Point { x: 24.00, y: 34.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 30.20, y: 16.00 }),
                PathEl::LineTo(Point { x: 17.80, y: 16.00 }),
                PathEl::LineTo(Point { x: 17.80, y: 12.00 }),
                PathEl::CurveTo(
                    Point { x: 17.80, y: 8.58 },
                    Point { x: 20.58, y: 5.80 },
                    Point { x: 24.00, y: 5.80 },
                ),
                PathEl::CurveTo(
                    Point { x: 27.42, y: 5.80 },
                    Point { x: 30.20, y: 8.58 },
                    Point { x: 30.20, y: 12.00 },
                ),
                PathEl::LineTo(Point { x: 30.20, y: 16.00 }),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct FormatTextdirectionRToL {
    size: f64,
    color: Color,
}

impl FormatTextdirectionRToL {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for FormatTextdirectionRToL {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 20.00, y: 20.00 }),
                PathEl::LineTo(Point { x: 20.00, y: 30.00 }),
                PathEl::LineTo(Point { x: 24.00, y: 30.00 }),
                PathEl::LineTo(Point { x: 24.00, y: 8.00 }),
                PathEl::LineTo(Point { x: 28.00, y: 8.00 }),
                PathEl::LineTo(Point { x: 28.00, y: 30.00 }),
                PathEl::LineTo(Point { x: 32.00, y: 30.00 }),
                PathEl::LineTo(Point { x: 32.00, y: 8.00 }),
                PathEl::LineTo(Point { x: 36.00, y: 8.00 }),
                PathEl::LineTo(Point { x: 36.00, y: 4.00 }),
                PathEl::LineTo(Point { x: 20.00, y: 4.00 }),
                PathEl::CurveTo(
                    Point { x: 15.58, y: 4.00 },
                    Point { x: 12.00, y: 7.58 },
                    Point { x: 12.00, y: 12.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 12.00, y: 16.42 },
                    Point { x: 15.58, y: 20.00 },
                    Point { x: 20.00, y: 20.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 16.00, y: 34.00 }),
                PathEl::LineTo(Point { x: 16.00, y: 28.00 }),
                PathEl::LineTo(Point { x: 8.00, y: 36.00 }),
                PathEl::LineTo(Point { x: 16.00, y: 44.00 }),
                PathEl::LineTo(Point { x: 16.00, y: 38.00 }),
                PathEl::LineTo(Point { x: 40.00, y: 38.00 }),
                PathEl::LineTo(Point { x: 40.00, y: 34.00 }),
                PathEl::LineTo(Point { x: 16.00, y: 34.00 }),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct Dehaze {
    size: f64,
    color: Color,
}

impl Dehaze {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for Dehaze {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 4.00, y: 31.00 }),
                PathEl::LineTo(Point { x: 4.00, y: 35.00 }),
                PathEl::LineTo(Point { x: 44.00, y: 35.00 }),
                PathEl::LineTo(Point { x: 44.00, y: 31.00 }),
                PathEl::LineTo(Point { x: 4.00, y: 31.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 4.00, y: 21.00 }),
                PathEl::LineTo(Point { x: 4.00, y: 25.00 }),
                PathEl::LineTo(Point { x: 44.00, y: 25.00 }),
                PathEl::LineTo(Point { x: 44.00, y: 21.00 }),
                PathEl::LineTo(Point { x: 4.00, y: 21.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 4.00, y: 11.00 }),
                PathEl::LineTo(Point { x: 4.00, y: 15.00 }),
                PathEl::LineTo(Point { x: 44.00, y: 15.00 }),
                PathEl::LineTo(Point { x: 44.00, y: 11.00 }),
                PathEl::LineTo(Point { x: 4.00, y: 11.00 }),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct SelectAll {
    size: f64,
    color: Color,
}

impl SelectAll {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for SelectAll {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 6.00, y: 10.00 }),
                PathEl::LineTo(Point { x: 10.00, y: 10.00 }),
                PathEl::LineTo(Point { x: 10.00, y: 6.00 }),
                PathEl::CurveTo(
                    Point { x: 7.79, y: 6.00 },
                    Point { x: 6.00, y: 7.79 },
                    Point { x: 6.00, y: 10.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 6.00, y: 26.00 }),
                PathEl::LineTo(Point { x: 10.00, y: 26.00 }),
                PathEl::LineTo(Point { x: 10.00, y: 22.00 }),
                PathEl::LineTo(Point { x: 6.00, y: 22.00 }),
                PathEl::LineTo(Point { x: 6.00, y: 26.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 14.00, y: 42.00 }),
                PathEl::LineTo(Point { x: 18.00, y: 42.00 }),
                PathEl::LineTo(Point { x: 18.00, y: 38.00 }),
                PathEl::LineTo(Point { x: 14.00, y: 38.00 }),
                PathEl::LineTo(Point { x: 14.00, y: 42.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 6.00, y: 18.00 }),
                PathEl::LineTo(Point { x: 10.00, y: 18.00 }),
                PathEl::LineTo(Point { x: 10.00, y: 14.00 }),
                PathEl::LineTo(Point { x: 6.00, y: 14.00 }),
                PathEl::LineTo(Point { x: 6.00, y: 18.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 26.00, y: 6.00 }),
                PathEl::LineTo(Point { x: 22.00, y: 6.00 }),
                PathEl::LineTo(Point { x: 22.00, y: 10.00 }),
                PathEl::LineTo(Point { x: 26.00, y: 10.00 }),
                PathEl::LineTo(Point { x: 26.00, y: 6.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 38.00, y: 6.00 }),
                PathEl::LineTo(Point { x: 38.00, y: 10.00 }),
                PathEl::LineTo(Point { x: 42.00, y: 10.00 }),
                PathEl::CurveTo(
                    Point { x: 42.00, y: 7.79 },
                    Point { x: 40.21, y: 6.00 },
                    Point { x: 38.00, y: 6.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 10.00, y: 42.00 }),
                PathEl::LineTo(Point { x: 10.00, y: 38.00 }),
                PathEl::LineTo(Point { x: 6.00, y: 38.00 }),
                PathEl::CurveTo(
                    Point { x: 6.00, y: 40.21 },
                    Point { x: 7.79, y: 42.00 },
                    Point { x: 10.00, y: 42.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 6.00, y: 34.00 }),
                PathEl::LineTo(Point { x: 10.00, y: 34.00 }),
                PathEl::LineTo(Point { x: 10.00, y: 30.00 }),
                PathEl::LineTo(Point { x: 6.00, y: 30.00 }),
                PathEl::LineTo(Point { x: 6.00, y: 34.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 18.00, y: 6.00 }),
                PathEl::LineTo(Point { x: 14.00, y: 6.00 }),
                PathEl::LineTo(Point { x: 14.00, y: 10.00 }),
                PathEl::LineTo(Point { x: 18.00, y: 10.00 }),
                PathEl::LineTo(Point { x: 18.00, y: 6.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 22.00, y: 42.00 }),
                PathEl::LineTo(Point { x: 26.00, y: 42.00 }),
                PathEl::LineTo(Point { x: 26.00, y: 38.00 }),
                PathEl::LineTo(Point { x: 22.00, y: 38.00 }),
                PathEl::LineTo(Point { x: 22.00, y: 42.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 38.00, y: 26.00 }),
                PathEl::LineTo(Point { x: 42.00, y: 26.00 }),
                PathEl::LineTo(Point { x: 42.00, y: 22.00 }),
                PathEl::LineTo(Point { x: 38.00, y: 22.00 }),
                PathEl::LineTo(Point { x: 38.00, y: 26.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 38.00, y: 42.00 }),
                PathEl::CurveTo(
                    Point { x: 40.21, y: 42.00 },
                    Point { x: 42.00, y: 40.21 },
                    Point { x: 42.00, y: 38.00 },
                ),
                PathEl::LineTo(Point { x: 38.00, y: 38.00 }),
                PathEl::LineTo(Point { x: 38.00, y: 42.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 38.00, y: 18.00 }),
                PathEl::LineTo(Point { x: 42.00, y: 18.00 }),
                PathEl::LineTo(Point { x: 42.00, y: 14.00 }),
                PathEl::LineTo(Point { x: 38.00, y: 14.00 }),
                PathEl::LineTo(Point { x: 38.00, y: 18.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 38.00, y: 34.00 }),
                PathEl::LineTo(Point { x: 42.00, y: 34.00 }),
                PathEl::LineTo(Point { x: 42.00, y: 30.00 }),
                PathEl::LineTo(Point { x: 38.00, y: 30.00 }),
                PathEl::LineTo(Point { x: 38.00, y: 34.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 30.00, y: 42.00 }),
                PathEl::LineTo(Point { x: 34.00, y: 42.00 }),
                PathEl::LineTo(Point { x: 34.00, y: 38.00 }),
                PathEl::LineTo(Point { x: 30.00, y: 38.00 }),
                PathEl::LineTo(Point { x: 30.00, y: 42.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 30.00, y: 10.00 }),
                PathEl::LineTo(Point { x: 34.00, y: 10.00 }),
                PathEl::LineTo(Point { x: 34.00, y: 6.00 }),
                PathEl::LineTo(Point { x: 30.00, y: 6.00 }),
                PathEl::LineTo(Point { x: 30.00, y: 10.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 14.00, y: 34.00 }),
                PathEl::LineTo(Point { x: 34.00, y: 34.00 }),
                PathEl::LineTo(Point { x: 34.00, y: 14.00 }),
                PathEl::LineTo(Point { x: 14.00, y: 14.00 }),
                PathEl::LineTo(Point { x: 14.00, y: 34.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 18.00, y: 18.00 }),
                PathEl::LineTo(Point { x: 30.00, y: 18.00 }),
                PathEl::LineTo(Point { x: 30.00, y: 30.00 }),
                PathEl::LineTo(Point { x: 18.00, y: 30.00 }),
                PathEl::LineTo(Point { x: 18.00, y: 18.00 }),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct KeyboardVoice {
    size: f64,
    color: Color,
}

impl KeyboardVoice {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for KeyboardVoice {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 24.00, y: 30.00 }),
                PathEl::CurveTo(
                    Point { x: 27.31, y: 30.00 },
                    Point { x: 29.98, y: 27.31 },
                    Point { x: 29.98, y: 24.00 },
                ),
                PathEl::LineTo(Point { x: 30.00, y: 12.00 }),
                PathEl::CurveTo(
                    Point { x: 30.00, y: 8.68 },
                    Point { x: 27.32, y: 6.00 },
                    Point { x: 24.00, y: 6.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 20.69, y: 6.00 },
                    Point { x: 18.00, y: 8.68 },
                    Point { x: 18.00, y: 12.00 },
                ),
                PathEl::LineTo(Point { x: 18.00, y: 24.00 }),
                PathEl::CurveTo(
                    Point { x: 18.00, y: 27.31 },
                    Point { x: 20.69, y: 30.00 },
                    Point { x: 24.00, y: 30.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 34.60, y: 24.00 }),
                PathEl::CurveTo(
                    Point { x: 34.60, y: 30.00 },
                    Point { x: 29.53, y: 34.20 },
                    Point { x: 24.00, y: 34.20 },
                ),
                PathEl::CurveTo(
                    Point { x: 18.48, y: 34.20 },
                    Point { x: 13.40, y: 30.00 },
                    Point { x: 13.40, y: 24.00 },
                ),
                PathEl::LineTo(Point { x: 10.00, y: 24.00 }),
                PathEl::CurveTo(
                    Point { x: 10.00, y: 30.83 },
                    Point { x: 15.44, y: 36.47 },
                    Point { x: 22.00, y: 37.44 },
                ),
                PathEl::LineTo(Point { x: 22.00, y: 44.00 }),
                PathEl::LineTo(Point { x: 26.00, y: 44.00 }),
                PathEl::LineTo(Point { x: 26.00, y: 37.44 }),
                PathEl::CurveTo(
                    Point { x: 32.56, y: 36.47 },
                    Point { x: 38.00, y: 30.83 },
                    Point { x: 38.00, y: 24.00 },
                ),
                PathEl::LineTo(Point { x: 34.60, y: 24.00 }),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct InsertEmoticon {
    size: f64,
    color: Color,
}

impl InsertEmoticon {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for InsertEmoticon {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 23.99, y: 4.00 }),
                PathEl::CurveTo(
                    Point { x: 12.94, y: 4.00 },
                    Point { x: 4.00, y: 12.95 },
                    Point { x: 4.00, y: 24.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 4.00, y: 35.05 },
                    Point { x: 12.94, y: 44.00 },
                    Point { x: 23.99, y: 44.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 35.04, y: 44.00 },
                    Point { x: 44.00, y: 35.05 },
                    Point { x: 44.00, y: 24.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 44.00, y: 12.95 },
                    Point { x: 35.04, y: 4.00 },
                    Point { x: 23.99, y: 4.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 24.00, y: 40.00 }),
                PathEl::CurveTo(
                    Point { x: 15.16, y: 40.00 },
                    Point { x: 8.00, y: 32.84 },
                    Point { x: 8.00, y: 24.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 8.00, y: 15.16 },
                    Point { x: 15.16, y: 8.00 },
                    Point { x: 24.00, y: 8.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 32.84, y: 8.00 },
                    Point { x: 40.00, y: 15.16 },
                    Point { x: 40.00, y: 24.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 40.00, y: 32.84 },
                    Point { x: 32.84, y: 40.00 },
                    Point { x: 24.00, y: 40.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 31.00, y: 22.00 }),
                PathEl::CurveTo(
                    Point { x: 32.66, y: 22.00 },
                    Point { x: 34.00, y: 20.66 },
                    Point { x: 34.00, y: 19.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 34.00, y: 17.34 },
                    Point { x: 32.66, y: 16.00 },
                    Point { x: 31.00, y: 16.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 29.34, y: 16.00 },
                    Point { x: 28.00, y: 17.34 },
                    Point { x: 28.00, y: 19.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 28.00, y: 20.66 },
                    Point { x: 29.34, y: 22.00 },
                    Point { x: 31.00, y: 22.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 17.00, y: 22.00 }),
                PathEl::CurveTo(
                    Point { x: 18.66, y: 22.00 },
                    Point { x: 20.00, y: 20.66 },
                    Point { x: 20.00, y: 19.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 20.00, y: 17.34 },
                    Point { x: 18.66, y: 16.00 },
                    Point { x: 17.00, y: 16.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 15.34, y: 16.00 },
                    Point { x: 14.00, y: 17.34 },
                    Point { x: 14.00, y: 19.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 14.00, y: 20.66 },
                    Point { x: 15.34, y: 22.00 },
                    Point { x: 17.00, y: 22.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 24.00, y: 35.00 }),
                PathEl::CurveTo(
                    Point { x: 28.66, y: 35.00 },
                    Point { x: 32.61, y: 32.09 },
                    Point { x: 34.21, y: 28.00 },
                ),
                PathEl::LineTo(Point { x: 13.79, y: 28.00 }),
                PathEl::CurveTo(
                    Point { x: 15.39, y: 32.09 },
                    Point { x: 19.34, y: 35.00 },
                    Point { x: 24.00, y: 35.00 },
                ),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct Adb {
    size: f64,
    color: Color,
}

impl Adb {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for Adb {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 10.00, y: 32.00 }),
                PathEl::CurveTo(
                    Point { x: 10.00, y: 39.73 },
                    Point { x: 16.27, y: 46.00 },
                    Point { x: 24.00, y: 46.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 31.73, y: 46.00 },
                    Point { x: 38.00, y: 39.73 },
                    Point { x: 38.00, y: 32.00 },
                ),
                PathEl::LineTo(Point { x: 38.00, y: 24.00 }),
                PathEl::LineTo(Point { x: 10.00, y: 24.00 }),
                PathEl::LineTo(Point { x: 10.00, y: 32.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 32.25, y: 8.74 }),
                PathEl::LineTo(Point { x: 36.45, y: 4.54 }),
                PathEl::LineTo(Point { x: 34.80, y: 2.89 }),
                PathEl::LineTo(Point { x: 30.19, y: 7.50 }),
                PathEl::CurveTo(
                    Point { x: 28.31, y: 6.57 },
                    Point { x: 26.23, y: 6.00 },
                    Point { x: 24.00, y: 6.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 21.77, y: 6.00 },
                    Point { x: 19.69, y: 6.57 },
                    Point { x: 17.81, y: 7.50 },
                ),
                PathEl::LineTo(Point { x: 13.20, y: 2.89 }),
                PathEl::LineTo(Point { x: 11.55, y: 4.54 }),
                PathEl::LineTo(Point { x: 15.75, y: 8.74 }),
                PathEl::CurveTo(
                    Point { x: 12.28, y: 11.28 },
                    Point { x: 10.00, y: 15.36 },
                    Point { x: 10.00, y: 20.00 },
                ),
                PathEl::LineTo(Point { x: 10.00, y: 22.00 }),
                PathEl::LineTo(Point { x: 38.00, y: 22.00 }),
                PathEl::LineTo(Point { x: 38.00, y: 20.00 }),
                PathEl::CurveTo(
                    Point { x: 38.00, y: 15.36 },
                    Point { x: 35.72, y: 11.28 },
                    Point { x: 32.25, y: 8.74 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 18.00, y: 18.00 }),
                PathEl::CurveTo(
                    Point { x: 16.89, y: 18.00 },
                    Point { x: 16.00, y: 17.10 },
                    Point { x: 16.00, y: 16.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 16.00, y: 14.90 },
                    Point { x: 16.89, y: 14.00 },
                    Point { x: 18.00, y: 14.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 19.11, y: 14.00 },
                    Point { x: 20.00, y: 14.90 },
                    Point { x: 20.00, y: 16.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 20.00, y: 17.10 },
                    Point { x: 19.11, y: 18.00 },
                    Point { x: 18.00, y: 18.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 30.00, y: 18.00 }),
                PathEl::CurveTo(
                    Point { x: 28.89, y: 18.00 },
                    Point { x: 28.00, y: 17.10 },
                    Point { x: 28.00, y: 16.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 28.00, y: 14.90 },
                    Point { x: 28.89, y: 14.00 },
                    Point { x: 30.00, y: 14.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 31.11, y: 14.00 },
                    Point { x: 32.00, y: 14.90 },
                    Point { x: 32.00, y: 16.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 32.00, y: 17.10 },
                    Point { x: 31.11, y: 18.00 },
                    Point { x: 30.00, y: 18.00 },
                ),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct Album {
    size: f64,
    color: Color,
}

impl Album {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for Album {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 24.00, y: 4.00 }),
                PathEl::CurveTo(
                    Point { x: 12.95, y: 4.00 },
                    Point { x: 4.00, y: 12.95 },
                    Point { x: 4.00, y: 24.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 4.00, y: 35.05 },
                    Point { x: 12.95, y: 44.00 },
                    Point { x: 24.00, y: 44.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 35.05, y: 44.00 },
                    Point { x: 44.00, y: 35.05 },
                    Point { x: 44.00, y: 24.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 44.00, y: 12.95 },
                    Point { x: 35.05, y: 4.00 },
                    Point { x: 24.00, y: 4.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 24.00, y: 33.00 }),
                PathEl::CurveTo(
                    Point { x: 19.03, y: 33.00 },
                    Point { x: 15.00, y: 28.97 },
                    Point { x: 15.00, y: 24.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 15.00, y: 19.03 },
                    Point { x: 19.03, y: 15.00 },
                    Point { x: 24.00, y: 15.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 28.97, y: 15.00 },
                    Point { x: 33.00, y: 19.03 },
                    Point { x: 33.00, y: 24.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 33.00, y: 28.97 },
                    Point { x: 28.97, y: 33.00 },
                    Point { x: 24.00, y: 33.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 24.00, y: 22.00 }),
                PathEl::CurveTo(
                    Point { x: 22.90, y: 22.00 },
                    Point { x: 22.00, y: 22.90 },
                    Point { x: 22.00, y: 24.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 22.00, y: 25.10 },
                    Point { x: 22.90, y: 26.00 },
                    Point { x: 24.00, y: 26.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 25.10, y: 26.00 },
                    Point { x: 26.00, y: 25.10 },
                    Point { x: 26.00, y: 24.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 26.00, y: 22.90 },
                    Point { x: 25.10, y: 22.00 },
                    Point { x: 24.00, y: 22.00 },
                ),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct VolumeDown {
    size: f64,
    color: Color,
}

impl VolumeDown {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for VolumeDown {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 37.00, y: 24.00 }),
                PathEl::CurveTo(
                    Point { x: 37.00, y: 20.47 },
                    Point { x: 34.96, y: 17.42 },
                    Point { x: 32.00, y: 15.95 },
                ),
                PathEl::LineTo(Point { x: 32.00, y: 32.06 }),
                PathEl::CurveTo(
                    Point { x: 34.96, y: 30.58 },
                    Point { x: 37.00, y: 27.53 },
                    Point { x: 37.00, y: 24.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 10.00, y: 18.00 }),
                PathEl::LineTo(Point { x: 10.00, y: 30.00 }),
                PathEl::LineTo(Point { x: 18.00, y: 30.00 }),
                PathEl::LineTo(Point { x: 28.00, y: 40.00 }),
                PathEl::LineTo(Point { x: 28.00, y: 8.00 }),
                PathEl::LineTo(Point { x: 18.00, y: 18.00 }),
                PathEl::LineTo(Point { x: 10.00, y: 18.00 }),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct Battery60 {
    size: f64,
    color: Color,
}

impl Battery60 {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for Battery60 {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 34.00, y: 10.67 }),
                PathEl::CurveTo(
                    Point { x: 34.00, y: 9.19 },
                    Point { x: 32.81, y: 8.00 },
                    Point { x: 31.33, y: 8.00 },
                ),
                PathEl::LineTo(Point { x: 28.00, y: 8.00 }),
                PathEl::LineTo(Point { x: 28.00, y: 4.00 }),
                PathEl::LineTo(Point { x: 20.00, y: 4.00 }),
                PathEl::LineTo(Point { x: 20.00, y: 8.00 }),
                PathEl::LineTo(Point { x: 16.67, y: 8.00 }),
                PathEl::CurveTo(
                    Point { x: 15.19, y: 8.00 },
                    Point { x: 14.00, y: 9.19 },
                    Point { x: 14.00, y: 10.67 },
                ),
                PathEl::LineTo(Point { x: 14.00, y: 22.00 }),
                PathEl::LineTo(Point { x: 34.00, y: 22.00 }),
                PathEl::LineTo(Point { x: 34.00, y: 10.67 }),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 14.00, y: 22.00 }),
                PathEl::LineTo(Point { x: 14.00, y: 41.33 }),
                PathEl::CurveTo(
                    Point { x: 14.00, y: 42.80 },
                    Point { x: 15.19, y: 44.00 },
                    Point { x: 16.67, y: 44.00 },
                ),
                PathEl::LineTo(Point { x: 31.34, y: 44.00 }),
                PathEl::CurveTo(
                    Point { x: 32.81, y: 44.00 },
                    Point { x: 34.01, y: 42.81 },
                    Point { x: 34.01, y: 41.33 },
                ),
                PathEl::LineTo(Point { x: 34.01, y: 22.00 }),
                PathEl::LineTo(Point { x: 14.00, y: 22.00 }),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct CenterFocusWeak {
    size: f64,
    color: Color,
}

impl CenterFocusWeak {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for CenterFocusWeak {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 10.00, y: 30.00 }),
                PathEl::LineTo(Point { x: 6.00, y: 30.00 }),
                PathEl::LineTo(Point { x: 6.00, y: 38.00 }),
                PathEl::CurveTo(
                    Point { x: 6.00, y: 40.21 },
                    Point { x: 7.79, y: 42.00 },
                    Point { x: 10.00, y: 42.00 },
                ),
                PathEl::LineTo(Point { x: 18.00, y: 42.00 }),
                PathEl::LineTo(Point { x: 18.00, y: 38.00 }),
                PathEl::LineTo(Point { x: 10.00, y: 38.00 }),
                PathEl::LineTo(Point { x: 10.00, y: 30.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 10.00, y: 10.00 }),
                PathEl::LineTo(Point { x: 18.00, y: 10.00 }),
                PathEl::LineTo(Point { x: 18.00, y: 6.00 }),
                PathEl::LineTo(Point { x: 10.00, y: 6.00 }),
                PathEl::CurveTo(
                    Point { x: 7.79, y: 6.00 },
                    Point { x: 6.00, y: 7.79 },
                    Point { x: 6.00, y: 10.00 },
                ),
                PathEl::LineTo(Point { x: 6.00, y: 18.00 }),
                PathEl::LineTo(Point { x: 10.00, y: 18.00 }),
                PathEl::LineTo(Point { x: 10.00, y: 10.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 38.00, y: 6.00 }),
                PathEl::LineTo(Point { x: 30.00, y: 6.00 }),
                PathEl::LineTo(Point { x: 30.00, y: 10.00 }),
                PathEl::LineTo(Point { x: 38.00, y: 10.00 }),
                PathEl::LineTo(Point { x: 38.00, y: 18.00 }),
                PathEl::LineTo(Point { x: 42.00, y: 18.00 }),
                PathEl::LineTo(Point { x: 42.00, y: 10.00 }),
                PathEl::CurveTo(
                    Point { x: 42.00, y: 7.79 },
                    Point { x: 40.21, y: 6.00 },
                    Point { x: 38.00, y: 6.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 38.00, y: 38.00 }),
                PathEl::LineTo(Point { x: 30.00, y: 38.00 }),
                PathEl::LineTo(Point { x: 30.00, y: 42.00 }),
                PathEl::LineTo(Point { x: 38.00, y: 42.00 }),
                PathEl::CurveTo(
                    Point { x: 40.21, y: 42.00 },
                    Point { x: 42.00, y: 40.21 },
                    Point { x: 42.00, y: 38.00 },
                ),
                PathEl::LineTo(Point { x: 42.00, y: 30.00 }),
                PathEl::LineTo(Point { x: 38.00, y: 30.00 }),
                PathEl::LineTo(Point { x: 38.00, y: 38.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 24.00, y: 16.00 }),
                PathEl::CurveTo(
                    Point { x: 19.58, y: 16.00 },
                    Point { x: 16.00, y: 19.58 },
                    Point { x: 16.00, y: 24.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 16.00, y: 28.42 },
                    Point { x: 19.58, y: 32.00 },
                    Point { x: 24.00, y: 32.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 28.42, y: 32.00 },
                    Point { x: 32.00, y: 28.42 },
                    Point { x: 32.00, y: 24.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 32.00, y: 19.58 },
                    Point { x: 28.42, y: 16.00 },
                    Point { x: 24.00, y: 16.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 24.00, y: 28.00 }),
                PathEl::CurveTo(
                    Point { x: 21.79, y: 28.00 },
                    Point { x: 20.00, y: 26.21 },
                    Point { x: 20.00, y: 24.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 20.00, y: 21.79 },
                    Point { x: 21.79, y: 20.00 },
                    Point { x: 24.00, y: 20.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 26.21, y: 20.00 },
                    Point { x: 28.00, y: 21.79 },
                    Point { x: 28.00, y: 24.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 28.00, y: 26.21 },
                    Point { x: 26.21, y: 28.00 },
                    Point { x: 24.00, y: 28.00 },
                ),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct Collections {
    size: f64,
    color: Color,
}

impl Collections {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for Collections {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 44.00, y: 32.00 }),
                PathEl::LineTo(Point { x: 44.00, y: 8.00 }),
                PathEl::CurveTo(
                    Point { x: 44.00, y: 5.79 },
                    Point { x: 42.21, y: 4.00 },
                    Point { x: 40.00, y: 4.00 },
                ),
                PathEl::LineTo(Point { x: 16.00, y: 4.00 }),
                PathEl::CurveTo(
                    Point { x: 13.79, y: 4.00 },
                    Point { x: 12.00, y: 5.79 },
                    Point { x: 12.00, y: 8.00 },
                ),
                PathEl::LineTo(Point { x: 12.00, y: 32.00 }),
                PathEl::CurveTo(
                    Point { x: 12.00, y: 34.21 },
                    Point { x: 13.79, y: 36.00 },
                    Point { x: 16.00, y: 36.00 },
                ),
                PathEl::LineTo(Point { x: 40.00, y: 36.00 }),
                PathEl::CurveTo(
                    Point { x: 42.21, y: 36.00 },
                    Point { x: 44.00, y: 34.21 },
                    Point { x: 44.00, y: 32.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 22.00, y: 24.00 }),
                PathEl::LineTo(Point { x: 26.06, y: 29.42 }),
                PathEl::LineTo(Point { x: 32.00, y: 22.00 }),
                PathEl::LineTo(Point { x: 40.00, y: 32.00 }),
                PathEl::LineTo(Point { x: 16.00, y: 32.00 }),
                PathEl::LineTo(Point { x: 22.00, y: 24.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 4.00, y: 12.00 }),
                PathEl::LineTo(Point { x: 4.00, y: 40.00 }),
                PathEl::CurveTo(
                    Point { x: 4.00, y: 42.21 },
                    Point { x: 5.79, y: 44.00 },
                    Point { x: 8.00, y: 44.00 },
                ),
                PathEl::LineTo(Point { x: 36.00, y: 44.00 }),
                PathEl::LineTo(Point { x: 36.00, y: 40.00 }),
                PathEl::LineTo(Point { x: 8.00, y: 40.00 }),
                PathEl::LineTo(Point { x: 8.00, y: 12.00 }),
                PathEl::LineTo(Point { x: 4.00, y: 12.00 }),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct TimeToLeave {
    size: f64,
    color: Color,
}

impl TimeToLeave {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for TimeToLeave {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 37.84, y: 10.02 }),
                PathEl::CurveTo(
                    Point { x: 37.43, y: 8.84 },
                    Point { x: 36.31, y: 8.00 },
                    Point { x: 35.00, y: 8.00 },
                ),
                PathEl::LineTo(Point { x: 13.00, y: 8.00 }),
                PathEl::CurveTo(
                    Point { x: 11.69, y: 8.00 },
                    Point { x: 10.57, y: 8.84 },
                    Point { x: 10.16, y: 10.02 },
                ),
                PathEl::LineTo(Point { x: 6.00, y: 22.00 }),
                PathEl::LineTo(Point { x: 6.00, y: 38.00 }),
                PathEl::CurveTo(
                    Point { x: 6.00, y: 39.10 },
                    Point { x: 6.90, y: 40.00 },
                    Point { x: 8.00, y: 40.00 },
                ),
                PathEl::LineTo(Point { x: 10.00, y: 40.00 }),
                PathEl::CurveTo(
                    Point { x: 11.11, y: 40.00 },
                    Point { x: 12.00, y: 39.10 },
                    Point { x: 12.00, y: 38.00 },
                ),
                PathEl::LineTo(Point { x: 12.00, y: 36.00 }),
                PathEl::LineTo(Point { x: 36.00, y: 36.00 }),
                PathEl::LineTo(Point { x: 36.00, y: 38.00 }),
                PathEl::CurveTo(
                    Point { x: 36.00, y: 39.10 },
                    Point { x: 36.90, y: 40.00 },
                    Point { x: 38.00, y: 40.00 },
                ),
                PathEl::LineTo(Point { x: 40.00, y: 40.00 }),
                PathEl::CurveTo(
                    Point { x: 41.11, y: 40.00 },
                    Point { x: 42.00, y: 39.10 },
                    Point { x: 42.00, y: 38.00 },
                ),
                PathEl::LineTo(Point { x: 42.00, y: 22.00 }),
                PathEl::LineTo(Point { x: 37.84, y: 10.02 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 13.00, y: 30.00 }),
                PathEl::CurveTo(
                    Point { x: 11.34, y: 30.00 },
                    Point { x: 10.00, y: 28.66 },
                    Point { x: 10.00, y: 27.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 10.00, y: 25.34 },
                    Point { x: 11.34, y: 24.00 },
                    Point { x: 13.00, y: 24.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 14.66, y: 24.00 },
                    Point { x: 16.00, y: 25.34 },
                    Point { x: 16.00, y: 27.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 16.00, y: 28.66 },
                    Point { x: 14.66, y: 30.00 },
                    Point { x: 13.00, y: 30.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 35.00, y: 30.00 }),
                PathEl::CurveTo(
                    Point { x: 33.34, y: 30.00 },
                    Point { x: 32.00, y: 28.66 },
                    Point { x: 32.00, y: 27.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 32.00, y: 25.34 },
                    Point { x: 33.34, y: 24.00 },
                    Point { x: 35.00, y: 24.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 36.66, y: 24.00 },
                    Point { x: 38.00, y: 25.34 },
                    Point { x: 38.00, y: 27.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 38.00, y: 28.66 },
                    Point { x: 36.66, y: 30.00 },
                    Point { x: 35.00, y: 30.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 10.00, y: 20.00 }),
                PathEl::LineTo(Point { x: 13.00, y: 11.00 }),
                PathEl::LineTo(Point { x: 35.00, y: 11.00 }),
                PathEl::LineTo(Point { x: 38.00, y: 20.00 }),
                PathEl::LineTo(Point { x: 10.00, y: 20.00 }),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct Accessible {
    size: f64,
    color: Color,
}

impl Accessible {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for Accessible {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            Circle {
                center: Point { x: 24.00, y: 8.00 },
                radius: 4.00,
            },
            &brush,
        );
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 38.00, y: 26.00 }),
                PathEl::LineTo(Point { x: 38.00, y: 22.00 }),
                PathEl::CurveTo(
                    Point { x: 34.93, y: 22.04 },
                    Point { x: 31.82, y: 20.50 },
                    Point { x: 29.86, y: 18.33 },
                ),
                PathEl::LineTo(Point { x: 27.27, y: 15.47 }),
                PathEl::CurveTo(
                    Point { x: 26.92, y: 15.09 },
                    Point { x: 26.50, y: 14.79 },
                    Point { x: 26.05, y: 14.56 },
                ),
                PathEl::CurveTo(
                    Point { x: 26.03, y: 14.55 },
                    Point { x: 26.02, y: 14.54 },
                    Point { x: 26.01, y: 14.53 },
                ),
                PathEl::LineTo(Point { x: 25.99, y: 14.53 }),
                PathEl::CurveTo(
                    Point { x: 25.30, y: 14.13 },
                    Point { x: 24.48, y: 13.93 },
                    Point { x: 23.61, y: 14.02 },
                ),
                PathEl::CurveTo(
                    Point { x: 21.53, y: 14.22 },
                    Point { x: 20.00, y: 16.09 },
                    Point { x: 20.00, y: 18.18 },
                ),
                PathEl::LineTo(Point { x: 20.00, y: 30.00 }),
                PathEl::CurveTo(
                    Point { x: 20.00, y: 32.21 },
                    Point { x: 21.79, y: 34.00 },
                    Point { x: 24.00, y: 34.00 },
                ),
                PathEl::LineTo(Point { x: 34.00, y: 34.00 }),
                PathEl::LineTo(Point { x: 34.00, y: 44.00 }),
                PathEl::LineTo(Point { x: 38.00, y: 44.00 }),
                PathEl::LineTo(Point { x: 38.00, y: 33.00 }),
                PathEl::CurveTo(
                    Point { x: 38.00, y: 30.79 },
                    Point { x: 36.21, y: 29.00 },
                    Point { x: 34.00, y: 29.00 },
                ),
                PathEl::LineTo(Point { x: 28.00, y: 29.00 }),
                PathEl::LineTo(Point { x: 28.00, y: 22.10 }),
                PathEl::CurveTo(
                    Point { x: 30.58, y: 24.23 },
                    Point { x: 34.49, y: 25.99 },
                    Point { x: 38.00, y: 26.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 25.65, y: 36.00 }),
                PathEl::CurveTo(
                    Point { x: 24.83, y: 38.33 },
                    Point { x: 22.61, y: 40.00 },
                    Point { x: 20.00, y: 40.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 16.69, y: 40.00 },
                    Point { x: 14.00, y: 37.31 },
                    Point { x: 14.00, y: 34.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 14.00, y: 31.39 },
                    Point { x: 15.67, y: 29.17 },
                    Point { x: 18.00, y: 28.35 },
                ),
                PathEl::LineTo(Point { x: 18.00, y: 24.20 }),
                PathEl::CurveTo(
                    Point { x: 13.44, y: 25.13 },
                    Point { x: 10.00, y: 29.16 },
                    Point { x: 10.00, y: 34.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 10.00, y: 39.52 },
                    Point { x: 14.48, y: 44.00 },
                    Point { x: 20.00, y: 44.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 24.84, y: 44.00 },
                    Point { x: 28.87, y: 40.56 },
                    Point { x: 29.80, y: 36.00 },
                ),
                PathEl::LineTo(Point { x: 25.65, y: 36.00 }),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct PinDrop {
    size: f64,
    color: Color,
}

impl PinDrop {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for PinDrop {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 36.00, y: 16.00 }),
                PathEl::CurveTo(
                    Point { x: 36.00, y: 9.37 },
                    Point { x: 30.63, y: 4.00 },
                    Point { x: 24.00, y: 4.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 17.37, y: 4.00 },
                    Point { x: 12.00, y: 9.37 },
                    Point { x: 12.00, y: 16.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 12.00, y: 25.00 },
                    Point { x: 24.00, y: 38.00 },
                    Point { x: 24.00, y: 38.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 24.00, y: 38.00 },
                    Point { x: 36.00, y: 25.00 },
                    Point { x: 36.00, y: 16.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 20.00, y: 16.00 }),
                PathEl::CurveTo(
                    Point { x: 20.00, y: 13.79 },
                    Point { x: 21.79, y: 12.00 },
                    Point { x: 24.00, y: 12.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 26.21, y: 12.00 },
                    Point { x: 28.00, y: 13.79 },
                    Point { x: 28.00, y: 16.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 28.00, y: 18.21 },
                    Point { x: 26.21, y: 20.00 },
                    Point { x: 24.00, y: 20.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 21.79, y: 20.00 },
                    Point { x: 20.00, y: 18.21 },
                    Point { x: 20.00, y: 16.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 10.00, y: 40.00 }),
                PathEl::LineTo(Point { x: 10.00, y: 44.00 }),
                PathEl::LineTo(Point { x: 38.00, y: 44.00 }),
                PathEl::LineTo(Point { x: 38.00, y: 40.00 }),
                PathEl::LineTo(Point { x: 10.00, y: 40.00 }),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct PeopleOutline {
    size: f64,
    color: Color,
}

impl PeopleOutline {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for PeopleOutline {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 33.00, y: 26.00 }),
                PathEl::CurveTo(
                    Point { x: 30.59, y: 26.00 },
                    Point { x: 26.85, y: 26.67 },
                    Point { x: 24.00, y: 28.01 },
                ),
                PathEl::CurveTo(
                    Point { x: 21.15, y: 26.67 },
                    Point { x: 17.41, y: 26.00 },
                    Point { x: 15.00, y: 26.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 10.67, y: 26.00 },
                    Point { x: 2.00, y: 28.17 },
                    Point { x: 2.00, y: 32.50 },
                ),
                PathEl::LineTo(Point { x: 2.00, y: 38.00 }),
                PathEl::LineTo(Point { x: 46.00, y: 38.00 }),
                PathEl::LineTo(Point { x: 46.00, y: 32.50 }),
                PathEl::CurveTo(
                    Point { x: 46.00, y: 28.17 },
                    Point { x: 37.33, y: 26.00 },
                    Point { x: 33.00, y: 26.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 25.00, y: 35.00 }),
                PathEl::LineTo(Point { x: 5.00, y: 35.00 }),
                PathEl::LineTo(Point { x: 5.00, y: 32.50 }),
                PathEl::CurveTo(
                    Point { x: 5.00, y: 31.43 },
                    Point { x: 10.12, y: 29.00 },
                    Point { x: 15.00, y: 29.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 19.88, y: 29.00 },
                    Point { x: 25.00, y: 31.43 },
                    Point { x: 25.00, y: 32.50 },
                ),
                PathEl::LineTo(Point { x: 25.00, y: 35.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 43.00, y: 35.00 }),
                PathEl::LineTo(Point { x: 28.00, y: 35.00 }),
                PathEl::LineTo(Point { x: 28.00, y: 32.50 }),
                PathEl::CurveTo(
                    Point { x: 28.00, y: 31.59 },
                    Point { x: 27.60, y: 30.78 },
                    Point { x: 26.96, y: 30.06 },
                ),
                PathEl::CurveTo(
                    Point { x: 28.73, y: 29.46 },
                    Point { x: 30.89, y: 29.00 },
                    Point { x: 33.00, y: 29.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 37.88, y: 29.00 },
                    Point { x: 43.00, y: 31.43 },
                    Point { x: 43.00, y: 32.50 },
                ),
                PathEl::LineTo(Point { x: 43.00, y: 35.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 15.00, y: 24.00 }),
                PathEl::CurveTo(
                    Point { x: 18.87, y: 24.00 },
                    Point { x: 22.00, y: 20.86 },
                    Point { x: 22.00, y: 17.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 22.00, y: 13.14 },
                    Point { x: 18.87, y: 10.00 },
                    Point { x: 15.00, y: 10.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 11.14, y: 10.00 },
                    Point { x: 8.00, y: 13.14 },
                    Point { x: 8.00, y: 17.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 8.00, y: 20.86 },
                    Point { x: 11.14, y: 24.00 },
                    Point { x: 15.00, y: 24.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 15.00, y: 13.00 }),
                PathEl::CurveTo(
                    Point { x: 17.21, y: 13.00 },
                    Point { x: 19.00, y: 14.79 },
                    Point { x: 19.00, y: 17.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 19.00, y: 19.21 },
                    Point { x: 17.21, y: 21.00 },
                    Point { x: 15.00, y: 21.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 12.79, y: 21.00 },
                    Point { x: 11.00, y: 19.21 },
                    Point { x: 11.00, y: 17.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 11.00, y: 14.79 },
                    Point { x: 12.79, y: 13.00 },
                    Point { x: 15.00, y: 13.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 33.00, y: 24.00 }),
                PathEl::CurveTo(
                    Point { x: 36.87, y: 24.00 },
                    Point { x: 40.00, y: 20.86 },
                    Point { x: 40.00, y: 17.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 40.00, y: 13.14 },
                    Point { x: 36.87, y: 10.00 },
                    Point { x: 33.00, y: 10.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 29.14, y: 10.00 },
                    Point { x: 26.00, y: 13.14 },
                    Point { x: 26.00, y: 17.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 26.00, y: 20.86 },
                    Point { x: 29.14, y: 24.00 },
                    Point { x: 33.00, y: 24.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 33.00, y: 13.00 }),
                PathEl::CurveTo(
                    Point { x: 35.21, y: 13.00 },
                    Point { x: 37.00, y: 14.79 },
                    Point { x: 37.00, y: 17.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 37.00, y: 19.21 },
                    Point { x: 35.21, y: 21.00 },
                    Point { x: 33.00, y: 21.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 30.79, y: 21.00 },
                    Point { x: 29.00, y: 19.21 },
                    Point { x: 29.00, y: 17.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 29.00, y: 14.79 },
                    Point { x: 30.79, y: 13.00 },
                    Point { x: 33.00, y: 13.00 },
                ),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct AttachFile {
    size: f64,
    color: Color,
}

impl AttachFile {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for AttachFile {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 33.00, y: 12.00 }),
                PathEl::LineTo(Point { x: 33.00, y: 35.00 }),
                PathEl::CurveTo(
                    Point { x: 33.00, y: 39.42 },
                    Point { x: 29.42, y: 43.00 },
                    Point { x: 25.00, y: 43.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 20.58, y: 43.00 },
                    Point { x: 17.00, y: 39.42 },
                    Point { x: 17.00, y: 35.00 },
                ),
                PathEl::LineTo(Point { x: 17.00, y: 10.00 }),
                PathEl::CurveTo(
                    Point { x: 17.00, y: 7.24 },
                    Point { x: 19.24, y: 5.00 },
                    Point { x: 22.00, y: 5.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 24.76, y: 5.00 },
                    Point { x: 27.00, y: 7.24 },
                    Point { x: 27.00, y: 10.00 },
                ),
                PathEl::LineTo(Point { x: 27.00, y: 31.00 }),
                PathEl::CurveTo(
                    Point { x: 27.00, y: 32.10 },
                    Point { x: 26.11, y: 33.00 },
                    Point { x: 25.00, y: 33.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 23.89, y: 33.00 },
                    Point { x: 23.00, y: 32.10 },
                    Point { x: 23.00, y: 31.00 },
                ),
                PathEl::LineTo(Point { x: 23.00, y: 12.00 }),
                PathEl::LineTo(Point { x: 20.00, y: 12.00 }),
                PathEl::LineTo(Point { x: 20.00, y: 31.00 }),
                PathEl::CurveTo(
                    Point { x: 20.00, y: 33.76 },
                    Point { x: 22.24, y: 36.00 },
                    Point { x: 25.00, y: 36.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 27.76, y: 36.00 },
                    Point { x: 30.00, y: 33.76 },
                    Point { x: 30.00, y: 31.00 },
                ),
                PathEl::LineTo(Point { x: 30.00, y: 10.00 }),
                PathEl::CurveTo(
                    Point { x: 30.00, y: 5.58 },
                    Point { x: 26.42, y: 2.00 },
                    Point { x: 22.00, y: 2.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 17.58, y: 2.00 },
                    Point { x: 14.00, y: 5.58 },
                    Point { x: 14.00, y: 10.00 },
                ),
                PathEl::LineTo(Point { x: 14.00, y: 35.00 }),
                PathEl::CurveTo(
                    Point { x: 14.00, y: 41.08 },
                    Point { x: 18.93, y: 46.00 },
                    Point { x: 25.00, y: 46.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 31.07, y: 46.00 },
                    Point { x: 36.00, y: 41.08 },
                    Point { x: 36.00, y: 35.00 },
                ),
                PathEl::LineTo(Point { x: 36.00, y: 12.00 }),
                PathEl::LineTo(Point { x: 33.00, y: 12.00 }),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct Looks4 {
    size: f64,
    color: Color,
}

impl Looks4 {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for Looks4 {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 38.00, y: 6.00 }),
                PathEl::LineTo(Point { x: 10.00, y: 6.00 }),
                PathEl::CurveTo(
                    Point { x: 7.79, y: 6.00 },
                    Point { x: 6.00, y: 7.79 },
                    Point { x: 6.00, y: 10.00 },
                ),
                PathEl::LineTo(Point { x: 6.00, y: 38.00 }),
                PathEl::CurveTo(
                    Point { x: 6.00, y: 40.21 },
                    Point { x: 7.79, y: 42.00 },
                    Point { x: 10.00, y: 42.00 },
                ),
                PathEl::LineTo(Point { x: 38.00, y: 42.00 }),
                PathEl::CurveTo(
                    Point { x: 40.21, y: 42.00 },
                    Point { x: 42.00, y: 40.21 },
                    Point { x: 42.00, y: 38.00 },
                ),
                PathEl::LineTo(Point { x: 42.00, y: 10.00 }),
                PathEl::CurveTo(
                    Point { x: 42.00, y: 7.79 },
                    Point { x: 40.21, y: 6.00 },
                    Point { x: 38.00, y: 6.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 30.00, y: 34.00 }),
                PathEl::LineTo(Point { x: 26.00, y: 34.00 }),
                PathEl::LineTo(Point { x: 26.00, y: 26.00 }),
                PathEl::LineTo(Point { x: 18.00, y: 26.00 }),
                PathEl::LineTo(Point { x: 18.00, y: 14.00 }),
                PathEl::LineTo(Point { x: 22.00, y: 14.00 }),
                PathEl::LineTo(Point { x: 22.00, y: 22.00 }),
                PathEl::LineTo(Point { x: 26.00, y: 22.00 }),
                PathEl::LineTo(Point { x: 26.00, y: 14.00 }),
                PathEl::LineTo(Point { x: 30.00, y: 14.00 }),
                PathEl::LineTo(Point { x: 30.00, y: 34.00 }),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct Translate {
    size: f64,
    color: Color,
}

impl Translate {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for Translate {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 25.74, y: 30.15 }),
                PathEl::LineTo(Point { x: 20.66, y: 25.13 }),
                PathEl::LineTo(Point { x: 20.72, y: 25.07 }),
                PathEl::CurveTo(
                    Point { x: 24.20, y: 21.19 },
                    Point { x: 26.68, y: 16.73 },
                    Point { x: 28.14, y: 12.01 },
                ),
                PathEl::LineTo(Point { x: 34.00, y: 12.01 }),
                PathEl::LineTo(Point { x: 34.00, y: 8.00 }),
                PathEl::LineTo(Point { x: 20.00, y: 8.00 }),
                PathEl::LineTo(Point { x: 20.00, y: 4.00 }),
                PathEl::LineTo(Point { x: 16.00, y: 4.00 }),
                PathEl::LineTo(Point { x: 16.00, y: 8.00 }),
                PathEl::LineTo(Point { x: 2.00, y: 8.00 }),
                PathEl::LineTo(Point { x: 2.00, y: 11.98 }),
                PathEl::LineTo(Point { x: 24.34, y: 11.98 }),
                PathEl::CurveTo(
                    Point { x: 22.99, y: 15.84 },
                    Point { x: 20.88, y: 19.50 },
                    Point { x: 18.00, y: 22.70 },
                ),
                PathEl::CurveTo(
                    Point { x: 16.14, y: 20.63 },
                    Point { x: 14.60, y: 18.38 },
                    Point { x: 13.38, y: 16.00 },
                ),
                PathEl::LineTo(Point { x: 9.38, y: 16.00 }),
                PathEl::CurveTo(
                    Point { x: 10.84, y: 19.26 },
                    Point { x: 12.84, y: 22.34 },
                    Point { x: 15.34, y: 25.12 },
                ),
                PathEl::LineTo(Point { x: 5.17, y: 35.17 }),
                PathEl::LineTo(Point { x: 8.00, y: 38.00 }),
                PathEl::LineTo(Point { x: 18.00, y: 28.00 }),
                PathEl::LineTo(Point { x: 24.22, y: 34.22 }),
                PathEl::LineTo(Point { x: 25.74, y: 30.15 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 37.00, y: 20.00 }),
                PathEl::LineTo(Point { x: 33.00, y: 20.00 }),
                PathEl::LineTo(Point { x: 24.00, y: 44.00 }),
                PathEl::LineTo(Point { x: 28.00, y: 44.00 }),
                PathEl::LineTo(Point { x: 30.25, y: 38.00 }),
                PathEl::LineTo(Point { x: 39.75, y: 38.00 }),
                PathEl::LineTo(Point { x: 42.00, y: 44.00 }),
                PathEl::LineTo(Point { x: 46.00, y: 44.00 }),
                PathEl::LineTo(Point { x: 37.00, y: 20.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 31.75, y: 34.00 }),
                PathEl::LineTo(Point { x: 35.00, y: 25.33 }),
                PathEl::LineTo(Point { x: 38.25, y: 34.00 }),
                PathEl::LineTo(Point { x: 31.75, y: 34.00 }),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct Loyalty {
    size: f64,
    color: Color,
}

impl Loyalty {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for Loyalty {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 42.82, y: 23.16 }),
                PathEl::LineTo(Point { x: 24.83, y: 5.17 }),
                PathEl::CurveTo(
                    Point { x: 24.11, y: 4.45 },
                    Point { x: 23.11, y: 4.00 },
                    Point { x: 22.00, y: 4.00 },
                ),
                PathEl::LineTo(Point { x: 8.00, y: 4.00 }),
                PathEl::CurveTo(
                    Point { x: 5.79, y: 4.00 },
                    Point { x: 4.00, y: 5.79 },
                    Point { x: 4.00, y: 8.00 },
                ),
                PathEl::LineTo(Point { x: 4.00, y: 22.00 }),
                PathEl::CurveTo(
                    Point { x: 4.00, y: 23.11 },
                    Point { x: 4.45, y: 24.11 },
                    Point { x: 5.18, y: 24.83 },
                ),
                PathEl::LineTo(Point { x: 23.18, y: 42.83 }),
                PathEl::CurveTo(
                    Point { x: 23.90, y: 43.55 },
                    Point { x: 24.90, y: 44.00 },
                    Point { x: 26.00, y: 44.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 27.11, y: 44.00 },
                    Point { x: 28.11, y: 43.55 },
                    Point { x: 28.83, y: 42.83 },
                ),
                PathEl::LineTo(Point { x: 42.83, y: 28.83 }),
                PathEl::CurveTo(
                    Point { x: 43.55, y: 28.10 },
                    Point { x: 44.00, y: 27.10 },
                    Point { x: 44.00, y: 26.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 44.00, y: 24.89 },
                    Point { x: 43.55, y: 23.89 },
                    Point { x: 42.82, y: 23.16 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 11.00, y: 14.00 }),
                PathEl::CurveTo(
                    Point { x: 9.34, y: 14.00 },
                    Point { x: 8.00, y: 12.66 },
                    Point { x: 8.00, y: 11.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 8.00, y: 9.34 },
                    Point { x: 9.34, y: 8.00 },
                    Point { x: 11.00, y: 8.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 12.66, y: 8.00 },
                    Point { x: 14.00, y: 9.34 },
                    Point { x: 14.00, y: 11.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 14.00, y: 12.66 },
                    Point { x: 12.66, y: 14.00 },
                    Point { x: 11.00, y: 14.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 34.54, y: 30.54 }),
                PathEl::LineTo(Point { x: 26.00, y: 39.08 }),
                PathEl::LineTo(Point { x: 17.46, y: 30.54 }),
                PathEl::CurveTo(
                    Point { x: 16.56, y: 29.63 },
                    Point { x: 16.00, y: 28.38 },
                    Point { x: 16.00, y: 27.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 16.00, y: 24.24 },
                    Point { x: 18.24, y: 22.00 },
                    Point { x: 21.00, y: 22.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 22.38, y: 22.00 },
                    Point { x: 23.64, y: 22.56 },
                    Point { x: 24.54, y: 23.47 },
                ),
                PathEl::LineTo(Point { x: 26.00, y: 24.93 }),
                PathEl::LineTo(Point { x: 27.46, y: 23.47 }),
                PathEl::CurveTo(
                    Point { x: 28.37, y: 22.56 },
                    Point { x: 29.62, y: 22.00 },
                    Point { x: 31.00, y: 22.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 33.76, y: 22.00 },
                    Point { x: 36.00, y: 24.24 },
                    Point { x: 36.00, y: 27.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 36.00, y: 28.38 },
                    Point { x: 35.44, y: 29.63 },
                    Point { x: 34.54, y: 30.54 },
                ),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct AvTimer {
    size: f64,
    color: Color,
}

impl AvTimer {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for AvTimer {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 22.00, y: 34.00 }),
                PathEl::CurveTo(
                    Point { x: 22.00, y: 35.10 },
                    Point { x: 22.90, y: 36.00 },
                    Point { x: 24.00, y: 36.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 25.10, y: 36.00 },
                    Point { x: 26.00, y: 35.10 },
                    Point { x: 26.00, y: 34.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 26.00, y: 32.90 },
                    Point { x: 25.10, y: 32.00 },
                    Point { x: 24.00, y: 32.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 22.90, y: 32.00 },
                    Point { x: 22.00, y: 32.90 },
                    Point { x: 22.00, y: 34.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 22.00, y: 6.00 }),
                PathEl::LineTo(Point { x: 22.00, y: 14.00 }),
                PathEl::LineTo(Point { x: 26.00, y: 14.00 }),
                PathEl::LineTo(Point { x: 26.00, y: 10.16 }),
                PathEl::CurveTo(
                    Point { x: 32.78, y: 11.13 },
                    Point { x: 38.00, y: 16.95 },
                    Point { x: 38.00, y: 24.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 38.00, y: 31.73 },
                    Point { x: 31.73, y: 38.00 },
                    Point { x: 24.00, y: 38.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 16.27, y: 38.00 },
                    Point { x: 10.00, y: 31.73 },
                    Point { x: 10.00, y: 24.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 10.00, y: 20.64 },
                    Point { x: 11.18, y: 17.57 },
                    Point { x: 13.15, y: 15.15 },
                ),
                PathEl::LineTo(Point { x: 24.00, y: 26.00 }),
                PathEl::LineTo(Point { x: 26.83, y: 23.17 }),
                PathEl::LineTo(Point { x: 13.23, y: 9.57 }),
                PathEl::LineTo(Point { x: 13.21, y: 9.61 }),
                PathEl::CurveTo(
                    Point { x: 8.84, y: 12.89 },
                    Point { x: 6.00, y: 18.11 },
                    Point { x: 6.00, y: 24.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 6.00, y: 33.94 },
                    Point { x: 14.04, y: 42.00 },
                    Point { x: 23.99, y: 42.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 33.94, y: 42.00 },
                    Point { x: 42.00, y: 33.94 },
                    Point { x: 42.00, y: 24.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 42.00, y: 14.06 },
                    Point { x: 33.94, y: 6.00 },
                    Point { x: 23.99, y: 6.00 },
                ),
                PathEl::LineTo(Point { x: 22.00, y: 6.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 36.00, y: 24.00 }),
                PathEl::CurveTo(
                    Point { x: 36.00, y: 22.90 },
                    Point { x: 35.10, y: 22.00 },
                    Point { x: 34.00, y: 22.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 32.90, y: 22.00 },
                    Point { x: 32.00, y: 22.90 },
                    Point { x: 32.00, y: 24.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 32.00, y: 25.10 },
                    Point { x: 32.90, y: 26.00 },
                    Point { x: 34.00, y: 26.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 35.10, y: 26.00 },
                    Point { x: 36.00, y: 25.10 },
                    Point { x: 36.00, y: 24.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 12.00, y: 24.00 }),
                PathEl::CurveTo(
                    Point { x: 12.00, y: 25.10 },
                    Point { x: 12.90, y: 26.00 },
                    Point { x: 14.00, y: 26.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 15.10, y: 26.00 },
                    Point { x: 16.00, y: 25.10 },
                    Point { x: 16.00, y: 24.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 16.00, y: 22.90 },
                    Point { x: 15.10, y: 22.00 },
                    Point { x: 14.00, y: 22.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 12.90, y: 22.00 },
                    Point { x: 12.00, y: 22.90 },
                    Point { x: 12.00, y: 24.00 },
                ),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct MovieFilter {
    size: f64,
    color: Color,
}

impl MovieFilter {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for MovieFilter {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 36.00, y: 8.00 }),
                PathEl::LineTo(Point { x: 40.00, y: 14.00 }),
                PathEl::LineTo(Point { x: 34.00, y: 14.00 }),
                PathEl::LineTo(Point { x: 30.00, y: 8.00 }),
                PathEl::LineTo(Point { x: 26.00, y: 8.00 }),
                PathEl::LineTo(Point { x: 30.00, y: 14.00 }),
                PathEl::LineTo(Point { x: 24.00, y: 14.00 }),
                PathEl::LineTo(Point { x: 20.00, y: 8.00 }),
                PathEl::LineTo(Point { x: 16.00, y: 8.00 }),
                PathEl::LineTo(Point { x: 20.00, y: 14.00 }),
                PathEl::LineTo(Point { x: 14.00, y: 14.00 }),
                PathEl::LineTo(Point { x: 10.00, y: 8.00 }),
                PathEl::LineTo(Point { x: 8.00, y: 8.00 }),
                PathEl::CurveTo(
                    Point { x: 5.80, y: 8.00 },
                    Point { x: 4.02, y: 9.80 },
                    Point { x: 4.02, y: 12.00 },
                ),
                PathEl::LineTo(Point { x: 4.00, y: 36.00 }),
                PathEl::CurveTo(
                    Point { x: 4.00, y: 38.20 },
                    Point { x: 5.80, y: 40.00 },
                    Point { x: 8.00, y: 40.00 },
                ),
                PathEl::LineTo(Point { x: 40.00, y: 40.00 }),
                PathEl::CurveTo(
                    Point { x: 42.20, y: 40.00 },
                    Point { x: 44.00, y: 38.20 },
                    Point { x: 44.00, y: 36.00 },
                ),
                PathEl::LineTo(Point { x: 44.00, y: 8.00 }),
                PathEl::LineTo(Point { x: 36.00, y: 8.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 22.50, y: 30.50 }),
                PathEl::LineTo(Point { x: 20.00, y: 36.00 }),
                PathEl::LineTo(Point { x: 17.50, y: 30.50 }),
                PathEl::LineTo(Point { x: 12.00, y: 28.00 }),
                PathEl::LineTo(Point { x: 17.50, y: 25.50 }),
                PathEl::LineTo(Point { x: 20.00, y: 20.00 }),
                PathEl::LineTo(Point { x: 22.50, y: 25.50 }),
                PathEl::LineTo(Point { x: 28.00, y: 28.00 }),
                PathEl::LineTo(Point { x: 22.50, y: 30.50 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 33.88, y: 23.88 }),
                PathEl::LineTo(Point { x: 32.00, y: 28.00 }),
                PathEl::LineTo(Point { x: 30.12, y: 23.88 }),
                PathEl::LineTo(Point { x: 26.00, y: 22.00 }),
                PathEl::LineTo(Point { x: 30.12, y: 20.12 }),
                PathEl::LineTo(Point { x: 32.00, y: 16.00 }),
                PathEl::LineTo(Point { x: 33.88, y: 20.12 }),
                PathEl::LineTo(Point { x: 38.00, y: 22.00 }),
                PathEl::LineTo(Point { x: 33.88, y: 23.88 }),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct DataUsage {
    size: f64,
    color: Color,
}

impl DataUsage {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for DataUsage {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 26.00, y: 4.10 }),
                PathEl::LineTo(Point { x: 26.00, y: 10.16 }),
                PathEl::CurveTo(
                    Point { x: 32.78, y: 11.13 },
                    Point { x: 38.00, y: 16.95 },
                    Point { x: 38.00, y: 24.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 38.00, y: 25.79 },
                    Point { x: 37.65, y: 27.50 },
                    Point { x: 37.04, y: 29.07 },
                ),
                PathEl::LineTo(Point { x: 42.24, y: 32.14 }),
                PathEl::CurveTo(
                    Point { x: 43.35, y: 29.65 },
                    Point { x: 44.00, y: 26.91 },
                    Point { x: 44.00, y: 24.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 44.00, y: 13.63 },
                    Point { x: 36.11, y: 5.11 },
                    Point { x: 26.00, y: 4.10 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 24.00, y: 38.00 }),
                PathEl::CurveTo(
                    Point { x: 16.27, y: 38.00 },
                    Point { x: 10.00, y: 31.73 },
                    Point { x: 10.00, y: 24.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 10.00, y: 16.95 },
                    Point { x: 15.22, y: 11.13 },
                    Point { x: 22.00, y: 10.16 },
                ),
                PathEl::LineTo(Point { x: 22.00, y: 4.10 }),
                PathEl::CurveTo(
                    Point { x: 11.88, y: 5.10 },
                    Point { x: 4.00, y: 13.63 },
                    Point { x: 4.00, y: 24.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 4.00, y: 35.05 },
                    Point { x: 12.94, y: 44.00 },
                    Point { x: 23.99, y: 44.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 30.61, y: 44.00 },
                    Point { x: 36.46, y: 40.77 },
                    Point { x: 40.10, y: 35.82 },
                ),
                PathEl::LineTo(Point { x: 34.91, y: 32.76 }),
                PathEl::CurveTo(
                    Point { x: 32.35, y: 35.95 },
                    Point { x: 28.42, y: 38.00 },
                    Point { x: 24.00, y: 38.00 },
                ),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct Battery20 {
    size: f64,
    color: Color,
}

impl Battery20 {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for Battery20 {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 14.00, y: 34.00 }),
                PathEl::LineTo(Point { x: 14.00, y: 41.33 }),
                PathEl::CurveTo(
                    Point { x: 14.00, y: 42.80 },
                    Point { x: 15.19, y: 44.00 },
                    Point { x: 16.67, y: 44.00 },
                ),
                PathEl::LineTo(Point { x: 31.34, y: 44.00 }),
                PathEl::CurveTo(
                    Point { x: 32.81, y: 44.00 },
                    Point { x: 34.01, y: 42.81 },
                    Point { x: 34.01, y: 41.33 },
                ),
                PathEl::LineTo(Point { x: 34.01, y: 34.00 }),
                PathEl::LineTo(Point { x: 14.00, y: 34.00 }),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 34.00, y: 10.67 }),
                PathEl::CurveTo(
                    Point { x: 34.00, y: 9.19 },
                    Point { x: 32.81, y: 8.00 },
                    Point { x: 31.33, y: 8.00 },
                ),
                PathEl::LineTo(Point { x: 28.00, y: 8.00 }),
                PathEl::LineTo(Point { x: 28.00, y: 4.00 }),
                PathEl::LineTo(Point { x: 20.00, y: 4.00 }),
                PathEl::LineTo(Point { x: 20.00, y: 8.00 }),
                PathEl::LineTo(Point { x: 16.67, y: 8.00 }),
                PathEl::CurveTo(
                    Point { x: 15.19, y: 8.00 },
                    Point { x: 14.00, y: 9.19 },
                    Point { x: 14.00, y: 10.67 },
                ),
                PathEl::LineTo(Point { x: 14.00, y: 34.00 }),
                PathEl::LineTo(Point { x: 34.00, y: 34.00 }),
                PathEl::LineTo(Point { x: 34.00, y: 10.67 }),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct FormatTextdirectionLToR {
    size: f64,
    color: Color,
}

impl FormatTextdirectionLToR {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for FormatTextdirectionLToR {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 18.00, y: 20.00 }),
                PathEl::LineTo(Point { x: 18.00, y: 30.00 }),
                PathEl::LineTo(Point { x: 22.00, y: 30.00 }),
                PathEl::LineTo(Point { x: 22.00, y: 8.00 }),
                PathEl::LineTo(Point { x: 26.00, y: 8.00 }),
                PathEl::LineTo(Point { x: 26.00, y: 30.00 }),
                PathEl::LineTo(Point { x: 30.00, y: 30.00 }),
                PathEl::LineTo(Point { x: 30.00, y: 8.00 }),
                PathEl::LineTo(Point { x: 34.00, y: 8.00 }),
                PathEl::LineTo(Point { x: 34.00, y: 4.00 }),
                PathEl::LineTo(Point { x: 18.00, y: 4.00 }),
                PathEl::CurveTo(
                    Point { x: 13.58, y: 4.00 },
                    Point { x: 10.00, y: 7.58 },
                    Point { x: 10.00, y: 12.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 10.00, y: 16.42 },
                    Point { x: 13.58, y: 20.00 },
                    Point { x: 18.00, y: 20.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 42.00, y: 36.00 }),
                PathEl::LineTo(Point { x: 34.00, y: 28.00 }),
                PathEl::LineTo(Point { x: 34.00, y: 34.00 }),
                PathEl::LineTo(Point { x: 10.00, y: 34.00 }),
                PathEl::LineTo(Point { x: 10.00, y: 38.00 }),
                PathEl::LineTo(Point { x: 34.00, y: 38.00 }),
                PathEl::LineTo(Point { x: 34.00, y: 44.00 }),
                PathEl::LineTo(Point { x: 42.00, y: 36.00 }),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct VisibilityOff {
    size: f64,
    color: Color,
}

impl VisibilityOff {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for VisibilityOff {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 24.00, y: 14.00 }),
                PathEl::CurveTo(
                    Point { x: 29.52, y: 14.00 },
                    Point { x: 34.00, y: 18.48 },
                    Point { x: 34.00, y: 24.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 34.00, y: 25.29 },
                    Point { x: 33.74, y: 26.52 },
                    Point { x: 33.29, y: 27.65 },
                ),
                PathEl::LineTo(Point { x: 39.14, y: 33.50 }),
                PathEl::CurveTo(
                    Point { x: 42.16, y: 30.98 },
                    Point { x: 44.54, y: 27.72 },
                    Point { x: 46.01, y: 24.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 42.54, y: 15.22 },
                    Point { x: 34.01, y: 9.00 },
                    Point { x: 24.00, y: 9.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 21.20, y: 9.00 },
                    Point { x: 18.52, y: 9.50 },
                    Point { x: 16.03, y: 10.40 },
                ),
                PathEl::LineTo(Point { x: 20.35, y: 14.71 }),
                PathEl::CurveTo(
                    Point { x: 21.48, y: 14.27 },
                    Point { x: 22.71, y: 14.00 },
                    Point { x: 24.00, y: 14.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 4.00, y: 8.55 }),
                PathEl::LineTo(Point { x: 8.56, y: 13.11 }),
                PathEl::LineTo(Point { x: 9.47, y: 14.02 }),
                PathEl::CurveTo(
                    Point { x: 6.17, y: 16.60 },
                    Point { x: 3.56, y: 20.03 },
                    Point { x: 2.00, y: 24.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 5.46, y: 32.78 },
                    Point { x: 14.00, y: 39.00 },
                    Point { x: 24.00, y: 39.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 27.10, y: 39.00 },
                    Point { x: 30.06, y: 38.40 },
                    Point { x: 32.77, y: 37.31 },
                ),
                PathEl::LineTo(Point { x: 33.62, y: 38.16 }),
                PathEl::LineTo(Point { x: 39.45, y: 44.00 }),
                PathEl::LineTo(Point { x: 42.00, y: 41.46 }),
                PathEl::LineTo(Point { x: 6.55, y: 6.00 }),
                PathEl::LineTo(Point { x: 4.00, y: 8.55 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 15.06, y: 19.60 }),
                PathEl::LineTo(Point { x: 18.15, y: 22.69 }),
                PathEl::CurveTo(
                    Point { x: 18.06, y: 23.12 },
                    Point { x: 18.00, y: 23.55 },
                    Point { x: 18.00, y: 24.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 18.00, y: 27.31 },
                    Point { x: 20.69, y: 30.00 },
                    Point { x: 24.00, y: 30.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 24.45, y: 30.00 },
                    Point { x: 24.88, y: 29.94 },
                    Point { x: 25.30, y: 29.85 },
                ),
                PathEl::LineTo(Point { x: 28.39, y: 32.94 }),
                PathEl::CurveTo(
                    Point { x: 27.06, y: 33.60 },
                    Point { x: 25.58, y: 34.00 },
                    Point { x: 24.00, y: 34.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 18.48, y: 34.00 },
                    Point { x: 14.00, y: 29.52 },
                    Point { x: 14.00, y: 24.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 14.00, y: 22.42 },
                    Point { x: 14.40, y: 20.94 },
                    Point { x: 15.06, y: 19.60 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 23.67, y: 18.03 }),
                PathEl::LineTo(Point { x: 29.97, y: 24.33 }),
                PathEl::LineTo(Point { x: 30.00, y: 24.00 }),
                PathEl::CurveTo(
                    Point { x: 30.00, y: 20.69 },
                    Point { x: 27.31, y: 18.00 },
                    Point { x: 24.00, y: 18.00 },
                ),
                PathEl::LineTo(Point { x: 23.67, y: 18.03 }),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct FlightLand {
    size: f64,
    color: Color,
}

impl FlightLand {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for FlightLand {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 5.00, y: 38.00 }),
                PathEl::LineTo(Point { x: 43.00, y: 38.00 }),
                PathEl::LineTo(Point { x: 43.00, y: 42.00 }),
                PathEl::LineTo(Point { x: 5.00, y: 42.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 19.37, y: 26.54 }),
                PathEl::LineTo(Point { x: 28.06, y: 28.87 }),
                PathEl::LineTo(Point { x: 38.69, y: 31.72 }),
                PathEl::CurveTo(
                    Point { x: 40.29, y: 32.15 },
                    Point { x: 41.93, y: 31.20 },
                    Point { x: 42.36, y: 29.60 },
                ),
                PathEl::CurveTo(
                    Point { x: 42.79, y: 28.00 },
                    Point { x: 41.84, y: 26.36 },
                    Point { x: 40.24, y: 25.93 },
                ),
                PathEl::LineTo(Point { x: 29.61, y: 23.08 }),
                PathEl::LineTo(Point { x: 24.10, y: 5.04 }),
                PathEl::LineTo(Point { x: 20.23, y: 4.00 }),
                PathEl::LineTo(Point { x: 20.23, y: 20.56 }),
                PathEl::LineTo(Point { x: 10.30, y: 17.90 }),
                PathEl::LineTo(Point { x: 8.44, y: 13.26 }),
                PathEl::LineTo(Point { x: 5.54, y: 12.48 }),
                PathEl::LineTo(Point { x: 5.54, y: 22.83 }),
                PathEl::LineTo(Point { x: 8.75, y: 23.69 }),
                PathEl::LineTo(Point { x: 19.37, y: 26.54 }),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct Brightness3 {
    size: f64,
    color: Color,
}

impl Brightness3 {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for Brightness3 {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 18.00, y: 4.00 }),
                PathEl::CurveTo(
                    Point { x: 15.91, y: 4.00 },
                    Point { x: 13.89, y: 4.32 },
                    Point { x: 12.00, y: 4.92 },
                ),
                PathEl::CurveTo(
                    Point { x: 20.11, y: 7.47 },
                    Point { x: 26.00, y: 15.05 },
                    Point { x: 26.00, y: 24.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 26.00, y: 32.95 },
                    Point { x: 20.11, y: 40.53 },
                    Point { x: 12.00, y: 43.08 },
                ),
                PathEl::CurveTo(
                    Point { x: 13.89, y: 43.67 },
                    Point { x: 15.91, y: 44.00 },
                    Point { x: 18.00, y: 44.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 29.05, y: 44.00 },
                    Point { x: 38.00, y: 35.05 },
                    Point { x: 38.00, y: 24.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 38.00, y: 12.95 },
                    Point { x: 29.05, y: 4.00 },
                    Point { x: 18.00, y: 4.00 },
                ),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct BorderLeft {
    size: f64,
    color: Color,
}

impl BorderLeft {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for BorderLeft {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 22.00, y: 42.00 }),
                PathEl::LineTo(Point { x: 26.00, y: 42.00 }),
                PathEl::LineTo(Point { x: 26.00, y: 38.00 }),
                PathEl::LineTo(Point { x: 22.00, y: 38.00 }),
                PathEl::LineTo(Point { x: 22.00, y: 42.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 22.00, y: 34.00 }),
                PathEl::LineTo(Point { x: 26.00, y: 34.00 }),
                PathEl::LineTo(Point { x: 26.00, y: 30.00 }),
                PathEl::LineTo(Point { x: 22.00, y: 30.00 }),
                PathEl::LineTo(Point { x: 22.00, y: 34.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 22.00, y: 10.00 }),
                PathEl::LineTo(Point { x: 26.00, y: 10.00 }),
                PathEl::LineTo(Point { x: 26.00, y: 6.00 }),
                PathEl::LineTo(Point { x: 22.00, y: 6.00 }),
                PathEl::LineTo(Point { x: 22.00, y: 10.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 22.00, y: 18.00 }),
                PathEl::LineTo(Point { x: 26.00, y: 18.00 }),
                PathEl::LineTo(Point { x: 26.00, y: 14.00 }),
                PathEl::LineTo(Point { x: 22.00, y: 14.00 }),
                PathEl::LineTo(Point { x: 22.00, y: 18.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 22.00, y: 26.00 }),
                PathEl::LineTo(Point { x: 26.00, y: 26.00 }),
                PathEl::LineTo(Point { x: 26.00, y: 22.00 }),
                PathEl::LineTo(Point { x: 22.00, y: 22.00 }),
                PathEl::LineTo(Point { x: 22.00, y: 26.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 14.00, y: 42.00 }),
                PathEl::LineTo(Point { x: 18.00, y: 42.00 }),
                PathEl::LineTo(Point { x: 18.00, y: 38.00 }),
                PathEl::LineTo(Point { x: 14.00, y: 38.00 }),
                PathEl::LineTo(Point { x: 14.00, y: 42.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 14.00, y: 10.00 }),
                PathEl::LineTo(Point { x: 18.00, y: 10.00 }),
                PathEl::LineTo(Point { x: 18.00, y: 6.00 }),
                PathEl::LineTo(Point { x: 14.00, y: 6.00 }),
                PathEl::LineTo(Point { x: 14.00, y: 10.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 14.00, y: 26.00 }),
                PathEl::LineTo(Point { x: 18.00, y: 26.00 }),
                PathEl::LineTo(Point { x: 18.00, y: 22.00 }),
                PathEl::LineTo(Point { x: 14.00, y: 22.00 }),
                PathEl::LineTo(Point { x: 14.00, y: 26.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 6.00, y: 42.00 }),
                PathEl::LineTo(Point { x: 10.00, y: 42.00 }),
                PathEl::LineTo(Point { x: 10.00, y: 6.00 }),
                PathEl::LineTo(Point { x: 6.00, y: 6.00 }),
                PathEl::LineTo(Point { x: 6.00, y: 42.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 38.00, y: 18.00 }),
                PathEl::LineTo(Point { x: 42.00, y: 18.00 }),
                PathEl::LineTo(Point { x: 42.00, y: 14.00 }),
                PathEl::LineTo(Point { x: 38.00, y: 14.00 }),
                PathEl::LineTo(Point { x: 38.00, y: 18.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 30.00, y: 42.00 }),
                PathEl::LineTo(Point { x: 34.00, y: 42.00 }),
                PathEl::LineTo(Point { x: 34.00, y: 38.00 }),
                PathEl::LineTo(Point { x: 30.00, y: 38.00 }),
                PathEl::LineTo(Point { x: 30.00, y: 42.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 38.00, y: 34.00 }),
                PathEl::LineTo(Point { x: 42.00, y: 34.00 }),
                PathEl::LineTo(Point { x: 42.00, y: 30.00 }),
                PathEl::LineTo(Point { x: 38.00, y: 30.00 }),
                PathEl::LineTo(Point { x: 38.00, y: 34.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 38.00, y: 6.00 }),
                PathEl::LineTo(Point { x: 38.00, y: 10.00 }),
                PathEl::LineTo(Point { x: 42.00, y: 10.00 }),
                PathEl::LineTo(Point { x: 42.00, y: 6.00 }),
                PathEl::LineTo(Point { x: 38.00, y: 6.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 38.00, y: 26.00 }),
                PathEl::LineTo(Point { x: 42.00, y: 26.00 }),
                PathEl::LineTo(Point { x: 42.00, y: 22.00 }),
                PathEl::LineTo(Point { x: 38.00, y: 22.00 }),
                PathEl::LineTo(Point { x: 38.00, y: 26.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 38.00, y: 42.00 }),
                PathEl::LineTo(Point { x: 42.00, y: 42.00 }),
                PathEl::LineTo(Point { x: 42.00, y: 38.00 }),
                PathEl::LineTo(Point { x: 38.00, y: 38.00 }),
                PathEl::LineTo(Point { x: 38.00, y: 42.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 30.00, y: 26.00 }),
                PathEl::LineTo(Point { x: 34.00, y: 26.00 }),
                PathEl::LineTo(Point { x: 34.00, y: 22.00 }),
                PathEl::LineTo(Point { x: 30.00, y: 22.00 }),
                PathEl::LineTo(Point { x: 30.00, y: 26.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 30.00, y: 10.00 }),
                PathEl::LineTo(Point { x: 34.00, y: 10.00 }),
                PathEl::LineTo(Point { x: 34.00, y: 6.00 }),
                PathEl::LineTo(Point { x: 30.00, y: 6.00 }),
                PathEl::LineTo(Point { x: 30.00, y: 10.00 }),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct MovieCreation {
    size: f64,
    color: Color,
}

impl MovieCreation {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for MovieCreation {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 36.00, y: 8.00 }),
                PathEl::LineTo(Point { x: 40.00, y: 16.00 }),
                PathEl::LineTo(Point { x: 34.00, y: 16.00 }),
                PathEl::LineTo(Point { x: 30.00, y: 8.00 }),
                PathEl::LineTo(Point { x: 26.00, y: 8.00 }),
                PathEl::LineTo(Point { x: 30.00, y: 16.00 }),
                PathEl::LineTo(Point { x: 24.00, y: 16.00 }),
                PathEl::LineTo(Point { x: 20.00, y: 8.00 }),
                PathEl::LineTo(Point { x: 16.00, y: 8.00 }),
                PathEl::LineTo(Point { x: 20.00, y: 16.00 }),
                PathEl::LineTo(Point { x: 14.00, y: 16.00 }),
                PathEl::LineTo(Point { x: 10.00, y: 8.00 }),
                PathEl::LineTo(Point { x: 8.00, y: 8.00 }),
                PathEl::CurveTo(
                    Point { x: 5.79, y: 8.00 },
                    Point { x: 4.02, y: 9.79 },
                    Point { x: 4.02, y: 12.00 },
                ),
                PathEl::LineTo(Point { x: 4.00, y: 36.00 }),
                PathEl::CurveTo(
                    Point { x: 4.00, y: 38.21 },
                    Point { x: 5.79, y: 40.00 },
                    Point { x: 8.00, y: 40.00 },
                ),
                PathEl::LineTo(Point { x: 40.00, y: 40.00 }),
                PathEl::CurveTo(
                    Point { x: 42.21, y: 40.00 },
                    Point { x: 44.00, y: 38.21 },
                    Point { x: 44.00, y: 36.00 },
                ),
                PathEl::LineTo(Point { x: 44.00, y: 8.00 }),
                PathEl::LineTo(Point { x: 36.00, y: 8.00 }),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct Public {
    size: f64,
    color: Color,
}

impl Public {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for Public {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 24.00, y: 4.00 }),
                PathEl::CurveTo(
                    Point { x: 12.95, y: 4.00 },
                    Point { x: 4.00, y: 12.95 },
                    Point { x: 4.00, y: 24.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 4.00, y: 35.05 },
                    Point { x: 12.95, y: 44.00 },
                    Point { x: 24.00, y: 44.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 35.05, y: 44.00 },
                    Point { x: 44.00, y: 35.05 },
                    Point { x: 44.00, y: 24.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 44.00, y: 12.95 },
                    Point { x: 35.05, y: 4.00 },
                    Point { x: 24.00, y: 4.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 22.00, y: 39.86 }),
                PathEl::CurveTo(
                    Point { x: 14.11, y: 38.88 },
                    Point { x: 8.00, y: 32.16 },
                    Point { x: 8.00, y: 24.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 8.00, y: 22.77 },
                    Point { x: 8.15, y: 21.57 },
                    Point { x: 8.42, y: 20.42 },
                ),
                PathEl::LineTo(Point { x: 18.00, y: 30.00 }),
                PathEl::LineTo(Point { x: 18.00, y: 32.00 }),
                PathEl::CurveTo(
                    Point { x: 18.00, y: 34.21 },
                    Point { x: 19.79, y: 36.00 },
                    Point { x: 22.00, y: 36.00 },
                ),
                PathEl::LineTo(Point { x: 22.00, y: 39.86 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 35.79, y: 34.79 }),
                PathEl::CurveTo(
                    Point { x: 35.28, y: 33.17 },
                    Point { x: 33.78, y: 32.00 },
                    Point { x: 32.00, y: 32.00 },
                ),
                PathEl::LineTo(Point { x: 30.00, y: 32.00 }),
                PathEl::LineTo(Point { x: 30.00, y: 26.00 }),
                PathEl::CurveTo(
                    Point { x: 30.00, y: 24.90 },
                    Point { x: 29.10, y: 24.00 },
                    Point { x: 28.00, y: 24.00 },
                ),
                PathEl::LineTo(Point { x: 16.00, y: 24.00 }),
                PathEl::LineTo(Point { x: 16.00, y: 20.00 }),
                PathEl::LineTo(Point { x: 20.00, y: 20.00 }),
                PathEl::CurveTo(
                    Point { x: 21.10, y: 20.00 },
                    Point { x: 22.00, y: 19.10 },
                    Point { x: 22.00, y: 18.00 },
                ),
                PathEl::LineTo(Point { x: 22.00, y: 14.00 }),
                PathEl::LineTo(Point { x: 26.00, y: 14.00 }),
                PathEl::CurveTo(
                    Point { x: 28.21, y: 14.00 },
                    Point { x: 30.00, y: 12.21 },
                    Point { x: 30.00, y: 10.00 },
                ),
                PathEl::LineTo(Point { x: 30.00, y: 9.17 }),
                PathEl::CurveTo(
                    Point { x: 35.86, y: 11.54 },
                    Point { x: 40.00, y: 17.28 },
                    Point { x: 40.00, y: 24.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 40.00, y: 28.16 },
                    Point { x: 38.40, y: 31.94 },
                    Point { x: 35.79, y: 34.79 },
                ),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct TextFormat {
    size: f64,
    color: Color,
}

impl TextFormat {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for TextFormat {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 10.00, y: 34.00 }),
                PathEl::LineTo(Point { x: 10.00, y: 38.00 }),
                PathEl::LineTo(Point { x: 38.00, y: 38.00 }),
                PathEl::LineTo(Point { x: 38.00, y: 34.00 }),
                PathEl::LineTo(Point { x: 10.00, y: 34.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 19.00, y: 25.60 }),
                PathEl::LineTo(Point { x: 29.00, y: 25.60 }),
                PathEl::LineTo(Point { x: 30.80, y: 30.00 }),
                PathEl::LineTo(Point { x: 35.00, y: 30.00 }),
                PathEl::LineTo(Point { x: 25.50, y: 8.00 }),
                PathEl::LineTo(Point { x: 22.50, y: 8.00 }),
                PathEl::LineTo(Point { x: 13.00, y: 30.00 }),
                PathEl::LineTo(Point { x: 17.20, y: 30.00 }),
                PathEl::LineTo(Point { x: 19.00, y: 25.60 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 24.00, y: 11.96 }),
                PathEl::LineTo(Point { x: 27.74, y: 22.00 }),
                PathEl::LineTo(Point { x: 20.26, y: 22.00 }),
                PathEl::LineTo(Point { x: 24.00, y: 11.96 }),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct QuestionAnswer {
    size: f64,
    color: Color,
}

impl QuestionAnswer {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for QuestionAnswer {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 42.00, y: 12.00 }),
                PathEl::LineTo(Point { x: 38.00, y: 12.00 }),
                PathEl::LineTo(Point { x: 38.00, y: 30.00 }),
                PathEl::LineTo(Point { x: 12.00, y: 30.00 }),
                PathEl::LineTo(Point { x: 12.00, y: 34.00 }),
                PathEl::CurveTo(
                    Point { x: 12.00, y: 35.10 },
                    Point { x: 12.90, y: 36.00 },
                    Point { x: 14.00, y: 36.00 },
                ),
                PathEl::LineTo(Point { x: 36.00, y: 36.00 }),
                PathEl::LineTo(Point { x: 44.00, y: 44.00 }),
                PathEl::LineTo(Point { x: 44.00, y: 14.00 }),
                PathEl::CurveTo(
                    Point { x: 44.00, y: 12.90 },
                    Point { x: 43.10, y: 12.00 },
                    Point { x: 42.00, y: 12.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 34.00, y: 24.00 }),
                PathEl::LineTo(Point { x: 34.00, y: 6.00 }),
                PathEl::CurveTo(
                    Point { x: 34.00, y: 4.90 },
                    Point { x: 33.10, y: 4.00 },
                    Point { x: 32.00, y: 4.00 },
                ),
                PathEl::LineTo(Point { x: 6.00, y: 4.00 }),
                PathEl::CurveTo(
                    Point { x: 4.90, y: 4.00 },
                    Point { x: 4.00, y: 4.90 },
                    Point { x: 4.00, y: 6.00 },
                ),
                PathEl::LineTo(Point { x: 4.00, y: 34.00 }),
                PathEl::LineTo(Point { x: 12.00, y: 26.00 }),
                PathEl::LineTo(Point { x: 32.00, y: 26.00 }),
                PathEl::CurveTo(
                    Point { x: 33.10, y: 26.00 },
                    Point { x: 34.00, y: 25.10 },
                    Point { x: 34.00, y: 24.00 },
                ),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct VideocamOff {
    size: f64,
    color: Color,
}

impl VideocamOff {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for VideocamOff {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 42.00, y: 13.00 }),
                PathEl::LineTo(Point { x: 34.00, y: 21.00 }),
                PathEl::LineTo(Point { x: 34.00, y: 14.00 }),
                PathEl::CurveTo(
                    Point { x: 34.00, y: 12.90 },
                    Point { x: 33.10, y: 12.00 },
                    Point { x: 32.00, y: 12.00 },
                ),
                PathEl::LineTo(Point { x: 19.64, y: 12.00 }),
                PathEl::LineTo(Point { x: 42.00, y: 34.36 }),
                PathEl::LineTo(Point { x: 42.00, y: 13.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 6.55, y: 4.00 }),
                PathEl::LineTo(Point { x: 4.00, y: 6.55 }),
                PathEl::LineTo(Point { x: 9.45, y: 12.00 }),
                PathEl::LineTo(Point { x: 8.00, y: 12.00 }),
                PathEl::CurveTo(
                    Point { x: 6.90, y: 12.00 },
                    Point { x: 6.00, y: 12.90 },
                    Point { x: 6.00, y: 14.00 },
                ),
                PathEl::LineTo(Point { x: 6.00, y: 34.00 }),
                PathEl::CurveTo(
                    Point { x: 6.00, y: 35.10 },
                    Point { x: 6.90, y: 36.00 },
                    Point { x: 8.00, y: 36.00 },
                ),
                PathEl::LineTo(Point { x: 32.00, y: 36.00 }),
                PathEl::CurveTo(
                    Point { x: 32.41, y: 36.00 },
                    Point { x: 32.77, y: 35.85 },
                    Point { x: 33.09, y: 35.63 },
                ),
                PathEl::LineTo(Point { x: 39.46, y: 42.00 }),
                PathEl::LineTo(Point { x: 42.00, y: 39.45 }),
                PathEl::LineTo(Point { x: 6.55, y: 4.00 }),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct BrokenImage {
    size: f64,
    color: Color,
}

impl BrokenImage {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for BrokenImage {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 42.00, y: 10.00 }),
                PathEl::LineTo(Point { x: 42.00, y: 23.20 }),
                PathEl::LineTo(Point { x: 36.00, y: 17.20 }),
                PathEl::LineTo(Point { x: 28.00, y: 25.20 }),
                PathEl::LineTo(Point { x: 20.00, y: 17.20 }),
                PathEl::LineTo(Point { x: 12.00, y: 25.20 }),
                PathEl::LineTo(Point { x: 6.00, y: 19.20 }),
                PathEl::LineTo(Point { x: 6.00, y: 10.00 }),
                PathEl::CurveTo(
                    Point { x: 6.00, y: 7.80 },
                    Point { x: 7.80, y: 6.00 },
                    Point { x: 10.00, y: 6.00 },
                ),
                PathEl::LineTo(Point { x: 38.00, y: 6.00 }),
                PathEl::CurveTo(
                    Point { x: 40.20, y: 6.00 },
                    Point { x: 42.00, y: 7.80 },
                    Point { x: 42.00, y: 10.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 36.00, y: 22.80 }),
                PathEl::LineTo(Point { x: 42.00, y: 28.80 }),
                PathEl::LineTo(Point { x: 42.00, y: 38.00 }),
                PathEl::CurveTo(
                    Point { x: 42.00, y: 40.20 },
                    Point { x: 40.20, y: 42.00 },
                    Point { x: 38.00, y: 42.00 },
                ),
                PathEl::LineTo(Point { x: 10.00, y: 42.00 }),
                PathEl::CurveTo(
                    Point { x: 7.80, y: 42.00 },
                    Point { x: 6.00, y: 40.20 },
                    Point { x: 6.00, y: 38.00 },
                ),
                PathEl::LineTo(Point { x: 6.00, y: 24.80 }),
                PathEl::LineTo(Point { x: 12.00, y: 30.80 }),
                PathEl::LineTo(Point { x: 20.00, y: 22.80 }),
                PathEl::LineTo(Point { x: 28.00, y: 30.80 }),
                PathEl::LineTo(Point { x: 36.00, y: 22.80 }),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct FastRewind {
    size: f64,
    color: Color,
}

impl FastRewind {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for FastRewind {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 22.00, y: 36.00 }),
                PathEl::LineTo(Point { x: 22.00, y: 12.00 }),
                PathEl::LineTo(Point { x: 5.00, y: 24.00 }),
                PathEl::LineTo(Point { x: 22.00, y: 36.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 23.00, y: 24.00 }),
                PathEl::LineTo(Point { x: 40.00, y: 36.00 }),
                PathEl::LineTo(Point { x: 40.00, y: 12.00 }),
                PathEl::LineTo(Point { x: 23.00, y: 24.00 }),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct Fullscreen {
    size: f64,
    color: Color,
}

impl Fullscreen {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for Fullscreen {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 14.00, y: 28.00 }),
                PathEl::LineTo(Point { x: 10.00, y: 28.00 }),
                PathEl::LineTo(Point { x: 10.00, y: 38.00 }),
                PathEl::LineTo(Point { x: 20.00, y: 38.00 }),
                PathEl::LineTo(Point { x: 20.00, y: 34.00 }),
                PathEl::LineTo(Point { x: 14.00, y: 34.00 }),
                PathEl::LineTo(Point { x: 14.00, y: 28.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 10.00, y: 20.00 }),
                PathEl::LineTo(Point { x: 14.00, y: 20.00 }),
                PathEl::LineTo(Point { x: 14.00, y: 14.00 }),
                PathEl::LineTo(Point { x: 20.00, y: 14.00 }),
                PathEl::LineTo(Point { x: 20.00, y: 10.00 }),
                PathEl::LineTo(Point { x: 10.00, y: 10.00 }),
                PathEl::LineTo(Point { x: 10.00, y: 20.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 34.00, y: 34.00 }),
                PathEl::LineTo(Point { x: 28.00, y: 34.00 }),
                PathEl::LineTo(Point { x: 28.00, y: 38.00 }),
                PathEl::LineTo(Point { x: 38.00, y: 38.00 }),
                PathEl::LineTo(Point { x: 38.00, y: 28.00 }),
                PathEl::LineTo(Point { x: 34.00, y: 28.00 }),
                PathEl::LineTo(Point { x: 34.00, y: 34.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 28.00, y: 10.00 }),
                PathEl::LineTo(Point { x: 28.00, y: 14.00 }),
                PathEl::LineTo(Point { x: 34.00, y: 14.00 }),
                PathEl::LineTo(Point { x: 34.00, y: 20.00 }),
                PathEl::LineTo(Point { x: 38.00, y: 20.00 }),
                PathEl::LineTo(Point { x: 38.00, y: 10.00 }),
                PathEl::LineTo(Point { x: 28.00, y: 10.00 }),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct FlashOn {
    size: f64,
    color: Color,
}

impl FlashOn {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for FlashOn {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 14.00, y: 4.00 }),
                PathEl::LineTo(Point { x: 14.00, y: 26.00 }),
                PathEl::LineTo(Point { x: 20.00, y: 26.00 }),
                PathEl::LineTo(Point { x: 20.00, y: 44.00 }),
                PathEl::LineTo(Point { x: 34.00, y: 20.00 }),
                PathEl::LineTo(Point { x: 26.00, y: 20.00 }),
                PathEl::LineTo(Point { x: 34.00, y: 4.00 }),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct RecentActors {
    size: f64,
    color: Color,
}

impl RecentActors {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for RecentActors {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 42.00, y: 10.00 }),
                PathEl::LineTo(Point { x: 42.00, y: 38.00 }),
                PathEl::LineTo(Point { x: 46.00, y: 38.00 }),
                PathEl::LineTo(Point { x: 46.00, y: 10.00 }),
                PathEl::LineTo(Point { x: 42.00, y: 10.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 34.00, y: 38.00 }),
                PathEl::LineTo(Point { x: 38.00, y: 38.00 }),
                PathEl::LineTo(Point { x: 38.00, y: 10.00 }),
                PathEl::LineTo(Point { x: 34.00, y: 10.00 }),
                PathEl::LineTo(Point { x: 34.00, y: 38.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 28.00, y: 10.00 }),
                PathEl::LineTo(Point { x: 4.00, y: 10.00 }),
                PathEl::CurveTo(
                    Point { x: 2.90, y: 10.00 },
                    Point { x: 2.00, y: 10.90 },
                    Point { x: 2.00, y: 12.00 },
                ),
                PathEl::LineTo(Point { x: 2.00, y: 36.00 }),
                PathEl::CurveTo(
                    Point { x: 2.00, y: 37.10 },
                    Point { x: 2.90, y: 38.00 },
                    Point { x: 4.00, y: 38.00 },
                ),
                PathEl::LineTo(Point { x: 28.00, y: 38.00 }),
                PathEl::CurveTo(
                    Point { x: 29.10, y: 38.00 },
                    Point { x: 30.00, y: 37.10 },
                    Point { x: 30.00, y: 36.00 },
                ),
                PathEl::LineTo(Point { x: 30.00, y: 12.00 }),
                PathEl::CurveTo(
                    Point { x: 30.00, y: 10.90 },
                    Point { x: 29.10, y: 10.00 },
                    Point { x: 28.00, y: 10.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 16.00, y: 15.50 }),
                PathEl::CurveTo(
                    Point { x: 18.48, y: 15.50 },
                    Point { x: 20.50, y: 17.52 },
                    Point { x: 20.50, y: 20.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 20.50, y: 22.49 },
                    Point { x: 18.48, y: 24.50 },
                    Point { x: 16.00, y: 24.50 },
                ),
                PathEl::CurveTo(
                    Point { x: 13.52, y: 24.50 },
                    Point { x: 11.50, y: 22.49 },
                    Point { x: 11.50, y: 20.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 11.50, y: 17.52 },
                    Point { x: 13.52, y: 15.50 },
                    Point { x: 16.00, y: 15.50 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 25.00, y: 34.00 }),
                PathEl::LineTo(Point { x: 7.00, y: 34.00 }),
                PathEl::LineTo(Point { x: 7.00, y: 32.50 }),
                PathEl::CurveTo(
                    Point { x: 7.00, y: 29.50 },
                    Point { x: 13.00, y: 28.00 },
                    Point { x: 16.00, y: 28.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 19.00, y: 28.00 },
                    Point { x: 25.00, y: 29.50 },
                    Point { x: 25.00, y: 32.50 },
                ),
                PathEl::LineTo(Point { x: 25.00, y: 34.00 }),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct Filter5 {
    size: f64,
    color: Color,
}

impl Filter5 {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for Filter5 {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 42.00, y: 2.00 }),
                PathEl::LineTo(Point { x: 14.00, y: 2.00 }),
                PathEl::CurveTo(
                    Point { x: 11.79, y: 2.00 },
                    Point { x: 10.00, y: 3.79 },
                    Point { x: 10.00, y: 6.00 },
                ),
                PathEl::LineTo(Point { x: 10.00, y: 34.00 }),
                PathEl::CurveTo(
                    Point { x: 10.00, y: 36.21 },
                    Point { x: 11.79, y: 38.00 },
                    Point { x: 14.00, y: 38.00 },
                ),
                PathEl::LineTo(Point { x: 42.00, y: 38.00 }),
                PathEl::CurveTo(
                    Point { x: 44.21, y: 38.00 },
                    Point { x: 46.00, y: 36.21 },
                    Point { x: 46.00, y: 34.00 },
                ),
                PathEl::LineTo(Point { x: 46.00, y: 6.00 }),
                PathEl::CurveTo(
                    Point { x: 46.00, y: 3.79 },
                    Point { x: 44.21, y: 2.00 },
                    Point { x: 42.00, y: 2.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 42.00, y: 34.00 }),
                PathEl::LineTo(Point { x: 14.00, y: 34.00 }),
                PathEl::LineTo(Point { x: 14.00, y: 6.00 }),
                PathEl::LineTo(Point { x: 42.00, y: 6.00 }),
                PathEl::LineTo(Point { x: 42.00, y: 34.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 6.00, y: 10.00 }),
                PathEl::LineTo(Point { x: 2.00, y: 10.00 }),
                PathEl::LineTo(Point { x: 2.00, y: 42.00 }),
                PathEl::CurveTo(
                    Point { x: 2.00, y: 44.21 },
                    Point { x: 3.79, y: 46.00 },
                    Point { x: 6.00, y: 46.00 },
                ),
                PathEl::LineTo(Point { x: 38.00, y: 46.00 }),
                PathEl::LineTo(Point { x: 38.00, y: 42.00 }),
                PathEl::LineTo(Point { x: 6.00, y: 42.00 }),
                PathEl::LineTo(Point { x: 6.00, y: 10.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 34.00, y: 26.00 }),
                PathEl::LineTo(Point { x: 34.00, y: 22.00 }),
                PathEl::CurveTo(
                    Point { x: 34.00, y: 19.79 },
                    Point { x: 32.21, y: 18.00 },
                    Point { x: 30.00, y: 18.00 },
                ),
                PathEl::LineTo(Point { x: 26.00, y: 18.00 }),
                PathEl::LineTo(Point { x: 26.00, y: 14.00 }),
                PathEl::LineTo(Point { x: 34.00, y: 14.00 }),
                PathEl::LineTo(Point { x: 34.00, y: 10.00 }),
                PathEl::LineTo(Point { x: 22.00, y: 10.00 }),
                PathEl::LineTo(Point { x: 22.00, y: 22.00 }),
                PathEl::LineTo(Point { x: 30.00, y: 22.00 }),
                PathEl::LineTo(Point { x: 30.00, y: 26.00 }),
                PathEl::LineTo(Point { x: 22.00, y: 26.00 }),
                PathEl::LineTo(Point { x: 22.00, y: 30.00 }),
                PathEl::LineTo(Point { x: 30.00, y: 30.00 }),
                PathEl::CurveTo(
                    Point { x: 32.21, y: 30.00 },
                    Point { x: 34.00, y: 28.21 },
                    Point { x: 34.00, y: 26.00 },
                ),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct SignalCellular0Bar {
    size: f64,
    color: Color,
}

impl SignalCellular0Bar {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for SignalCellular0Bar {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 4.00, y: 44.00 }),
                PathEl::LineTo(Point { x: 44.00, y: 44.00 }),
                PathEl::LineTo(Point { x: 44.00, y: 4.00 }),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct LocalPizza {
    size: f64,
    color: Color,
}

impl LocalPizza {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for LocalPizza {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 24.00, y: 4.00 }),
                PathEl::CurveTo(
                    Point { x: 16.87, y: 4.00 },
                    Point { x: 10.45, y: 7.09 },
                    Point { x: 6.02, y: 12.00 },
                ),
                PathEl::LineTo(Point { x: 24.00, y: 44.00 }),
                PathEl::LineTo(Point { x: 41.99, y: 12.01 }),
                PathEl::CurveTo(
                    Point { x: 37.56, y: 7.09 },
                    Point { x: 31.14, y: 4.00 },
                    Point { x: 24.00, y: 4.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 14.00, y: 14.00 }),
                PathEl::CurveTo(
                    Point { x: 14.00, y: 11.79 },
                    Point { x: 15.79, y: 10.00 },
                    Point { x: 18.00, y: 10.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 20.21, y: 10.00 },
                    Point { x: 22.00, y: 11.79 },
                    Point { x: 22.00, y: 14.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 22.00, y: 16.21 },
                    Point { x: 20.21, y: 18.00 },
                    Point { x: 18.00, y: 18.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 15.79, y: 18.00 },
                    Point { x: 14.00, y: 16.21 },
                    Point { x: 14.00, y: 14.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 24.00, y: 30.00 }),
                PathEl::CurveTo(
                    Point { x: 21.79, y: 30.00 },
                    Point { x: 20.00, y: 28.21 },
                    Point { x: 20.00, y: 26.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 20.00, y: 23.79 },
                    Point { x: 21.79, y: 22.00 },
                    Point { x: 24.00, y: 22.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 26.21, y: 22.00 },
                    Point { x: 28.00, y: 23.79 },
                    Point { x: 28.00, y: 26.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 28.00, y: 28.21 },
                    Point { x: 26.21, y: 30.00 },
                    Point { x: 24.00, y: 30.00 },
                ),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct SettingsInputHdmi {
    size: f64,
    color: Color,
}

impl SettingsInputHdmi {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for SettingsInputHdmi {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 36.00, y: 14.00 }),
                PathEl::LineTo(Point { x: 36.00, y: 8.00 }),
                PathEl::CurveTo(
                    Point { x: 36.00, y: 5.79 },
                    Point { x: 34.21, y: 4.00 },
                    Point { x: 32.00, y: 4.00 },
                ),
                PathEl::LineTo(Point { x: 16.00, y: 4.00 }),
                PathEl::CurveTo(
                    Point { x: 13.79, y: 4.00 },
                    Point { x: 12.00, y: 5.79 },
                    Point { x: 12.00, y: 8.00 },
                ),
                PathEl::LineTo(Point { x: 12.00, y: 14.00 }),
                PathEl::LineTo(Point { x: 10.00, y: 14.00 }),
                PathEl::LineTo(Point { x: 10.00, y: 26.00 }),
                PathEl::LineTo(Point { x: 16.00, y: 38.00 }),
                PathEl::LineTo(Point { x: 16.00, y: 44.00 }),
                PathEl::LineTo(Point { x: 32.00, y: 44.00 }),
                PathEl::LineTo(Point { x: 32.00, y: 38.00 }),
                PathEl::LineTo(Point { x: 38.00, y: 26.00 }),
                PathEl::LineTo(Point { x: 38.00, y: 14.00 }),
                PathEl::LineTo(Point { x: 36.00, y: 14.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 16.00, y: 8.00 }),
                PathEl::LineTo(Point { x: 32.00, y: 8.00 }),
                PathEl::LineTo(Point { x: 32.00, y: 14.00 }),
                PathEl::LineTo(Point { x: 28.00, y: 14.00 }),
                PathEl::LineTo(Point { x: 28.00, y: 10.00 }),
                PathEl::LineTo(Point { x: 26.00, y: 10.00 }),
                PathEl::LineTo(Point { x: 26.00, y: 14.00 }),
                PathEl::LineTo(Point { x: 22.00, y: 14.00 }),
                PathEl::LineTo(Point { x: 22.00, y: 10.00 }),
                PathEl::LineTo(Point { x: 20.00, y: 10.00 }),
                PathEl::LineTo(Point { x: 20.00, y: 14.00 }),
                PathEl::LineTo(Point { x: 16.00, y: 14.00 }),
                PathEl::LineTo(Point { x: 16.00, y: 8.00 }),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct Equalizer {
    size: f64,
    color: Color,
}

impl Equalizer {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for Equalizer {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 20.00, y: 40.00 }),
                PathEl::LineTo(Point { x: 28.00, y: 40.00 }),
                PathEl::LineTo(Point { x: 28.00, y: 8.00 }),
                PathEl::LineTo(Point { x: 20.00, y: 8.00 }),
                PathEl::LineTo(Point { x: 20.00, y: 40.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 8.00, y: 40.00 }),
                PathEl::LineTo(Point { x: 16.00, y: 40.00 }),
                PathEl::LineTo(Point { x: 16.00, y: 24.00 }),
                PathEl::LineTo(Point { x: 8.00, y: 24.00 }),
                PathEl::LineTo(Point { x: 8.00, y: 40.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 32.00, y: 18.00 }),
                PathEl::LineTo(Point { x: 32.00, y: 40.00 }),
                PathEl::LineTo(Point { x: 40.00, y: 40.00 }),
                PathEl::LineTo(Point { x: 40.00, y: 18.00 }),
                PathEl::LineTo(Point { x: 32.00, y: 18.00 }),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct Gradient {
    size: f64,
    color: Color,
}

impl Gradient {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for Gradient {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 22.00, y: 18.00 }),
                PathEl::LineTo(Point { x: 26.00, y: 18.00 }),
                PathEl::LineTo(Point { x: 26.00, y: 22.00 }),
                PathEl::LineTo(Point { x: 22.00, y: 22.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 18.00, y: 22.00 }),
                PathEl::LineTo(Point { x: 22.00, y: 22.00 }),
                PathEl::LineTo(Point { x: 22.00, y: 26.00 }),
                PathEl::LineTo(Point { x: 18.00, y: 26.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 26.00, y: 22.00 }),
                PathEl::LineTo(Point { x: 30.00, y: 22.00 }),
                PathEl::LineTo(Point { x: 30.00, y: 26.00 }),
                PathEl::LineTo(Point { x: 26.00, y: 26.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 30.00, y: 18.00 }),
                PathEl::LineTo(Point { x: 34.00, y: 18.00 }),
                PathEl::LineTo(Point { x: 34.00, y: 22.00 }),
                PathEl::LineTo(Point { x: 30.00, y: 22.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 14.00, y: 18.00 }),
                PathEl::LineTo(Point { x: 18.00, y: 18.00 }),
                PathEl::LineTo(Point { x: 18.00, y: 22.00 }),
                PathEl::LineTo(Point { x: 14.00, y: 22.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 38.00, y: 6.00 }),
                PathEl::LineTo(Point { x: 10.00, y: 6.00 }),
                PathEl::CurveTo(
                    Point { x: 7.80, y: 6.00 },
                    Point { x: 6.00, y: 7.80 },
                    Point { x: 6.00, y: 10.00 },
                ),
                PathEl::LineTo(Point { x: 6.00, y: 38.00 }),
                PathEl::CurveTo(
                    Point { x: 6.00, y: 40.20 },
                    Point { x: 7.80, y: 42.00 },
                    Point { x: 10.00, y: 42.00 },
                ),
                PathEl::LineTo(Point { x: 38.00, y: 42.00 }),
                PathEl::CurveTo(
                    Point { x: 40.20, y: 42.00 },
                    Point { x: 42.00, y: 40.20 },
                    Point { x: 42.00, y: 38.00 },
                ),
                PathEl::LineTo(Point { x: 42.00, y: 10.00 }),
                PathEl::CurveTo(
                    Point { x: 42.00, y: 7.80 },
                    Point { x: 40.20, y: 6.00 },
                    Point { x: 38.00, y: 6.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 18.00, y: 36.00 }),
                PathEl::LineTo(Point { x: 14.00, y: 36.00 }),
                PathEl::LineTo(Point { x: 14.00, y: 32.00 }),
                PathEl::LineTo(Point { x: 18.00, y: 32.00 }),
                PathEl::LineTo(Point { x: 18.00, y: 36.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 26.00, y: 36.00 }),
                PathEl::LineTo(Point { x: 22.00, y: 36.00 }),
                PathEl::LineTo(Point { x: 22.00, y: 32.00 }),
                PathEl::LineTo(Point { x: 26.00, y: 32.00 }),
                PathEl::LineTo(Point { x: 26.00, y: 36.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 34.00, y: 36.00 }),
                PathEl::LineTo(Point { x: 30.00, y: 36.00 }),
                PathEl::LineTo(Point { x: 30.00, y: 32.00 }),
                PathEl::LineTo(Point { x: 34.00, y: 32.00 }),
                PathEl::LineTo(Point { x: 34.00, y: 36.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 38.00, y: 22.00 }),
                PathEl::LineTo(Point { x: 34.00, y: 22.00 }),
                PathEl::LineTo(Point { x: 34.00, y: 26.00 }),
                PathEl::LineTo(Point { x: 38.00, y: 26.00 }),
                PathEl::LineTo(Point { x: 38.00, y: 30.00 }),
                PathEl::LineTo(Point { x: 34.00, y: 30.00 }),
                PathEl::LineTo(Point { x: 34.00, y: 26.00 }),
                PathEl::LineTo(Point { x: 30.00, y: 26.00 }),
                PathEl::LineTo(Point { x: 30.00, y: 30.00 }),
                PathEl::LineTo(Point { x: 26.00, y: 30.00 }),
                PathEl::LineTo(Point { x: 26.00, y: 26.00 }),
                PathEl::LineTo(Point { x: 22.00, y: 26.00 }),
                PathEl::LineTo(Point { x: 22.00, y: 30.00 }),
                PathEl::LineTo(Point { x: 18.00, y: 30.00 }),
                PathEl::LineTo(Point { x: 18.00, y: 26.00 }),
                PathEl::LineTo(Point { x: 14.00, y: 26.00 }),
                PathEl::LineTo(Point { x: 14.00, y: 30.00 }),
                PathEl::LineTo(Point { x: 10.00, y: 30.00 }),
                PathEl::LineTo(Point { x: 10.00, y: 26.00 }),
                PathEl::LineTo(Point { x: 14.00, y: 26.00 }),
                PathEl::LineTo(Point { x: 14.00, y: 22.00 }),
                PathEl::LineTo(Point { x: 10.00, y: 22.00 }),
                PathEl::LineTo(Point { x: 10.00, y: 10.00 }),
                PathEl::LineTo(Point { x: 38.00, y: 10.00 }),
                PathEl::LineTo(Point { x: 38.00, y: 22.00 }),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct AirlineSeatReclineNormal {
    size: f64,
    color: Color,
}

impl AirlineSeatReclineNormal {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for AirlineSeatReclineNormal {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 15.17, y: 10.83 }),
                PathEl::CurveTo(
                    Point { x: 13.61, y: 9.27 },
                    Point { x: 13.61, y: 6.74 },
                    Point { x: 15.17, y: 5.17 },
                ),
                PathEl::CurveTo(
                    Point { x: 16.73, y: 3.61 },
                    Point { x: 19.26, y: 3.61 },
                    Point { x: 20.83, y: 5.17 },
                ),
                PathEl::CurveTo(
                    Point { x: 22.39, y: 6.73 },
                    Point { x: 22.39, y: 9.26 },
                    Point { x: 20.83, y: 10.83 },
                ),
                PathEl::CurveTo(
                    Point { x: 19.27, y: 12.39 },
                    Point { x: 16.73, y: 12.39 },
                    Point { x: 15.17, y: 10.83 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 12.00, y: 32.00 }),
                PathEl::LineTo(Point { x: 12.00, y: 14.00 }),
                PathEl::LineTo(Point { x: 8.00, y: 14.00 }),
                PathEl::LineTo(Point { x: 8.00, y: 32.00 }),
                PathEl::CurveTo(
                    Point { x: 8.00, y: 37.52 },
                    Point { x: 12.48, y: 42.00 },
                    Point { x: 18.00, y: 42.00 },
                ),
                PathEl::LineTo(Point { x: 30.00, y: 42.00 }),
                PathEl::LineTo(Point { x: 30.00, y: 38.00 }),
                PathEl::LineTo(Point { x: 18.00, y: 38.00 }),
                PathEl::CurveTo(
                    Point { x: 14.69, y: 38.00 },
                    Point { x: 12.00, y: 35.31 },
                    Point { x: 12.00, y: 32.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 40.00, y: 40.13 }),
                PathEl::LineTo(Point { x: 29.87, y: 30.00 }),
                PathEl::LineTo(Point { x: 23.00, y: 30.00 }),
                PathEl::LineTo(Point { x: 23.00, y: 22.64 }),
                PathEl::CurveTo(
                    Point { x: 25.79, y: 24.94 },
                    Point { x: 30.21, y: 26.95 },
                    Point { x: 34.00, y: 26.96 },
                ),
                PathEl::LineTo(Point { x: 34.00, y: 22.64 }),
                PathEl::CurveTo(
                    Point { x: 30.68, y: 22.68 },
                    Point { x: 26.78, y: 20.90 },
                    Point { x: 24.66, y: 18.56 },
                ),
                PathEl::LineTo(Point { x: 21.86, y: 15.46 }),
                PathEl::CurveTo(
                    Point { x: 21.47, y: 15.03 },
                    Point { x: 21.00, y: 14.70 },
                    Point { x: 20.49, y: 14.45 },
                ),
                PathEl::CurveTo(
                    Point { x: 19.90, y: 14.16 },
                    Point { x: 19.24, y: 13.99 },
                    Point { x: 18.56, y: 13.99 },
                ),
                PathEl::LineTo(Point { x: 18.51, y: 13.99 }),
                PathEl::CurveTo(
                    Point { x: 16.02, y: 14.00 },
                    Point { x: 14.00, y: 16.01 },
                    Point { x: 14.00, y: 18.50 },
                ),
                PathEl::LineTo(Point { x: 14.00, y: 30.00 }),
                PathEl::CurveTo(
                    Point { x: 14.00, y: 33.31 },
                    Point { x: 16.69, y: 36.00 },
                    Point { x: 20.00, y: 36.00 },
                ),
                PathEl::LineTo(Point { x: 30.13, y: 36.00 }),
                PathEl::LineTo(Point { x: 37.13, y: 43.00 }),
                PathEl::LineTo(Point { x: 40.00, y: 40.13 }),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct PhonelinkSetup {
    size: f64,
    color: Color,
}

impl PhonelinkSetup {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for PhonelinkSetup {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 24.0, height / 24.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 11.80, y: 12.50 }),
                PathEl::LineTo(Point { x: 11.80, y: 11.50 }),
                PathEl::LineTo(Point { x: 12.90, y: 10.70 }),
                PathEl::CurveTo(
                    Point { x: 13.00, y: 10.60 },
                    Point { x: 13.00, y: 10.50 },
                    Point { x: 13.00, y: 10.40 },
                ),
                PathEl::LineTo(Point { x: 12.00, y: 8.70 }),
                PathEl::CurveTo(
                    Point { x: 11.90, y: 8.60 },
                    Point { x: 11.80, y: 8.50 },
                    Point { x: 11.70, y: 8.60 },
                ),
                PathEl::LineTo(Point { x: 10.40, y: 9.00 }),
                PathEl::CurveTo(
                    Point { x: 10.10, y: 8.80 },
                    Point { x: 9.80, y: 8.60 },
                    Point { x: 9.50, y: 8.50 },
                ),
                PathEl::LineTo(Point { x: 9.30, y: 7.20 }),
                PathEl::CurveTo(
                    Point { x: 9.30, y: 7.10 },
                    Point { x: 9.20, y: 7.00 },
                    Point { x: 9.00, y: 7.00 },
                ),
                PathEl::LineTo(Point { x: 7.00, y: 7.00 }),
                PathEl::CurveTo(
                    Point { x: 6.90, y: 7.00 },
                    Point { x: 6.80, y: 7.10 },
                    Point { x: 6.70, y: 7.20 },
                ),
                PathEl::LineTo(Point { x: 6.50, y: 8.50 }),
                PathEl::CurveTo(
                    Point { x: 6.20, y: 8.60 },
                    Point { x: 5.90, y: 8.80 },
                    Point { x: 5.60, y: 9.00 },
                ),
                PathEl::LineTo(Point { x: 4.30, y: 8.50 }),
                PathEl::CurveTo(
                    Point { x: 4.20, y: 8.50 },
                    Point { x: 4.10, y: 8.50 },
                    Point { x: 4.00, y: 8.60 },
                ),
                PathEl::LineTo(Point { x: 3.00, y: 10.30 }),
                PathEl::CurveTo(
                    Point { x: 2.90, y: 10.40 },
                    Point { x: 3.00, y: 10.50 },
                    Point { x: 3.10, y: 10.60 },
                ),
                PathEl::LineTo(Point { x: 4.20, y: 11.40 }),
                PathEl::LineTo(Point { x: 4.20, y: 12.40 }),
                PathEl::LineTo(Point { x: 3.10, y: 13.20 }),
                PathEl::CurveTo(
                    Point { x: 3.00, y: 13.40 },
                    Point { x: 3.00, y: 13.50 },
                    Point { x: 3.00, y: 13.60 },
                ),
                PathEl::LineTo(Point { x: 4.00, y: 15.30 }),
                PathEl::CurveTo(
                    Point { x: 4.10, y: 15.40 },
                    Point { x: 4.20, y: 15.50 },
                    Point { x: 4.30, y: 15.40 },
                ),
                PathEl::LineTo(Point { x: 5.70, y: 15.00 }),
                PathEl::CurveTo(
                    Point { x: 6.00, y: 15.20 },
                    Point { x: 6.30, y: 15.40 },
                    Point { x: 6.60, y: 15.50 },
                ),
                PathEl::LineTo(Point { x: 6.80, y: 16.80 }),
                PathEl::CurveTo(
                    Point { x: 6.70, y: 16.90 },
                    Point { x: 6.90, y: 17.00 },
                    Point { x: 7.00, y: 17.00 },
                ),
                PathEl::LineTo(Point { x: 9.00, y: 17.00 }),
                PathEl::CurveTo(
                    Point { x: 9.10, y: 17.00 },
                    Point { x: 9.20, y: 16.90 },
                    Point { x: 9.30, y: 16.80 },
                ),
                PathEl::LineTo(Point { x: 9.50, y: 15.50 }),
                PathEl::CurveTo(
                    Point { x: 9.80, y: 15.40 },
                    Point { x: 10.10, y: 15.20 },
                    Point { x: 10.40, y: 15.00 },
                ),
                PathEl::LineTo(Point { x: 11.70, y: 15.50 }),
                PathEl::CurveTo(
                    Point { x: 11.80, y: 15.50 },
                    Point { x: 11.90, y: 15.50 },
                    Point { x: 12.00, y: 15.40 },
                ),
                PathEl::LineTo(Point { x: 13.00, y: 13.70 }),
                PathEl::CurveTo(
                    Point { x: 13.10, y: 13.60 },
                    Point { x: 13.00, y: 13.50 },
                    Point { x: 12.90, y: 13.40 },
                ),
                PathEl::LineTo(Point { x: 11.80, y: 12.50 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 8.00, y: 14.00 }),
                PathEl::CurveTo(
                    Point { x: 6.90, y: 14.00 },
                    Point { x: 6.00, y: 13.10 },
                    Point { x: 6.00, y: 12.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 6.00, y: 10.90 },
                    Point { x: 6.90, y: 10.00 },
                    Point { x: 8.00, y: 10.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 9.10, y: 10.00 },
                    Point { x: 10.00, y: 10.90 },
                    Point { x: 10.00, y: 12.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 10.00, y: 13.10 },
                    Point { x: 9.10, y: 14.00 },
                    Point { x: 8.00, y: 14.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 19.00, y: 1.00 }),
                PathEl::LineTo(Point { x: 9.00, y: 1.00 }),
                PathEl::CurveTo(
                    Point { x: 7.90, y: 1.00 },
                    Point { x: 7.00, y: 1.90 },
                    Point { x: 7.00, y: 3.00 },
                ),
                PathEl::LineTo(Point { x: 7.00, y: 6.00 }),
                PathEl::LineTo(Point { x: 9.00, y: 6.00 }),
                PathEl::LineTo(Point { x: 9.00, y: 4.00 }),
                PathEl::LineTo(Point { x: 19.00, y: 4.00 }),
                PathEl::LineTo(Point { x: 19.00, y: 20.00 }),
                PathEl::LineTo(Point { x: 9.00, y: 20.00 }),
                PathEl::LineTo(Point { x: 9.00, y: 18.00 }),
                PathEl::LineTo(Point { x: 7.00, y: 18.00 }),
                PathEl::LineTo(Point { x: 7.00, y: 21.00 }),
                PathEl::CurveTo(
                    Point { x: 7.00, y: 22.10 },
                    Point { x: 7.90, y: 23.00 },
                    Point { x: 9.00, y: 23.00 },
                ),
                PathEl::LineTo(Point { x: 19.00, y: 23.00 }),
                PathEl::CurveTo(
                    Point { x: 20.10, y: 23.00 },
                    Point { x: 21.00, y: 22.10 },
                    Point { x: 21.00, y: 21.00 },
                ),
                PathEl::LineTo(Point { x: 21.00, y: 3.00 }),
                PathEl::CurveTo(
                    Point { x: 21.00, y: 1.90 },
                    Point { x: 20.10, y: 1.00 },
                    Point { x: 19.00, y: 1.00 },
                ),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct PhoneInTalk {
    size: f64,
    color: Color,
}

impl PhoneInTalk {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for PhoneInTalk {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 40.00, y: 31.00 }),
                PathEl::CurveTo(
                    Point { x: 37.51, y: 31.00 },
                    Point { x: 35.11, y: 30.60 },
                    Point { x: 32.86, y: 29.86 },
                ),
                PathEl::CurveTo(
                    Point { x: 32.17, y: 29.64 },
                    Point { x: 31.38, y: 29.80 },
                    Point { x: 30.83, y: 30.35 },
                ),
                PathEl::LineTo(Point { x: 26.43, y: 34.76 }),
                PathEl::CurveTo(
                    Point { x: 20.76, y: 31.88 },
                    Point { x: 16.14, y: 27.25 },
                    Point { x: 13.25, y: 21.59 },
                ),
                PathEl::LineTo(Point { x: 17.65, y: 17.18 }),
                PathEl::CurveTo(
                    Point { x: 18.20, y: 16.63 },
                    Point { x: 18.36, y: 15.84 },
                    Point { x: 18.14, y: 15.15 },
                ),
                PathEl::CurveTo(
                    Point { x: 17.40, y: 12.90 },
                    Point { x: 17.00, y: 10.49 },
                    Point { x: 17.00, y: 8.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 17.00, y: 6.89 },
                    Point { x: 16.11, y: 6.00 },
                    Point { x: 15.00, y: 6.00 },
                ),
                PathEl::LineTo(Point { x: 8.00, y: 6.00 }),
                PathEl::CurveTo(
                    Point { x: 6.89, y: 6.00 },
                    Point { x: 6.00, y: 6.89 },
                    Point { x: 6.00, y: 8.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 6.00, y: 26.78 },
                    Point { x: 21.22, y: 42.00 },
                    Point { x: 40.00, y: 42.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 41.11, y: 42.00 },
                    Point { x: 42.00, y: 41.11 },
                    Point { x: 42.00, y: 40.00 },
                ),
                PathEl::LineTo(Point { x: 42.00, y: 33.00 }),
                PathEl::CurveTo(
                    Point { x: 42.00, y: 31.89 },
                    Point { x: 41.11, y: 31.00 },
                    Point { x: 40.00, y: 31.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 38.00, y: 24.00 }),
                PathEl::LineTo(Point { x: 42.00, y: 24.00 }),
                PathEl::CurveTo(
                    Point { x: 42.00, y: 14.06 },
                    Point { x: 33.94, y: 6.00 },
                    Point { x: 24.00, y: 6.00 },
                ),
                PathEl::LineTo(Point { x: 24.00, y: 10.00 }),
                PathEl::CurveTo(
                    Point { x: 31.73, y: 10.00 },
                    Point { x: 38.00, y: 16.27 },
                    Point { x: 38.00, y: 24.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 30.00, y: 24.00 }),
                PathEl::LineTo(Point { x: 34.00, y: 24.00 }),
                PathEl::CurveTo(
                    Point { x: 34.00, y: 18.48 },
                    Point { x: 29.52, y: 14.00 },
                    Point { x: 24.00, y: 14.00 },
                ),
                PathEl::LineTo(Point { x: 24.00, y: 18.00 }),
                PathEl::CurveTo(
                    Point { x: 27.31, y: 18.00 },
                    Point { x: 30.00, y: 20.69 },
                    Point { x: 30.00, y: 24.00 },
                ),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct ViewArray {
    size: f64,
    color: Color,
}

impl ViewArray {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for ViewArray {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 8.00, y: 36.00 }),
                PathEl::LineTo(Point { x: 14.00, y: 36.00 }),
                PathEl::LineTo(Point { x: 14.00, y: 10.00 }),
                PathEl::LineTo(Point { x: 8.00, y: 10.00 }),
                PathEl::LineTo(Point { x: 8.00, y: 36.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 36.00, y: 10.00 }),
                PathEl::LineTo(Point { x: 36.00, y: 36.00 }),
                PathEl::LineTo(Point { x: 42.00, y: 36.00 }),
                PathEl::LineTo(Point { x: 42.00, y: 10.00 }),
                PathEl::LineTo(Point { x: 36.00, y: 10.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 16.00, y: 36.00 }),
                PathEl::LineTo(Point { x: 34.00, y: 36.00 }),
                PathEl::LineTo(Point { x: 34.00, y: 10.00 }),
                PathEl::LineTo(Point { x: 16.00, y: 10.00 }),
                PathEl::LineTo(Point { x: 16.00, y: 36.00 }),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct Subtitles {
    size: f64,
    color: Color,
}

impl Subtitles {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for Subtitles {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 40.00, y: 8.00 }),
                PathEl::LineTo(Point { x: 8.00, y: 8.00 }),
                PathEl::CurveTo(
                    Point { x: 5.79, y: 8.00 },
                    Point { x: 4.00, y: 9.79 },
                    Point { x: 4.00, y: 12.00 },
                ),
                PathEl::LineTo(Point { x: 4.00, y: 36.00 }),
                PathEl::CurveTo(
                    Point { x: 4.00, y: 38.21 },
                    Point { x: 5.79, y: 40.00 },
                    Point { x: 8.00, y: 40.00 },
                ),
                PathEl::LineTo(Point { x: 40.00, y: 40.00 }),
                PathEl::CurveTo(
                    Point { x: 42.21, y: 40.00 },
                    Point { x: 44.00, y: 38.21 },
                    Point { x: 44.00, y: 36.00 },
                ),
                PathEl::LineTo(Point { x: 44.00, y: 12.00 }),
                PathEl::CurveTo(
                    Point { x: 44.00, y: 9.79 },
                    Point { x: 42.21, y: 8.00 },
                    Point { x: 40.00, y: 8.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 8.00, y: 24.00 }),
                PathEl::LineTo(Point { x: 16.00, y: 24.00 }),
                PathEl::LineTo(Point { x: 16.00, y: 28.00 }),
                PathEl::LineTo(Point { x: 8.00, y: 28.00 }),
                PathEl::LineTo(Point { x: 8.00, y: 24.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 28.00, y: 36.00 }),
                PathEl::LineTo(Point { x: 8.00, y: 36.00 }),
                PathEl::LineTo(Point { x: 8.00, y: 32.00 }),
                PathEl::LineTo(Point { x: 28.00, y: 32.00 }),
                PathEl::LineTo(Point { x: 28.00, y: 36.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 40.00, y: 36.00 }),
                PathEl::LineTo(Point { x: 32.00, y: 36.00 }),
                PathEl::LineTo(Point { x: 32.00, y: 32.00 }),
                PathEl::LineTo(Point { x: 40.00, y: 32.00 }),
                PathEl::LineTo(Point { x: 40.00, y: 36.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 40.00, y: 28.00 }),
                PathEl::LineTo(Point { x: 20.00, y: 28.00 }),
                PathEl::LineTo(Point { x: 20.00, y: 24.00 }),
                PathEl::LineTo(Point { x: 40.00, y: 24.00 }),
                PathEl::LineTo(Point { x: 40.00, y: 28.00 }),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct Timer {
    size: f64,
    color: Color,
}

impl Timer {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for Timer {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 30.00, y: 2.00 }),
                PathEl::LineTo(Point { x: 18.00, y: 2.00 }),
                PathEl::LineTo(Point { x: 18.00, y: 6.00 }),
                PathEl::LineTo(Point { x: 30.00, y: 6.00 }),
                PathEl::LineTo(Point { x: 30.00, y: 2.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 22.00, y: 28.00 }),
                PathEl::LineTo(Point { x: 26.00, y: 28.00 }),
                PathEl::LineTo(Point { x: 26.00, y: 16.00 }),
                PathEl::LineTo(Point { x: 22.00, y: 16.00 }),
                PathEl::LineTo(Point { x: 22.00, y: 28.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 38.05, y: 14.77 }),
                PathEl::LineTo(Point { x: 40.90, y: 11.92 }),
                PathEl::CurveTo(
                    Point { x: 40.04, y: 10.89 },
                    Point { x: 39.10, y: 9.95 },
                    Point { x: 38.07, y: 9.09 },
                ),
                PathEl::LineTo(Point { x: 35.22, y: 11.94 }),
                PathEl::CurveTo(
                    Point { x: 32.15, y: 9.48 },
                    Point { x: 28.24, y: 8.00 },
                    Point { x: 23.99, y: 8.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 14.04, y: 8.00 },
                    Point { x: 6.00, y: 16.06 },
                    Point { x: 6.00, y: 26.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 6.00, y: 35.94 },
                    Point { x: 14.04, y: 44.00 },
                    Point { x: 23.99, y: 44.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 33.94, y: 44.00 },
                    Point { x: 42.00, y: 35.94 },
                    Point { x: 42.00, y: 26.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 42.00, y: 21.75 },
                    Point { x: 40.52, y: 17.85 },
                    Point { x: 38.05, y: 14.77 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 24.00, y: 40.00 }),
                PathEl::CurveTo(
                    Point { x: 16.27, y: 40.00 },
                    Point { x: 10.00, y: 33.73 },
                    Point { x: 10.00, y: 26.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 10.00, y: 18.27 },
                    Point { x: 16.27, y: 12.00 },
                    Point { x: 24.00, y: 12.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 31.73, y: 12.00 },
                    Point { x: 38.00, y: 18.27 },
                    Point { x: 38.00, y: 26.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 38.00, y: 33.73 },
                    Point { x: 31.73, y: 40.00 },
                    Point { x: 24.00, y: 40.00 },
                ),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct PhoneMissed {
    size: f64,
    color: Color,
}

impl PhoneMissed {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for PhoneMissed {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 13.00, y: 11.00 }),
                PathEl::LineTo(Point { x: 24.00, y: 22.00 }),
                PathEl::LineTo(Point { x: 38.00, y: 8.00 }),
                PathEl::LineTo(Point { x: 36.00, y: 6.00 }),
                PathEl::LineTo(Point { x: 24.00, y: 18.00 }),
                PathEl::LineTo(Point { x: 15.00, y: 9.00 }),
                PathEl::LineTo(Point { x: 22.00, y: 9.00 }),
                PathEl::LineTo(Point { x: 22.00, y: 6.00 }),
                PathEl::LineTo(Point { x: 10.00, y: 6.00 }),
                PathEl::LineTo(Point { x: 10.00, y: 18.00 }),
                PathEl::LineTo(Point { x: 13.00, y: 18.00 }),
                PathEl::LineTo(Point { x: 13.00, y: 11.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 47.41, y: 33.34 }),
                PathEl::CurveTo(
                    Point { x: 41.32, y: 27.55 },
                    Point { x: 33.07, y: 24.00 },
                    Point { x: 24.00, y: 24.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 14.93, y: 24.00 },
                    Point { x: 6.68, y: 27.55 },
                    Point { x: 0.59, y: 33.34 },
                ),
                PathEl::CurveTo(
                    Point { x: 0.22, y: 33.71 },
                    Point { x: 0.00, y: 34.21 },
                    Point { x: 0.00, y: 34.76 },
                ),
                PathEl::CurveTo(
                    Point { x: 0.00, y: 35.31 },
                    Point { x: 0.22, y: 35.81 },
                    Point { x: 0.59, y: 36.17 },
                ),
                PathEl::LineTo(Point { x: 5.54, y: 41.13 }),
                PathEl::CurveTo(
                    Point { x: 5.90, y: 41.49 },
                    Point { x: 6.40, y: 41.72 },
                    Point { x: 6.96, y: 41.72 },
                ),
                PathEl::CurveTo(
                    Point { x: 7.50, y: 41.72 },
                    Point { x: 8.00, y: 41.50 },
                    Point { x: 8.36, y: 41.15 },
                ),
                PathEl::CurveTo(
                    Point { x: 9.94, y: 39.68 },
                    Point { x: 11.74, y: 38.43 },
                    Point { x: 13.69, y: 37.44 },
                ),
                PathEl::CurveTo(
                    Point { x: 14.35, y: 37.11 },
                    Point { x: 14.81, y: 36.43 },
                    Point { x: 14.81, y: 35.64 },
                ),
                PathEl::LineTo(Point { x: 14.81, y: 29.43 }),
                PathEl::CurveTo(
                    Point { x: 17.70, y: 28.50 },
                    Point { x: 20.79, y: 28.00 },
                    Point { x: 24.00, y: 28.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 27.21, y: 28.00 },
                    Point { x: 30.30, y: 28.50 },
                    Point { x: 33.20, y: 29.44 },
                ),
                PathEl::LineTo(Point { x: 33.20, y: 35.65 }),
                PathEl::CurveTo(
                    Point { x: 33.20, y: 36.44 },
                    Point { x: 33.66, y: 37.12 },
                    Point { x: 34.32, y: 37.45 },
                ),
                PathEl::CurveTo(
                    Point { x: 36.27, y: 38.43 },
                    Point { x: 38.07, y: 39.68 },
                    Point { x: 39.65, y: 41.16 },
                ),
                PathEl::CurveTo(
                    Point { x: 40.01, y: 41.51 },
                    Point { x: 40.50, y: 41.73 },
                    Point { x: 41.05, y: 41.73 },
                ),
                PathEl::CurveTo(
                    Point { x: 41.60, y: 41.73 },
                    Point { x: 42.10, y: 41.51 },
                    Point { x: 42.47, y: 41.14 },
                ),
                PathEl::LineTo(Point { x: 47.42, y: 36.18 }),
                PathEl::CurveTo(
                    Point { x: 47.78, y: 35.82 },
                    Point { x: 48.01, y: 35.32 },
                    Point { x: 48.01, y: 34.77 },
                ),
                PathEl::CurveTo(
                    Point { x: 48.01, y: 34.22 },
                    Point { x: 47.78, y: 33.71 },
                    Point { x: 47.41, y: 33.34 },
                ),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct AssignmentReturn {
    size: f64,
    color: Color,
}

impl AssignmentReturn {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for AssignmentReturn {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 38.00, y: 6.00 }),
                PathEl::LineTo(Point { x: 29.63, y: 6.00 }),
                PathEl::CurveTo(
                    Point { x: 28.81, y: 3.68 },
                    Point { x: 26.61, y: 2.00 },
                    Point { x: 24.00, y: 2.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 21.39, y: 2.00 },
                    Point { x: 19.19, y: 3.68 },
                    Point { x: 18.37, y: 6.00 },
                ),
                PathEl::LineTo(Point { x: 10.00, y: 6.00 }),
                PathEl::CurveTo(
                    Point { x: 7.79, y: 6.00 },
                    Point { x: 6.00, y: 7.79 },
                    Point { x: 6.00, y: 10.00 },
                ),
                PathEl::LineTo(Point { x: 6.00, y: 38.00 }),
                PathEl::CurveTo(
                    Point { x: 6.00, y: 40.21 },
                    Point { x: 7.79, y: 42.00 },
                    Point { x: 10.00, y: 42.00 },
                ),
                PathEl::LineTo(Point { x: 38.00, y: 42.00 }),
                PathEl::CurveTo(
                    Point { x: 40.21, y: 42.00 },
                    Point { x: 42.00, y: 40.21 },
                    Point { x: 42.00, y: 38.00 },
                ),
                PathEl::LineTo(Point { x: 42.00, y: 10.00 }),
                PathEl::CurveTo(
                    Point { x: 42.00, y: 7.79 },
                    Point { x: 40.21, y: 6.00 },
                    Point { x: 38.00, y: 6.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 24.00, y: 6.00 }),
                PathEl::CurveTo(
                    Point { x: 25.10, y: 6.00 },
                    Point { x: 26.00, y: 6.89 },
                    Point { x: 26.00, y: 8.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 26.00, y: 9.11 },
                    Point { x: 25.10, y: 10.00 },
                    Point { x: 24.00, y: 10.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 22.90, y: 10.00 },
                    Point { x: 22.00, y: 9.11 },
                    Point { x: 22.00, y: 8.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 22.00, y: 6.89 },
                    Point { x: 22.90, y: 6.00 },
                    Point { x: 24.00, y: 6.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 32.00, y: 30.00 }),
                PathEl::LineTo(Point { x: 24.00, y: 30.00 }),
                PathEl::LineTo(Point { x: 24.00, y: 36.00 }),
                PathEl::LineTo(Point { x: 14.00, y: 26.00 }),
                PathEl::LineTo(Point { x: 24.00, y: 16.00 }),
                PathEl::LineTo(Point { x: 24.00, y: 22.00 }),
                PathEl::LineTo(Point { x: 32.00, y: 22.00 }),
                PathEl::LineTo(Point { x: 32.00, y: 30.00 }),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct SubdirectoryArrowRight {
    size: f64,
    color: Color,
}

impl SubdirectoryArrowRight {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for SubdirectoryArrowRight {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point {
                    x: -31.00,
                    y: 29.00,
                }),
                PathEl::LineTo(Point {
                    x: -43.00,
                    y: 41.00,
                }),
                PathEl::LineTo(Point {
                    x: -45.83,
                    y: 38.17,
                }),
                PathEl::LineTo(Point {
                    x: -38.66,
                    y: 31.00,
                }),
                PathEl::LineTo(Point {
                    x: -61.00,
                    y: 31.00,
                }),
                PathEl::LineTo(Point { x: -61.00, y: 7.00 }),
                PathEl::LineTo(Point { x: -57.00, y: 7.00 }),
                PathEl::LineTo(Point {
                    x: -57.00,
                    y: 27.00,
                }),
                PathEl::LineTo(Point {
                    x: -38.66,
                    y: 27.00,
                }),
                PathEl::LineTo(Point {
                    x: -45.83,
                    y: 19.83,
                }),
                PathEl::LineTo(Point {
                    x: -43.00,
                    y: 17.00,
                }),
                PathEl::LineTo(Point {
                    x: -31.00,
                    y: 29.00,
                }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 40.00, y: 30.00 }),
                PathEl::LineTo(Point { x: 28.00, y: 42.00 }),
                PathEl::LineTo(Point { x: 25.17, y: 39.17 }),
                PathEl::LineTo(Point { x: 32.34, y: 32.00 }),
                PathEl::LineTo(Point { x: 8.00, y: 32.00 }),
                PathEl::LineTo(Point { x: 8.00, y: 6.00 }),
                PathEl::LineTo(Point { x: 12.00, y: 6.00 }),
                PathEl::LineTo(Point { x: 12.00, y: 28.00 }),
                PathEl::LineTo(Point { x: 32.34, y: 28.00 }),
                PathEl::LineTo(Point { x: 25.17, y: 20.83 }),
                PathEl::LineTo(Point { x: 28.00, y: 18.00 }),
                PathEl::LineTo(Point { x: 40.00, y: 30.00 }),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct BatteryCharging20 {
    size: f64,
    color: Color,
}

impl BatteryCharging20 {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for BatteryCharging20 {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 22.00, y: 40.00 }),
                PathEl::LineTo(Point { x: 22.00, y: 34.00 }),
                PathEl::LineTo(Point { x: 14.00, y: 34.00 }),
                PathEl::LineTo(Point { x: 14.00, y: 41.33 }),
                PathEl::CurveTo(
                    Point { x: 14.00, y: 42.80 },
                    Point { x: 15.19, y: 44.00 },
                    Point { x: 16.67, y: 44.00 },
                ),
                PathEl::LineTo(Point { x: 31.34, y: 44.00 }),
                PathEl::CurveTo(
                    Point { x: 32.81, y: 44.00 },
                    Point { x: 34.01, y: 42.81 },
                    Point { x: 34.01, y: 41.33 },
                ),
                PathEl::LineTo(Point { x: 34.01, y: 34.00 }),
                PathEl::LineTo(Point { x: 25.21, y: 34.00 }),
                PathEl::LineTo(Point { x: 22.00, y: 40.00 }),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 31.33, y: 8.00 }),
                PathEl::LineTo(Point { x: 28.00, y: 8.00 }),
                PathEl::LineTo(Point { x: 28.00, y: 4.00 }),
                PathEl::LineTo(Point { x: 20.00, y: 4.00 }),
                PathEl::LineTo(Point { x: 20.00, y: 8.00 }),
                PathEl::LineTo(Point { x: 16.67, y: 8.00 }),
                PathEl::CurveTo(
                    Point { x: 15.19, y: 8.00 },
                    Point { x: 14.00, y: 9.19 },
                    Point { x: 14.00, y: 10.67 },
                ),
                PathEl::LineTo(Point { x: 14.00, y: 34.00 }),
                PathEl::LineTo(Point { x: 22.00, y: 34.00 }),
                PathEl::LineTo(Point { x: 22.00, y: 29.00 }),
                PathEl::LineTo(Point { x: 18.00, y: 29.00 }),
                PathEl::LineTo(Point { x: 26.00, y: 14.00 }),
                PathEl::LineTo(Point { x: 26.00, y: 25.00 }),
                PathEl::LineTo(Point { x: 30.00, y: 25.00 }),
                PathEl::LineTo(Point { x: 25.20, y: 34.00 }),
                PathEl::LineTo(Point { x: 34.00, y: 34.00 }),
                PathEl::LineTo(Point { x: 34.00, y: 10.67 }),
                PathEl::CurveTo(
                    Point { x: 34.00, y: 9.19 },
                    Point { x: 32.81, y: 8.00 },
                    Point { x: 31.33, y: 8.00 },
                ),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct SentimentVeryDissatisfied {
    size: f64,
    color: Color,
}

impl SentimentVeryDissatisfied {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for SentimentVeryDissatisfied {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 23.99, y: 4.00 }),
                PathEl::CurveTo(
                    Point { x: 12.94, y: 4.00 },
                    Point { x: 4.00, y: 12.95 },
                    Point { x: 4.00, y: 24.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 4.00, y: 35.05 },
                    Point { x: 12.94, y: 44.00 },
                    Point { x: 23.99, y: 44.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 35.04, y: 44.00 },
                    Point { x: 44.00, y: 35.05 },
                    Point { x: 44.00, y: 24.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 44.00, y: 12.95 },
                    Point { x: 35.04, y: 4.00 },
                    Point { x: 23.99, y: 4.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 24.00, y: 40.00 }),
                PathEl::CurveTo(
                    Point { x: 15.16, y: 40.00 },
                    Point { x: 8.00, y: 32.84 },
                    Point { x: 8.00, y: 24.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 8.00, y: 15.16 },
                    Point { x: 15.16, y: 8.00 },
                    Point { x: 24.00, y: 8.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 32.84, y: 8.00 },
                    Point { x: 40.00, y: 15.16 },
                    Point { x: 40.00, y: 24.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 40.00, y: 32.84 },
                    Point { x: 32.84, y: 40.00 },
                    Point { x: 24.00, y: 40.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 32.36, y: 15.51 }),
                PathEl::LineTo(Point { x: 30.24, y: 17.64 }),
                PathEl::LineTo(Point { x: 28.12, y: 15.51 }),
                PathEl::LineTo(Point { x: 26.00, y: 17.64 }),
                PathEl::LineTo(Point { x: 28.12, y: 19.76 }),
                PathEl::LineTo(Point { x: 26.00, y: 21.88 }),
                PathEl::LineTo(Point { x: 28.12, y: 24.00 }),
                PathEl::LineTo(Point { x: 30.24, y: 21.88 }),
                PathEl::LineTo(Point { x: 32.36, y: 24.00 }),
                PathEl::LineTo(Point { x: 34.49, y: 21.88 }),
                PathEl::LineTo(Point { x: 32.36, y: 19.76 }),
                PathEl::LineTo(Point { x: 34.49, y: 17.64 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 15.64, y: 24.00 }),
                PathEl::LineTo(Point { x: 17.76, y: 21.88 }),
                PathEl::LineTo(Point { x: 19.88, y: 24.00 }),
                PathEl::LineTo(Point { x: 22.00, y: 21.88 }),
                PathEl::LineTo(Point { x: 19.88, y: 19.76 }),
                PathEl::LineTo(Point { x: 22.00, y: 17.64 }),
                PathEl::LineTo(Point { x: 19.88, y: 15.51 }),
                PathEl::LineTo(Point { x: 17.76, y: 17.64 }),
                PathEl::LineTo(Point { x: 15.64, y: 15.51 }),
                PathEl::LineTo(Point { x: 13.51, y: 17.64 }),
                PathEl::LineTo(Point { x: 15.64, y: 19.76 }),
                PathEl::LineTo(Point { x: 13.51, y: 21.88 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 24.00, y: 28.00 }),
                PathEl::CurveTo(
                    Point { x: 19.34, y: 28.00 },
                    Point { x: 15.38, y: 30.92 },
                    Point { x: 13.78, y: 35.00 },
                ),
                PathEl::LineTo(Point { x: 34.22, y: 35.00 }),
                PathEl::CurveTo(
                    Point { x: 32.62, y: 30.92 },
                    Point { x: 28.66, y: 28.00 },
                    Point { x: 24.00, y: 28.00 },
                ),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct Grain {
    size: f64,
    color: Color,
}

impl Grain {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for Grain {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 20.00, y: 24.00 }),
                PathEl::CurveTo(
                    Point { x: 17.79, y: 24.00 },
                    Point { x: 16.00, y: 25.79 },
                    Point { x: 16.00, y: 28.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 16.00, y: 30.21 },
                    Point { x: 17.79, y: 32.00 },
                    Point { x: 20.00, y: 32.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 22.21, y: 32.00 },
                    Point { x: 24.00, y: 30.21 },
                    Point { x: 24.00, y: 28.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 24.00, y: 25.79 },
                    Point { x: 22.21, y: 24.00 },
                    Point { x: 20.00, y: 24.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 12.00, y: 16.00 }),
                PathEl::CurveTo(
                    Point { x: 9.79, y: 16.00 },
                    Point { x: 8.00, y: 17.79 },
                    Point { x: 8.00, y: 20.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 8.00, y: 22.21 },
                    Point { x: 9.79, y: 24.00 },
                    Point { x: 12.00, y: 24.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 14.21, y: 24.00 },
                    Point { x: 16.00, y: 22.21 },
                    Point { x: 16.00, y: 20.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 16.00, y: 17.79 },
                    Point { x: 14.21, y: 16.00 },
                    Point { x: 12.00, y: 16.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 12.00, y: 32.00 }),
                PathEl::CurveTo(
                    Point { x: 9.79, y: 32.00 },
                    Point { x: 8.00, y: 33.79 },
                    Point { x: 8.00, y: 36.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 8.00, y: 38.21 },
                    Point { x: 9.79, y: 40.00 },
                    Point { x: 12.00, y: 40.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 14.21, y: 40.00 },
                    Point { x: 16.00, y: 38.21 },
                    Point { x: 16.00, y: 36.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 16.00, y: 33.79 },
                    Point { x: 14.21, y: 32.00 },
                    Point { x: 12.00, y: 32.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 36.00, y: 16.00 }),
                PathEl::CurveTo(
                    Point { x: 38.21, y: 16.00 },
                    Point { x: 40.00, y: 14.21 },
                    Point { x: 40.00, y: 12.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 40.00, y: 9.79 },
                    Point { x: 38.21, y: 8.00 },
                    Point { x: 36.00, y: 8.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 33.79, y: 8.00 },
                    Point { x: 32.00, y: 9.79 },
                    Point { x: 32.00, y: 12.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 32.00, y: 14.21 },
                    Point { x: 33.79, y: 16.00 },
                    Point { x: 36.00, y: 16.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 28.00, y: 32.00 }),
                PathEl::CurveTo(
                    Point { x: 25.79, y: 32.00 },
                    Point { x: 24.00, y: 33.79 },
                    Point { x: 24.00, y: 36.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 24.00, y: 38.21 },
                    Point { x: 25.79, y: 40.00 },
                    Point { x: 28.00, y: 40.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 30.21, y: 40.00 },
                    Point { x: 32.00, y: 38.21 },
                    Point { x: 32.00, y: 36.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 32.00, y: 33.79 },
                    Point { x: 30.21, y: 32.00 },
                    Point { x: 28.00, y: 32.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 36.00, y: 24.00 }),
                PathEl::CurveTo(
                    Point { x: 33.79, y: 24.00 },
                    Point { x: 32.00, y: 25.79 },
                    Point { x: 32.00, y: 28.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 32.00, y: 30.21 },
                    Point { x: 33.79, y: 32.00 },
                    Point { x: 36.00, y: 32.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 38.21, y: 32.00 },
                    Point { x: 40.00, y: 30.21 },
                    Point { x: 40.00, y: 28.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 40.00, y: 25.79 },
                    Point { x: 38.21, y: 24.00 },
                    Point { x: 36.00, y: 24.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 28.00, y: 16.00 }),
                PathEl::CurveTo(
                    Point { x: 25.79, y: 16.00 },
                    Point { x: 24.00, y: 17.79 },
                    Point { x: 24.00, y: 20.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 24.00, y: 22.21 },
                    Point { x: 25.79, y: 24.00 },
                    Point { x: 28.00, y: 24.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 30.21, y: 24.00 },
                    Point { x: 32.00, y: 22.21 },
                    Point { x: 32.00, y: 20.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 32.00, y: 17.79 },
                    Point { x: 30.21, y: 16.00 },
                    Point { x: 28.00, y: 16.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 20.00, y: 8.00 }),
                PathEl::CurveTo(
                    Point { x: 17.79, y: 8.00 },
                    Point { x: 16.00, y: 9.79 },
                    Point { x: 16.00, y: 12.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 16.00, y: 14.21 },
                    Point { x: 17.79, y: 16.00 },
                    Point { x: 20.00, y: 16.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 22.21, y: 16.00 },
                    Point { x: 24.00, y: 14.21 },
                    Point { x: 24.00, y: 12.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 24.00, y: 9.79 },
                    Point { x: 22.21, y: 8.00 },
                    Point { x: 20.00, y: 8.00 },
                ),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct BatteryCharging90 {
    size: f64,
    color: Color,
}

impl BatteryCharging90 {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for BatteryCharging90 {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 31.33, y: 8.00 }),
                PathEl::LineTo(Point { x: 28.00, y: 8.00 }),
                PathEl::LineTo(Point { x: 28.00, y: 4.00 }),
                PathEl::LineTo(Point { x: 20.00, y: 4.00 }),
                PathEl::LineTo(Point { x: 20.00, y: 8.00 }),
                PathEl::LineTo(Point { x: 16.67, y: 8.00 }),
                PathEl::CurveTo(
                    Point { x: 15.19, y: 8.00 },
                    Point { x: 14.00, y: 9.19 },
                    Point { x: 14.00, y: 10.67 },
                ),
                PathEl::LineTo(Point { x: 14.00, y: 16.00 }),
                PathEl::LineTo(Point { x: 24.93, y: 16.00 }),
                PathEl::LineTo(Point { x: 26.00, y: 14.00 }),
                PathEl::LineTo(Point { x: 26.00, y: 16.00 }),
                PathEl::LineTo(Point { x: 34.00, y: 16.00 }),
                PathEl::LineTo(Point { x: 34.00, y: 10.67 }),
                PathEl::CurveTo(
                    Point { x: 34.00, y: 9.19 },
                    Point { x: 32.81, y: 8.00 },
                    Point { x: 31.33, y: 8.00 },
                ),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 26.00, y: 25.00 }),
                PathEl::LineTo(Point { x: 30.00, y: 25.00 }),
                PathEl::LineTo(Point { x: 22.00, y: 40.00 }),
                PathEl::LineTo(Point { x: 22.00, y: 29.00 }),
                PathEl::LineTo(Point { x: 18.00, y: 29.00 }),
                PathEl::LineTo(Point { x: 24.93, y: 16.00 }),
                PathEl::LineTo(Point { x: 14.00, y: 16.00 }),
                PathEl::LineTo(Point { x: 14.00, y: 41.33 }),
                PathEl::CurveTo(
                    Point { x: 14.00, y: 42.80 },
                    Point { x: 15.19, y: 44.00 },
                    Point { x: 16.67, y: 44.00 },
                ),
                PathEl::LineTo(Point { x: 31.34, y: 44.00 }),
                PathEl::CurveTo(
                    Point { x: 32.81, y: 44.00 },
                    Point { x: 34.01, y: 42.81 },
                    Point { x: 34.01, y: 41.33 },
                ),
                PathEl::LineTo(Point { x: 34.01, y: 16.00 }),
                PathEl::LineTo(Point { x: 26.01, y: 16.00 }),
                PathEl::LineTo(Point { x: 26.01, y: 25.00 }),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct SwitchVideo {
    size: f64,
    color: Color,
}

impl SwitchVideo {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for SwitchVideo {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 36.00, y: 19.00 }),
                PathEl::LineTo(Point { x: 36.00, y: 12.00 }),
                PathEl::CurveTo(
                    Point { x: 36.00, y: 10.90 },
                    Point { x: 35.11, y: 10.00 },
                    Point { x: 34.00, y: 10.00 },
                ),
                PathEl::LineTo(Point { x: 6.00, y: 10.00 }),
                PathEl::CurveTo(
                    Point { x: 4.89, y: 10.00 },
                    Point { x: 4.00, y: 10.90 },
                    Point { x: 4.00, y: 12.00 },
                ),
                PathEl::LineTo(Point { x: 4.00, y: 36.00 }),
                PathEl::CurveTo(
                    Point { x: 4.00, y: 37.10 },
                    Point { x: 4.89, y: 38.00 },
                    Point { x: 6.00, y: 38.00 },
                ),
                PathEl::LineTo(Point { x: 34.00, y: 38.00 }),
                PathEl::CurveTo(
                    Point { x: 35.11, y: 38.00 },
                    Point { x: 36.00, y: 37.10 },
                    Point { x: 36.00, y: 36.00 },
                ),
                PathEl::LineTo(Point { x: 36.00, y: 29.00 }),
                PathEl::LineTo(Point { x: 44.00, y: 37.00 }),
                PathEl::LineTo(Point { x: 44.00, y: 11.00 }),
                PathEl::LineTo(Point { x: 36.00, y: 19.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 26.00, y: 31.00 }),
                PathEl::LineTo(Point { x: 26.00, y: 26.00 }),
                PathEl::LineTo(Point { x: 14.00, y: 26.00 }),
                PathEl::LineTo(Point { x: 14.00, y: 31.00 }),
                PathEl::LineTo(Point { x: 7.00, y: 24.00 }),
                PathEl::LineTo(Point { x: 14.00, y: 17.00 }),
                PathEl::LineTo(Point { x: 14.00, y: 22.00 }),
                PathEl::LineTo(Point { x: 26.00, y: 22.00 }),
                PathEl::LineTo(Point { x: 26.00, y: 17.00 }),
                PathEl::LineTo(Point { x: 33.00, y: 24.00 }),
                PathEl::LineTo(Point { x: 26.00, y: 31.00 }),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct GTranslate {
    size: f64,
    color: Color,
}

impl GTranslate {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for GTranslate {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 40.00, y: 10.00 }),
                PathEl::LineTo(Point { x: 21.76, y: 10.00 }),
                PathEl::LineTo(Point { x: 20.00, y: 4.00 }),
                PathEl::LineTo(Point { x: 8.00, y: 4.00 }),
                PathEl::CurveTo(
                    Point { x: 5.80, y: 4.00 },
                    Point { x: 4.00, y: 5.80 },
                    Point { x: 4.00, y: 8.00 },
                ),
                PathEl::LineTo(Point { x: 4.00, y: 34.00 }),
                PathEl::CurveTo(
                    Point { x: 4.00, y: 36.20 },
                    Point { x: 5.80, y: 38.00 },
                    Point { x: 8.00, y: 38.00 },
                ),
                PathEl::LineTo(Point { x: 22.00, y: 38.00 }),
                PathEl::LineTo(Point { x: 24.00, y: 44.00 }),
                PathEl::LineTo(Point { x: 40.00, y: 44.00 }),
                PathEl::CurveTo(
                    Point { x: 42.20, y: 44.00 },
                    Point { x: 44.00, y: 42.20 },
                    Point { x: 44.00, y: 40.00 },
                ),
                PathEl::LineTo(Point { x: 44.00, y: 14.00 }),
                PathEl::CurveTo(
                    Point { x: 44.00, y: 11.80 },
                    Point { x: 42.20, y: 10.00 },
                    Point { x: 40.00, y: 10.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 14.33, y: 29.17 }),
                PathEl::CurveTo(
                    Point { x: 9.82, y: 29.17 },
                    Point { x: 6.16, y: 25.50 },
                    Point { x: 6.16, y: 21.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 6.16, y: 16.50 },
                    Point { x: 9.83, y: 12.83 },
                    Point { x: 14.33, y: 12.83 },
                ),
                PathEl::CurveTo(
                    Point { x: 16.41, y: 12.83 },
                    Point { x: 18.30, y: 13.57 },
                    Point { x: 19.80, y: 14.96 },
                ),
                PathEl::LineTo(Point { x: 19.93, y: 15.09 }),
                PathEl::LineTo(Point { x: 17.49, y: 17.45 }),
                PathEl::LineTo(Point { x: 17.37, y: 17.34 }),
                PathEl::CurveTo(
                    Point { x: 16.80, y: 16.80 },
                    Point { x: 15.81, y: 16.17 },
                    Point { x: 14.33, y: 16.17 },
                ),
                PathEl::CurveTo(
                    Point { x: 11.71, y: 16.17 },
                    Point { x: 9.58, y: 18.34 },
                    Point { x: 9.58, y: 21.01 },
                ),
                PathEl::CurveTo(
                    Point { x: 9.58, y: 23.68 },
                    Point { x: 11.71, y: 25.85 },
                    Point { x: 14.33, y: 25.85 },
                ),
                PathEl::CurveTo(
                    Point { x: 17.07, y: 25.85 },
                    Point { x: 18.26, y: 24.10 },
                    Point { x: 18.58, y: 22.93 },
                ),
                PathEl::LineTo(Point { x: 14.16, y: 22.93 }),
                PathEl::LineTo(Point { x: 14.16, y: 19.83 }),
                PathEl::LineTo(Point { x: 22.06, y: 19.83 }),
                PathEl::LineTo(Point { x: 22.09, y: 19.97 }),
                PathEl::CurveTo(
                    Point { x: 22.17, y: 20.39 },
                    Point { x: 22.20, y: 20.76 },
                    Point { x: 22.20, y: 21.18 },
                ),
                PathEl::CurveTo(
                    Point { x: 22.19, y: 25.89 },
                    Point { x: 18.96, y: 29.17 },
                    Point { x: 14.33, y: 29.17 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 26.40, y: 25.77 }),
                PathEl::CurveTo(
                    Point { x: 27.07, y: 26.97 },
                    Point { x: 27.88, y: 28.12 },
                    Point { x: 28.78, y: 29.17 },
                ),
                PathEl::LineTo(Point { x: 27.71, y: 30.23 }),
                PathEl::LineTo(Point { x: 26.40, y: 25.77 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 27.94, y: 24.23 }),
                PathEl::LineTo(Point { x: 25.96, y: 24.23 }),
                PathEl::LineTo(Point { x: 25.35, y: 22.15 }),
                PathEl::LineTo(Point { x: 33.34, y: 22.15 }),
                PathEl::CurveTo(
                    Point { x: 33.34, y: 22.15 },
                    Point { x: 32.66, y: 24.78 },
                    Point { x: 30.22, y: 27.62 },
                ),
                PathEl::CurveTo(
                    Point { x: 29.15, y: 26.39 },
                    Point { x: 28.41, y: 25.19 },
                    Point { x: 27.94, y: 24.23 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 42.00, y: 40.00 }),
                PathEl::CurveTo(
                    Point { x: 42.00, y: 41.10 },
                    Point { x: 41.10, y: 42.00 },
                    Point { x: 40.00, y: 42.00 },
                ),
                PathEl::LineTo(Point { x: 26.00, y: 42.00 }),
                PathEl::LineTo(Point { x: 30.00, y: 38.00 }),
                PathEl::LineTo(Point { x: 28.37, y: 32.47 }),
                PathEl::LineTo(Point { x: 30.21, y: 30.63 }),
                PathEl::LineTo(Point { x: 35.58, y: 36.00 }),
                PathEl::LineTo(Point { x: 37.04, y: 34.54 }),
                PathEl::LineTo(Point { x: 31.63, y: 29.17 }),
                PathEl::CurveTo(
                    Point { x: 33.43, y: 27.10 },
                    Point { x: 34.83, y: 24.67 },
                    Point { x: 35.46, y: 22.16 },
                ),
                PathEl::LineTo(Point { x: 38.00, y: 22.16 }),
                PathEl::LineTo(Point { x: 38.00, y: 20.08 }),
                PathEl::LineTo(Point { x: 30.73, y: 20.08 }),
                PathEl::LineTo(Point { x: 30.73, y: 18.00 }),
                PathEl::LineTo(Point { x: 28.65, y: 18.00 }),
                PathEl::LineTo(Point { x: 28.65, y: 20.08 }),
                PathEl::LineTo(Point { x: 24.73, y: 20.08 }),
                PathEl::LineTo(Point { x: 22.35, y: 12.00 }),
                PathEl::LineTo(Point { x: 40.00, y: 12.00 }),
                PathEl::CurveTo(
                    Point { x: 41.10, y: 12.00 },
                    Point { x: 42.00, y: 12.90 },
                    Point { x: 42.00, y: 14.00 },
                ),
                PathEl::LineTo(Point { x: 42.00, y: 40.00 }),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct Call {
    size: f64,
    color: Color,
}

impl Call {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for Call {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 13.25, y: 21.59 }),
                PathEl::CurveTo(
                    Point { x: 16.13, y: 27.25 },
                    Point { x: 20.76, y: 31.88 },
                    Point { x: 26.43, y: 34.76 },
                ),
                PathEl::LineTo(Point { x: 30.83, y: 30.35 }),
                PathEl::CurveTo(
                    Point { x: 31.38, y: 29.80 },
                    Point { x: 32.17, y: 29.64 },
                    Point { x: 32.86, y: 29.86 },
                ),
                PathEl::CurveTo(
                    Point { x: 35.10, y: 30.60 },
                    Point { x: 37.51, y: 31.00 },
                    Point { x: 40.00, y: 31.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 41.11, y: 31.00 },
                    Point { x: 42.00, y: 31.89 },
                    Point { x: 42.00, y: 33.00 },
                ),
                PathEl::LineTo(Point { x: 42.00, y: 40.00 }),
                PathEl::CurveTo(
                    Point { x: 42.00, y: 41.11 },
                    Point { x: 41.11, y: 42.00 },
                    Point { x: 40.00, y: 42.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 21.22, y: 42.00 },
                    Point { x: 6.00, y: 26.78 },
                    Point { x: 6.00, y: 8.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 6.00, y: 6.89 },
                    Point { x: 6.90, y: 6.00 },
                    Point { x: 8.00, y: 6.00 },
                ),
                PathEl::LineTo(Point { x: 15.00, y: 6.00 }),
                PathEl::CurveTo(
                    Point { x: 16.11, y: 6.00 },
                    Point { x: 17.00, y: 6.89 },
                    Point { x: 17.00, y: 8.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 17.00, y: 10.49 },
                    Point { x: 17.40, y: 12.90 },
                    Point { x: 18.14, y: 15.14 },
                ),
                PathEl::CurveTo(
                    Point { x: 18.36, y: 15.83 },
                    Point { x: 18.20, y: 16.62 },
                    Point { x: 17.65, y: 17.17 },
                ),
                PathEl::LineTo(Point { x: 13.25, y: 21.59 }),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct AssignmentLate {
    size: f64,
    color: Color,
}

impl AssignmentLate {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for AssignmentLate {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 38.00, y: 6.00 }),
                PathEl::LineTo(Point { x: 29.63, y: 6.00 }),
                PathEl::CurveTo(
                    Point { x: 28.81, y: 3.68 },
                    Point { x: 26.61, y: 2.00 },
                    Point { x: 24.00, y: 2.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 21.39, y: 2.00 },
                    Point { x: 19.19, y: 3.68 },
                    Point { x: 18.37, y: 6.00 },
                ),
                PathEl::LineTo(Point { x: 10.00, y: 6.00 }),
                PathEl::CurveTo(
                    Point { x: 7.79, y: 6.00 },
                    Point { x: 6.00, y: 7.79 },
                    Point { x: 6.00, y: 10.00 },
                ),
                PathEl::LineTo(Point { x: 6.00, y: 38.00 }),
                PathEl::CurveTo(
                    Point { x: 6.00, y: 40.21 },
                    Point { x: 7.79, y: 42.00 },
                    Point { x: 10.00, y: 42.00 },
                ),
                PathEl::LineTo(Point { x: 38.00, y: 42.00 }),
                PathEl::CurveTo(
                    Point { x: 40.21, y: 42.00 },
                    Point { x: 42.00, y: 40.21 },
                    Point { x: 42.00, y: 38.00 },
                ),
                PathEl::LineTo(Point { x: 42.00, y: 10.00 }),
                PathEl::CurveTo(
                    Point { x: 42.00, y: 7.79 },
                    Point { x: 40.21, y: 6.00 },
                    Point { x: 38.00, y: 6.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 26.00, y: 36.00 }),
                PathEl::LineTo(Point { x: 22.00, y: 36.00 }),
                PathEl::LineTo(Point { x: 22.00, y: 32.00 }),
                PathEl::LineTo(Point { x: 26.00, y: 32.00 }),
                PathEl::LineTo(Point { x: 26.00, y: 36.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 26.00, y: 28.00 }),
                PathEl::LineTo(Point { x: 22.00, y: 28.00 }),
                PathEl::LineTo(Point { x: 22.00, y: 16.00 }),
                PathEl::LineTo(Point { x: 26.00, y: 16.00 }),
                PathEl::LineTo(Point { x: 26.00, y: 28.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 24.00, y: 10.00 }),
                PathEl::CurveTo(
                    Point { x: 22.90, y: 10.00 },
                    Point { x: 22.00, y: 9.11 },
                    Point { x: 22.00, y: 8.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 22.00, y: 6.89 },
                    Point { x: 22.90, y: 6.00 },
                    Point { x: 24.00, y: 6.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 25.10, y: 6.00 },
                    Point { x: 26.00, y: 6.89 },
                    Point { x: 26.00, y: 8.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 26.00, y: 9.11 },
                    Point { x: 25.10, y: 10.00 },
                    Point { x: 24.00, y: 10.00 },
                ),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct BatteryFull {
    size: f64,
    color: Color,
}

impl BatteryFull {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for BatteryFull {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 31.33, y: 8.00 }),
                PathEl::LineTo(Point { x: 28.00, y: 8.00 }),
                PathEl::LineTo(Point { x: 28.00, y: 4.00 }),
                PathEl::LineTo(Point { x: 20.00, y: 4.00 }),
                PathEl::LineTo(Point { x: 20.00, y: 8.00 }),
                PathEl::LineTo(Point { x: 16.67, y: 8.00 }),
                PathEl::CurveTo(
                    Point { x: 15.19, y: 8.00 },
                    Point { x: 14.00, y: 9.19 },
                    Point { x: 14.00, y: 10.67 },
                ),
                PathEl::LineTo(Point { x: 14.00, y: 41.34 }),
                PathEl::CurveTo(
                    Point { x: 14.00, y: 42.81 },
                    Point { x: 15.19, y: 44.01 },
                    Point { x: 16.67, y: 44.01 },
                ),
                PathEl::LineTo(Point { x: 31.34, y: 44.01 }),
                PathEl::CurveTo(
                    Point { x: 32.81, y: 44.01 },
                    Point { x: 34.01, y: 42.82 },
                    Point { x: 34.01, y: 41.34 },
                ),
                PathEl::LineTo(Point { x: 34.01, y: 10.67 }),
                PathEl::CurveTo(
                    Point { x: 34.00, y: 9.19 },
                    Point { x: 32.81, y: 8.00 },
                    Point { x: 31.33, y: 8.00 },
                ),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct Edit {
    size: f64,
    color: Color,
}

impl Edit {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for Edit {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 6.00, y: 34.50 }),
                PathEl::LineTo(Point { x: 6.00, y: 42.00 }),
                PathEl::LineTo(Point { x: 13.50, y: 42.00 }),
                PathEl::LineTo(Point { x: 35.63, y: 19.87 }),
                PathEl::LineTo(Point { x: 28.13, y: 12.37 }),
                PathEl::LineTo(Point { x: 6.00, y: 34.50 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 41.41, y: 14.09 }),
                PathEl::CurveTo(
                    Point { x: 42.19, y: 13.31 },
                    Point { x: 42.19, y: 12.04 },
                    Point { x: 41.41, y: 11.26 },
                ),
                PathEl::LineTo(Point { x: 36.74, y: 6.59 }),
                PathEl::CurveTo(
                    Point { x: 35.96, y: 5.81 },
                    Point { x: 34.69, y: 5.81 },
                    Point { x: 33.91, y: 6.59 },
                ),
                PathEl::LineTo(Point { x: 30.25, y: 10.25 }),
                PathEl::LineTo(Point { x: 37.75, y: 17.75 }),
                PathEl::LineTo(Point { x: 41.41, y: 14.09 }),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct Pets {
    size: f64,
    color: Color,
}

impl Pets {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for Pets {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            Circle {
                center: Point { x: 9.00, y: 19.00 },
                radius: 5.00,
            },
            &brush,
        );
        ctx.fill(
            Circle {
                center: Point { x: 18.00, y: 11.00 },
                radius: 5.00,
            },
            &brush,
        );
        ctx.fill(
            Circle {
                center: Point { x: 30.00, y: 11.00 },
                radius: 5.00,
            },
            &brush,
        );
        ctx.fill(
            Circle {
                center: Point { x: 39.00, y: 19.00 },
                radius: 5.00,
            },
            &brush,
        );
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 34.68, y: 29.72 }),
                PathEl::CurveTo(
                    Point { x: 32.93, y: 27.69 },
                    Point { x: 31.47, y: 25.94 },
                    Point { x: 29.72, y: 23.91 },
                ),
                PathEl::CurveTo(
                    Point { x: 28.79, y: 22.83 },
                    Point { x: 27.62, y: 21.74 },
                    Point { x: 26.23, y: 21.27 },
                ),
                PathEl::CurveTo(
                    Point { x: 26.02, y: 21.20 },
                    Point { x: 25.80, y: 21.14 },
                    Point { x: 25.57, y: 21.10 },
                ),
                PathEl::CurveTo(
                    Point { x: 25.06, y: 21.00 },
                    Point { x: 24.52, y: 21.00 },
                    Point { x: 24.00, y: 21.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 23.48, y: 21.00 },
                    Point { x: 22.94, y: 21.00 },
                    Point { x: 22.43, y: 21.10 },
                ),
                PathEl::CurveTo(
                    Point { x: 22.21, y: 21.14 },
                    Point { x: 21.99, y: 21.20 },
                    Point { x: 21.77, y: 21.27 },
                ),
                PathEl::CurveTo(
                    Point { x: 20.38, y: 21.74 },
                    Point { x: 19.21, y: 22.83 },
                    Point { x: 18.28, y: 23.91 },
                ),
                PathEl::CurveTo(
                    Point { x: 16.53, y: 25.94 },
                    Point { x: 15.07, y: 27.69 },
                    Point { x: 13.32, y: 29.72 },
                ),
                PathEl::CurveTo(
                    Point { x: 10.70, y: 32.33 },
                    Point { x: 7.49, y: 35.24 },
                    Point { x: 8.07, y: 39.31 },
                ),
                PathEl::CurveTo(
                    Point { x: 8.65, y: 41.34 },
                    Point { x: 10.11, y: 43.38 },
                    Point { x: 12.74, y: 43.96 },
                ),
                PathEl::CurveTo(
                    Point { x: 14.20, y: 44.25 },
                    Point { x: 18.86, y: 43.09 },
                    Point { x: 23.82, y: 43.09 },
                ),
                PathEl::CurveTo(
                    Point { x: 23.88, y: 43.09 },
                    Point { x: 23.94, y: 43.10 },
                    Point { x: 24.00, y: 43.10 },
                ),
                PathEl::CurveTo(
                    Point { x: 24.06, y: 43.10 },
                    Point { x: 24.12, y: 43.09 },
                    Point { x: 24.18, y: 43.09 },
                ),
                PathEl::CurveTo(
                    Point { x: 29.14, y: 43.09 },
                    Point { x: 33.80, y: 44.25 },
                    Point { x: 35.26, y: 43.96 },
                ),
                PathEl::CurveTo(
                    Point { x: 37.88, y: 43.38 },
                    Point { x: 39.34, y: 41.35 },
                    Point { x: 39.93, y: 39.31 },
                ),
                PathEl::CurveTo(
                    Point { x: 40.51, y: 35.24 },
                    Point { x: 37.31, y: 32.33 },
                    Point { x: 34.68, y: 29.72 },
                ),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct Battery80 {
    size: f64,
    color: Color,
}

impl Battery80 {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for Battery80 {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 34.00, y: 10.67 }),
                PathEl::CurveTo(
                    Point { x: 34.00, y: 9.19 },
                    Point { x: 32.81, y: 8.00 },
                    Point { x: 31.33, y: 8.00 },
                ),
                PathEl::LineTo(Point { x: 28.00, y: 8.00 }),
                PathEl::LineTo(Point { x: 28.00, y: 4.00 }),
                PathEl::LineTo(Point { x: 20.00, y: 4.00 }),
                PathEl::LineTo(Point { x: 20.00, y: 8.00 }),
                PathEl::LineTo(Point { x: 16.67, y: 8.00 }),
                PathEl::CurveTo(
                    Point { x: 15.19, y: 8.00 },
                    Point { x: 14.00, y: 9.19 },
                    Point { x: 14.00, y: 10.67 },
                ),
                PathEl::LineTo(Point { x: 14.00, y: 18.00 }),
                PathEl::LineTo(Point { x: 34.00, y: 18.00 }),
                PathEl::LineTo(Point { x: 34.00, y: 10.67 }),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 14.00, y: 18.00 }),
                PathEl::LineTo(Point { x: 14.00, y: 41.33 }),
                PathEl::CurveTo(
                    Point { x: 14.00, y: 42.80 },
                    Point { x: 15.19, y: 44.00 },
                    Point { x: 16.67, y: 44.00 },
                ),
                PathEl::LineTo(Point { x: 31.34, y: 44.00 }),
                PathEl::CurveTo(
                    Point { x: 32.81, y: 44.00 },
                    Point { x: 34.01, y: 42.81 },
                    Point { x: 34.01, y: 41.33 },
                ),
                PathEl::LineTo(Point { x: 34.01, y: 18.00 }),
                PathEl::LineTo(Point { x: 14.00, y: 18.00 }),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct Warning {
    size: f64,
    color: Color,
}

impl Warning {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for Warning {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 2.00, y: 42.00 }),
                PathEl::LineTo(Point { x: 46.00, y: 42.00 }),
                PathEl::LineTo(Point { x: 24.00, y: 4.00 }),
                PathEl::LineTo(Point { x: 2.00, y: 42.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 26.00, y: 36.00 }),
                PathEl::LineTo(Point { x: 22.00, y: 36.00 }),
                PathEl::LineTo(Point { x: 22.00, y: 32.00 }),
                PathEl::LineTo(Point { x: 26.00, y: 32.00 }),
                PathEl::LineTo(Point { x: 26.00, y: 36.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 26.00, y: 28.00 }),
                PathEl::LineTo(Point { x: 22.00, y: 28.00 }),
                PathEl::LineTo(Point { x: 22.00, y: 20.00 }),
                PathEl::LineTo(Point { x: 26.00, y: 20.00 }),
                PathEl::LineTo(Point { x: 26.00, y: 28.00 }),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct Subway {
    size: f64,
    color: Color,
}

impl Subway {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for Subway {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            Circle {
                center: Point { x: 31.00, y: 32.00 },
                radius: 2.00,
            },
            &brush,
        );
        ctx.fill(
            Circle {
                center: Point { x: 17.00, y: 32.00 },
                radius: 2.00,
            },
            &brush,
        );
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 14.02, y: 18.00 }),
                PathEl::LineTo(Point { x: 34.02, y: 18.00 }),
                PathEl::LineTo(Point { x: 34.02, y: 28.00 }),
                PathEl::LineTo(Point { x: 14.02, y: 28.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 35.60, y: 5.59 }),
                PathEl::CurveTo(
                    Point { x: 32.00, y: 4.19 },
                    Point { x: 27.72, y: 4.00 },
                    Point { x: 24.00, y: 4.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 20.28, y: 4.00 },
                    Point { x: 16.00, y: 4.19 },
                    Point { x: 12.40, y: 5.59 },
                ),
                PathEl::CurveTo(
                    Point { x: 7.06, y: 7.68 },
                    Point { x: 4.00, y: 12.10 },
                    Point { x: 4.00, y: 17.73 },
                ),
                PathEl::LineTo(Point { x: 4.00, y: 44.00 }),
                PathEl::LineTo(Point { x: 44.00, y: 44.00 }),
                PathEl::LineTo(Point { x: 44.00, y: 17.73 }),
                PathEl::CurveTo(
                    Point { x: 44.00, y: 12.10 },
                    Point { x: 40.94, y: 7.68 },
                    Point { x: 35.60, y: 5.59 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 36.00, y: 31.75 }),
                PathEl::CurveTo(
                    Point { x: 36.00, y: 34.65 },
                    Point { x: 33.65, y: 37.00 },
                    Point { x: 30.75, y: 37.00 },
                ),
                PathEl::LineTo(Point { x: 33.00, y: 39.25 }),
                PathEl::LineTo(Point { x: 33.00, y: 40.00 }),
                PathEl::LineTo(Point { x: 30.00, y: 40.00 }),
                PathEl::LineTo(Point { x: 27.00, y: 37.00 }),
                PathEl::LineTo(Point { x: 21.34, y: 37.00 }),
                PathEl::LineTo(Point { x: 18.34, y: 40.00 }),
                PathEl::LineTo(Point { x: 15.00, y: 40.00 }),
                PathEl::LineTo(Point { x: 15.00, y: 39.25 }),
                PathEl::LineTo(Point { x: 17.25, y: 37.00 }),
                PathEl::CurveTo(
                    Point { x: 14.35, y: 37.00 },
                    Point { x: 12.00, y: 34.65 },
                    Point { x: 12.00, y: 31.75 },
                ),
                PathEl::LineTo(Point { x: 12.00, y: 18.00 }),
                PathEl::CurveTo(
                    Point { x: 12.00, y: 12.75 },
                    Point { x: 18.00, y: 12.00 },
                    Point { x: 24.00, y: 12.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 30.63, y: 12.00 },
                    Point { x: 36.00, y: 12.75 },
                    Point { x: 36.00, y: 18.00 },
                ),
                PathEl::LineTo(Point { x: 36.00, y: 31.75 }),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct SignalCellular2Bar {
    size: f64,
    color: Color,
}

impl SignalCellular2Bar {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for SignalCellular2Bar {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 4.00, y: 44.00 }),
                PathEl::LineTo(Point { x: 44.00, y: 44.00 }),
                PathEl::LineTo(Point { x: 44.00, y: 4.00 }),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 28.00, y: 20.00 }),
                PathEl::LineTo(Point { x: 4.00, y: 44.00 }),
                PathEl::LineTo(Point { x: 28.00, y: 44.00 }),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct ViewList {
    size: f64,
    color: Color,
}

impl ViewList {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for ViewList {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 8.00, y: 28.00 }),
                PathEl::LineTo(Point { x: 16.00, y: 28.00 }),
                PathEl::LineTo(Point { x: 16.00, y: 20.00 }),
                PathEl::LineTo(Point { x: 8.00, y: 20.00 }),
                PathEl::LineTo(Point { x: 8.00, y: 28.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 8.00, y: 38.00 }),
                PathEl::LineTo(Point { x: 16.00, y: 38.00 }),
                PathEl::LineTo(Point { x: 16.00, y: 30.00 }),
                PathEl::LineTo(Point { x: 8.00, y: 30.00 }),
                PathEl::LineTo(Point { x: 8.00, y: 38.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 8.00, y: 18.00 }),
                PathEl::LineTo(Point { x: 16.00, y: 18.00 }),
                PathEl::LineTo(Point { x: 16.00, y: 10.00 }),
                PathEl::LineTo(Point { x: 8.00, y: 10.00 }),
                PathEl::LineTo(Point { x: 8.00, y: 18.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 18.00, y: 28.00 }),
                PathEl::LineTo(Point { x: 42.00, y: 28.00 }),
                PathEl::LineTo(Point { x: 42.00, y: 20.00 }),
                PathEl::LineTo(Point { x: 18.00, y: 20.00 }),
                PathEl::LineTo(Point { x: 18.00, y: 28.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 18.00, y: 38.00 }),
                PathEl::LineTo(Point { x: 42.00, y: 38.00 }),
                PathEl::LineTo(Point { x: 42.00, y: 30.00 }),
                PathEl::LineTo(Point { x: 18.00, y: 30.00 }),
                PathEl::LineTo(Point { x: 18.00, y: 38.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 18.00, y: 10.00 }),
                PathEl::LineTo(Point { x: 18.00, y: 18.00 }),
                PathEl::LineTo(Point { x: 42.00, y: 18.00 }),
                PathEl::LineTo(Point { x: 42.00, y: 10.00 }),
                PathEl::LineTo(Point { x: 18.00, y: 10.00 }),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct Note {
    size: f64,
    color: Color,
}

impl Note {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for Note {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 44.00, y: 20.00 }),
                PathEl::LineTo(Point { x: 32.00, y: 8.00 }),
                PathEl::LineTo(Point { x: 8.00, y: 8.00 }),
                PathEl::CurveTo(
                    Point { x: 5.80, y: 8.00 },
                    Point { x: 4.00, y: 9.80 },
                    Point { x: 4.00, y: 12.00 },
                ),
                PathEl::LineTo(Point { x: 4.00, y: 36.02 }),
                PathEl::CurveTo(
                    Point { x: 4.00, y: 38.22 },
                    Point { x: 5.80, y: 40.00 },
                    Point { x: 8.00, y: 40.00 },
                ),
                PathEl::LineTo(Point { x: 40.00, y: 39.98 }),
                PathEl::CurveTo(
                    Point { x: 42.20, y: 39.98 },
                    Point { x: 44.00, y: 38.20 },
                    Point { x: 44.00, y: 36.00 },
                ),
                PathEl::LineTo(Point { x: 44.00, y: 20.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 30.00, y: 11.00 }),
                PathEl::LineTo(Point { x: 41.00, y: 22.00 }),
                PathEl::LineTo(Point { x: 30.00, y: 22.00 }),
                PathEl::LineTo(Point { x: 30.00, y: 11.00 }),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct Filter9Plus {
    size: f64,
    color: Color,
}

impl Filter9Plus {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for Filter9Plus {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 6.00, y: 10.00 }),
                PathEl::LineTo(Point { x: 2.00, y: 10.00 }),
                PathEl::LineTo(Point { x: 2.00, y: 42.00 }),
                PathEl::CurveTo(
                    Point { x: 2.00, y: 44.21 },
                    Point { x: 3.79, y: 46.00 },
                    Point { x: 6.00, y: 46.00 },
                ),
                PathEl::LineTo(Point { x: 38.00, y: 46.00 }),
                PathEl::LineTo(Point { x: 38.00, y: 42.00 }),
                PathEl::LineTo(Point { x: 6.00, y: 42.00 }),
                PathEl::LineTo(Point { x: 6.00, y: 10.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 28.00, y: 24.00 }),
                PathEl::LineTo(Point { x: 28.00, y: 16.00 }),
                PathEl::CurveTo(
                    Point { x: 28.00, y: 13.79 },
                    Point { x: 26.21, y: 12.00 },
                    Point { x: 24.00, y: 12.00 },
                ),
                PathEl::LineTo(Point { x: 22.00, y: 12.00 }),
                PathEl::CurveTo(
                    Point { x: 19.79, y: 12.00 },
                    Point { x: 18.00, y: 13.79 },
                    Point { x: 18.00, y: 16.00 },
                ),
                PathEl::LineTo(Point { x: 18.00, y: 18.00 }),
                PathEl::CurveTo(
                    Point { x: 18.00, y: 20.21 },
                    Point { x: 19.79, y: 22.00 },
                    Point { x: 22.00, y: 22.00 },
                ),
                PathEl::LineTo(Point { x: 24.00, y: 22.00 }),
                PathEl::LineTo(Point { x: 24.00, y: 24.00 }),
                PathEl::LineTo(Point { x: 18.00, y: 24.00 }),
                PathEl::LineTo(Point { x: 18.00, y: 28.00 }),
                PathEl::LineTo(Point { x: 24.00, y: 28.00 }),
                PathEl::CurveTo(
                    Point { x: 26.21, y: 28.00 },
                    Point { x: 28.00, y: 26.21 },
                    Point { x: 28.00, y: 24.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 22.00, y: 18.00 }),
                PathEl::LineTo(Point { x: 22.00, y: 16.00 }),
                PathEl::LineTo(Point { x: 24.00, y: 16.00 }),
                PathEl::LineTo(Point { x: 24.00, y: 18.00 }),
                PathEl::LineTo(Point { x: 22.00, y: 18.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 42.00, y: 2.00 }),
                PathEl::LineTo(Point { x: 14.00, y: 2.00 }),
                PathEl::CurveTo(
                    Point { x: 11.79, y: 2.00 },
                    Point { x: 10.00, y: 3.79 },
                    Point { x: 10.00, y: 6.00 },
                ),
                PathEl::LineTo(Point { x: 10.00, y: 34.00 }),
                PathEl::CurveTo(
                    Point { x: 10.00, y: 36.21 },
                    Point { x: 11.79, y: 38.00 },
                    Point { x: 14.00, y: 38.00 },
                ),
                PathEl::LineTo(Point { x: 42.00, y: 38.00 }),
                PathEl::CurveTo(
                    Point { x: 44.21, y: 38.00 },
                    Point { x: 46.00, y: 36.21 },
                    Point { x: 46.00, y: 34.00 },
                ),
                PathEl::LineTo(Point { x: 46.00, y: 6.00 }),
                PathEl::CurveTo(
                    Point { x: 46.00, y: 3.79 },
                    Point { x: 44.21, y: 2.00 },
                    Point { x: 42.00, y: 2.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 42.00, y: 18.00 }),
                PathEl::LineTo(Point { x: 38.00, y: 18.00 }),
                PathEl::LineTo(Point { x: 38.00, y: 14.00 }),
                PathEl::LineTo(Point { x: 34.00, y: 14.00 }),
                PathEl::LineTo(Point { x: 34.00, y: 18.00 }),
                PathEl::LineTo(Point { x: 30.00, y: 18.00 }),
                PathEl::LineTo(Point { x: 30.00, y: 22.00 }),
                PathEl::LineTo(Point { x: 34.00, y: 22.00 }),
                PathEl::LineTo(Point { x: 34.00, y: 26.00 }),
                PathEl::LineTo(Point { x: 38.00, y: 26.00 }),
                PathEl::LineTo(Point { x: 38.00, y: 22.00 }),
                PathEl::LineTo(Point { x: 42.00, y: 22.00 }),
                PathEl::LineTo(Point { x: 42.00, y: 34.00 }),
                PathEl::LineTo(Point { x: 14.00, y: 34.00 }),
                PathEl::LineTo(Point { x: 14.00, y: 6.00 }),
                PathEl::LineTo(Point { x: 42.00, y: 6.00 }),
                PathEl::LineTo(Point { x: 42.00, y: 18.00 }),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct QueryBuilder {
    size: f64,
    color: Color,
}

impl QueryBuilder {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for QueryBuilder {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 23.99, y: 4.00 }),
                PathEl::CurveTo(
                    Point { x: 12.94, y: 4.00 },
                    Point { x: 4.00, y: 12.95 },
                    Point { x: 4.00, y: 24.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 4.00, y: 35.05 },
                    Point { x: 12.94, y: 44.00 },
                    Point { x: 23.99, y: 44.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 35.04, y: 44.00 },
                    Point { x: 44.00, y: 35.05 },
                    Point { x: 44.00, y: 24.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 44.00, y: 12.95 },
                    Point { x: 35.04, y: 4.00 },
                    Point { x: 23.99, y: 4.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 24.00, y: 40.00 }),
                PathEl::CurveTo(
                    Point { x: 15.16, y: 40.00 },
                    Point { x: 8.00, y: 32.84 },
                    Point { x: 8.00, y: 24.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 8.00, y: 15.16 },
                    Point { x: 15.16, y: 8.00 },
                    Point { x: 24.00, y: 8.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 32.84, y: 8.00 },
                    Point { x: 40.00, y: 15.16 },
                    Point { x: 40.00, y: 24.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 40.00, y: 32.84 },
                    Point { x: 32.84, y: 40.00 },
                    Point { x: 24.00, y: 40.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 25.00, y: 14.00 }),
                PathEl::LineTo(Point { x: 22.00, y: 14.00 }),
                PathEl::LineTo(Point { x: 22.00, y: 26.00 }),
                PathEl::LineTo(Point { x: 32.49, y: 32.30 }),
                PathEl::LineTo(Point { x: 34.00, y: 29.84 }),
                PathEl::LineTo(Point { x: 25.00, y: 24.50 }),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct Laptop {
    size: f64,
    color: Color,
}

impl Laptop {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for Laptop {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 40.00, y: 36.00 }),
                PathEl::CurveTo(
                    Point { x: 42.20, y: 36.00 },
                    Point { x: 44.00, y: 34.20 },
                    Point { x: 44.00, y: 32.00 },
                ),
                PathEl::LineTo(Point { x: 44.00, y: 12.00 }),
                PathEl::CurveTo(
                    Point { x: 44.00, y: 9.80 },
                    Point { x: 42.20, y: 8.00 },
                    Point { x: 40.00, y: 8.00 },
                ),
                PathEl::LineTo(Point { x: 8.00, y: 8.00 }),
                PathEl::CurveTo(
                    Point { x: 5.80, y: 8.00 },
                    Point { x: 4.00, y: 9.80 },
                    Point { x: 4.00, y: 12.00 },
                ),
                PathEl::LineTo(Point { x: 4.00, y: 32.00 }),
                PathEl::CurveTo(
                    Point { x: 4.00, y: 34.20 },
                    Point { x: 5.80, y: 36.00 },
                    Point { x: 8.00, y: 36.00 },
                ),
                PathEl::LineTo(Point { x: 0.00, y: 36.00 }),
                PathEl::LineTo(Point { x: 0.00, y: 40.00 }),
                PathEl::LineTo(Point { x: 48.00, y: 40.00 }),
                PathEl::LineTo(Point { x: 48.00, y: 36.00 }),
                PathEl::LineTo(Point { x: 40.00, y: 36.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 8.00, y: 12.00 }),
                PathEl::LineTo(Point { x: 40.00, y: 12.00 }),
                PathEl::LineTo(Point { x: 40.00, y: 32.00 }),
                PathEl::LineTo(Point { x: 8.00, y: 32.00 }),
                PathEl::LineTo(Point { x: 8.00, y: 12.00 }),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct LocalPrintshop {
    size: f64,
    color: Color,
}

impl LocalPrintshop {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for LocalPrintshop {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 38.00, y: 16.00 }),
                PathEl::LineTo(Point { x: 10.00, y: 16.00 }),
                PathEl::CurveTo(
                    Point { x: 6.69, y: 16.00 },
                    Point { x: 4.00, y: 18.69 },
                    Point { x: 4.00, y: 22.00 },
                ),
                PathEl::LineTo(Point { x: 4.00, y: 34.00 }),
                PathEl::LineTo(Point { x: 12.00, y: 34.00 }),
                PathEl::LineTo(Point { x: 12.00, y: 42.00 }),
                PathEl::LineTo(Point { x: 36.00, y: 42.00 }),
                PathEl::LineTo(Point { x: 36.00, y: 34.00 }),
                PathEl::LineTo(Point { x: 44.00, y: 34.00 }),
                PathEl::LineTo(Point { x: 44.00, y: 22.00 }),
                PathEl::CurveTo(
                    Point { x: 44.00, y: 18.69 },
                    Point { x: 41.31, y: 16.00 },
                    Point { x: 38.00, y: 16.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 32.00, y: 38.00 }),
                PathEl::LineTo(Point { x: 16.00, y: 38.00 }),
                PathEl::LineTo(Point { x: 16.00, y: 28.00 }),
                PathEl::LineTo(Point { x: 32.00, y: 28.00 }),
                PathEl::LineTo(Point { x: 32.00, y: 38.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 38.00, y: 24.00 }),
                PathEl::CurveTo(
                    Point { x: 36.89, y: 24.00 },
                    Point { x: 36.00, y: 23.11 },
                    Point { x: 36.00, y: 22.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 36.00, y: 20.89 },
                    Point { x: 36.89, y: 20.00 },
                    Point { x: 38.00, y: 20.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 39.11, y: 20.00 },
                    Point { x: 40.00, y: 20.89 },
                    Point { x: 40.00, y: 22.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 40.00, y: 23.11 },
                    Point { x: 39.11, y: 24.00 },
                    Point { x: 38.00, y: 24.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 36.00, y: 6.00 }),
                PathEl::LineTo(Point { x: 12.00, y: 6.00 }),
                PathEl::LineTo(Point { x: 12.00, y: 14.00 }),
                PathEl::LineTo(Point { x: 36.00, y: 14.00 }),
                PathEl::LineTo(Point { x: 36.00, y: 6.00 }),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct Flare {
    size: f64,
    color: Color,
}

impl Flare {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for Flare {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 14.00, y: 22.00 }),
                PathEl::LineTo(Point { x: 2.00, y: 22.00 }),
                PathEl::LineTo(Point { x: 2.00, y: 26.00 }),
                PathEl::LineTo(Point { x: 14.00, y: 26.00 }),
                PathEl::LineTo(Point { x: 14.00, y: 22.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 18.34, y: 15.51 }),
                PathEl::LineTo(Point { x: 14.10, y: 11.27 }),
                PathEl::LineTo(Point { x: 11.27, y: 14.10 }),
                PathEl::LineTo(Point { x: 15.51, y: 18.34 }),
                PathEl::LineTo(Point { x: 18.34, y: 15.51 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 26.00, y: 2.00 }),
                PathEl::LineTo(Point { x: 22.00, y: 2.00 }),
                PathEl::LineTo(Point { x: 22.00, y: 14.00 }),
                PathEl::LineTo(Point { x: 26.00, y: 14.00 }),
                PathEl::LineTo(Point { x: 26.00, y: 2.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 36.73, y: 14.10 }),
                PathEl::LineTo(Point { x: 33.90, y: 11.27 }),
                PathEl::LineTo(Point { x: 29.66, y: 15.51 }),
                PathEl::LineTo(Point { x: 32.49, y: 18.34 }),
                PathEl::LineTo(Point { x: 36.73, y: 14.10 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 34.00, y: 22.00 }),
                PathEl::LineTo(Point { x: 34.00, y: 26.00 }),
                PathEl::LineTo(Point { x: 46.00, y: 26.00 }),
                PathEl::LineTo(Point { x: 46.00, y: 22.00 }),
                PathEl::LineTo(Point { x: 34.00, y: 22.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 24.00, y: 18.00 }),
                PathEl::CurveTo(
                    Point { x: 20.69, y: 18.00 },
                    Point { x: 18.00, y: 20.69 },
                    Point { x: 18.00, y: 24.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 18.00, y: 27.31 },
                    Point { x: 20.69, y: 30.00 },
                    Point { x: 24.00, y: 30.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 27.31, y: 30.00 },
                    Point { x: 30.00, y: 27.31 },
                    Point { x: 30.00, y: 24.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 30.00, y: 20.69 },
                    Point { x: 27.31, y: 18.00 },
                    Point { x: 24.00, y: 18.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 29.66, y: 32.49 }),
                PathEl::LineTo(Point { x: 33.90, y: 36.73 }),
                PathEl::LineTo(Point { x: 36.73, y: 33.90 }),
                PathEl::LineTo(Point { x: 32.49, y: 29.66 }),
                PathEl::LineTo(Point { x: 29.66, y: 32.49 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 11.27, y: 33.90 }),
                PathEl::LineTo(Point { x: 14.10, y: 36.73 }),
                PathEl::LineTo(Point { x: 18.34, y: 32.49 }),
                PathEl::LineTo(Point { x: 15.51, y: 29.66 }),
                PathEl::LineTo(Point { x: 11.27, y: 33.90 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 22.00, y: 46.00 }),
                PathEl::LineTo(Point { x: 26.00, y: 46.00 }),
                PathEl::LineTo(Point { x: 26.00, y: 34.00 }),
                PathEl::LineTo(Point { x: 22.00, y: 34.00 }),
                PathEl::LineTo(Point { x: 22.00, y: 46.00 }),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct AddAlarm {
    size: f64,
    color: Color,
}

impl AddAlarm {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for AddAlarm {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 15.76, y: 6.78 }),
                PathEl::LineTo(Point { x: 13.19, y: 3.72 }),
                PathEl::LineTo(Point { x: 4.00, y: 11.43 }),
                PathEl::LineTo(Point { x: 6.57, y: 14.49 }),
                PathEl::LineTo(Point { x: 15.76, y: 6.78 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 44.00, y: 11.44 }),
                PathEl::LineTo(Point { x: 34.81, y: 3.73 }),
                PathEl::LineTo(Point { x: 32.24, y: 6.79 }),
                PathEl::LineTo(Point { x: 41.43, y: 14.50 }),
                PathEl::LineTo(Point { x: 44.00, y: 11.44 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 23.99, y: 8.00 }),
                PathEl::CurveTo(
                    Point { x: 14.04, y: 8.00 },
                    Point { x: 6.00, y: 16.06 },
                    Point { x: 6.00, y: 26.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 6.00, y: 35.94 },
                    Point { x: 14.04, y: 44.00 },
                    Point { x: 23.99, y: 44.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 33.94, y: 44.00 },
                    Point { x: 42.00, y: 35.94 },
                    Point { x: 42.00, y: 26.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 42.00, y: 16.06 },
                    Point { x: 33.94, y: 8.00 },
                    Point { x: 23.99, y: 8.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 24.00, y: 40.00 }),
                PathEl::CurveTo(
                    Point { x: 16.27, y: 40.00 },
                    Point { x: 10.00, y: 33.73 },
                    Point { x: 10.00, y: 26.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 10.00, y: 18.27 },
                    Point { x: 16.27, y: 12.00 },
                    Point { x: 24.00, y: 12.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 31.73, y: 12.00 },
                    Point { x: 38.00, y: 18.27 },
                    Point { x: 38.00, y: 26.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 38.00, y: 33.73 },
                    Point { x: 31.74, y: 40.00 },
                    Point { x: 24.00, y: 40.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 26.00, y: 18.00 }),
                PathEl::LineTo(Point { x: 22.00, y: 18.00 }),
                PathEl::LineTo(Point { x: 22.00, y: 24.00 }),
                PathEl::LineTo(Point { x: 16.00, y: 24.00 }),
                PathEl::LineTo(Point { x: 16.00, y: 28.00 }),
                PathEl::LineTo(Point { x: 22.00, y: 28.00 }),
                PathEl::LineTo(Point { x: 22.00, y: 34.00 }),
                PathEl::LineTo(Point { x: 26.00, y: 34.00 }),
                PathEl::LineTo(Point { x: 26.00, y: 28.00 }),
                PathEl::LineTo(Point { x: 32.00, y: 28.00 }),
                PathEl::LineTo(Point { x: 32.00, y: 24.00 }),
                PathEl::LineTo(Point { x: 26.00, y: 24.00 }),
                PathEl::LineTo(Point { x: 26.00, y: 18.00 }),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct Unarchive {
    size: f64,
    color: Color,
}

impl Unarchive {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for Unarchive {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 41.09, y: 10.45 }),
                PathEl::LineTo(Point { x: 38.32, y: 7.09 }),
                PathEl::CurveTo(
                    Point { x: 37.76, y: 6.43 },
                    Point { x: 36.93, y: 6.00 },
                    Point { x: 36.00, y: 6.00 },
                ),
                PathEl::LineTo(Point { x: 12.00, y: 6.00 }),
                PathEl::CurveTo(
                    Point { x: 11.07, y: 6.00 },
                    Point { x: 10.24, y: 6.43 },
                    Point { x: 9.69, y: 7.09 },
                ),
                PathEl::LineTo(Point { x: 6.92, y: 10.45 }),
                PathEl::CurveTo(
                    Point { x: 6.34, y: 11.15 },
                    Point { x: 6.00, y: 12.03 },
                    Point { x: 6.00, y: 13.00 },
                ),
                PathEl::LineTo(Point { x: 6.00, y: 38.00 }),
                PathEl::CurveTo(
                    Point { x: 6.00, y: 40.21 },
                    Point { x: 7.79, y: 42.00 },
                    Point { x: 10.00, y: 42.00 },
                ),
                PathEl::LineTo(Point { x: 38.00, y: 42.00 }),
                PathEl::CurveTo(
                    Point { x: 40.21, y: 42.00 },
                    Point { x: 42.00, y: 40.21 },
                    Point { x: 42.00, y: 38.00 },
                ),
                PathEl::LineTo(Point { x: 42.00, y: 13.00 }),
                PathEl::CurveTo(
                    Point { x: 42.00, y: 12.03 },
                    Point { x: 41.66, y: 11.15 },
                    Point { x: 41.09, y: 10.45 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 24.00, y: 19.00 }),
                PathEl::LineTo(Point { x: 35.00, y: 30.00 }),
                PathEl::LineTo(Point { x: 28.00, y: 30.00 }),
                PathEl::LineTo(Point { x: 28.00, y: 34.00 }),
                PathEl::LineTo(Point { x: 20.00, y: 34.00 }),
                PathEl::LineTo(Point { x: 20.00, y: 30.00 }),
                PathEl::LineTo(Point { x: 13.00, y: 30.00 }),
                PathEl::LineTo(Point { x: 24.00, y: 19.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 10.25, y: 10.00 }),
                PathEl::LineTo(Point { x: 11.88, y: 8.00 }),
                PathEl::LineTo(Point { x: 35.88, y: 8.00 }),
                PathEl::LineTo(Point { x: 37.75, y: 10.00 }),
                PathEl::LineTo(Point { x: 10.25, y: 10.00 }),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct FormatColorReset {
    size: f64,
    color: Color,
}

impl FormatColorReset {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for FormatColorReset {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 36.00, y: 28.00 }),
                PathEl::CurveTo(
                    Point { x: 36.00, y: 20.00 },
                    Point { x: 24.00, y: 6.40 },
                    Point { x: 24.00, y: 6.40 },
                ),
                PathEl::CurveTo(
                    Point { x: 24.00, y: 6.40 },
                    Point { x: 21.34, y: 9.42 },
                    Point { x: 18.53, y: 13.44 },
                ),
                PathEl::LineTo(Point { x: 35.70, y: 30.61 }),
                PathEl::CurveTo(
                    Point { x: 35.89, y: 29.77 },
                    Point { x: 36.00, y: 28.90 },
                    Point { x: 36.00, y: 28.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 34.24, y: 34.24 }),
                PathEl::LineTo(Point { x: 25.00, y: 25.00 }),
                PathEl::LineTo(Point { x: 10.54, y: 10.54 }),
                PathEl::LineTo(Point { x: 8.00, y: 13.09 }),
                PathEl::LineTo(Point { x: 14.64, y: 19.73 }),
                PathEl::CurveTo(
                    Point { x: 13.11, y: 22.65 },
                    Point { x: 12.00, y: 25.58 },
                    Point { x: 12.00, y: 28.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 12.00, y: 34.63 },
                    Point { x: 17.37, y: 40.00 },
                    Point { x: 24.00, y: 40.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 27.04, y: 40.00 },
                    Point { x: 29.80, y: 38.86 },
                    Point { x: 31.91, y: 37.00 },
                ),
                PathEl::LineTo(Point { x: 37.18, y: 42.27 }),
                PathEl::LineTo(Point { x: 39.72, y: 39.72 }),
                PathEl::LineTo(Point { x: 34.24, y: 34.24 }),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct Gesture {
    size: f64,
    color: Color,
}

impl Gesture {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for Gesture {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 9.19, y: 13.77 }),
                PathEl::CurveTo(
                    Point { x: 10.59, y: 12.34 },
                    Point { x: 11.99, y: 11.06 },
                    Point { x: 12.62, y: 11.32 },
                ),
                PathEl::CurveTo(
                    Point { x: 13.61, y: 11.73 },
                    Point { x: 12.60, y: 13.40 },
                    Point { x: 12.02, y: 14.37 },
                ),
                PathEl::CurveTo(
                    Point { x: 11.52, y: 15.21 },
                    Point { x: 6.30, y: 22.14 },
                    Point { x: 6.30, y: 26.99 },
                ),
                PathEl::CurveTo(
                    Point { x: 6.30, y: 29.55 },
                    Point { x: 7.25, y: 31.67 },
                    Point { x: 8.99, y: 32.95 },
                ),
                PathEl::CurveTo(
                    Point { x: 10.49, y: 34.06 },
                    Point { x: 12.46, y: 34.40 },
                    Point { x: 14.27, y: 33.87 },
                ),
                PathEl::CurveTo(
                    Point { x: 16.41, y: 33.24 },
                    Point { x: 18.17, y: 31.08 },
                    Point { x: 20.39, y: 28.34 },
                ),
                PathEl::CurveTo(
                    Point { x: 22.81, y: 25.36 },
                    Point { x: 26.05, y: 21.46 },
                    Point { x: 28.55, y: 21.46 },
                ),
                PathEl::CurveTo(
                    Point { x: 31.81, y: 21.46 },
                    Point { x: 31.85, y: 23.48 },
                    Point { x: 32.07, y: 25.05 },
                ),
                PathEl::CurveTo(
                    Point { x: 24.49, y: 26.35 },
                    Point { x: 21.30, y: 32.40 },
                    Point { x: 21.30, y: 35.81 },
                ),
                PathEl::CurveTo(
                    Point { x: 21.30, y: 39.22 },
                    Point { x: 24.18, y: 42.00 },
                    Point { x: 27.71, y: 42.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 30.96, y: 42.00 },
                    Point { x: 36.30, y: 39.34 },
                    Point { x: 37.09, y: 29.80 },
                ),
                PathEl::LineTo(Point { x: 42.00, y: 29.80 }),
                PathEl::LineTo(Point { x: 42.00, y: 24.80 }),
                PathEl::LineTo(Point { x: 37.06, y: 24.80 }),
                PathEl::CurveTo(
                    Point { x: 36.76, y: 21.50 },
                    Point { x: 34.88, y: 16.41 },
                    Point { x: 29.00, y: 16.41 },
                ),
                PathEl::CurveTo(
                    Point { x: 24.50, y: 16.41 },
                    Point { x: 20.63, y: 20.23 },
                    Point { x: 19.13, y: 22.10 },
                ),
                PathEl::CurveTo(
                    Point { x: 17.97, y: 23.55 },
                    Point { x: 15.02, y: 27.05 },
                    Point { x: 14.56, y: 27.55 },
                ),
                PathEl::CurveTo(
                    Point { x: 14.05, y: 28.14 },
                    Point { x: 13.21, y: 29.23 },
                    Point { x: 12.33, y: 29.23 },
                ),
                PathEl::CurveTo(
                    Point { x: 11.44, y: 29.23 },
                    Point { x: 10.90, y: 27.56 },
                    Point { x: 11.60, y: 25.38 },
                ),
                PathEl::CurveTo(
                    Point { x: 12.30, y: 23.19 },
                    Point { x: 14.40, y: 19.66 },
                    Point { x: 15.30, y: 18.35 },
                ),
                PathEl::CurveTo(
                    Point { x: 16.87, y: 16.07 },
                    Point { x: 17.89, y: 14.50 },
                    Point { x: 17.89, y: 11.79 },
                ),
                PathEl::CurveTo(
                    Point { x: 17.89, y: 7.39 },
                    Point { x: 14.61, y: 6.01 },
                    Point { x: 12.87, y: 6.01 },
                ),
                PathEl::CurveTo(
                    Point { x: 10.23, y: 6.01 },
                    Point { x: 7.93, y: 8.01 },
                    Point { x: 7.42, y: 8.52 },
                ),
                PathEl::CurveTo(
                    Point { x: 6.71, y: 9.24 },
                    Point { x: 6.11, y: 9.83 },
                    Point { x: 5.67, y: 10.37 },
                ),
                PathEl::LineTo(Point { x: 9.19, y: 13.77 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 27.77, y: 37.11 }),
                PathEl::CurveTo(
                    Point { x: 27.15, y: 37.11 },
                    Point { x: 26.30, y: 36.59 },
                    Point { x: 26.30, y: 35.66 },
                ),
                PathEl::CurveTo(
                    Point { x: 26.30, y: 34.46 },
                    Point { x: 27.75, y: 31.26 },
                    Point { x: 32.05, y: 30.13 },
                ),
                PathEl::CurveTo(
                    Point { x: 31.43, y: 35.52 },
                    Point { x: 29.17, y: 37.11 },
                    Point { x: 27.77, y: 37.11 },
                ),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct LocalLaundryService {
    size: f64,
    color: Color,
}

impl LocalLaundryService {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for LocalLaundryService {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 18.34, y: 33.66 }),
                PathEl::CurveTo(
                    Point { x: 21.46, y: 36.78 },
                    Point { x: 26.53, y: 36.78 },
                    Point { x: 29.65, y: 33.66 },
                ),
                PathEl::CurveTo(
                    Point { x: 32.77, y: 30.54 },
                    Point { x: 32.77, y: 25.47 },
                    Point { x: 29.65, y: 22.35 },
                ),
                PathEl::LineTo(Point { x: 18.34, y: 33.66 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 36.00, y: 4.02 }),
                PathEl::LineTo(Point { x: 12.00, y: 4.00 }),
                PathEl::CurveTo(
                    Point { x: 9.79, y: 4.00 },
                    Point { x: 8.00, y: 5.79 },
                    Point { x: 8.00, y: 8.00 },
                ),
                PathEl::LineTo(Point { x: 8.00, y: 40.00 }),
                PathEl::CurveTo(
                    Point { x: 8.00, y: 42.21 },
                    Point { x: 9.79, y: 44.00 },
                    Point { x: 12.00, y: 44.00 },
                ),
                PathEl::LineTo(Point { x: 36.00, y: 44.00 }),
                PathEl::CurveTo(
                    Point { x: 38.21, y: 44.00 },
                    Point { x: 40.00, y: 42.21 },
                    Point { x: 40.00, y: 40.00 },
                ),
                PathEl::LineTo(Point { x: 40.00, y: 8.00 }),
                PathEl::CurveTo(
                    Point { x: 40.00, y: 5.79 },
                    Point { x: 38.21, y: 4.02 },
                    Point { x: 36.00, y: 4.02 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 20.00, y: 8.00 }),
                PathEl::CurveTo(
                    Point { x: 21.10, y: 8.00 },
                    Point { x: 22.00, y: 8.90 },
                    Point { x: 22.00, y: 10.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 22.00, y: 11.10 },
                    Point { x: 21.10, y: 12.00 },
                    Point { x: 20.00, y: 12.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 18.90, y: 12.00 },
                    Point { x: 18.00, y: 11.10 },
                    Point { x: 18.00, y: 10.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 18.00, y: 8.90 },
                    Point { x: 18.90, y: 8.00 },
                    Point { x: 20.00, y: 8.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 14.00, y: 8.00 }),
                PathEl::CurveTo(
                    Point { x: 15.10, y: 8.00 },
                    Point { x: 16.00, y: 8.90 },
                    Point { x: 16.00, y: 10.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 16.00, y: 11.10 },
                    Point { x: 15.10, y: 12.00 },
                    Point { x: 14.00, y: 12.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 12.90, y: 12.00 },
                    Point { x: 12.00, y: 11.10 },
                    Point { x: 12.00, y: 10.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 12.00, y: 8.90 },
                    Point { x: 12.90, y: 8.00 },
                    Point { x: 14.00, y: 8.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 24.00, y: 40.00 }),
                PathEl::CurveTo(
                    Point { x: 17.37, y: 40.00 },
                    Point { x: 12.00, y: 34.63 },
                    Point { x: 12.00, y: 28.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 12.00, y: 21.37 },
                    Point { x: 17.37, y: 16.00 },
                    Point { x: 24.00, y: 16.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 30.63, y: 16.00 },
                    Point { x: 36.00, y: 21.37 },
                    Point { x: 36.00, y: 28.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 36.00, y: 34.63 },
                    Point { x: 30.63, y: 40.00 },
                    Point { x: 24.00, y: 40.00 },
                ),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct AddAlert {
    size: f64,
    color: Color,
}

impl AddAlert {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for AddAlert {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 20.02, y: 41.02 }),
                PathEl::CurveTo(
                    Point { x: 20.02, y: 43.22 },
                    Point { x: 21.80, y: 45.00 },
                    Point { x: 24.00, y: 45.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 26.20, y: 45.00 },
                    Point { x: 27.98, y: 43.22 },
                    Point { x: 27.98, y: 41.02 },
                ),
                PathEl::LineTo(Point { x: 20.02, y: 41.02 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 37.76, y: 32.64 }),
                PathEl::LineTo(Point { x: 37.76, y: 21.00 }),
                PathEl::CurveTo(
                    Point { x: 37.76, y: 14.50 },
                    Point { x: 33.26, y: 9.06 },
                    Point { x: 27.18, y: 7.62 },
                ),
                PathEl::LineTo(Point { x: 27.18, y: 6.18 }),
                PathEl::CurveTo(
                    Point { x: 27.18, y: 4.42 },
                    Point { x: 25.76, y: 3.00 },
                    Point { x: 24.00, y: 3.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 22.24, y: 3.00 },
                    Point { x: 20.82, y: 4.42 },
                    Point { x: 20.82, y: 6.18 },
                ),
                PathEl::LineTo(Point { x: 20.82, y: 7.62 }),
                PathEl::CurveTo(
                    Point { x: 14.74, y: 9.06 },
                    Point { x: 10.24, y: 14.50 },
                    Point { x: 10.24, y: 21.00 },
                ),
                PathEl::LineTo(Point { x: 10.24, y: 32.64 }),
                PathEl::LineTo(Point { x: 6.00, y: 36.88 }),
                PathEl::LineTo(Point { x: 6.00, y: 39.00 }),
                PathEl::LineTo(Point { x: 42.00, y: 39.00 }),
                PathEl::LineTo(Point { x: 42.00, y: 36.88 }),
                PathEl::LineTo(Point { x: 37.76, y: 32.64 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 32.00, y: 25.01 }),
                PathEl::LineTo(Point { x: 26.00, y: 25.01 }),
                PathEl::LineTo(Point { x: 26.00, y: 31.01 }),
                PathEl::LineTo(Point { x: 22.00, y: 31.01 }),
                PathEl::LineTo(Point { x: 22.00, y: 25.01 }),
                PathEl::LineTo(Point { x: 16.00, y: 25.01 }),
                PathEl::LineTo(Point { x: 16.00, y: 21.00 }),
                PathEl::LineTo(Point { x: 22.00, y: 21.00 }),
                PathEl::LineTo(Point { x: 22.00, y: 15.00 }),
                PathEl::LineTo(Point { x: 26.00, y: 15.00 }),
                PathEl::LineTo(Point { x: 26.00, y: 21.00 }),
                PathEl::LineTo(Point { x: 32.00, y: 21.00 }),
                PathEl::LineTo(Point { x: 32.00, y: 25.01 }),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct Cast {
    size: f64,
    color: Color,
}

impl Cast {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for Cast {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 42.00, y: 6.00 }),
                PathEl::LineTo(Point { x: 6.00, y: 6.00 }),
                PathEl::CurveTo(
                    Point { x: 3.79, y: 6.00 },
                    Point { x: 2.00, y: 7.79 },
                    Point { x: 2.00, y: 10.00 },
                ),
                PathEl::LineTo(Point { x: 2.00, y: 16.00 }),
                PathEl::LineTo(Point { x: 6.00, y: 16.00 }),
                PathEl::LineTo(Point { x: 6.00, y: 10.00 }),
                PathEl::LineTo(Point { x: 42.00, y: 10.00 }),
                PathEl::LineTo(Point { x: 42.00, y: 38.00 }),
                PathEl::LineTo(Point { x: 28.00, y: 38.00 }),
                PathEl::LineTo(Point { x: 28.00, y: 42.00 }),
                PathEl::LineTo(Point { x: 42.00, y: 42.00 }),
                PathEl::CurveTo(
                    Point { x: 44.21, y: 42.00 },
                    Point { x: 46.00, y: 40.21 },
                    Point { x: 46.00, y: 38.00 },
                ),
                PathEl::LineTo(Point { x: 46.00, y: 10.00 }),
                PathEl::CurveTo(
                    Point { x: 46.00, y: 7.79 },
                    Point { x: 44.21, y: 6.00 },
                    Point { x: 42.00, y: 6.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 2.00, y: 36.00 }),
                PathEl::LineTo(Point { x: 2.00, y: 42.00 }),
                PathEl::LineTo(Point { x: 8.00, y: 42.00 }),
                PathEl::CurveTo(
                    Point { x: 8.00, y: 38.69 },
                    Point { x: 5.31, y: 36.00 },
                    Point { x: 2.00, y: 36.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 2.00, y: 28.00 }),
                PathEl::LineTo(Point { x: 2.00, y: 32.00 }),
                PathEl::CurveTo(
                    Point { x: 7.52, y: 32.00 },
                    Point { x: 12.00, y: 36.48 },
                    Point { x: 12.00, y: 42.00 },
                ),
                PathEl::LineTo(Point { x: 16.00, y: 42.00 }),
                PathEl::CurveTo(
                    Point { x: 16.00, y: 34.27 },
                    Point { x: 9.73, y: 28.00 },
                    Point { x: 2.00, y: 28.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 2.00, y: 20.00 }),
                PathEl::LineTo(Point { x: 2.00, y: 24.00 }),
                PathEl::CurveTo(
                    Point { x: 11.94, y: 24.00 },
                    Point { x: 20.00, y: 32.06 },
                    Point { x: 20.00, y: 42.00 },
                ),
                PathEl::LineTo(Point { x: 24.00, y: 42.00 }),
                PathEl::CurveTo(
                    Point { x: 24.00, y: 29.85 },
                    Point { x: 14.15, y: 20.00 },
                    Point { x: 2.00, y: 20.00 },
                ),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct Fingerprint {
    size: f64,
    color: Color,
}

impl Fingerprint {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for Fingerprint {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 35.62, y: 8.94 }),
                PathEl::CurveTo(
                    Point { x: 35.46, y: 8.94 },
                    Point { x: 35.31, y: 8.90 },
                    Point { x: 35.16, y: 8.83 },
                ),
                PathEl::CurveTo(
                    Point { x: 31.33, y: 6.85 },
                    Point { x: 28.00, y: 6.00 },
                    Point { x: 24.02, y: 6.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 20.05, y: 6.00 },
                    Point { x: 16.31, y: 6.95 },
                    Point { x: 12.88, y: 8.82 },
                ),
                PathEl::CurveTo(
                    Point { x: 12.39, y: 9.08 },
                    Point { x: 11.79, y: 8.91 },
                    Point { x: 11.52, y: 8.42 },
                ),
                PathEl::CurveTo(
                    Point { x: 11.26, y: 7.93 },
                    Point { x: 11.43, y: 7.33 },
                    Point { x: 11.92, y: 7.06 },
                ),
                PathEl::CurveTo(
                    Point { x: 15.65, y: 5.03 },
                    Point { x: 19.72, y: 4.00 },
                    Point { x: 24.02, y: 4.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 28.28, y: 4.00 },
                    Point { x: 32.00, y: 4.94 },
                    Point { x: 36.08, y: 7.05 },
                ),
                PathEl::CurveTo(
                    Point { x: 36.57, y: 7.30 },
                    Point { x: 36.76, y: 7.91 },
                    Point { x: 36.51, y: 8.40 },
                ),
                PathEl::CurveTo(
                    Point { x: 36.33, y: 8.74 },
                    Point { x: 35.98, y: 8.94 },
                    Point { x: 35.62, y: 8.94 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 7.00, y: 19.44 }),
                PathEl::CurveTo(
                    Point { x: 6.80, y: 19.44 },
                    Point { x: 6.60, y: 19.38 },
                    Point { x: 6.42, y: 19.26 },
                ),
                PathEl::CurveTo(
                    Point { x: 5.97, y: 18.94 },
                    Point { x: 5.86, y: 18.32 },
                    Point { x: 6.18, y: 17.87 },
                ),
                PathEl::CurveTo(
                    Point { x: 8.16, y: 15.07 },
                    Point { x: 10.69, y: 12.87 },
                    Point { x: 13.69, y: 11.32 },
                ),
                PathEl::CurveTo(
                    Point { x: 19.98, y: 8.07 },
                    Point { x: 28.02, y: 8.06 },
                    Point { x: 34.32, y: 11.30 },
                ),
                PathEl::CurveTo(
                    Point { x: 37.31, y: 12.84 },
                    Point { x: 39.83, y: 15.02 },
                    Point { x: 41.82, y: 17.80 },
                ),
                PathEl::CurveTo(
                    Point { x: 42.14, y: 18.25 },
                    Point { x: 42.04, y: 18.87 },
                    Point { x: 41.59, y: 19.19 },
                ),
                PathEl::CurveTo(
                    Point { x: 41.14, y: 19.51 },
                    Point { x: 40.51, y: 19.41 },
                    Point { x: 40.19, y: 18.96 },
                ),
                PathEl::CurveTo(
                    Point { x: 38.39, y: 16.44 },
                    Point { x: 36.11, y: 14.46 },
                    Point { x: 33.41, y: 13.08 },
                ),
                PathEl::CurveTo(
                    Point { x: 27.67, y: 10.13 },
                    Point { x: 20.34, y: 10.14 },
                    Point { x: 14.61, y: 13.10 },
                ),
                PathEl::CurveTo(
                    Point { x: 11.90, y: 14.50 },
                    Point { x: 9.61, y: 16.49 },
                    Point { x: 7.82, y: 19.03 },
                ),
                PathEl::CurveTo(
                    Point { x: 7.62, y: 19.30 },
                    Point { x: 7.31, y: 19.44 },
                    Point { x: 7.00, y: 19.44 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 19.51, y: 43.57 }),
                PathEl::CurveTo(
                    Point { x: 19.25, y: 43.57 },
                    Point { x: 19.00, y: 43.47 },
                    Point { x: 18.80, y: 43.27 },
                ),
                PathEl::CurveTo(
                    Point { x: 17.07, y: 41.52 },
                    Point { x: 16.13, y: 40.41 },
                    Point { x: 14.78, y: 38.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 13.40, y: 35.54 },
                    Point { x: 12.67, y: 32.53 },
                    Point { x: 12.67, y: 29.31 },
                ),
                PathEl::CurveTo(
                    Point { x: 12.67, y: 23.37 },
                    Point { x: 17.75, y: 18.53 },
                    Point { x: 24.00, y: 18.53 },
                ),
                PathEl::CurveTo(
                    Point { x: 30.25, y: 18.53 },
                    Point { x: 35.33, y: 23.36 },
                    Point { x: 35.33, y: 29.31 },
                ),
                PathEl::CurveTo(
                    Point { x: 35.33, y: 29.86 },
                    Point { x: 34.88, y: 30.31 },
                    Point { x: 34.33, y: 30.31 },
                ),
                PathEl::CurveTo(
                    Point { x: 33.78, y: 30.31 },
                    Point { x: 33.33, y: 29.86 },
                    Point { x: 33.33, y: 29.31 },
                ),
                PathEl::CurveTo(
                    Point { x: 33.33, y: 24.47 },
                    Point { x: 29.15, y: 20.53 },
                    Point { x: 24.00, y: 20.53 },
                ),
                PathEl::CurveTo(
                    Point { x: 18.86, y: 20.53 },
                    Point { x: 14.67, y: 24.47 },
                    Point { x: 14.67, y: 29.31 },
                ),
                PathEl::CurveTo(
                    Point { x: 14.67, y: 32.19 },
                    Point { x: 15.31, y: 34.85 },
                    Point { x: 16.52, y: 37.02 },
                ),
                PathEl::CurveTo(
                    Point { x: 17.81, y: 39.32 },
                    Point { x: 18.67, y: 40.31 },
                    Point { x: 20.21, y: 41.86 },
                ),
                PathEl::CurveTo(
                    Point { x: 20.60, y: 42.25 },
                    Point { x: 20.60, y: 42.89 },
                    Point { x: 20.20, y: 43.27 },
                ),
                PathEl::CurveTo(
                    Point { x: 20.02, y: 43.48 },
                    Point { x: 19.76, y: 43.57 },
                    Point { x: 19.51, y: 43.57 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 33.84, y: 39.87 }),
                PathEl::CurveTo(
                    Point { x: 31.46, y: 39.87 },
                    Point { x: 29.37, y: 39.27 },
                    Point { x: 27.64, y: 38.10 },
                ),
                PathEl::CurveTo(
                    Point { x: 24.67, y: 36.08 },
                    Point { x: 22.89, y: 32.80 },
                    Point { x: 22.89, y: 29.32 },
                ),
                PathEl::CurveTo(
                    Point { x: 22.89, y: 28.77 },
                    Point { x: 23.34, y: 28.32 },
                    Point { x: 23.89, y: 28.32 },
                ),
                PathEl::CurveTo(
                    Point { x: 24.44, y: 28.32 },
                    Point { x: 24.89, y: 28.77 },
                    Point { x: 24.89, y: 29.32 },
                ),
                PathEl::CurveTo(
                    Point { x: 24.89, y: 32.13 },
                    Point { x: 26.34, y: 34.79 },
                    Point { x: 28.77, y: 36.44 },
                ),
                PathEl::CurveTo(
                    Point { x: 30.18, y: 37.40 },
                    Point { x: 31.84, y: 37.87 },
                    Point { x: 33.84, y: 37.87 },
                ),
                PathEl::CurveTo(
                    Point { x: 34.32, y: 37.87 },
                    Point { x: 35.13, y: 37.82 },
                    Point { x: 35.93, y: 37.68 },
                ),
                PathEl::CurveTo(
                    Point { x: 36.47, y: 37.58 },
                    Point { x: 36.99, y: 37.95 },
                    Point { x: 37.09, y: 38.49 },
                ),
                PathEl::CurveTo(
                    Point { x: 37.19, y: 39.03 },
                    Point { x: 36.82, y: 39.55 },
                    Point { x: 36.28, y: 39.65 },
                ),
                PathEl::CurveTo(
                    Point { x: 35.11, y: 39.86 },
                    Point { x: 34.12, y: 39.87 },
                    Point { x: 33.84, y: 39.87 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 29.81, y: 44.00 }),
                PathEl::CurveTo(
                    Point { x: 29.72, y: 44.00 },
                    Point { x: 29.63, y: 43.99 },
                    Point { x: 29.55, y: 43.96 },
                ),
                PathEl::CurveTo(
                    Point { x: 26.36, y: 43.09 },
                    Point { x: 24.28, y: 41.91 },
                    Point { x: 22.12, y: 39.76 },
                ),
                PathEl::CurveTo(
                    Point { x: 19.33, y: 36.98 },
                    Point { x: 17.79, y: 33.27 },
                    Point { x: 17.79, y: 29.32 },
                ),
                PathEl::CurveTo(
                    Point { x: 17.79, y: 26.07 },
                    Point { x: 20.55, y: 23.43 },
                    Point { x: 23.95, y: 23.43 },
                ),
                PathEl::CurveTo(
                    Point { x: 27.35, y: 23.43 },
                    Point { x: 30.11, y: 26.07 },
                    Point { x: 30.11, y: 29.32 },
                ),
                PathEl::CurveTo(
                    Point { x: 30.11, y: 31.46 },
                    Point { x: 31.98, y: 33.21 },
                    Point { x: 34.27, y: 33.21 },
                ),
                PathEl::CurveTo(
                    Point { x: 36.56, y: 33.21 },
                    Point { x: 38.43, y: 31.47 },
                    Point { x: 38.43, y: 29.32 },
                ),
                PathEl::CurveTo(
                    Point { x: 38.43, y: 21.78 },
                    Point { x: 31.93, y: 15.65 },
                    Point { x: 23.94, y: 15.65 },
                ),
                PathEl::CurveTo(
                    Point { x: 18.25, y: 15.65 },
                    Point { x: 13.06, y: 18.81 },
                    Point { x: 10.72, y: 23.71 },
                ),
                PathEl::CurveTo(
                    Point { x: 9.94, y: 25.33 },
                    Point { x: 9.55, y: 27.22 },
                    Point { x: 9.55, y: 29.32 },
                ),
                PathEl::CurveTo(
                    Point { x: 9.55, y: 30.88 },
                    Point { x: 9.69, y: 33.34 },
                    Point { x: 10.88, y: 36.53 },
                ),
                PathEl::CurveTo(
                    Point { x: 11.07, y: 37.05 },
                    Point { x: 10.81, y: 37.62 },
                    Point { x: 10.29, y: 37.82 },
                ),
                PathEl::CurveTo(
                    Point { x: 9.77, y: 38.01 },
                    Point { x: 9.20, y: 37.75 },
                    Point { x: 9.00, y: 37.23 },
                ),
                PathEl::CurveTo(
                    Point { x: 8.02, y: 34.60 },
                    Point { x: 7.54, y: 32.02 },
                    Point { x: 7.54, y: 29.32 },
                ),
                PathEl::CurveTo(
                    Point { x: 7.54, y: 26.92 },
                    Point { x: 8.00, y: 24.74 },
                    Point { x: 8.91, y: 22.85 },
                ),
                PathEl::CurveTo(
                    Point { x: 11.58, y: 17.27 },
                    Point { x: 17.48, y: 13.66 },
                    Point { x: 23.93, y: 13.66 },
                ),
                PathEl::CurveTo(
                    Point { x: 33.02, y: 13.66 },
                    Point { x: 40.42, y: 20.69 },
                    Point { x: 40.42, y: 29.33 },
                ),
                PathEl::CurveTo(
                    Point { x: 40.42, y: 32.58 },
                    Point { x: 37.65, y: 35.22 },
                    Point { x: 34.26, y: 35.22 },
                ),
                PathEl::CurveTo(
                    Point { x: 30.87, y: 35.22 },
                    Point { x: 28.10, y: 32.58 },
                    Point { x: 28.10, y: 29.33 },
                ),
                PathEl::CurveTo(
                    Point { x: 28.10, y: 27.19 },
                    Point { x: 26.23, y: 25.44 },
                    Point { x: 23.94, y: 25.44 },
                ),
                PathEl::CurveTo(
                    Point { x: 21.65, y: 25.44 },
                    Point { x: 19.78, y: 27.18 },
                    Point { x: 19.78, y: 29.33 },
                ),
                PathEl::CurveTo(
                    Point { x: 19.78, y: 32.74 },
                    Point { x: 21.11, y: 35.95 },
                    Point { x: 23.52, y: 38.35 },
                ),
                PathEl::CurveTo(
                    Point { x: 25.41, y: 40.23 },
                    Point { x: 27.25, y: 41.27 },
                    Point { x: 30.07, y: 42.04 },
                ),
                PathEl::CurveTo(
                    Point { x: 30.60, y: 42.19 },
                    Point { x: 30.92, y: 42.74 },
                    Point { x: 30.77, y: 43.27 },
                ),
                PathEl::CurveTo(
                    Point { x: 30.65, y: 43.71 },
                    Point { x: 30.25, y: 44.00 },
                    Point { x: 29.81, y: 44.00 },
                ),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct SettingsEthernet {
    size: f64,
    color: Color,
}

impl SettingsEthernet {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for SettingsEthernet {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 15.54, y: 13.52 }),
                PathEl::LineTo(Point { x: 12.46, y: 10.97 }),
                PathEl::LineTo(Point { x: 1.64, y: 24.00 }),
                PathEl::LineTo(Point { x: 12.46, y: 37.04 }),
                PathEl::LineTo(Point { x: 15.54, y: 34.49 }),
                PathEl::LineTo(Point { x: 6.84, y: 24.00 }),
                PathEl::LineTo(Point { x: 15.54, y: 13.52 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 14.00, y: 26.00 }),
                PathEl::LineTo(Point { x: 18.00, y: 26.00 }),
                PathEl::LineTo(Point { x: 18.00, y: 22.00 }),
                PathEl::LineTo(Point { x: 14.00, y: 22.00 }),
                PathEl::LineTo(Point { x: 14.00, y: 26.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 34.00, y: 22.00 }),
                PathEl::LineTo(Point { x: 30.00, y: 22.00 }),
                PathEl::LineTo(Point { x: 30.00, y: 26.00 }),
                PathEl::LineTo(Point { x: 34.00, y: 26.00 }),
                PathEl::LineTo(Point { x: 34.00, y: 22.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 22.00, y: 26.00 }),
                PathEl::LineTo(Point { x: 26.00, y: 26.00 }),
                PathEl::LineTo(Point { x: 26.00, y: 22.00 }),
                PathEl::LineTo(Point { x: 22.00, y: 22.00 }),
                PathEl::LineTo(Point { x: 22.00, y: 26.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 35.54, y: 10.96 }),
                PathEl::LineTo(Point { x: 32.46, y: 13.51 }),
                PathEl::LineTo(Point { x: 41.16, y: 24.00 }),
                PathEl::LineTo(Point { x: 32.46, y: 34.48 }),
                PathEl::LineTo(Point { x: 35.54, y: 37.03 }),
                PathEl::LineTo(Point { x: 46.36, y: 24.00 }),
                PathEl::LineTo(Point { x: 35.54, y: 10.96 }),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct Settings {
    size: f64,
    color: Color,
}

impl Settings {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for Settings {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 38.86, y: 25.95 }),
                PathEl::CurveTo(
                    Point { x: 38.94, y: 25.31 },
                    Point { x: 39.00, y: 24.66 },
                    Point { x: 39.00, y: 24.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 39.00, y: 23.34 },
                    Point { x: 38.94, y: 22.69 },
                    Point { x: 38.86, y: 22.05 },
                ),
                PathEl::LineTo(Point { x: 43.09, y: 18.74 }),
                PathEl::CurveTo(
                    Point { x: 43.47, y: 18.44 },
                    Point { x: 43.58, y: 17.90 },
                    Point { x: 43.33, y: 17.46 },
                ),
                PathEl::LineTo(Point { x: 39.33, y: 10.53 }),
                PathEl::CurveTo(
                    Point { x: 39.08, y: 10.10 },
                    Point { x: 38.56, y: 9.92 },
                    Point { x: 38.11, y: 10.10 },
                ),
                PathEl::LineTo(Point { x: 33.13, y: 12.11 }),
                PathEl::CurveTo(
                    Point { x: 32.10, y: 11.32 },
                    Point { x: 30.97, y: 10.65 },
                    Point { x: 29.75, y: 10.14 },
                ),
                PathEl::LineTo(Point { x: 29.00, y: 4.84 }),
                PathEl::CurveTo(
                    Point { x: 28.91, y: 4.37 },
                    Point { x: 28.50, y: 4.00 },
                    Point { x: 28.00, y: 4.00 },
                ),
                PathEl::LineTo(Point { x: 20.00, y: 4.00 }),
                PathEl::CurveTo(
                    Point { x: 19.50, y: 4.00 },
                    Point { x: 19.09, y: 4.37 },
                    Point { x: 19.01, y: 4.84 },
                ),
                PathEl::LineTo(Point { x: 18.26, y: 10.14 }),
                PathEl::CurveTo(
                    Point { x: 17.04, y: 10.65 },
                    Point { x: 15.91, y: 11.31 },
                    Point { x: 14.88, y: 12.11 },
                ),
                PathEl::LineTo(Point { x: 9.90, y: 10.10 }),
                PathEl::CurveTo(
                    Point { x: 9.45, y: 9.93 },
                    Point { x: 8.93, y: 10.10 },
                    Point { x: 8.68, y: 10.53 },
                ),
                PathEl::LineTo(Point { x: 4.68, y: 17.46 }),
                PathEl::CurveTo(
                    Point { x: 4.43, y: 17.89 },
                    Point { x: 4.54, y: 18.43 },
                    Point { x: 4.92, y: 18.74 },
                ),
                PathEl::LineTo(Point { x: 9.14, y: 22.05 }),
                PathEl::CurveTo(
                    Point { x: 9.06, y: 22.69 },
                    Point { x: 9.00, y: 23.34 },
                    Point { x: 9.00, y: 24.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 9.00, y: 24.66 },
                    Point { x: 9.06, y: 25.31 },
                    Point { x: 9.14, y: 25.95 },
                ),
                PathEl::LineTo(Point { x: 4.92, y: 29.26 }),
                PathEl::CurveTo(
                    Point { x: 4.54, y: 29.56 },
                    Point { x: 4.43, y: 30.10 },
                    Point { x: 4.68, y: 30.54 },
                ),
                PathEl::LineTo(Point { x: 8.68, y: 37.47 }),
                PathEl::CurveTo(
                    Point { x: 8.93, y: 37.90 },
                    Point { x: 9.45, y: 38.08 },
                    Point { x: 9.90, y: 37.90 },
                ),
                PathEl::LineTo(Point { x: 14.88, y: 35.89 }),
                PathEl::CurveTo(
                    Point { x: 15.91, y: 36.68 },
                    Point { x: 17.04, y: 37.35 },
                    Point { x: 18.26, y: 37.86 },
                ),
                PathEl::LineTo(Point { x: 19.01, y: 43.16 }),
                PathEl::CurveTo(
                    Point { x: 19.09, y: 43.63 },
                    Point { x: 19.50, y: 44.00 },
                    Point { x: 20.00, y: 44.00 },
                ),
                PathEl::LineTo(Point { x: 28.00, y: 44.00 }),
                PathEl::CurveTo(
                    Point { x: 28.50, y: 44.00 },
                    Point { x: 28.91, y: 43.63 },
                    Point { x: 28.99, y: 43.16 },
                ),
                PathEl::LineTo(Point { x: 29.74, y: 37.86 }),
                PathEl::CurveTo(
                    Point { x: 30.96, y: 37.35 },
                    Point { x: 32.09, y: 36.69 },
                    Point { x: 33.12, y: 35.89 },
                ),
                PathEl::LineTo(Point { x: 38.10, y: 37.90 }),
                PathEl::CurveTo(
                    Point { x: 38.55, y: 38.07 },
                    Point { x: 39.07, y: 37.90 },
                    Point { x: 39.32, y: 37.47 },
                ),
                PathEl::LineTo(Point { x: 43.32, y: 30.54 }),
                PathEl::CurveTo(
                    Point { x: 43.57, y: 30.11 },
                    Point { x: 43.46, y: 29.57 },
                    Point { x: 43.08, y: 29.26 },
                ),
                PathEl::LineTo(Point { x: 38.86, y: 25.95 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 24.00, y: 31.00 }),
                PathEl::CurveTo(
                    Point { x: 20.13, y: 31.00 },
                    Point { x: 17.00, y: 27.87 },
                    Point { x: 17.00, y: 24.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 17.00, y: 20.13 },
                    Point { x: 20.13, y: 17.00 },
                    Point { x: 24.00, y: 17.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 27.87, y: 17.00 },
                    Point { x: 31.00, y: 20.13 },
                    Point { x: 31.00, y: 24.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 31.00, y: 27.87 },
                    Point { x: 27.87, y: 31.00 },
                    Point { x: 24.00, y: 31.00 },
                ),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct Today {
    size: f64,
    color: Color,
}

impl Today {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for Today {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 38.00, y: 6.00 }),
                PathEl::LineTo(Point { x: 36.00, y: 6.00 }),
                PathEl::LineTo(Point { x: 36.00, y: 2.00 }),
                PathEl::LineTo(Point { x: 32.00, y: 2.00 }),
                PathEl::LineTo(Point { x: 32.00, y: 6.00 }),
                PathEl::LineTo(Point { x: 16.00, y: 6.00 }),
                PathEl::LineTo(Point { x: 16.00, y: 2.00 }),
                PathEl::LineTo(Point { x: 12.00, y: 2.00 }),
                PathEl::LineTo(Point { x: 12.00, y: 6.00 }),
                PathEl::LineTo(Point { x: 10.00, y: 6.00 }),
                PathEl::CurveTo(
                    Point { x: 7.79, y: 6.00 },
                    Point { x: 6.02, y: 7.79 },
                    Point { x: 6.02, y: 10.00 },
                ),
                PathEl::LineTo(Point { x: 6.00, y: 38.00 }),
                PathEl::CurveTo(
                    Point { x: 6.00, y: 40.21 },
                    Point { x: 7.79, y: 42.00 },
                    Point { x: 10.00, y: 42.00 },
                ),
                PathEl::LineTo(Point { x: 38.00, y: 42.00 }),
                PathEl::CurveTo(
                    Point { x: 40.21, y: 42.00 },
                    Point { x: 42.00, y: 40.21 },
                    Point { x: 42.00, y: 38.00 },
                ),
                PathEl::LineTo(Point { x: 42.00, y: 10.00 }),
                PathEl::CurveTo(
                    Point { x: 42.00, y: 7.79 },
                    Point { x: 40.21, y: 6.00 },
                    Point { x: 38.00, y: 6.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 38.00, y: 38.00 }),
                PathEl::LineTo(Point { x: 10.00, y: 38.00 }),
                PathEl::LineTo(Point { x: 10.00, y: 16.00 }),
                PathEl::LineTo(Point { x: 38.00, y: 16.00 }),
                PathEl::LineTo(Point { x: 38.00, y: 38.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 14.00, y: 20.00 }),
                PathEl::LineTo(Point { x: 24.00, y: 20.00 }),
                PathEl::LineTo(Point { x: 24.00, y: 30.00 }),
                PathEl::LineTo(Point { x: 14.00, y: 30.00 }),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct ViewWeek {
    size: f64,
    color: Color,
}

impl ViewWeek {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for ViewWeek {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 12.00, y: 10.00 }),
                PathEl::LineTo(Point { x: 6.00, y: 10.00 }),
                PathEl::CurveTo(
                    Point { x: 4.90, y: 10.00 },
                    Point { x: 4.00, y: 10.90 },
                    Point { x: 4.00, y: 12.00 },
                ),
                PathEl::LineTo(Point { x: 4.00, y: 36.00 }),
                PathEl::CurveTo(
                    Point { x: 4.00, y: 37.10 },
                    Point { x: 4.90, y: 38.00 },
                    Point { x: 6.00, y: 38.00 },
                ),
                PathEl::LineTo(Point { x: 12.00, y: 38.00 }),
                PathEl::CurveTo(
                    Point { x: 13.10, y: 38.00 },
                    Point { x: 14.00, y: 37.10 },
                    Point { x: 14.00, y: 36.00 },
                ),
                PathEl::LineTo(Point { x: 14.00, y: 12.00 }),
                PathEl::CurveTo(
                    Point { x: 14.00, y: 10.90 },
                    Point { x: 13.10, y: 10.00 },
                    Point { x: 12.00, y: 10.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 40.00, y: 10.00 }),
                PathEl::LineTo(Point { x: 34.00, y: 10.00 }),
                PathEl::CurveTo(
                    Point { x: 32.90, y: 10.00 },
                    Point { x: 32.00, y: 10.90 },
                    Point { x: 32.00, y: 12.00 },
                ),
                PathEl::LineTo(Point { x: 32.00, y: 36.00 }),
                PathEl::CurveTo(
                    Point { x: 32.00, y: 37.10 },
                    Point { x: 32.90, y: 38.00 },
                    Point { x: 34.00, y: 38.00 },
                ),
                PathEl::LineTo(Point { x: 40.00, y: 38.00 }),
                PathEl::CurveTo(
                    Point { x: 41.10, y: 38.00 },
                    Point { x: 42.00, y: 37.10 },
                    Point { x: 42.00, y: 36.00 },
                ),
                PathEl::LineTo(Point { x: 42.00, y: 12.00 }),
                PathEl::CurveTo(
                    Point { x: 42.00, y: 10.90 },
                    Point { x: 41.10, y: 10.00 },
                    Point { x: 40.00, y: 10.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 26.00, y: 10.00 }),
                PathEl::LineTo(Point { x: 20.00, y: 10.00 }),
                PathEl::CurveTo(
                    Point { x: 18.90, y: 10.00 },
                    Point { x: 18.00, y: 10.90 },
                    Point { x: 18.00, y: 12.00 },
                ),
                PathEl::LineTo(Point { x: 18.00, y: 36.00 }),
                PathEl::CurveTo(
                    Point { x: 18.00, y: 37.10 },
                    Point { x: 18.90, y: 38.00 },
                    Point { x: 20.00, y: 38.00 },
                ),
                PathEl::LineTo(Point { x: 26.00, y: 38.00 }),
                PathEl::CurveTo(
                    Point { x: 27.10, y: 38.00 },
                    Point { x: 28.00, y: 37.10 },
                    Point { x: 28.00, y: 36.00 },
                ),
                PathEl::LineTo(Point { x: 28.00, y: 12.00 }),
                PathEl::CurveTo(
                    Point { x: 28.00, y: 10.90 },
                    Point { x: 27.10, y: 10.00 },
                    Point { x: 26.00, y: 10.00 },
                ),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct Timer10 {
    size: f64,
    color: Color,
}

impl Timer10 {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for Timer10 {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 0.00, y: 15.43 }),
                PathEl::LineTo(Point { x: 0.00, y: 18.80 }),
                PathEl::LineTo(Point { x: 6.00, y: 16.80 }),
                PathEl::LineTo(Point { x: 6.00, y: 36.00 }),
                PathEl::LineTo(Point { x: 10.00, y: 36.00 }),
                PathEl::LineTo(Point { x: 10.00, y: 12.00 }),
                PathEl::LineTo(Point { x: 9.49, y: 12.00 }),
                PathEl::LineTo(Point { x: 0.00, y: 15.43 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 47.57, y: 28.73 }),
                PathEl::CurveTo(
                    Point { x: 47.28, y: 28.16 },
                    Point { x: 46.86, y: 27.67 },
                    Point { x: 46.31, y: 27.25 },
                ),
                PathEl::CurveTo(
                    Point { x: 45.76, y: 26.83 },
                    Point { x: 45.08, y: 26.48 },
                    Point { x: 44.29, y: 26.19 },
                ),
                PathEl::CurveTo(
                    Point { x: 43.49, y: 25.90 },
                    Point { x: 42.59, y: 25.65 },
                    Point { x: 41.59, y: 25.44 },
                ),
                PathEl::CurveTo(
                    Point { x: 40.89, y: 25.29 },
                    Point { x: 40.32, y: 25.14 },
                    Point { x: 39.86, y: 24.98 },
                ),
                PathEl::CurveTo(
                    Point { x: 39.40, y: 24.83 },
                    Point { x: 39.03, y: 24.66 },
                    Point { x: 38.76, y: 24.48 },
                ),
                PathEl::CurveTo(
                    Point { x: 38.49, y: 24.30 },
                    Point { x: 38.30, y: 24.09 },
                    Point { x: 38.19, y: 23.87 },
                ),
                PathEl::CurveTo(
                    Point { x: 38.08, y: 23.65 },
                    Point { x: 38.03, y: 23.39 },
                    Point { x: 38.03, y: 23.10 },
                ),
                PathEl::CurveTo(
                    Point { x: 38.03, y: 22.81 },
                    Point { x: 38.09, y: 22.54 },
                    Point { x: 38.21, y: 22.27 },
                ),
                PathEl::CurveTo(
                    Point { x: 38.33, y: 22.01 },
                    Point { x: 38.51, y: 21.78 },
                    Point { x: 38.75, y: 21.58 },
                ),
                PathEl::CurveTo(
                    Point { x: 38.99, y: 21.38 },
                    Point { x: 39.29, y: 21.22 },
                    Point { x: 39.66, y: 21.10 },
                ),
                PathEl::CurveTo(
                    Point { x: 40.02, y: 20.98 },
                    Point { x: 40.45, y: 20.92 },
                    Point { x: 40.94, y: 20.92 },
                ),
                PathEl::CurveTo(
                    Point { x: 41.44, y: 20.92 },
                    Point { x: 41.88, y: 20.99 },
                    Point { x: 42.26, y: 21.14 },
                ),
                PathEl::CurveTo(
                    Point { x: 42.64, y: 21.28 },
                    Point { x: 42.96, y: 21.48 },
                    Point { x: 43.21, y: 21.73 },
                ),
                PathEl::CurveTo(
                    Point { x: 43.47, y: 21.98 },
                    Point { x: 43.66, y: 22.26 },
                    Point { x: 43.79, y: 22.57 },
                ),
                PathEl::CurveTo(
                    Point { x: 43.92, y: 22.89 },
                    Point { x: 43.98, y: 23.21 },
                    Point { x: 43.98, y: 23.54 },
                ),
                PathEl::LineTo(Point { x: 47.88, y: 23.54 }),
                PathEl::CurveTo(
                    Point { x: 47.88, y: 22.76 },
                    Point { x: 47.72, y: 22.03 },
                    Point { x: 47.41, y: 21.36 },
                ),
                PathEl::CurveTo(
                    Point { x: 47.10, y: 20.69 },
                    Point { x: 46.64, y: 20.10 },
                    Point { x: 46.04, y: 19.60 },
                ),
                PathEl::CurveTo(
                    Point { x: 45.44, y: 19.10 },
                    Point { x: 44.71, y: 18.71 },
                    Point { x: 43.85, y: 18.43 },
                ),
                PathEl::CurveTo(
                    Point { x: 42.98, y: 18.14 },
                    Point { x: 42.01, y: 18.00 },
                    Point { x: 40.93, y: 18.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 39.90, y: 18.00 },
                    Point { x: 38.97, y: 18.14 },
                    Point { x: 38.15, y: 18.42 },
                ),
                PathEl::CurveTo(
                    Point { x: 37.32, y: 18.70 },
                    Point { x: 36.62, y: 19.09 },
                    Point { x: 36.03, y: 19.57 },
                ),
                PathEl::CurveTo(
                    Point { x: 35.45, y: 20.05 },
                    Point { x: 35.00, y: 20.61 },
                    Point { x: 34.69, y: 21.25 },
                ),
                PathEl::CurveTo(
                    Point { x: 34.38, y: 21.89 },
                    Point { x: 34.22, y: 22.56 },
                    Point { x: 34.22, y: 23.26 },
                ),
                PathEl::CurveTo(
                    Point { x: 34.22, y: 23.99 },
                    Point { x: 34.37, y: 24.63 },
                    Point { x: 34.68, y: 25.19 },
                ),
                PathEl::CurveTo(
                    Point { x: 34.98, y: 25.75 },
                    Point { x: 35.41, y: 26.23 },
                    Point { x: 35.96, y: 26.64 },
                ),
                PathEl::CurveTo(
                    Point { x: 36.51, y: 27.05 },
                    Point { x: 37.16, y: 27.40 },
                    Point { x: 37.93, y: 27.69 },
                ),
                PathEl::CurveTo(
                    Point { x: 38.69, y: 27.98 },
                    Point { x: 39.54, y: 28.22 },
                    Point { x: 40.47, y: 28.41 },
                ),
                PathEl::CurveTo(
                    Point { x: 41.25, y: 28.57 },
                    Point { x: 41.88, y: 28.74 },
                    Point { x: 42.37, y: 28.92 },
                ),
                PathEl::CurveTo(
                    Point { x: 42.86, y: 29.10 },
                    Point { x: 43.23, y: 29.30 },
                    Point { x: 43.50, y: 29.51 },
                ),
                PathEl::CurveTo(
                    Point { x: 43.77, y: 29.72 },
                    Point { x: 43.95, y: 29.94 },
                    Point { x: 44.04, y: 30.18 },
                ),
                PathEl::CurveTo(
                    Point { x: 44.13, y: 30.42 },
                    Point { x: 44.18, y: 30.68 },
                    Point { x: 44.18, y: 30.96 },
                ),
                PathEl::CurveTo(
                    Point { x: 44.18, y: 31.59 },
                    Point { x: 43.91, y: 32.10 },
                    Point { x: 43.38, y: 32.49 },
                ),
                PathEl::CurveTo(
                    Point { x: 42.84, y: 32.88 },
                    Point { x: 42.06, y: 33.08 },
                    Point { x: 41.04, y: 33.08 },
                ),
                PathEl::CurveTo(
                    Point { x: 40.60, y: 33.08 },
                    Point { x: 40.17, y: 33.03 },
                    Point { x: 39.76, y: 32.93 },
                ),
                PathEl::CurveTo(
                    Point { x: 39.34, y: 32.83 },
                    Point { x: 38.97, y: 32.67 },
                    Point { x: 38.64, y: 32.44 },
                ),
                PathEl::CurveTo(
                    Point { x: 38.31, y: 32.22 },
                    Point { x: 38.04, y: 31.92 },
                    Point { x: 37.82, y: 31.56 },
                ),
                PathEl::CurveTo(
                    Point { x: 37.61, y: 31.20 },
                    Point { x: 37.48, y: 30.75 },
                    Point { x: 37.45, y: 30.21 },
                ),
                PathEl::LineTo(Point { x: 33.66, y: 30.21 }),
                PathEl::CurveTo(
                    Point { x: 33.66, y: 30.93 },
                    Point { x: 33.82, y: 31.63 },
                    Point { x: 34.13, y: 32.32 },
                ),
                PathEl::CurveTo(
                    Point { x: 34.44, y: 33.01 },
                    Point { x: 34.91, y: 33.63 },
                    Point { x: 35.53, y: 34.17 },
                ),
                PathEl::CurveTo(
                    Point { x: 36.15, y: 34.72 },
                    Point { x: 36.92, y: 35.16 },
                    Point { x: 37.83, y: 35.49 },
                ),
                PathEl::CurveTo(
                    Point { x: 38.74, y: 35.83 },
                    Point { x: 39.80, y: 36.00 },
                    Point { x: 40.98, y: 36.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 42.04, y: 36.00 },
                    Point { x: 43.00, y: 35.87 },
                    Point { x: 43.87, y: 35.62 },
                ),
                PathEl::CurveTo(
                    Point { x: 44.74, y: 35.36 },
                    Point { x: 45.48, y: 35.00 },
                    Point { x: 46.09, y: 34.54 },
                ),
                PathEl::CurveTo(
                    Point { x: 46.71, y: 34.07 },
                    Point { x: 47.18, y: 33.52 },
                    Point { x: 47.51, y: 32.88 },
                ),
                PathEl::CurveTo(
                    Point { x: 47.84, y: 32.24 },
                    Point { x: 48.01, y: 31.53 },
                    Point { x: 48.01, y: 30.76 },
                ),
                PathEl::CurveTo(
                    Point { x: 48.00, y: 29.97 },
                    Point { x: 47.86, y: 29.30 },
                    Point { x: 47.57, y: 28.73 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 27.64, y: 14.09 }),
                PathEl::CurveTo(
                    Point { x: 26.96, y: 13.28 },
                    Point { x: 26.14, y: 12.70 },
                    Point { x: 25.19, y: 12.34 },
                ),
                PathEl::CurveTo(
                    Point { x: 24.23, y: 11.98 },
                    Point { x: 23.17, y: 11.80 },
                    Point { x: 21.99, y: 11.80 },
                ),
                PathEl::CurveTo(
                    Point { x: 20.83, y: 11.80 },
                    Point { x: 19.77, y: 11.98 },
                    Point { x: 18.81, y: 12.34 },
                ),
                PathEl::CurveTo(
                    Point { x: 17.85, y: 12.70 },
                    Point { x: 17.03, y: 13.28 },
                    Point { x: 16.36, y: 14.09 },
                ),
                PathEl::CurveTo(
                    Point { x: 15.68, y: 14.90 },
                    Point { x: 15.16, y: 15.96 },
                    Point { x: 14.79, y: 17.26 },
                ),
                PathEl::CurveTo(
                    Point { x: 14.42, y: 18.57 },
                    Point { x: 14.24, y: 20.16 },
                    Point { x: 14.24, y: 22.04 },
                ),
                PathEl::LineTo(Point { x: 14.24, y: 25.87 }),
                PathEl::CurveTo(
                    Point { x: 14.24, y: 27.75 },
                    Point { x: 14.43, y: 29.35 },
                    Point { x: 14.80, y: 30.66 },
                ),
                PathEl::CurveTo(
                    Point { x: 15.18, y: 31.97 },
                    Point { x: 15.71, y: 33.04 },
                    Point { x: 16.39, y: 33.86 },
                ),
                PathEl::CurveTo(
                    Point { x: 17.08, y: 34.68 },
                    Point { x: 17.90, y: 35.28 },
                    Point { x: 18.85, y: 35.65 },
                ),
                PathEl::CurveTo(
                    Point { x: 19.81, y: 36.02 },
                    Point { x: 20.87, y: 36.20 },
                    Point { x: 22.03, y: 36.20 },
                ),
                PathEl::CurveTo(
                    Point { x: 23.20, y: 36.20 },
                    Point { x: 24.27, y: 36.01 },
                    Point { x: 25.22, y: 35.65 },
                ),
                PathEl::CurveTo(
                    Point { x: 26.17, y: 35.28 },
                    Point { x: 26.98, y: 34.69 },
                    Point { x: 27.66, y: 33.86 },
                ),
                PathEl::CurveTo(
                    Point { x: 28.33, y: 33.04 },
                    Point { x: 28.86, y: 31.97 },
                    Point { x: 29.23, y: 30.66 },
                ),
                PathEl::CurveTo(
                    Point { x: 29.60, y: 29.35 },
                    Point { x: 29.78, y: 27.75 },
                    Point { x: 29.78, y: 25.87 },
                ),
                PathEl::LineTo(Point { x: 29.78, y: 22.04 }),
                PathEl::CurveTo(
                    Point { x: 29.78, y: 20.16 },
                    Point { x: 29.59, y: 18.57 },
                    Point { x: 29.23, y: 17.26 },
                ),
                PathEl::CurveTo(
                    Point { x: 28.85, y: 15.96 },
                    Point { x: 28.32, y: 14.90 },
                    Point { x: 27.64, y: 14.09 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 25.81, y: 26.45 }),
                PathEl::CurveTo(
                    Point { x: 25.81, y: 27.65 },
                    Point { x: 25.73, y: 28.66 },
                    Point { x: 25.57, y: 29.50 },
                ),
                PathEl::CurveTo(
                    Point { x: 25.41, y: 30.34 },
                    Point { x: 25.16, y: 31.02 },
                    Point { x: 24.84, y: 31.54 },
                ),
                PathEl::CurveTo(
                    Point { x: 24.52, y: 32.06 },
                    Point { x: 24.12, y: 32.44 },
                    Point { x: 23.66, y: 32.68 },
                ),
                PathEl::CurveTo(
                    Point { x: 23.19, y: 32.92 },
                    Point { x: 22.65, y: 33.04 },
                    Point { x: 22.03, y: 33.04 },
                ),
                PathEl::CurveTo(
                    Point { x: 21.42, y: 33.04 },
                    Point { x: 20.88, y: 32.92 },
                    Point { x: 20.40, y: 32.68 },
                ),
                PathEl::CurveTo(
                    Point { x: 19.92, y: 32.44 },
                    Point { x: 19.52, y: 32.06 },
                    Point { x: 19.19, y: 31.54 },
                ),
                PathEl::CurveTo(
                    Point { x: 18.86, y: 31.02 },
                    Point { x: 18.61, y: 30.34 },
                    Point { x: 18.44, y: 29.50 },
                ),
                PathEl::CurveTo(
                    Point { x: 18.27, y: 28.66 },
                    Point { x: 18.18, y: 27.65 },
                    Point { x: 18.18, y: 26.45 },
                ),
                PathEl::LineTo(Point { x: 18.18, y: 21.44 }),
                PathEl::CurveTo(
                    Point { x: 18.18, y: 20.23 },
                    Point { x: 18.26, y: 19.22 },
                    Point { x: 18.43, y: 18.40 },
                ),
                PathEl::CurveTo(
                    Point { x: 18.60, y: 17.58 },
                    Point { x: 18.85, y: 16.92 },
                    Point { x: 19.17, y: 16.41 },
                ),
                PathEl::CurveTo(
                    Point { x: 19.50, y: 15.90 },
                    Point { x: 19.90, y: 15.54 },
                    Point { x: 20.37, y: 15.32 },
                ),
                PathEl::CurveTo(
                    Point { x: 20.84, y: 15.10 },
                    Point { x: 21.38, y: 14.99 },
                    Point { x: 21.99, y: 14.99 },
                ),
                PathEl::CurveTo(
                    Point { x: 22.60, y: 14.99 },
                    Point { x: 23.14, y: 15.10 },
                    Point { x: 23.61, y: 15.32 },
                ),
                PathEl::CurveTo(
                    Point { x: 24.08, y: 15.54 },
                    Point { x: 24.48, y: 15.91 },
                    Point { x: 24.81, y: 16.41 },
                ),
                PathEl::CurveTo(
                    Point { x: 25.14, y: 16.92 },
                    Point { x: 25.38, y: 17.58 },
                    Point { x: 25.55, y: 18.40 },
                ),
                PathEl::CurveTo(
                    Point { x: 25.72, y: 19.22 },
                    Point { x: 25.80, y: 20.24 },
                    Point { x: 25.80, y: 21.44 },
                ),
                PathEl::LineTo(Point { x: 25.80, y: 26.45 }),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct VoiceChat {
    size: f64,
    color: Color,
}

impl VoiceChat {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for VoiceChat {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 40.00, y: 4.00 }),
                PathEl::LineTo(Point { x: 8.00, y: 4.00 }),
                PathEl::CurveTo(
                    Point { x: 5.79, y: 4.00 },
                    Point { x: 4.02, y: 5.79 },
                    Point { x: 4.02, y: 8.00 },
                ),
                PathEl::LineTo(Point { x: 4.00, y: 44.00 }),
                PathEl::LineTo(Point { x: 12.00, y: 36.00 }),
                PathEl::LineTo(Point { x: 40.00, y: 36.00 }),
                PathEl::CurveTo(
                    Point { x: 42.21, y: 36.00 },
                    Point { x: 44.00, y: 34.21 },
                    Point { x: 44.00, y: 32.00 },
                ),
                PathEl::LineTo(Point { x: 44.00, y: 8.00 }),
                PathEl::CurveTo(
                    Point { x: 44.00, y: 5.79 },
                    Point { x: 42.21, y: 4.00 },
                    Point { x: 40.00, y: 4.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 36.00, y: 28.00 }),
                PathEl::LineTo(Point { x: 28.00, y: 21.60 }),
                PathEl::LineTo(Point { x: 28.00, y: 28.00 }),
                PathEl::LineTo(Point { x: 12.00, y: 28.00 }),
                PathEl::LineTo(Point { x: 12.00, y: 12.00 }),
                PathEl::LineTo(Point { x: 28.00, y: 12.00 }),
                PathEl::LineTo(Point { x: 28.00, y: 18.40 }),
                PathEl::LineTo(Point { x: 36.00, y: 12.00 }),
                PathEl::LineTo(Point { x: 36.00, y: 28.00 }),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct VolumeMute {
    size: f64,
    color: Color,
}

impl VolumeMute {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for VolumeMute {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 14.00, y: 18.00 }),
                PathEl::LineTo(Point { x: 14.00, y: 30.00 }),
                PathEl::LineTo(Point { x: 22.00, y: 30.00 }),
                PathEl::LineTo(Point { x: 32.00, y: 40.00 }),
                PathEl::LineTo(Point { x: 32.00, y: 8.00 }),
                PathEl::LineTo(Point { x: 22.00, y: 18.00 }),
                PathEl::LineTo(Point { x: 14.00, y: 18.00 }),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct NotificationsPaused {
    size: f64,
    color: Color,
}

impl NotificationsPaused {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for NotificationsPaused {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 24.00, y: 44.00 }),
                PathEl::CurveTo(
                    Point { x: 26.21, y: 44.00 },
                    Point { x: 28.00, y: 42.21 },
                    Point { x: 28.00, y: 40.00 },
                ),
                PathEl::LineTo(Point { x: 20.00, y: 40.00 }),
                PathEl::CurveTo(
                    Point { x: 20.00, y: 42.21 },
                    Point { x: 21.79, y: 44.00 },
                    Point { x: 24.00, y: 44.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 36.00, y: 32.00 }),
                PathEl::LineTo(Point { x: 36.00, y: 22.00 }),
                PathEl::CurveTo(
                    Point { x: 36.00, y: 15.85 },
                    Point { x: 32.73, y: 10.72 },
                    Point { x: 27.00, y: 9.36 },
                ),
                PathEl::LineTo(Point { x: 27.00, y: 8.00 }),
                PathEl::CurveTo(
                    Point { x: 27.00, y: 6.34 },
                    Point { x: 25.66, y: 5.00 },
                    Point { x: 24.00, y: 5.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 22.34, y: 5.00 },
                    Point { x: 21.00, y: 6.34 },
                    Point { x: 21.00, y: 8.00 },
                ),
                PathEl::LineTo(Point { x: 21.00, y: 9.36 }),
                PathEl::CurveTo(
                    Point { x: 15.27, y: 10.72 },
                    Point { x: 12.00, y: 15.85 },
                    Point { x: 12.00, y: 22.00 },
                ),
                PathEl::LineTo(Point { x: 12.00, y: 32.00 }),
                PathEl::LineTo(Point { x: 8.00, y: 36.00 }),
                PathEl::LineTo(Point { x: 8.00, y: 38.00 }),
                PathEl::LineTo(Point { x: 40.00, y: 38.00 }),
                PathEl::LineTo(Point { x: 40.00, y: 36.00 }),
                PathEl::LineTo(Point { x: 36.00, y: 32.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 29.00, y: 19.60 }),
                PathEl::LineTo(Point { x: 23.40, y: 26.40 }),
                PathEl::LineTo(Point { x: 29.00, y: 26.40 }),
                PathEl::LineTo(Point { x: 29.00, y: 30.00 }),
                PathEl::LineTo(Point { x: 19.00, y: 30.00 }),
                PathEl::LineTo(Point { x: 19.00, y: 26.40 }),
                PathEl::LineTo(Point { x: 24.60, y: 19.60 }),
                PathEl::LineTo(Point { x: 19.00, y: 19.60 }),
                PathEl::LineTo(Point { x: 19.00, y: 16.00 }),
                PathEl::LineTo(Point { x: 29.00, y: 16.00 }),
                PathEl::LineTo(Point { x: 29.00, y: 19.60 }),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct Apps {
    size: f64,
    color: Color,
}

impl Apps {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for Apps {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 8.00, y: 16.00 }),
                PathEl::LineTo(Point { x: 16.00, y: 16.00 }),
                PathEl::LineTo(Point { x: 16.00, y: 8.00 }),
                PathEl::LineTo(Point { x: 8.00, y: 8.00 }),
                PathEl::LineTo(Point { x: 8.00, y: 16.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 20.00, y: 40.00 }),
                PathEl::LineTo(Point { x: 28.00, y: 40.00 }),
                PathEl::LineTo(Point { x: 28.00, y: 32.00 }),
                PathEl::LineTo(Point { x: 20.00, y: 32.00 }),
                PathEl::LineTo(Point { x: 20.00, y: 40.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 8.00, y: 40.00 }),
                PathEl::LineTo(Point { x: 16.00, y: 40.00 }),
                PathEl::LineTo(Point { x: 16.00, y: 32.00 }),
                PathEl::LineTo(Point { x: 8.00, y: 32.00 }),
                PathEl::LineTo(Point { x: 8.00, y: 40.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 8.00, y: 28.00 }),
                PathEl::LineTo(Point { x: 16.00, y: 28.00 }),
                PathEl::LineTo(Point { x: 16.00, y: 20.00 }),
                PathEl::LineTo(Point { x: 8.00, y: 20.00 }),
                PathEl::LineTo(Point { x: 8.00, y: 28.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 20.00, y: 28.00 }),
                PathEl::LineTo(Point { x: 28.00, y: 28.00 }),
                PathEl::LineTo(Point { x: 28.00, y: 20.00 }),
                PathEl::LineTo(Point { x: 20.00, y: 20.00 }),
                PathEl::LineTo(Point { x: 20.00, y: 28.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 32.00, y: 8.00 }),
                PathEl::LineTo(Point { x: 32.00, y: 16.00 }),
                PathEl::LineTo(Point { x: 40.00, y: 16.00 }),
                PathEl::LineTo(Point { x: 40.00, y: 8.00 }),
                PathEl::LineTo(Point { x: 32.00, y: 8.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 20.00, y: 16.00 }),
                PathEl::LineTo(Point { x: 28.00, y: 16.00 }),
                PathEl::LineTo(Point { x: 28.00, y: 8.00 }),
                PathEl::LineTo(Point { x: 20.00, y: 8.00 }),
                PathEl::LineTo(Point { x: 20.00, y: 16.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 32.00, y: 28.00 }),
                PathEl::LineTo(Point { x: 40.00, y: 28.00 }),
                PathEl::LineTo(Point { x: 40.00, y: 20.00 }),
                PathEl::LineTo(Point { x: 32.00, y: 20.00 }),
                PathEl::LineTo(Point { x: 32.00, y: 28.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 32.00, y: 40.00 }),
                PathEl::LineTo(Point { x: 40.00, y: 40.00 }),
                PathEl::LineTo(Point { x: 40.00, y: 32.00 }),
                PathEl::LineTo(Point { x: 32.00, y: 32.00 }),
                PathEl::LineTo(Point { x: 32.00, y: 40.00 }),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct AirplanemodeInactive {
    size: f64,
    color: Color,
}

impl AirplanemodeInactive {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for AirplanemodeInactive {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 26.00, y: 18.00 }),
                PathEl::LineTo(Point { x: 26.00, y: 7.00 }),
                PathEl::CurveTo(
                    Point { x: 26.00, y: 5.34 },
                    Point { x: 24.66, y: 4.00 },
                    Point { x: 23.00, y: 4.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 21.34, y: 4.00 },
                    Point { x: 20.00, y: 5.34 },
                    Point { x: 20.00, y: 7.00 },
                ),
                PathEl::LineTo(Point { x: 20.00, y: 14.36 }),
                PathEl::LineTo(Point { x: 35.65, y: 30.01 }),
                PathEl::LineTo(Point { x: 42.00, y: 32.00 }),
                PathEl::LineTo(Point { x: 42.00, y: 28.00 }),
                PathEl::LineTo(Point { x: 26.00, y: 18.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 6.00, y: 10.55 }),
                PathEl::LineTo(Point { x: 15.97, y: 20.52 }),
                PathEl::LineTo(Point { x: 4.00, y: 28.00 }),
                PathEl::LineTo(Point { x: 4.00, y: 32.00 }),
                PathEl::LineTo(Point { x: 20.00, y: 27.00 }),
                PathEl::LineTo(Point { x: 20.00, y: 38.00 }),
                PathEl::LineTo(Point { x: 16.00, y: 41.00 }),
                PathEl::LineTo(Point { x: 16.00, y: 44.00 }),
                PathEl::LineTo(Point { x: 23.00, y: 42.00 }),
                PathEl::LineTo(Point { x: 30.00, y: 44.00 }),
                PathEl::LineTo(Point { x: 30.00, y: 41.00 }),
                PathEl::LineTo(Point { x: 26.00, y: 38.00 }),
                PathEl::LineTo(Point { x: 26.00, y: 30.55 }),
                PathEl::LineTo(Point { x: 37.45, y: 42.00 }),
                PathEl::LineTo(Point { x: 40.00, y: 39.45 }),
                PathEl::LineTo(Point { x: 8.55, y: 8.00 }),
                PathEl::LineTo(Point { x: 6.00, y: 10.55 }),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct FeaturedPlayList {
    size: f64,
    color: Color,
}

impl FeaturedPlayList {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for FeaturedPlayList {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 42.00, y: 6.00 }),
                PathEl::LineTo(Point { x: 6.00, y: 6.00 }),
                PathEl::CurveTo(
                    Point { x: 3.80, y: 6.00 },
                    Point { x: 2.00, y: 7.80 },
                    Point { x: 2.00, y: 10.00 },
                ),
                PathEl::LineTo(Point { x: 2.00, y: 38.00 }),
                PathEl::CurveTo(
                    Point { x: 2.00, y: 40.20 },
                    Point { x: 3.80, y: 42.00 },
                    Point { x: 6.00, y: 42.00 },
                ),
                PathEl::LineTo(Point { x: 42.00, y: 42.00 }),
                PathEl::CurveTo(
                    Point { x: 44.20, y: 42.00 },
                    Point { x: 46.00, y: 40.20 },
                    Point { x: 46.00, y: 38.00 },
                ),
                PathEl::LineTo(Point { x: 46.00, y: 10.00 }),
                PathEl::CurveTo(
                    Point { x: 46.00, y: 7.80 },
                    Point { x: 44.20, y: 6.00 },
                    Point { x: 42.00, y: 6.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 24.00, y: 22.00 }),
                PathEl::LineTo(Point { x: 6.00, y: 22.00 }),
                PathEl::LineTo(Point { x: 6.00, y: 18.00 }),
                PathEl::LineTo(Point { x: 24.00, y: 18.00 }),
                PathEl::LineTo(Point { x: 24.00, y: 22.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 24.00, y: 14.00 }),
                PathEl::LineTo(Point { x: 6.00, y: 14.00 }),
                PathEl::LineTo(Point { x: 6.00, y: 10.00 }),
                PathEl::LineTo(Point { x: 24.00, y: 10.00 }),
                PathEl::LineTo(Point { x: 24.00, y: 14.00 }),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct FontDownload {
    size: f64,
    color: Color,
}

impl FontDownload {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for FontDownload {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 24.0, height / 24.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 9.93, y: 13.50 }),
                PathEl::LineTo(Point { x: 14.07, y: 13.50 }),
                PathEl::LineTo(Point { x: 12.00, y: 7.98 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 20.00, y: 2.00 }),
                PathEl::LineTo(Point { x: 4.00, y: 2.00 }),
                PathEl::CurveTo(
                    Point { x: 2.90, y: 2.00 },
                    Point { x: 2.00, y: 2.90 },
                    Point { x: 2.00, y: 4.00 },
                ),
                PathEl::LineTo(Point { x: 2.00, y: 20.00 }),
                PathEl::CurveTo(
                    Point { x: 2.00, y: 21.10 },
                    Point { x: 2.90, y: 22.00 },
                    Point { x: 4.00, y: 22.00 },
                ),
                PathEl::LineTo(Point { x: 20.00, y: 22.00 }),
                PathEl::CurveTo(
                    Point { x: 21.10, y: 22.00 },
                    Point { x: 22.00, y: 21.10 },
                    Point { x: 22.00, y: 20.00 },
                ),
                PathEl::LineTo(Point { x: 22.00, y: 4.00 }),
                PathEl::CurveTo(
                    Point { x: 22.00, y: 2.90 },
                    Point { x: 21.10, y: 2.00 },
                    Point { x: 20.00, y: 2.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 15.95, y: 18.50 }),
                PathEl::LineTo(Point { x: 14.81, y: 15.50 }),
                PathEl::LineTo(Point { x: 9.17, y: 15.50 }),
                PathEl::LineTo(Point { x: 8.05, y: 18.50 }),
                PathEl::LineTo(Point { x: 5.96, y: 18.50 }),
                PathEl::LineTo(Point { x: 11.07, y: 5.50 }),
                PathEl::LineTo(Point { x: 12.93, y: 5.50 }),
                PathEl::LineTo(Point { x: 18.04, y: 18.50 }),
                PathEl::LineTo(Point { x: 15.95, y: 18.50 }),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct Room {
    size: f64,
    color: Color,
}

impl Room {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for Room {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 24.00, y: 4.00 }),
                PathEl::CurveTo(
                    Point { x: 16.27, y: 4.00 },
                    Point { x: 10.00, y: 10.27 },
                    Point { x: 10.00, y: 18.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 10.00, y: 28.50 },
                    Point { x: 24.00, y: 44.00 },
                    Point { x: 24.00, y: 44.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 24.00, y: 44.00 },
                    Point { x: 38.00, y: 28.50 },
                    Point { x: 38.00, y: 18.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 38.00, y: 10.27 },
                    Point { x: 31.73, y: 4.00 },
                    Point { x: 24.00, y: 4.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 24.00, y: 23.00 }),
                PathEl::CurveTo(
                    Point { x: 21.24, y: 23.00 },
                    Point { x: 19.00, y: 20.76 },
                    Point { x: 19.00, y: 18.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 19.00, y: 15.24 },
                    Point { x: 21.24, y: 13.00 },
                    Point { x: 24.00, y: 13.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 26.76, y: 13.00 },
                    Point { x: 29.00, y: 15.24 },
                    Point { x: 29.00, y: 18.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 29.00, y: 20.76 },
                    Point { x: 26.76, y: 23.00 },
                    Point { x: 24.00, y: 23.00 },
                ),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct AllInclusive {
    size: f64,
    color: Color,
}

impl AllInclusive {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for AllInclusive {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 37.20, y: 13.25 }),
                PathEl::CurveTo(
                    Point { x: 34.32, y: 13.25 },
                    Point { x: 31.60, y: 14.37 },
                    Point { x: 29.65, y: 16.32 },
                ),
                PathEl::LineTo(Point { x: 24.00, y: 21.32 }),
                PathEl::LineTo(Point { x: 23.99, y: 21.31 }),
                PathEl::LineTo(Point { x: 20.96, y: 23.98 }),
                PathEl::LineTo(Point { x: 20.98, y: 24.00 }),
                PathEl::LineTo(Point { x: 15.59, y: 28.78 }),
                PathEl::CurveTo(
                    Point { x: 14.31, y: 30.05 },
                    Point { x: 12.61, y: 30.75 },
                    Point { x: 10.80, y: 30.75 },
                ),
                PathEl::CurveTo(
                    Point { x: 7.06, y: 30.75 },
                    Point { x: 4.02, y: 27.72 },
                    Point { x: 4.02, y: 24.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 4.02, y: 20.28 },
                    Point { x: 7.06, y: 17.25 },
                    Point { x: 10.80, y: 17.25 },
                ),
                PathEl::CurveTo(
                    Point { x: 12.61, y: 17.25 },
                    Point { x: 14.31, y: 17.95 },
                    Point { x: 15.68, y: 19.31 },
                ),
                PathEl::LineTo(Point { x: 17.95, y: 21.32 }),
                PathEl::LineTo(Point { x: 20.97, y: 18.65 }),
                PathEl::LineTo(Point { x: 18.44, y: 16.41 }),
                PathEl::CurveTo(
                    Point { x: 16.40, y: 14.38 },
                    Point { x: 13.69, y: 13.26 },
                    Point { x: 10.80, y: 13.26 },
                ),
                PathEl::CurveTo(
                    Point { x: 4.84, y: 13.25 },
                    Point { x: 0.00, y: 18.07 },
                    Point { x: 0.00, y: 24.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 0.00, y: 29.93 },
                    Point { x: 4.84, y: 34.75 },
                    Point { x: 10.80, y: 34.75 },
                ),
                PathEl::CurveTo(
                    Point { x: 13.68, y: 34.75 },
                    Point { x: 16.39, y: 33.63 },
                    Point { x: 18.35, y: 31.69 },
                ),
                PathEl::LineTo(Point { x: 24.00, y: 26.68 }),
                PathEl::LineTo(Point { x: 24.01, y: 26.69 }),
                PathEl::LineTo(Point { x: 27.03, y: 24.01 }),
                PathEl::LineTo(Point { x: 27.02, y: 24.00 }),
                PathEl::LineTo(Point { x: 32.41, y: 19.23 }),
                PathEl::CurveTo(
                    Point { x: 33.69, y: 17.95 },
                    Point { x: 35.39, y: 17.25 },
                    Point { x: 37.20, y: 17.25 },
                ),
                PathEl::CurveTo(
                    Point { x: 40.94, y: 17.25 },
                    Point { x: 43.98, y: 20.28 },
                    Point { x: 43.98, y: 24.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 43.98, y: 27.72 },
                    Point { x: 40.94, y: 30.75 },
                    Point { x: 37.20, y: 30.75 },
                ),
                PathEl::CurveTo(
                    Point { x: 35.39, y: 30.75 },
                    Point { x: 33.69, y: 30.05 },
                    Point { x: 32.32, y: 28.70 },
                ),
                PathEl::LineTo(Point { x: 30.05, y: 26.69 }),
                PathEl::LineTo(Point { x: 27.03, y: 29.37 }),
                PathEl::LineTo(Point { x: 29.56, y: 31.61 }),
                PathEl::CurveTo(
                    Point { x: 31.60, y: 33.64 },
                    Point { x: 34.31, y: 34.75 },
                    Point { x: 37.19, y: 34.75 },
                ),
                PathEl::CurveTo(
                    Point { x: 43.16, y: 34.75 },
                    Point { x: 48.00, y: 29.93 },
                    Point { x: 48.00, y: 24.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 48.00, y: 18.07 },
                    Point { x: 43.16, y: 13.25 },
                    Point { x: 37.20, y: 13.25 },
                ),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct BrightnessHigh {
    size: f64,
    color: Color,
}

impl BrightnessHigh {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for BrightnessHigh {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 40.00, y: 17.37 }),
                PathEl::LineTo(Point { x: 40.00, y: 8.00 }),
                PathEl::LineTo(Point { x: 30.63, y: 8.00 }),
                PathEl::LineTo(Point { x: 24.00, y: 1.37 }),
                PathEl::LineTo(Point { x: 17.37, y: 8.00 }),
                PathEl::LineTo(Point { x: 8.00, y: 8.00 }),
                PathEl::LineTo(Point { x: 8.00, y: 17.37 }),
                PathEl::LineTo(Point { x: 1.37, y: 24.00 }),
                PathEl::LineTo(Point { x: 8.00, y: 30.63 }),
                PathEl::LineTo(Point { x: 8.00, y: 40.00 }),
                PathEl::LineTo(Point { x: 17.37, y: 40.00 }),
                PathEl::LineTo(Point { x: 24.00, y: 46.63 }),
                PathEl::LineTo(Point { x: 30.63, y: 40.00 }),
                PathEl::LineTo(Point { x: 40.00, y: 40.00 }),
                PathEl::LineTo(Point { x: 40.00, y: 30.63 }),
                PathEl::LineTo(Point { x: 46.63, y: 24.00 }),
                PathEl::LineTo(Point { x: 40.00, y: 17.37 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 24.00, y: 36.00 }),
                PathEl::CurveTo(
                    Point { x: 17.37, y: 36.00 },
                    Point { x: 12.00, y: 30.63 },
                    Point { x: 12.00, y: 24.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 12.00, y: 17.37 },
                    Point { x: 17.37, y: 12.00 },
                    Point { x: 24.00, y: 12.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 30.63, y: 12.00 },
                    Point { x: 36.00, y: 17.37 },
                    Point { x: 36.00, y: 24.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 36.00, y: 30.63 },
                    Point { x: 30.63, y: 36.00 },
                    Point { x: 24.00, y: 36.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 24.00, y: 16.00 }),
                PathEl::CurveTo(
                    Point { x: 19.58, y: 16.00 },
                    Point { x: 16.00, y: 19.58 },
                    Point { x: 16.00, y: 24.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 16.00, y: 28.42 },
                    Point { x: 19.58, y: 32.00 },
                    Point { x: 24.00, y: 32.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 28.42, y: 32.00 },
                    Point { x: 32.00, y: 28.42 },
                    Point { x: 32.00, y: 24.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 32.00, y: 19.58 },
                    Point { x: 28.42, y: 16.00 },
                    Point { x: 24.00, y: 16.00 },
                ),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct BlurCircular {
    size: f64,
    color: Color,
}

impl BlurCircular {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for BlurCircular {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 20.00, y: 18.00 }),
                PathEl::CurveTo(
                    Point { x: 18.90, y: 18.00 },
                    Point { x: 18.00, y: 18.90 },
                    Point { x: 18.00, y: 20.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 18.00, y: 21.10 },
                    Point { x: 18.90, y: 22.00 },
                    Point { x: 20.00, y: 22.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 21.10, y: 22.00 },
                    Point { x: 22.00, y: 21.10 },
                    Point { x: 22.00, y: 20.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 22.00, y: 18.90 },
                    Point { x: 21.10, y: 18.00 },
                    Point { x: 20.00, y: 18.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 20.00, y: 26.00 }),
                PathEl::CurveTo(
                    Point { x: 18.90, y: 26.00 },
                    Point { x: 18.00, y: 26.90 },
                    Point { x: 18.00, y: 28.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 18.00, y: 29.10 },
                    Point { x: 18.90, y: 30.00 },
                    Point { x: 20.00, y: 30.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 21.10, y: 30.00 },
                    Point { x: 22.00, y: 29.10 },
                    Point { x: 22.00, y: 28.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 22.00, y: 26.90 },
                    Point { x: 21.10, y: 26.00 },
                    Point { x: 20.00, y: 26.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 14.00, y: 19.00 }),
                PathEl::CurveTo(
                    Point { x: 13.45, y: 19.00 },
                    Point { x: 13.00, y: 19.45 },
                    Point { x: 13.00, y: 20.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 13.00, y: 20.55 },
                    Point { x: 13.45, y: 21.00 },
                    Point { x: 14.00, y: 21.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 14.55, y: 21.00 },
                    Point { x: 15.00, y: 20.55 },
                    Point { x: 15.00, y: 20.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 15.00, y: 19.45 },
                    Point { x: 14.55, y: 19.00 },
                    Point { x: 14.00, y: 19.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 20.00, y: 33.00 }),
                PathEl::CurveTo(
                    Point { x: 19.45, y: 33.00 },
                    Point { x: 19.00, y: 33.45 },
                    Point { x: 19.00, y: 34.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 19.00, y: 34.55 },
                    Point { x: 19.45, y: 35.00 },
                    Point { x: 20.00, y: 35.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 20.55, y: 35.00 },
                    Point { x: 21.00, y: 34.55 },
                    Point { x: 21.00, y: 34.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 21.00, y: 33.45 },
                    Point { x: 20.55, y: 33.00 },
                    Point { x: 20.00, y: 33.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 14.00, y: 27.00 }),
                PathEl::CurveTo(
                    Point { x: 13.45, y: 27.00 },
                    Point { x: 13.00, y: 27.45 },
                    Point { x: 13.00, y: 28.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 13.00, y: 28.55 },
                    Point { x: 13.45, y: 29.00 },
                    Point { x: 14.00, y: 29.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 14.55, y: 29.00 },
                    Point { x: 15.00, y: 28.55 },
                    Point { x: 15.00, y: 28.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 15.00, y: 27.45 },
                    Point { x: 14.55, y: 27.00 },
                    Point { x: 14.00, y: 27.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 20.00, y: 15.00 }),
                PathEl::CurveTo(
                    Point { x: 20.55, y: 15.00 },
                    Point { x: 21.00, y: 14.55 },
                    Point { x: 21.00, y: 14.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 21.00, y: 13.45 },
                    Point { x: 20.55, y: 13.00 },
                    Point { x: 20.00, y: 13.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 19.45, y: 13.00 },
                    Point { x: 19.00, y: 13.45 },
                    Point { x: 19.00, y: 14.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 19.00, y: 14.55 },
                    Point { x: 19.45, y: 15.00 },
                    Point { x: 20.00, y: 15.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 28.00, y: 18.00 }),
                PathEl::CurveTo(
                    Point { x: 26.90, y: 18.00 },
                    Point { x: 26.00, y: 18.90 },
                    Point { x: 26.00, y: 20.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 26.00, y: 21.10 },
                    Point { x: 26.90, y: 22.00 },
                    Point { x: 28.00, y: 22.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 29.10, y: 22.00 },
                    Point { x: 30.00, y: 21.10 },
                    Point { x: 30.00, y: 20.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 30.00, y: 18.90 },
                    Point { x: 29.10, y: 18.00 },
                    Point { x: 28.00, y: 18.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 28.00, y: 15.00 }),
                PathEl::CurveTo(
                    Point { x: 28.55, y: 15.00 },
                    Point { x: 29.00, y: 14.55 },
                    Point { x: 29.00, y: 14.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 29.00, y: 13.45 },
                    Point { x: 28.55, y: 13.00 },
                    Point { x: 28.00, y: 13.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 27.45, y: 13.00 },
                    Point { x: 27.00, y: 13.45 },
                    Point { x: 27.00, y: 14.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 27.00, y: 14.55 },
                    Point { x: 27.45, y: 15.00 },
                    Point { x: 28.00, y: 15.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 34.00, y: 27.00 }),
                PathEl::CurveTo(
                    Point { x: 33.45, y: 27.00 },
                    Point { x: 33.00, y: 27.45 },
                    Point { x: 33.00, y: 28.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 33.00, y: 28.55 },
                    Point { x: 33.45, y: 29.00 },
                    Point { x: 34.00, y: 29.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 34.55, y: 29.00 },
                    Point { x: 35.00, y: 28.55 },
                    Point { x: 35.00, y: 28.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 35.00, y: 27.45 },
                    Point { x: 34.55, y: 27.00 },
                    Point { x: 34.00, y: 27.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 34.00, y: 19.00 }),
                PathEl::CurveTo(
                    Point { x: 33.45, y: 19.00 },
                    Point { x: 33.00, y: 19.45 },
                    Point { x: 33.00, y: 20.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 33.00, y: 20.55 },
                    Point { x: 33.45, y: 21.00 },
                    Point { x: 34.00, y: 21.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 34.55, y: 21.00 },
                    Point { x: 35.00, y: 20.55 },
                    Point { x: 35.00, y: 20.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 35.00, y: 19.45 },
                    Point { x: 34.55, y: 19.00 },
                    Point { x: 34.00, y: 19.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 24.00, y: 4.00 }),
                PathEl::CurveTo(
                    Point { x: 12.95, y: 4.00 },
                    Point { x: 4.00, y: 12.95 },
                    Point { x: 4.00, y: 24.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 4.00, y: 35.05 },
                    Point { x: 12.95, y: 44.00 },
                    Point { x: 24.00, y: 44.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 35.05, y: 44.00 },
                    Point { x: 44.00, y: 35.05 },
                    Point { x: 44.00, y: 24.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 44.00, y: 12.95 },
                    Point { x: 35.05, y: 4.00 },
                    Point { x: 24.00, y: 4.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 24.00, y: 40.00 }),
                PathEl::CurveTo(
                    Point { x: 15.16, y: 40.00 },
                    Point { x: 8.00, y: 32.84 },
                    Point { x: 8.00, y: 24.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 8.00, y: 15.16 },
                    Point { x: 15.16, y: 8.00 },
                    Point { x: 24.00, y: 8.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 32.84, y: 8.00 },
                    Point { x: 40.00, y: 15.16 },
                    Point { x: 40.00, y: 24.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 40.00, y: 32.84 },
                    Point { x: 32.84, y: 40.00 },
                    Point { x: 24.00, y: 40.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 28.00, y: 33.00 }),
                PathEl::CurveTo(
                    Point { x: 27.45, y: 33.00 },
                    Point { x: 27.00, y: 33.45 },
                    Point { x: 27.00, y: 34.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 27.00, y: 34.55 },
                    Point { x: 27.45, y: 35.00 },
                    Point { x: 28.00, y: 35.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 28.55, y: 35.00 },
                    Point { x: 29.00, y: 34.55 },
                    Point { x: 29.00, y: 34.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 29.00, y: 33.45 },
                    Point { x: 28.55, y: 33.00 },
                    Point { x: 28.00, y: 33.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 28.00, y: 26.00 }),
                PathEl::CurveTo(
                    Point { x: 26.90, y: 26.00 },
                    Point { x: 26.00, y: 26.90 },
                    Point { x: 26.00, y: 28.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 26.00, y: 29.10 },
                    Point { x: 26.90, y: 30.00 },
                    Point { x: 28.00, y: 30.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 29.10, y: 30.00 },
                    Point { x: 30.00, y: 29.10 },
                    Point { x: 30.00, y: 28.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 30.00, y: 26.90 },
                    Point { x: 29.10, y: 26.00 },
                    Point { x: 28.00, y: 26.00 },
                ),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct InvertColors {
    size: f64,
    color: Color,
}

impl InvertColors {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for InvertColors {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 35.31, y: 15.86 }),
                PathEl::LineTo(Point { x: 24.00, y: 4.54 }),
                PathEl::LineTo(Point { x: 12.69, y: 15.86 }),
                PathEl::CurveTo(
                    Point { x: 6.44, y: 22.11 },
                    Point { x: 6.44, y: 32.24 },
                    Point { x: 12.69, y: 38.49 },
                ),
                PathEl::CurveTo(
                    Point { x: 15.81, y: 41.61 },
                    Point { x: 19.91, y: 43.18 },
                    Point { x: 24.00, y: 43.18 },
                ),
                PathEl::CurveTo(
                    Point { x: 28.09, y: 43.18 },
                    Point { x: 32.19, y: 41.62 },
                    Point { x: 35.31, y: 38.49 },
                ),
                PathEl::CurveTo(
                    Point { x: 41.56, y: 32.24 },
                    Point { x: 41.56, y: 22.11 },
                    Point { x: 35.31, y: 15.86 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 24.00, y: 39.17 }),
                PathEl::CurveTo(
                    Point { x: 20.79, y: 39.17 },
                    Point { x: 17.78, y: 37.92 },
                    Point { x: 15.52, y: 35.65 },
                ),
                PathEl::CurveTo(
                    Point { x: 13.25, y: 33.39 },
                    Point { x: 12.00, y: 30.38 },
                    Point { x: 12.00, y: 27.17 },
                ),
                PathEl::CurveTo(
                    Point { x: 12.00, y: 23.96 },
                    Point { x: 13.25, y: 20.95 },
                    Point { x: 15.52, y: 18.68 },
                ),
                PathEl::LineTo(Point { x: 24.00, y: 10.20 }),
                PathEl::LineTo(Point { x: 24.00, y: 39.17 }),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct CenterFocusStrong {
    size: f64,
    color: Color,
}

impl CenterFocusStrong {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for CenterFocusStrong {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 24.00, y: 16.00 }),
                PathEl::CurveTo(
                    Point { x: 19.58, y: 16.00 },
                    Point { x: 16.00, y: 19.58 },
                    Point { x: 16.00, y: 24.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 16.00, y: 28.42 },
                    Point { x: 19.58, y: 32.00 },
                    Point { x: 24.00, y: 32.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 28.42, y: 32.00 },
                    Point { x: 32.00, y: 28.42 },
                    Point { x: 32.00, y: 24.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 32.00, y: 19.58 },
                    Point { x: 28.42, y: 16.00 },
                    Point { x: 24.00, y: 16.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 10.00, y: 30.00 }),
                PathEl::LineTo(Point { x: 6.00, y: 30.00 }),
                PathEl::LineTo(Point { x: 6.00, y: 38.00 }),
                PathEl::CurveTo(
                    Point { x: 6.00, y: 40.21 },
                    Point { x: 7.79, y: 42.00 },
                    Point { x: 10.00, y: 42.00 },
                ),
                PathEl::LineTo(Point { x: 18.00, y: 42.00 }),
                PathEl::LineTo(Point { x: 18.00, y: 38.00 }),
                PathEl::LineTo(Point { x: 10.00, y: 38.00 }),
                PathEl::LineTo(Point { x: 10.00, y: 30.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 10.00, y: 10.00 }),
                PathEl::LineTo(Point { x: 18.00, y: 10.00 }),
                PathEl::LineTo(Point { x: 18.00, y: 6.00 }),
                PathEl::LineTo(Point { x: 10.00, y: 6.00 }),
                PathEl::CurveTo(
                    Point { x: 7.79, y: 6.00 },
                    Point { x: 6.00, y: 7.79 },
                    Point { x: 6.00, y: 10.00 },
                ),
                PathEl::LineTo(Point { x: 6.00, y: 18.00 }),
                PathEl::LineTo(Point { x: 10.00, y: 18.00 }),
                PathEl::LineTo(Point { x: 10.00, y: 10.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 38.00, y: 6.00 }),
                PathEl::LineTo(Point { x: 30.00, y: 6.00 }),
                PathEl::LineTo(Point { x: 30.00, y: 10.00 }),
                PathEl::LineTo(Point { x: 38.00, y: 10.00 }),
                PathEl::LineTo(Point { x: 38.00, y: 18.00 }),
                PathEl::LineTo(Point { x: 42.00, y: 18.00 }),
                PathEl::LineTo(Point { x: 42.00, y: 10.00 }),
                PathEl::CurveTo(
                    Point { x: 42.00, y: 7.79 },
                    Point { x: 40.21, y: 6.00 },
                    Point { x: 38.00, y: 6.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 38.00, y: 38.00 }),
                PathEl::LineTo(Point { x: 30.00, y: 38.00 }),
                PathEl::LineTo(Point { x: 30.00, y: 42.00 }),
                PathEl::LineTo(Point { x: 38.00, y: 42.00 }),
                PathEl::CurveTo(
                    Point { x: 40.21, y: 42.00 },
                    Point { x: 42.00, y: 40.21 },
                    Point { x: 42.00, y: 38.00 },
                ),
                PathEl::LineTo(Point { x: 42.00, y: 30.00 }),
                PathEl::LineTo(Point { x: 38.00, y: 30.00 }),
                PathEl::LineTo(Point { x: 38.00, y: 38.00 }),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct ArrowDropUp {
    size: f64,
    color: Color,
}

impl ArrowDropUp {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for ArrowDropUp {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 14.00, y: 28.00 }),
                PathEl::LineTo(Point { x: 24.00, y: 18.00 }),
                PathEl::LineTo(Point { x: 34.00, y: 28.00 }),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct ExposurePlus2 {
    size: f64,
    color: Color,
}

impl ExposurePlus2 {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for ExposurePlus2 {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 32.09, y: 32.58 }),
                PathEl::LineTo(Point { x: 37.82, y: 26.45 }),
                PathEl::CurveTo(
                    Point { x: 38.57, y: 25.66 },
                    Point { x: 39.26, y: 24.88 },
                    Point { x: 39.90, y: 24.10 },
                ),
                PathEl::CurveTo(
                    Point { x: 40.53, y: 23.32 },
                    Point { x: 41.08, y: 22.54 },
                    Point { x: 41.54, y: 21.77 },
                ),
                PathEl::CurveTo(
                    Point { x: 42.00, y: 20.99 },
                    Point { x: 42.36, y: 20.22 },
                    Point { x: 42.61, y: 19.44 },
                ),
                PathEl::CurveTo(
                    Point { x: 42.87, y: 18.66 },
                    Point { x: 43.00, y: 17.87 },
                    Point { x: 43.00, y: 17.07 },
                ),
                PathEl::CurveTo(
                    Point { x: 43.00, y: 16.00 },
                    Point { x: 42.82, y: 15.03 },
                    Point { x: 42.46, y: 14.15 },
                ),
                PathEl::CurveTo(
                    Point { x: 42.10, y: 13.28 },
                    Point { x: 41.58, y: 12.53 },
                    Point { x: 40.89, y: 11.92 },
                ),
                PathEl::CurveTo(
                    Point { x: 40.20, y: 11.31 },
                    Point { x: 39.36, y: 10.84 },
                    Point { x: 38.36, y: 10.50 },
                ),
                PathEl::CurveTo(
                    Point { x: 37.36, y: 10.17 },
                    Point { x: 36.22, y: 10.00 },
                    Point { x: 34.94, y: 10.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 33.56, y: 10.00 },
                    Point { x: 32.32, y: 10.21 },
                    Point { x: 31.24, y: 10.64 },
                ),
                PathEl::CurveTo(
                    Point { x: 30.16, y: 11.07 },
                    Point { x: 29.25, y: 11.65 },
                    Point { x: 28.51, y: 12.39 },
                ),
                PathEl::CurveTo(
                    Point { x: 27.77, y: 13.13 },
                    Point { x: 27.21, y: 14.00 },
                    Point { x: 26.83, y: 14.99 },
                ),
                PathEl::CurveTo(
                    Point { x: 26.47, y: 15.93 },
                    Point { x: 26.29, y: 16.94 },
                    Point { x: 26.27, y: 18.00 },
                ),
                PathEl::LineTo(Point { x: 30.55, y: 18.00 }),
                PathEl::CurveTo(
                    Point { x: 30.56, y: 17.38 },
                    Point { x: 30.64, y: 16.79 },
                    Point { x: 30.81, y: 16.26 },
                ),
                PathEl::CurveTo(
                    Point { x: 30.99, y: 15.68 },
                    Point { x: 31.26, y: 15.18 },
                    Point { x: 31.62, y: 14.76 },
                ),
                PathEl::CurveTo(
                    Point { x: 31.98, y: 14.34 },
                    Point { x: 32.43, y: 14.02 },
                    Point { x: 32.97, y: 13.78 },
                ),
                PathEl::CurveTo(
                    Point { x: 33.52, y: 13.55 },
                    Point { x: 34.16, y: 13.43 },
                    Point { x: 34.90, y: 13.43 },
                ),
                PathEl::CurveTo(
                    Point { x: 35.51, y: 13.43 },
                    Point { x: 36.05, y: 13.53 },
                    Point { x: 36.52, y: 13.74 },
                ),
                PathEl::CurveTo(
                    Point { x: 36.99, y: 13.95 },
                    Point { x: 37.39, y: 14.23 },
                    Point { x: 37.71, y: 14.59 },
                ),
                PathEl::CurveTo(
                    Point { x: 38.03, y: 14.95 },
                    Point { x: 38.28, y: 15.39 },
                    Point { x: 38.45, y: 15.88 },
                ),
                PathEl::CurveTo(
                    Point { x: 38.62, y: 16.38 },
                    Point { x: 38.70, y: 16.92 },
                    Point { x: 38.70, y: 17.51 },
                ),
                PathEl::CurveTo(
                    Point { x: 38.70, y: 17.94 },
                    Point { x: 38.64, y: 18.38 },
                    Point { x: 38.53, y: 18.81 },
                ),
                PathEl::CurveTo(
                    Point { x: 38.42, y: 19.24 },
                    Point { x: 38.23, y: 19.71 },
                    Point { x: 37.95, y: 20.21 },
                ),
                PathEl::CurveTo(
                    Point { x: 37.67, y: 20.71 },
                    Point { x: 37.30, y: 21.26 },
                    Point { x: 36.84, y: 21.87 },
                ),
                PathEl::CurveTo(
                    Point { x: 36.38, y: 22.47 },
                    Point { x: 35.79, y: 23.16 },
                    Point { x: 35.09, y: 23.94 },
                ),
                PathEl::LineTo(Point { x: 26.74, y: 33.05 }),
                PathEl::LineTo(Point { x: 26.74, y: 36.00 }),
                PathEl::LineTo(Point { x: 44.00, y: 36.00 }),
                PathEl::LineTo(Point { x: 44.00, y: 32.58 }),
                PathEl::LineTo(Point { x: 32.09, y: 32.58 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 16.00, y: 14.00 }),
                PathEl::LineTo(Point { x: 12.00, y: 14.00 }),
                PathEl::LineTo(Point { x: 12.00, y: 22.00 }),
                PathEl::LineTo(Point { x: 4.00, y: 22.00 }),
                PathEl::LineTo(Point { x: 4.00, y: 26.00 }),
                PathEl::LineTo(Point { x: 12.00, y: 26.00 }),
                PathEl::LineTo(Point { x: 12.00, y: 34.00 }),
                PathEl::LineTo(Point { x: 16.00, y: 34.00 }),
                PathEl::LineTo(Point { x: 16.00, y: 26.00 }),
                PathEl::LineTo(Point { x: 24.00, y: 26.00 }),
                PathEl::LineTo(Point { x: 24.00, y: 22.00 }),
                PathEl::LineTo(Point { x: 16.00, y: 22.00 }),
                PathEl::LineTo(Point { x: 16.00, y: 14.00 }),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct NextWeek {
    size: f64,
    color: Color,
}

impl NextWeek {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for NextWeek {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 40.00, y: 14.00 }),
                PathEl::LineTo(Point { x: 32.00, y: 14.00 }),
                PathEl::LineTo(Point { x: 32.00, y: 10.00 }),
                PathEl::CurveTo(
                    Point { x: 32.00, y: 8.90 },
                    Point { x: 31.56, y: 7.90 },
                    Point { x: 30.82, y: 7.18 },
                ),
                PathEl::CurveTo(
                    Point { x: 30.10, y: 6.44 },
                    Point { x: 29.10, y: 6.00 },
                    Point { x: 28.00, y: 6.00 },
                ),
                PathEl::LineTo(Point { x: 20.00, y: 6.00 }),
                PathEl::CurveTo(
                    Point { x: 17.80, y: 6.00 },
                    Point { x: 16.00, y: 7.80 },
                    Point { x: 16.00, y: 10.00 },
                ),
                PathEl::LineTo(Point { x: 16.00, y: 14.00 }),
                PathEl::LineTo(Point { x: 8.00, y: 14.00 }),
                PathEl::CurveTo(
                    Point { x: 5.80, y: 14.00 },
                    Point { x: 4.00, y: 15.80 },
                    Point { x: 4.00, y: 18.00 },
                ),
                PathEl::LineTo(Point { x: 4.00, y: 40.00 }),
                PathEl::CurveTo(
                    Point { x: 4.00, y: 42.20 },
                    Point { x: 5.80, y: 44.00 },
                    Point { x: 8.00, y: 44.00 },
                ),
                PathEl::LineTo(Point { x: 40.00, y: 44.00 }),
                PathEl::CurveTo(
                    Point { x: 42.20, y: 44.00 },
                    Point { x: 44.00, y: 42.20 },
                    Point { x: 44.00, y: 40.00 },
                ),
                PathEl::LineTo(Point { x: 44.00, y: 18.00 }),
                PathEl::CurveTo(
                    Point { x: 44.00, y: 15.80 },
                    Point { x: 42.20, y: 14.00 },
                    Point { x: 40.00, y: 14.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 20.00, y: 10.00 }),
                PathEl::LineTo(Point { x: 28.00, y: 10.00 }),
                PathEl::LineTo(Point { x: 28.00, y: 14.00 }),
                PathEl::LineTo(Point { x: 20.00, y: 14.00 }),
                PathEl::LineTo(Point { x: 20.00, y: 10.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 22.00, y: 37.00 }),
                PathEl::LineTo(Point { x: 20.00, y: 35.00 }),
                PathEl::LineTo(Point { x: 26.00, y: 29.00 }),
                PathEl::LineTo(Point { x: 20.00, y: 23.00 }),
                PathEl::LineTo(Point { x: 22.00, y: 21.00 }),
                PathEl::LineTo(Point { x: 30.00, y: 29.00 }),
                PathEl::LineTo(Point { x: 22.00, y: 37.00 }),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct Subscriptions {
    size: f64,
    color: Color,
}

impl Subscriptions {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for Subscriptions {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 40.00, y: 16.00 }),
                PathEl::LineTo(Point { x: 8.00, y: 16.00 }),
                PathEl::LineTo(Point { x: 8.00, y: 12.00 }),
                PathEl::LineTo(Point { x: 40.00, y: 12.00 }),
                PathEl::LineTo(Point { x: 40.00, y: 16.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 36.00, y: 4.00 }),
                PathEl::LineTo(Point { x: 12.00, y: 4.00 }),
                PathEl::LineTo(Point { x: 12.00, y: 8.00 }),
                PathEl::LineTo(Point { x: 36.00, y: 8.00 }),
                PathEl::LineTo(Point { x: 36.00, y: 4.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 44.00, y: 24.00 }),
                PathEl::LineTo(Point { x: 44.00, y: 40.00 }),
                PathEl::CurveTo(
                    Point { x: 44.00, y: 42.21 },
                    Point { x: 42.21, y: 44.00 },
                    Point { x: 40.00, y: 44.00 },
                ),
                PathEl::LineTo(Point { x: 8.00, y: 44.00 }),
                PathEl::CurveTo(
                    Point { x: 5.79, y: 44.00 },
                    Point { x: 4.00, y: 42.21 },
                    Point { x: 4.00, y: 40.00 },
                ),
                PathEl::LineTo(Point { x: 4.00, y: 24.00 }),
                PathEl::CurveTo(
                    Point { x: 4.00, y: 21.79 },
                    Point { x: 5.79, y: 20.00 },
                    Point { x: 8.00, y: 20.00 },
                ),
                PathEl::LineTo(Point { x: 40.00, y: 20.00 }),
                PathEl::CurveTo(
                    Point { x: 42.21, y: 20.00 },
                    Point { x: 44.00, y: 21.79 },
                    Point { x: 44.00, y: 24.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 32.00, y: 32.00 }),
                PathEl::LineTo(Point { x: 20.00, y: 25.47 }),
                PathEl::LineTo(Point { x: 20.00, y: 38.53 }),
                PathEl::LineTo(Point { x: 32.00, y: 32.00 }),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct CreateNewFolder {
    size: f64,
    color: Color,
}

impl CreateNewFolder {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for CreateNewFolder {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 40.00, y: 12.00 }),
                PathEl::LineTo(Point { x: 24.00, y: 12.00 }),
                PathEl::LineTo(Point { x: 20.00, y: 8.00 }),
                PathEl::LineTo(Point { x: 8.00, y: 8.00 }),
                PathEl::CurveTo(
                    Point { x: 5.79, y: 8.00 },
                    Point { x: 4.02, y: 9.79 },
                    Point { x: 4.02, y: 12.00 },
                ),
                PathEl::LineTo(Point { x: 4.00, y: 36.00 }),
                PathEl::CurveTo(
                    Point { x: 4.00, y: 38.21 },
                    Point { x: 5.79, y: 40.00 },
                    Point { x: 8.00, y: 40.00 },
                ),
                PathEl::LineTo(Point { x: 40.00, y: 40.00 }),
                PathEl::CurveTo(
                    Point { x: 42.21, y: 40.00 },
                    Point { x: 44.00, y: 38.21 },
                    Point { x: 44.00, y: 36.00 },
                ),
                PathEl::LineTo(Point { x: 44.00, y: 16.00 }),
                PathEl::CurveTo(
                    Point { x: 44.00, y: 13.79 },
                    Point { x: 42.21, y: 12.00 },
                    Point { x: 40.00, y: 12.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 38.00, y: 28.00 }),
                PathEl::LineTo(Point { x: 32.00, y: 28.00 }),
                PathEl::LineTo(Point { x: 32.00, y: 34.00 }),
                PathEl::LineTo(Point { x: 28.00, y: 34.00 }),
                PathEl::LineTo(Point { x: 28.00, y: 28.00 }),
                PathEl::LineTo(Point { x: 22.00, y: 28.00 }),
                PathEl::LineTo(Point { x: 22.00, y: 24.00 }),
                PathEl::LineTo(Point { x: 28.00, y: 24.00 }),
                PathEl::LineTo(Point { x: 28.00, y: 18.00 }),
                PathEl::LineTo(Point { x: 32.00, y: 18.00 }),
                PathEl::LineTo(Point { x: 32.00, y: 24.00 }),
                PathEl::LineTo(Point { x: 38.00, y: 24.00 }),
                PathEl::LineTo(Point { x: 38.00, y: 28.00 }),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct SmsFailed {
    size: f64,
    color: Color,
}

impl SmsFailed {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for SmsFailed {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 40.00, y: 4.00 }),
                PathEl::LineTo(Point { x: 8.00, y: 4.00 }),
                PathEl::CurveTo(
                    Point { x: 5.79, y: 4.00 },
                    Point { x: 4.02, y: 5.79 },
                    Point { x: 4.02, y: 8.00 },
                ),
                PathEl::LineTo(Point { x: 4.00, y: 44.00 }),
                PathEl::LineTo(Point { x: 12.00, y: 36.00 }),
                PathEl::LineTo(Point { x: 40.00, y: 36.00 }),
                PathEl::CurveTo(
                    Point { x: 42.21, y: 36.00 },
                    Point { x: 44.00, y: 34.21 },
                    Point { x: 44.00, y: 32.00 },
                ),
                PathEl::LineTo(Point { x: 44.00, y: 8.00 }),
                PathEl::CurveTo(
                    Point { x: 44.00, y: 5.79 },
                    Point { x: 42.21, y: 4.00 },
                    Point { x: 40.00, y: 4.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 26.00, y: 28.00 }),
                PathEl::LineTo(Point { x: 22.00, y: 28.00 }),
                PathEl::LineTo(Point { x: 22.00, y: 24.00 }),
                PathEl::LineTo(Point { x: 26.00, y: 24.00 }),
                PathEl::LineTo(Point { x: 26.00, y: 28.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 26.00, y: 20.00 }),
                PathEl::LineTo(Point { x: 22.00, y: 20.00 }),
                PathEl::LineTo(Point { x: 22.00, y: 12.00 }),
                PathEl::LineTo(Point { x: 26.00, y: 12.00 }),
                PathEl::LineTo(Point { x: 26.00, y: 20.00 }),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct EventSeat {
    size: f64,
    color: Color,
}

impl EventSeat {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for EventSeat {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 8.00, y: 36.00 }),
                PathEl::LineTo(Point { x: 8.00, y: 42.00 }),
                PathEl::LineTo(Point { x: 14.00, y: 42.00 }),
                PathEl::LineTo(Point { x: 14.00, y: 36.00 }),
                PathEl::LineTo(Point { x: 34.00, y: 36.00 }),
                PathEl::LineTo(Point { x: 34.00, y: 42.00 }),
                PathEl::LineTo(Point { x: 40.00, y: 42.00 }),
                PathEl::LineTo(Point { x: 40.00, y: 30.00 }),
                PathEl::LineTo(Point { x: 8.00, y: 30.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 38.00, y: 20.00 }),
                PathEl::LineTo(Point { x: 44.00, y: 20.00 }),
                PathEl::LineTo(Point { x: 44.00, y: 26.00 }),
                PathEl::LineTo(Point { x: 38.00, y: 26.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 4.00, y: 20.00 }),
                PathEl::LineTo(Point { x: 10.00, y: 20.00 }),
                PathEl::LineTo(Point { x: 10.00, y: 26.00 }),
                PathEl::LineTo(Point { x: 4.00, y: 26.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 34.00, y: 26.00 }),
                PathEl::LineTo(Point { x: 14.00, y: 26.00 }),
                PathEl::LineTo(Point { x: 14.00, y: 10.00 }),
                PathEl::CurveTo(
                    Point { x: 14.00, y: 7.79 },
                    Point { x: 15.79, y: 6.00 },
                    Point { x: 18.00, y: 6.00 },
                ),
                PathEl::LineTo(Point { x: 30.00, y: 6.00 }),
                PathEl::CurveTo(
                    Point { x: 32.21, y: 6.00 },
                    Point { x: 34.00, y: 7.79 },
                    Point { x: 34.00, y: 10.00 },
                ),
                PathEl::LineTo(Point { x: 34.00, y: 26.00 }),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct StopScreenShare {
    size: f64,
    color: Color,
}

impl StopScreenShare {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for StopScreenShare {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 42.44, y: 36.04 }),
                PathEl::LineTo(Point { x: 46.44, y: 40.04 }),
                PathEl::LineTo(Point { x: 48.00, y: 40.04 }),
                PathEl::LineTo(Point { x: 48.00, y: 36.04 }),
                PathEl::LineTo(Point { x: 42.44, y: 36.04 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 43.98, y: 32.04 }),
                PathEl::LineTo(Point { x: 44.00, y: 12.04 }),
                PathEl::CurveTo(
                    Point { x: 44.00, y: 9.82 },
                    Point { x: 42.20, y: 8.04 },
                    Point { x: 40.00, y: 8.04 },
                ),
                PathEl::LineTo(Point { x: 14.44, y: 8.04 }),
                PathEl::LineTo(Point { x: 24.90, y: 18.50 }),
                PathEl::CurveTo(
                    Point { x: 25.26, y: 18.42 },
                    Point { x: 25.62, y: 18.36 },
                    Point { x: 26.00, y: 18.30 },
                ),
                PathEl::LineTo(Point { x: 26.00, y: 14.04 }),
                PathEl::LineTo(Point { x: 34.00, y: 21.50 }),
                PathEl::LineTo(Point { x: 30.84, y: 24.44 }),
                PathEl::LineTo(Point { x: 41.92, y: 35.52 }),
                PathEl::CurveTo(
                    Point { x: 43.14, y: 34.86 },
                    Point { x: 43.98, y: 33.54 },
                    Point { x: 43.98, y: 32.04 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 4.78, y: 3.46 }),
                PathEl::LineTo(Point { x: 2.22, y: 6.00 }),
                PathEl::LineTo(Point { x: 5.30, y: 9.08 }),
                PathEl::CurveTo(
                    Point { x: 4.50, y: 9.80 },
                    Point { x: 4.00, y: 10.86 },
                    Point { x: 4.00, y: 12.04 },
                ),
                PathEl::LineTo(Point { x: 4.00, y: 32.04 }),
                PathEl::CurveTo(
                    Point { x: 4.00, y: 34.24 },
                    Point { x: 5.78, y: 36.04 },
                    Point { x: 8.00, y: 36.04 },
                ),
                PathEl::LineTo(Point { x: 0.00, y: 36.04 }),
                PathEl::LineTo(Point { x: 0.00, y: 40.04 }),
                PathEl::LineTo(Point { x: 36.26, y: 40.04 }),
                PathEl::LineTo(Point { x: 41.68, y: 45.46 }),
                PathEl::LineTo(Point { x: 44.22, y: 42.92 }),
                PathEl::LineTo(Point { x: 4.78, y: 3.46 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 14.00, y: 30.04 }),
                PathEl::CurveTo(
                    Point { x: 14.62, y: 27.08 },
                    Point { x: 15.84, y: 24.14 },
                    Point { x: 18.14, y: 21.92 },
                ),
                PathEl::LineTo(Point { x: 21.32, y: 25.10 }),
                PathEl::CurveTo(
                    Point { x: 18.24, y: 25.86 },
                    Point { x: 15.92, y: 27.46 },
                    Point { x: 14.00, y: 30.04 },
                ),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct RvHookup {
    size: f64,
    color: Color,
}

impl RvHookup {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for RvHookup {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 40.00, y: 34.00 }),
                PathEl::LineTo(Point { x: 40.00, y: 22.00 }),
                PathEl::CurveTo(
                    Point { x: 40.00, y: 19.79 },
                    Point { x: 38.21, y: 18.00 },
                    Point { x: 36.00, y: 18.00 },
                ),
                PathEl::LineTo(Point { x: 14.00, y: 18.00 }),
                PathEl::LineTo(Point { x: 14.00, y: 14.00 }),
                PathEl::LineTo(Point { x: 8.00, y: 20.00 }),
                PathEl::LineTo(Point { x: 14.00, y: 26.00 }),
                PathEl::LineTo(Point { x: 14.00, y: 22.00 }),
                PathEl::LineTo(Point { x: 22.00, y: 22.00 }),
                PathEl::LineTo(Point { x: 22.00, y: 28.00 }),
                PathEl::LineTo(Point { x: 8.00, y: 28.00 }),
                PathEl::LineTo(Point { x: 8.00, y: 34.00 }),
                PathEl::CurveTo(
                    Point { x: 8.00, y: 36.21 },
                    Point { x: 9.79, y: 38.00 },
                    Point { x: 12.00, y: 38.00 },
                ),
                PathEl::LineTo(Point { x: 16.00, y: 38.00 }),
                PathEl::CurveTo(
                    Point { x: 16.00, y: 41.32 },
                    Point { x: 18.68, y: 44.00 },
                    Point { x: 22.00, y: 44.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 25.32, y: 44.00 },
                    Point { x: 28.00, y: 41.32 },
                    Point { x: 28.00, y: 38.00 },
                ),
                PathEl::LineTo(Point { x: 44.00, y: 38.00 }),
                PathEl::LineTo(Point { x: 44.00, y: 34.00 }),
                PathEl::LineTo(Point { x: 40.00, y: 34.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 22.00, y: 40.00 }),
                PathEl::CurveTo(
                    Point { x: 20.89, y: 40.00 },
                    Point { x: 20.00, y: 39.11 },
                    Point { x: 20.00, y: 38.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 20.00, y: 36.89 },
                    Point { x: 20.89, y: 36.00 },
                    Point { x: 22.00, y: 36.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 23.11, y: 36.00 },
                    Point { x: 24.00, y: 36.89 },
                    Point { x: 24.00, y: 38.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 24.00, y: 39.11 },
                    Point { x: 23.11, y: 40.00 },
                    Point { x: 22.00, y: 40.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 36.00, y: 28.00 }),
                PathEl::LineTo(Point { x: 28.00, y: 28.00 }),
                PathEl::LineTo(Point { x: 28.00, y: 22.00 }),
                PathEl::LineTo(Point { x: 36.00, y: 22.00 }),
                PathEl::LineTo(Point { x: 36.00, y: 28.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 34.00, y: 4.00 }),
                PathEl::LineTo(Point { x: 34.00, y: 8.00 }),
                PathEl::LineTo(Point { x: 18.00, y: 8.00 }),
                PathEl::LineTo(Point { x: 18.00, y: 12.00 }),
                PathEl::LineTo(Point { x: 34.00, y: 12.00 }),
                PathEl::LineTo(Point { x: 34.00, y: 16.00 }),
                PathEl::LineTo(Point { x: 40.00, y: 10.00 }),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct AssignmentTurnedIn {
    size: f64,
    color: Color,
}

impl AssignmentTurnedIn {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for AssignmentTurnedIn {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 38.00, y: 6.00 }),
                PathEl::LineTo(Point { x: 29.63, y: 6.00 }),
                PathEl::CurveTo(
                    Point { x: 28.81, y: 3.68 },
                    Point { x: 26.61, y: 2.00 },
                    Point { x: 24.00, y: 2.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 21.39, y: 2.00 },
                    Point { x: 19.19, y: 3.68 },
                    Point { x: 18.37, y: 6.00 },
                ),
                PathEl::LineTo(Point { x: 10.00, y: 6.00 }),
                PathEl::CurveTo(
                    Point { x: 7.79, y: 6.00 },
                    Point { x: 6.00, y: 7.79 },
                    Point { x: 6.00, y: 10.00 },
                ),
                PathEl::LineTo(Point { x: 6.00, y: 38.00 }),
                PathEl::CurveTo(
                    Point { x: 6.00, y: 40.21 },
                    Point { x: 7.79, y: 42.00 },
                    Point { x: 10.00, y: 42.00 },
                ),
                PathEl::LineTo(Point { x: 38.00, y: 42.00 }),
                PathEl::CurveTo(
                    Point { x: 40.21, y: 42.00 },
                    Point { x: 42.00, y: 40.21 },
                    Point { x: 42.00, y: 38.00 },
                ),
                PathEl::LineTo(Point { x: 42.00, y: 10.00 }),
                PathEl::CurveTo(
                    Point { x: 42.00, y: 7.79 },
                    Point { x: 40.21, y: 6.00 },
                    Point { x: 38.00, y: 6.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 24.00, y: 6.00 }),
                PathEl::CurveTo(
                    Point { x: 25.10, y: 6.00 },
                    Point { x: 26.00, y: 6.89 },
                    Point { x: 26.00, y: 8.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 26.00, y: 9.11 },
                    Point { x: 25.10, y: 10.00 },
                    Point { x: 24.00, y: 10.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 22.90, y: 10.00 },
                    Point { x: 22.00, y: 9.11 },
                    Point { x: 22.00, y: 8.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 22.00, y: 6.89 },
                    Point { x: 22.90, y: 6.00 },
                    Point { x: 24.00, y: 6.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 20.00, y: 34.00 }),
                PathEl::LineTo(Point { x: 12.00, y: 26.00 }),
                PathEl::LineTo(Point { x: 14.83, y: 23.17 }),
                PathEl::LineTo(Point { x: 20.00, y: 28.34 }),
                PathEl::LineTo(Point { x: 33.17, y: 15.17 }),
                PathEl::LineTo(Point { x: 36.00, y: 18.00 }),
                PathEl::LineTo(Point { x: 20.00, y: 34.00 }),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct BorderTop {
    size: f64,
    color: Color,
}

impl BorderTop {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for BorderTop {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 14.00, y: 42.00 }),
                PathEl::LineTo(Point { x: 18.00, y: 42.00 }),
                PathEl::LineTo(Point { x: 18.00, y: 38.00 }),
                PathEl::LineTo(Point { x: 14.00, y: 38.00 }),
                PathEl::LineTo(Point { x: 14.00, y: 42.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 14.00, y: 26.00 }),
                PathEl::LineTo(Point { x: 18.00, y: 26.00 }),
                PathEl::LineTo(Point { x: 18.00, y: 22.00 }),
                PathEl::LineTo(Point { x: 14.00, y: 22.00 }),
                PathEl::LineTo(Point { x: 14.00, y: 26.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 22.00, y: 26.00 }),
                PathEl::LineTo(Point { x: 26.00, y: 26.00 }),
                PathEl::LineTo(Point { x: 26.00, y: 22.00 }),
                PathEl::LineTo(Point { x: 22.00, y: 22.00 }),
                PathEl::LineTo(Point { x: 22.00, y: 26.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 22.00, y: 42.00 }),
                PathEl::LineTo(Point { x: 26.00, y: 42.00 }),
                PathEl::LineTo(Point { x: 26.00, y: 38.00 }),
                PathEl::LineTo(Point { x: 22.00, y: 38.00 }),
                PathEl::LineTo(Point { x: 22.00, y: 42.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 6.00, y: 34.00 }),
                PathEl::LineTo(Point { x: 10.00, y: 34.00 }),
                PathEl::LineTo(Point { x: 10.00, y: 30.00 }),
                PathEl::LineTo(Point { x: 6.00, y: 30.00 }),
                PathEl::LineTo(Point { x: 6.00, y: 34.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 6.00, y: 42.00 }),
                PathEl::LineTo(Point { x: 10.00, y: 42.00 }),
                PathEl::LineTo(Point { x: 10.00, y: 38.00 }),
                PathEl::LineTo(Point { x: 6.00, y: 38.00 }),
                PathEl::LineTo(Point { x: 6.00, y: 42.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 6.00, y: 26.00 }),
                PathEl::LineTo(Point { x: 10.00, y: 26.00 }),
                PathEl::LineTo(Point { x: 10.00, y: 22.00 }),
                PathEl::LineTo(Point { x: 6.00, y: 22.00 }),
                PathEl::LineTo(Point { x: 6.00, y: 26.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 6.00, y: 18.00 }),
                PathEl::LineTo(Point { x: 10.00, y: 18.00 }),
                PathEl::LineTo(Point { x: 10.00, y: 14.00 }),
                PathEl::LineTo(Point { x: 6.00, y: 14.00 }),
                PathEl::LineTo(Point { x: 6.00, y: 18.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 22.00, y: 34.00 }),
                PathEl::LineTo(Point { x: 26.00, y: 34.00 }),
                PathEl::LineTo(Point { x: 26.00, y: 30.00 }),
                PathEl::LineTo(Point { x: 22.00, y: 30.00 }),
                PathEl::LineTo(Point { x: 22.00, y: 34.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 38.00, y: 18.00 }),
                PathEl::LineTo(Point { x: 42.00, y: 18.00 }),
                PathEl::LineTo(Point { x: 42.00, y: 14.00 }),
                PathEl::LineTo(Point { x: 38.00, y: 14.00 }),
                PathEl::LineTo(Point { x: 38.00, y: 18.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 38.00, y: 26.00 }),
                PathEl::LineTo(Point { x: 42.00, y: 26.00 }),
                PathEl::LineTo(Point { x: 42.00, y: 22.00 }),
                PathEl::LineTo(Point { x: 38.00, y: 22.00 }),
                PathEl::LineTo(Point { x: 38.00, y: 26.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 6.00, y: 6.00 }),
                PathEl::LineTo(Point { x: 6.00, y: 10.00 }),
                PathEl::LineTo(Point { x: 42.00, y: 10.00 }),
                PathEl::LineTo(Point { x: 42.00, y: 6.00 }),
                PathEl::LineTo(Point { x: 6.00, y: 6.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 38.00, y: 34.00 }),
                PathEl::LineTo(Point { x: 42.00, y: 34.00 }),
                PathEl::LineTo(Point { x: 42.00, y: 30.00 }),
                PathEl::LineTo(Point { x: 38.00, y: 30.00 }),
                PathEl::LineTo(Point { x: 38.00, y: 34.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 30.00, y: 42.00 }),
                PathEl::LineTo(Point { x: 34.00, y: 42.00 }),
                PathEl::LineTo(Point { x: 34.00, y: 38.00 }),
                PathEl::LineTo(Point { x: 30.00, y: 38.00 }),
                PathEl::LineTo(Point { x: 30.00, y: 42.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 22.00, y: 18.00 }),
                PathEl::LineTo(Point { x: 26.00, y: 18.00 }),
                PathEl::LineTo(Point { x: 26.00, y: 14.00 }),
                PathEl::LineTo(Point { x: 22.00, y: 14.00 }),
                PathEl::LineTo(Point { x: 22.00, y: 18.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 38.00, y: 42.00 }),
                PathEl::LineTo(Point { x: 42.00, y: 42.00 }),
                PathEl::LineTo(Point { x: 42.00, y: 38.00 }),
                PathEl::LineTo(Point { x: 38.00, y: 38.00 }),
                PathEl::LineTo(Point { x: 38.00, y: 42.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 30.00, y: 26.00 }),
                PathEl::LineTo(Point { x: 34.00, y: 26.00 }),
                PathEl::LineTo(Point { x: 34.00, y: 22.00 }),
                PathEl::LineTo(Point { x: 30.00, y: 22.00 }),
                PathEl::LineTo(Point { x: 30.00, y: 26.00 }),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct Filter7 {
    size: f64,
    color: Color,
}

impl Filter7 {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for Filter7 {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 6.00, y: 10.00 }),
                PathEl::LineTo(Point { x: 2.00, y: 10.00 }),
                PathEl::LineTo(Point { x: 2.00, y: 42.00 }),
                PathEl::CurveTo(
                    Point { x: 2.00, y: 44.21 },
                    Point { x: 3.79, y: 46.00 },
                    Point { x: 6.00, y: 46.00 },
                ),
                PathEl::LineTo(Point { x: 38.00, y: 46.00 }),
                PathEl::LineTo(Point { x: 38.00, y: 42.00 }),
                PathEl::LineTo(Point { x: 6.00, y: 42.00 }),
                PathEl::LineTo(Point { x: 6.00, y: 10.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 42.00, y: 2.00 }),
                PathEl::LineTo(Point { x: 14.00, y: 2.00 }),
                PathEl::CurveTo(
                    Point { x: 11.79, y: 2.00 },
                    Point { x: 10.00, y: 3.79 },
                    Point { x: 10.00, y: 6.00 },
                ),
                PathEl::LineTo(Point { x: 10.00, y: 34.00 }),
                PathEl::CurveTo(
                    Point { x: 10.00, y: 36.21 },
                    Point { x: 11.79, y: 38.00 },
                    Point { x: 14.00, y: 38.00 },
                ),
                PathEl::LineTo(Point { x: 42.00, y: 38.00 }),
                PathEl::CurveTo(
                    Point { x: 44.21, y: 38.00 },
                    Point { x: 46.00, y: 36.21 },
                    Point { x: 46.00, y: 34.00 },
                ),
                PathEl::LineTo(Point { x: 46.00, y: 6.00 }),
                PathEl::CurveTo(
                    Point { x: 46.00, y: 3.79 },
                    Point { x: 44.21, y: 2.00 },
                    Point { x: 42.00, y: 2.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 42.00, y: 34.00 }),
                PathEl::LineTo(Point { x: 14.00, y: 34.00 }),
                PathEl::LineTo(Point { x: 14.00, y: 6.00 }),
                PathEl::LineTo(Point { x: 42.00, y: 6.00 }),
                PathEl::LineTo(Point { x: 42.00, y: 34.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 26.00, y: 30.00 }),
                PathEl::LineTo(Point { x: 34.00, y: 14.00 }),
                PathEl::LineTo(Point { x: 34.00, y: 10.00 }),
                PathEl::LineTo(Point { x: 22.00, y: 10.00 }),
                PathEl::LineTo(Point { x: 22.00, y: 14.00 }),
                PathEl::LineTo(Point { x: 30.00, y: 14.00 }),
                PathEl::LineTo(Point { x: 22.00, y: 30.00 }),
                PathEl::LineTo(Point { x: 26.00, y: 30.00 }),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct Sync {
    size: f64,
    color: Color,
}

impl Sync {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for Sync {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 24.00, y: 8.00 }),
                PathEl::LineTo(Point { x: 24.00, y: 2.00 }),
                PathEl::LineTo(Point { x: 16.00, y: 10.00 }),
                PathEl::LineTo(Point { x: 24.00, y: 18.00 }),
                PathEl::LineTo(Point { x: 24.00, y: 12.00 }),
                PathEl::CurveTo(
                    Point { x: 30.63, y: 12.00 },
                    Point { x: 36.00, y: 17.37 },
                    Point { x: 36.00, y: 24.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 36.00, y: 26.03 },
                    Point { x: 35.49, y: 27.93 },
                    Point { x: 34.61, y: 29.61 },
                ),
                PathEl::LineTo(Point { x: 37.53, y: 32.53 }),
                PathEl::CurveTo(
                    Point { x: 39.08, y: 30.05 },
                    Point { x: 40.00, y: 27.14 },
                    Point { x: 40.00, y: 24.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 40.00, y: 15.16 },
                    Point { x: 32.84, y: 8.00 },
                    Point { x: 24.00, y: 8.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 24.00, y: 36.00 }),
                PathEl::CurveTo(
                    Point { x: 17.37, y: 36.00 },
                    Point { x: 12.00, y: 30.63 },
                    Point { x: 12.00, y: 24.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 12.00, y: 21.97 },
                    Point { x: 12.51, y: 20.07 },
                    Point { x: 13.39, y: 18.39 },
                ),
                PathEl::LineTo(Point { x: 10.47, y: 15.47 }),
                PathEl::CurveTo(
                    Point { x: 8.92, y: 17.95 },
                    Point { x: 8.00, y: 20.86 },
                    Point { x: 8.00, y: 24.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 8.00, y: 32.84 },
                    Point { x: 15.16, y: 40.00 },
                    Point { x: 24.00, y: 40.00 },
                ),
                PathEl::LineTo(Point { x: 24.00, y: 46.00 }),
                PathEl::LineTo(Point { x: 32.00, y: 38.00 }),
                PathEl::LineTo(Point { x: 24.00, y: 30.00 }),
                PathEl::LineTo(Point { x: 24.00, y: 36.00 }),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct CloudDone {
    size: f64,
    color: Color,
}

impl CloudDone {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for CloudDone {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 38.71, y: 20.07 }),
                PathEl::CurveTo(
                    Point { x: 37.35, y: 13.19 },
                    Point { x: 31.28, y: 8.00 },
                    Point { x: 24.00, y: 8.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 18.22, y: 8.00 },
                    Point { x: 13.21, y: 11.28 },
                    Point { x: 10.70, y: 16.07 },
                ),
                PathEl::CurveTo(
                    Point { x: 4.69, y: 16.72 },
                    Point { x: 0.00, y: 21.81 },
                    Point { x: 0.00, y: 28.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 0.00, y: 34.63 },
                    Point { x: 5.37, y: 40.00 },
                    Point { x: 12.00, y: 40.00 },
                ),
                PathEl::LineTo(Point { x: 38.00, y: 40.00 }),
                PathEl::CurveTo(
                    Point { x: 43.52, y: 40.00 },
                    Point { x: 48.00, y: 35.52 },
                    Point { x: 48.00, y: 30.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 48.00, y: 24.72 },
                    Point { x: 43.89, y: 20.44 },
                    Point { x: 38.71, y: 20.07 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 20.00, y: 34.00 }),
                PathEl::LineTo(Point { x: 13.00, y: 27.00 }),
                PathEl::LineTo(Point { x: 15.83, y: 24.17 }),
                PathEl::LineTo(Point { x: 20.00, y: 28.34 }),
                PathEl::LineTo(Point { x: 30.35, y: 17.99 }),
                PathEl::LineTo(Point { x: 33.18, y: 20.82 }),
                PathEl::LineTo(Point { x: 20.00, y: 34.00 }),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct MonochromePhotos {
    size: f64,
    color: Color,
}

impl MonochromePhotos {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for MonochromePhotos {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 24.00, y: 16.00 }),
                PathEl::LineTo(Point { x: 24.00, y: 19.60 }),
                PathEl::CurveTo(
                    Point { x: 27.50, y: 19.60 },
                    Point { x: 30.40, y: 22.50 },
                    Point { x: 30.40, y: 26.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 30.40, y: 29.50 },
                    Point { x: 27.50, y: 32.40 },
                    Point { x: 24.00, y: 32.40 },
                ),
                PathEl::LineTo(Point { x: 24.00, y: 36.00 }),
                PathEl::CurveTo(
                    Point { x: 29.50, y: 36.00 },
                    Point { x: 34.00, y: 31.50 },
                    Point { x: 34.00, y: 26.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 34.00, y: 20.50 },
                    Point { x: 29.50, y: 16.00 },
                    Point { x: 24.00, y: 16.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 17.60, y: 26.00 }),
                PathEl::CurveTo(
                    Point { x: 17.60, y: 29.50 },
                    Point { x: 20.50, y: 32.40 },
                    Point { x: 24.00, y: 32.40 },
                ),
                PathEl::LineTo(Point { x: 24.00, y: 19.60 }),
                PathEl::CurveTo(
                    Point { x: 20.50, y: 19.60 },
                    Point { x: 17.60, y: 22.50 },
                    Point { x: 17.60, y: 26.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 24.00, y: 16.00 }),
                PathEl::LineTo(Point { x: 24.00, y: 19.60 }),
                PathEl::CurveTo(
                    Point { x: 27.50, y: 19.60 },
                    Point { x: 30.40, y: 22.50 },
                    Point { x: 30.40, y: 26.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 30.40, y: 29.50 },
                    Point { x: 27.50, y: 32.40 },
                    Point { x: 24.00, y: 32.40 },
                ),
                PathEl::LineTo(Point { x: 24.00, y: 36.00 }),
                PathEl::CurveTo(
                    Point { x: 29.50, y: 36.00 },
                    Point { x: 34.00, y: 31.50 },
                    Point { x: 34.00, y: 26.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 34.00, y: 20.50 },
                    Point { x: 29.50, y: 16.00 },
                    Point { x: 24.00, y: 16.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 17.60, y: 26.00 }),
                PathEl::CurveTo(
                    Point { x: 17.60, y: 29.50 },
                    Point { x: 20.50, y: 32.40 },
                    Point { x: 24.00, y: 32.40 },
                ),
                PathEl::LineTo(Point { x: 24.00, y: 19.60 }),
                PathEl::CurveTo(
                    Point { x: 20.50, y: 19.60 },
                    Point { x: 17.60, y: 22.50 },
                    Point { x: 17.60, y: 26.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 40.00, y: 10.00 }),
                PathEl::LineTo(Point { x: 33.70, y: 10.00 }),
                PathEl::LineTo(Point { x: 30.00, y: 6.00 }),
                PathEl::LineTo(Point { x: 18.00, y: 6.00 }),
                PathEl::LineTo(Point { x: 14.30, y: 10.00 }),
                PathEl::LineTo(Point { x: 8.00, y: 10.00 }),
                PathEl::CurveTo(
                    Point { x: 5.80, y: 10.00 },
                    Point { x: 4.00, y: 11.80 },
                    Point { x: 4.00, y: 14.00 },
                ),
                PathEl::LineTo(Point { x: 4.00, y: 38.00 }),
                PathEl::CurveTo(
                    Point { x: 4.00, y: 40.20 },
                    Point { x: 5.80, y: 42.00 },
                    Point { x: 8.00, y: 42.00 },
                ),
                PathEl::LineTo(Point { x: 40.00, y: 42.00 }),
                PathEl::CurveTo(
                    Point { x: 42.20, y: 42.00 },
                    Point { x: 44.00, y: 40.20 },
                    Point { x: 44.00, y: 38.00 },
                ),
                PathEl::LineTo(Point { x: 44.00, y: 14.00 }),
                PathEl::CurveTo(
                    Point { x: 44.00, y: 11.80 },
                    Point { x: 42.20, y: 10.00 },
                    Point { x: 40.00, y: 10.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 40.00, y: 38.00 }),
                PathEl::LineTo(Point { x: 24.00, y: 38.00 }),
                PathEl::LineTo(Point { x: 24.00, y: 36.00 }),
                PathEl::CurveTo(
                    Point { x: 18.50, y: 36.00 },
                    Point { x: 14.00, y: 31.50 },
                    Point { x: 14.00, y: 26.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 14.00, y: 20.50 },
                    Point { x: 18.50, y: 16.00 },
                    Point { x: 24.00, y: 16.00 },
                ),
                PathEl::LineTo(Point { x: 24.00, y: 14.00 }),
                PathEl::LineTo(Point { x: 40.00, y: 14.00 }),
                PathEl::LineTo(Point { x: 40.00, y: 38.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 34.00, y: 26.00 }),
                PathEl::CurveTo(
                    Point { x: 34.00, y: 20.50 },
                    Point { x: 29.50, y: 16.00 },
                    Point { x: 24.00, y: 16.00 },
                ),
                PathEl::LineTo(Point { x: 24.00, y: 19.60 }),
                PathEl::CurveTo(
                    Point { x: 27.50, y: 19.60 },
                    Point { x: 30.40, y: 22.50 },
                    Point { x: 30.40, y: 26.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 30.40, y: 29.50 },
                    Point { x: 27.50, y: 32.40 },
                    Point { x: 24.00, y: 32.40 },
                ),
                PathEl::LineTo(Point { x: 24.00, y: 36.00 }),
                PathEl::CurveTo(
                    Point { x: 29.50, y: 36.00 },
                    Point { x: 34.00, y: 31.50 },
                    Point { x: 34.00, y: 26.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 17.60, y: 26.00 }),
                PathEl::CurveTo(
                    Point { x: 17.60, y: 29.50 },
                    Point { x: 20.50, y: 32.40 },
                    Point { x: 24.00, y: 32.40 },
                ),
                PathEl::LineTo(Point { x: 24.00, y: 19.60 }),
                PathEl::CurveTo(
                    Point { x: 20.50, y: 19.60 },
                    Point { x: 17.60, y: 22.50 },
                    Point { x: 17.60, y: 26.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 17.60, y: 26.00 }),
                PathEl::CurveTo(
                    Point { x: 17.60, y: 29.50 },
                    Point { x: 20.50, y: 32.40 },
                    Point { x: 24.00, y: 32.40 },
                ),
                PathEl::LineTo(Point { x: 24.00, y: 19.60 }),
                PathEl::CurveTo(
                    Point { x: 20.50, y: 19.60 },
                    Point { x: 17.60, y: 22.50 },
                    Point { x: 17.60, y: 26.00 },
                ),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct LocalLibrary {
    size: f64,
    color: Color,
}

impl LocalLibrary {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for LocalLibrary {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 24.00, y: 23.09 }),
                PathEl::CurveTo(
                    Point { x: 19.27, y: 18.70 },
                    Point { x: 12.96, y: 16.00 },
                    Point { x: 6.00, y: 16.00 },
                ),
                PathEl::LineTo(Point { x: 6.00, y: 38.00 }),
                PathEl::CurveTo(
                    Point { x: 12.96, y: 38.00 },
                    Point { x: 19.27, y: 40.70 },
                    Point { x: 24.00, y: 45.09 },
                ),
                PathEl::CurveTo(
                    Point { x: 28.73, y: 40.70 },
                    Point { x: 35.04, y: 38.00 },
                    Point { x: 42.00, y: 38.00 },
                ),
                PathEl::LineTo(Point { x: 42.00, y: 16.00 }),
                PathEl::CurveTo(
                    Point { x: 35.04, y: 16.00 },
                    Point { x: 28.73, y: 18.70 },
                    Point { x: 24.00, y: 23.09 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 24.00, y: 16.00 }),
                PathEl::CurveTo(
                    Point { x: 27.31, y: 16.00 },
                    Point { x: 30.00, y: 13.31 },
                    Point { x: 30.00, y: 10.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 30.00, y: 6.69 },
                    Point { x: 27.31, y: 4.00 },
                    Point { x: 24.00, y: 4.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 20.69, y: 4.00 },
                    Point { x: 18.00, y: 6.69 },
                    Point { x: 18.00, y: 10.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 18.00, y: 13.31 },
                    Point { x: 20.69, y: 16.00 },
                    Point { x: 24.00, y: 16.00 },
                ),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct HotTub {
    size: f64,
    color: Color,
}

impl HotTub {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for HotTub {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            Circle {
                center: Point { x: 14.00, y: 12.00 },
                radius: 4.00,
            },
            &brush,
        );
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 22.30, y: 24.00 }),
                PathEl::CurveTo(
                    Point { x: 21.69, y: 23.55 },
                    Point { x: 21.13, y: 23.07 },
                    Point { x: 20.66, y: 22.56 },
                ),
                PathEl::LineTo(Point { x: 17.86, y: 19.46 }),
                PathEl::CurveTo(
                    Point { x: 17.48, y: 19.04 },
                    Point { x: 17.00, y: 18.70 },
                    Point { x: 16.48, y: 18.46 },
                ),
                PathEl::CurveTo(
                    Point { x: 15.90, y: 18.18 },
                    Point { x: 15.24, y: 18.00 },
                    Point { x: 14.56, y: 18.00 },
                ),
                PathEl::LineTo(Point { x: 14.50, y: 18.00 }),
                PathEl::CurveTo(
                    Point { x: 12.02, y: 18.00 },
                    Point { x: 10.00, y: 20.02 },
                    Point { x: 10.00, y: 22.50 },
                ),
                PathEl::LineTo(Point { x: 10.00, y: 24.00 }),
                PathEl::LineTo(Point { x: 4.00, y: 24.00 }),
                PathEl::LineTo(Point { x: 4.00, y: 40.00 }),
                PathEl::CurveTo(
                    Point { x: 4.00, y: 42.21 },
                    Point { x: 5.79, y: 44.00 },
                    Point { x: 8.00, y: 44.00 },
                ),
                PathEl::LineTo(Point { x: 40.00, y: 44.00 }),
                PathEl::CurveTo(
                    Point { x: 42.21, y: 44.00 },
                    Point { x: 44.00, y: 42.21 },
                    Point { x: 44.00, y: 40.00 },
                ),
                PathEl::LineTo(Point { x: 44.00, y: 24.00 }),
                PathEl::LineTo(Point { x: 22.30, y: 24.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 14.00, y: 40.00 }),
                PathEl::LineTo(Point { x: 10.00, y: 40.00 }),
                PathEl::LineTo(Point { x: 10.00, y: 28.00 }),
                PathEl::LineTo(Point { x: 14.00, y: 28.00 }),
                PathEl::LineTo(Point { x: 14.00, y: 40.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 22.00, y: 40.00 }),
                PathEl::LineTo(Point { x: 18.00, y: 40.00 }),
                PathEl::LineTo(Point { x: 18.00, y: 28.00 }),
                PathEl::LineTo(Point { x: 22.00, y: 28.00 }),
                PathEl::LineTo(Point { x: 22.00, y: 40.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 30.00, y: 40.00 }),
                PathEl::LineTo(Point { x: 26.00, y: 40.00 }),
                PathEl::LineTo(Point { x: 26.00, y: 28.00 }),
                PathEl::LineTo(Point { x: 30.00, y: 28.00 }),
                PathEl::LineTo(Point { x: 30.00, y: 40.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 38.00, y: 40.00 }),
                PathEl::LineTo(Point { x: 34.00, y: 40.00 }),
                PathEl::LineTo(Point { x: 34.00, y: 28.00 }),
                PathEl::LineTo(Point { x: 38.00, y: 28.00 }),
                PathEl::LineTo(Point { x: 38.00, y: 40.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 37.31, y: 11.71 }),
                PathEl::LineTo(Point { x: 37.17, y: 11.58 }),
                PathEl::CurveTo(
                    Point { x: 36.02, y: 10.35 },
                    Point { x: 35.54, y: 8.76 },
                    Point { x: 35.83, y: 7.19 },
                ),
                PathEl::LineTo(Point { x: 36.00, y: 6.00 }),
                PathEl::LineTo(Point { x: 32.22, y: 6.00 }),
                PathEl::LineTo(Point { x: 32.09, y: 6.85 }),
                PathEl::CurveTo(
                    Point { x: 31.68, y: 9.57 },
                    Point { x: 32.63, y: 12.28 },
                    Point { x: 34.69, y: 14.28 },
                ),
                PathEl::LineTo(Point { x: 34.82, y: 14.40 }),
                PathEl::CurveTo(
                    Point { x: 35.97, y: 15.63 },
                    Point { x: 36.46, y: 17.23 },
                    Point { x: 36.17, y: 18.80 },
                ),
                PathEl::LineTo(Point { x: 35.95, y: 20.00 }),
                PathEl::LineTo(Point { x: 39.78, y: 20.00 }),
                PathEl::LineTo(Point { x: 39.91, y: 19.15 }),
                PathEl::CurveTo(
                    Point { x: 40.31, y: 16.43 },
                    Point { x: 39.37, y: 13.72 },
                    Point { x: 37.31, y: 11.71 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 29.31, y: 11.71 }),
                PathEl::LineTo(Point { x: 29.17, y: 11.58 }),
                PathEl::CurveTo(
                    Point { x: 28.02, y: 10.35 },
                    Point { x: 27.54, y: 8.76 },
                    Point { x: 27.83, y: 7.19 },
                ),
                PathEl::LineTo(Point { x: 28.00, y: 6.00 }),
                PathEl::LineTo(Point { x: 24.22, y: 6.00 }),
                PathEl::LineTo(Point { x: 24.09, y: 6.85 }),
                PathEl::CurveTo(
                    Point { x: 23.68, y: 9.57 },
                    Point { x: 24.63, y: 12.28 },
                    Point { x: 26.69, y: 14.28 },
                ),
                PathEl::LineTo(Point { x: 26.82, y: 14.40 }),
                PathEl::CurveTo(
                    Point { x: 27.97, y: 15.63 },
                    Point { x: 28.46, y: 17.23 },
                    Point { x: 28.17, y: 18.80 },
                ),
                PathEl::LineTo(Point { x: 27.95, y: 20.00 }),
                PathEl::LineTo(Point { x: 31.78, y: 20.00 }),
                PathEl::LineTo(Point { x: 31.91, y: 19.15 }),
                PathEl::CurveTo(
                    Point { x: 32.31, y: 16.43 },
                    Point { x: 31.37, y: 13.72 },
                    Point { x: 29.31, y: 11.71 },
                ),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct Label {
    size: f64,
    color: Color,
}

impl Label {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for Label {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 35.27, y: 11.69 }),
                PathEl::CurveTo(
                    Point { x: 34.54, y: 10.67 },
                    Point { x: 33.35, y: 10.00 },
                    Point { x: 32.00, y: 10.00 },
                ),
                PathEl::LineTo(Point { x: 10.00, y: 10.02 }),
                PathEl::CurveTo(
                    Point { x: 7.79, y: 10.02 },
                    Point { x: 6.00, y: 11.79 },
                    Point { x: 6.00, y: 14.00 },
                ),
                PathEl::LineTo(Point { x: 6.00, y: 34.00 }),
                PathEl::CurveTo(
                    Point { x: 6.00, y: 36.21 },
                    Point { x: 7.79, y: 37.98 },
                    Point { x: 10.00, y: 37.98 },
                ),
                PathEl::LineTo(Point { x: 32.00, y: 38.00 }),
                PathEl::CurveTo(
                    Point { x: 33.35, y: 38.00 },
                    Point { x: 34.54, y: 37.33 },
                    Point { x: 35.27, y: 36.31 },
                ),
                PathEl::LineTo(Point { x: 44.00, y: 24.00 }),
                PathEl::LineTo(Point { x: 35.27, y: 11.69 }),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct AssignmentInd {
    size: f64,
    color: Color,
}

impl AssignmentInd {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for AssignmentInd {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 38.00, y: 6.00 }),
                PathEl::LineTo(Point { x: 29.63, y: 6.00 }),
                PathEl::CurveTo(
                    Point { x: 28.81, y: 3.68 },
                    Point { x: 26.61, y: 2.00 },
                    Point { x: 24.00, y: 2.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 21.39, y: 2.00 },
                    Point { x: 19.19, y: 3.68 },
                    Point { x: 18.37, y: 6.00 },
                ),
                PathEl::LineTo(Point { x: 10.00, y: 6.00 }),
                PathEl::CurveTo(
                    Point { x: 7.79, y: 6.00 },
                    Point { x: 6.00, y: 7.79 },
                    Point { x: 6.00, y: 10.00 },
                ),
                PathEl::LineTo(Point { x: 6.00, y: 38.00 }),
                PathEl::CurveTo(
                    Point { x: 6.00, y: 40.21 },
                    Point { x: 7.79, y: 42.00 },
                    Point { x: 10.00, y: 42.00 },
                ),
                PathEl::LineTo(Point { x: 38.00, y: 42.00 }),
                PathEl::CurveTo(
                    Point { x: 40.21, y: 42.00 },
                    Point { x: 42.00, y: 40.21 },
                    Point { x: 42.00, y: 38.00 },
                ),
                PathEl::LineTo(Point { x: 42.00, y: 10.00 }),
                PathEl::CurveTo(
                    Point { x: 42.00, y: 7.79 },
                    Point { x: 40.21, y: 6.00 },
                    Point { x: 38.00, y: 6.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 24.00, y: 6.00 }),
                PathEl::CurveTo(
                    Point { x: 25.10, y: 6.00 },
                    Point { x: 26.00, y: 6.89 },
                    Point { x: 26.00, y: 8.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 26.00, y: 9.11 },
                    Point { x: 25.10, y: 10.00 },
                    Point { x: 24.00, y: 10.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 22.90, y: 10.00 },
                    Point { x: 22.00, y: 9.11 },
                    Point { x: 22.00, y: 8.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 22.00, y: 6.89 },
                    Point { x: 22.90, y: 6.00 },
                    Point { x: 24.00, y: 6.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 24.00, y: 14.00 }),
                PathEl::CurveTo(
                    Point { x: 27.31, y: 14.00 },
                    Point { x: 30.00, y: 16.69 },
                    Point { x: 30.00, y: 20.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 30.00, y: 23.32 },
                    Point { x: 27.31, y: 26.00 },
                    Point { x: 24.00, y: 26.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 20.69, y: 26.00 },
                    Point { x: 18.00, y: 23.32 },
                    Point { x: 18.00, y: 20.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 18.00, y: 16.69 },
                    Point { x: 20.69, y: 14.00 },
                    Point { x: 24.00, y: 14.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 36.00, y: 38.00 }),
                PathEl::LineTo(Point { x: 12.00, y: 38.00 }),
                PathEl::LineTo(Point { x: 12.00, y: 35.20 }),
                PathEl::CurveTo(
                    Point { x: 12.00, y: 31.20 },
                    Point { x: 20.00, y: 29.00 },
                    Point { x: 24.00, y: 29.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 28.00, y: 29.00 },
                    Point { x: 36.00, y: 31.20 },
                    Point { x: 36.00, y: 35.20 },
                ),
                PathEl::LineTo(Point { x: 36.00, y: 38.00 }),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct QueuePlayNext {
    size: f64,
    color: Color,
}

impl QueuePlayNext {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for QueuePlayNext {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 42.00, y: 6.00 }),
                PathEl::LineTo(Point { x: 6.00, y: 6.00 }),
                PathEl::CurveTo(
                    Point { x: 3.78, y: 6.00 },
                    Point { x: 2.00, y: 7.78 },
                    Point { x: 2.00, y: 10.00 },
                ),
                PathEl::LineTo(Point { x: 2.00, y: 34.00 }),
                PathEl::CurveTo(
                    Point { x: 2.00, y: 36.20 },
                    Point { x: 3.78, y: 38.00 },
                    Point { x: 6.00, y: 38.00 },
                ),
                PathEl::LineTo(Point { x: 16.00, y: 38.00 }),
                PathEl::LineTo(Point { x: 16.00, y: 42.00 }),
                PathEl::LineTo(Point { x: 32.00, y: 42.00 }),
                PathEl::LineTo(Point { x: 32.00, y: 38.00 }),
                PathEl::LineTo(Point { x: 36.00, y: 38.00 }),
                PathEl::LineTo(Point { x: 36.00, y: 34.00 }),
                PathEl::LineTo(Point { x: 6.00, y: 34.00 }),
                PathEl::LineTo(Point { x: 6.00, y: 10.00 }),
                PathEl::LineTo(Point { x: 42.00, y: 10.00 }),
                PathEl::LineTo(Point { x: 42.00, y: 26.00 }),
                PathEl::LineTo(Point { x: 46.00, y: 26.00 }),
                PathEl::LineTo(Point { x: 46.00, y: 10.00 }),
                PathEl::CurveTo(
                    Point { x: 46.00, y: 7.78 },
                    Point { x: 44.20, y: 6.00 },
                    Point { x: 42.00, y: 6.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 26.00, y: 20.00 }),
                PathEl::LineTo(Point { x: 26.00, y: 14.00 }),
                PathEl::LineTo(Point { x: 22.00, y: 14.00 }),
                PathEl::LineTo(Point { x: 22.00, y: 20.00 }),
                PathEl::LineTo(Point { x: 16.00, y: 20.00 }),
                PathEl::LineTo(Point { x: 16.00, y: 24.00 }),
                PathEl::LineTo(Point { x: 22.00, y: 24.00 }),
                PathEl::LineTo(Point { x: 22.00, y: 30.00 }),
                PathEl::LineTo(Point { x: 26.00, y: 30.00 }),
                PathEl::LineTo(Point { x: 26.00, y: 24.00 }),
                PathEl::LineTo(Point { x: 32.00, y: 24.00 }),
                PathEl::LineTo(Point { x: 32.00, y: 20.00 }),
                PathEl::LineTo(Point { x: 26.00, y: 20.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 48.00, y: 36.00 }),
                PathEl::LineTo(Point { x: 39.00, y: 45.00 }),
                PathEl::LineTo(Point { x: 36.00, y: 42.00 }),
                PathEl::LineTo(Point { x: 42.00, y: 36.00 }),
                PathEl::LineTo(Point { x: 36.00, y: 30.00 }),
                PathEl::LineTo(Point { x: 39.00, y: 27.00 }),
                PathEl::LineTo(Point { x: 48.00, y: 36.00 }),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct SignalCellularConnectedNoInternet0Bar {
    size: f64,
    color: Color,
}

impl SignalCellularConnectedNoInternet0Bar {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for SignalCellularConnectedNoInternet0Bar {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 44.00, y: 16.00 }),
                PathEl::LineTo(Point { x: 44.00, y: 4.00 }),
                PathEl::LineTo(Point { x: 4.00, y: 44.00 }),
                PathEl::LineTo(Point { x: 36.00, y: 44.00 }),
                PathEl::LineTo(Point { x: 36.00, y: 16.00 }),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 40.00, y: 44.00 }),
                PathEl::LineTo(Point { x: 44.00, y: 44.00 }),
                PathEl::LineTo(Point { x: 44.00, y: 40.00 }),
                PathEl::LineTo(Point { x: 40.00, y: 40.00 }),
                PathEl::LineTo(Point { x: 40.00, y: 44.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 40.00, y: 20.00 }),
                PathEl::LineTo(Point { x: 40.00, y: 36.00 }),
                PathEl::LineTo(Point { x: 44.00, y: 36.00 }),
                PathEl::LineTo(Point { x: 44.00, y: 20.00 }),
                PathEl::LineTo(Point { x: 40.00, y: 20.00 }),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct DirectionsWalk {
    size: f64,
    color: Color,
}

impl DirectionsWalk {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for DirectionsWalk {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 27.00, y: 9.00 }),
                PathEl::CurveTo(
                    Point { x: 29.20, y: 9.00 },
                    Point { x: 31.00, y: 7.20 },
                    Point { x: 31.00, y: 5.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 31.00, y: 2.80 },
                    Point { x: 29.20, y: 1.00 },
                    Point { x: 27.00, y: 1.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 24.80, y: 1.00 },
                    Point { x: 23.00, y: 2.80 },
                    Point { x: 23.00, y: 5.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 23.00, y: 7.20 },
                    Point { x: 24.80, y: 9.00 },
                    Point { x: 27.00, y: 9.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 19.50, y: 15.80 }),
                PathEl::LineTo(Point { x: 14.00, y: 44.00 }),
                PathEl::LineTo(Point { x: 18.20, y: 44.00 }),
                PathEl::LineTo(Point { x: 21.70, y: 28.00 }),
                PathEl::LineTo(Point { x: 26.00, y: 32.00 }),
                PathEl::LineTo(Point { x: 26.00, y: 44.00 }),
                PathEl::LineTo(Point { x: 30.00, y: 44.00 }),
                PathEl::LineTo(Point { x: 30.00, y: 28.90 }),
                PathEl::LineTo(Point { x: 25.90, y: 24.80 }),
                PathEl::LineTo(Point { x: 27.10, y: 18.80 }),
                PathEl::CurveTo(
                    Point { x: 29.70, y: 22.00 },
                    Point { x: 33.60, y: 24.00 },
                    Point { x: 38.00, y: 24.00 },
                ),
                PathEl::LineTo(Point { x: 38.00, y: 20.00 }),
                PathEl::CurveTo(
                    Point { x: 34.30, y: 20.00 },
                    Point { x: 31.10, y: 18.00 },
                    Point { x: 29.30, y: 15.10 },
                ),
                PathEl::LineTo(Point { x: 27.40, y: 11.90 }),
                PathEl::CurveTo(
                    Point { x: 26.70, y: 10.70 },
                    Point { x: 25.40, y: 10.00 },
                    Point { x: 24.00, y: 10.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 23.50, y: 10.00 },
                    Point { x: 23.00, y: 10.10 },
                    Point { x: 22.50, y: 10.30 },
                ),
                PathEl::LineTo(Point { x: 12.00, y: 14.60 }),
                PathEl::LineTo(Point { x: 12.00, y: 24.00 }),
                PathEl::LineTo(Point { x: 16.00, y: 24.00 }),
                PathEl::LineTo(Point { x: 16.00, y: 17.30 }),
                PathEl::LineTo(Point { x: 19.50, y: 15.80 }),
            ][..],
            &brush,
        );
    }
}

pub struct BatteryAlert {
    size: f64,
    color: Color,
}

impl BatteryAlert {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for BatteryAlert {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 31.33, y: 8.00 }),
                PathEl::LineTo(Point { x: 28.00, y: 8.00 }),
                PathEl::LineTo(Point { x: 28.00, y: 4.00 }),
                PathEl::LineTo(Point { x: 20.00, y: 4.00 }),
                PathEl::LineTo(Point { x: 20.00, y: 8.00 }),
                PathEl::LineTo(Point { x: 16.67, y: 8.00 }),
                PathEl::CurveTo(
                    Point { x: 15.19, y: 8.00 },
                    Point { x: 14.00, y: 9.19 },
                    Point { x: 14.00, y: 10.67 },
                ),
                PathEl::LineTo(Point { x: 14.00, y: 41.34 }),
                PathEl::CurveTo(
                    Point { x: 14.00, y: 42.81 },
                    Point { x: 15.19, y: 44.01 },
                    Point { x: 16.67, y: 44.01 },
                ),
                PathEl::LineTo(Point { x: 31.34, y: 44.01 }),
                PathEl::CurveTo(
                    Point { x: 32.81, y: 44.01 },
                    Point { x: 34.01, y: 42.82 },
                    Point { x: 34.01, y: 41.34 },
                ),
                PathEl::LineTo(Point { x: 34.01, y: 10.67 }),
                PathEl::CurveTo(
                    Point { x: 34.00, y: 9.19 },
                    Point { x: 32.81, y: 8.00 },
                    Point { x: 31.33, y: 8.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 26.00, y: 36.00 }),
                PathEl::LineTo(Point { x: 22.00, y: 36.00 }),
                PathEl::LineTo(Point { x: 22.00, y: 32.00 }),
                PathEl::LineTo(Point { x: 26.00, y: 32.00 }),
                PathEl::LineTo(Point { x: 26.00, y: 36.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 26.00, y: 28.00 }),
                PathEl::LineTo(Point { x: 22.00, y: 28.00 }),
                PathEl::LineTo(Point { x: 22.00, y: 18.00 }),
                PathEl::LineTo(Point { x: 26.00, y: 18.00 }),
                PathEl::LineTo(Point { x: 26.00, y: 28.00 }),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct SwitchCamera {
    size: f64,
    color: Color,
}

impl SwitchCamera {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for SwitchCamera {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 40.00, y: 8.00 }),
                PathEl::LineTo(Point { x: 33.66, y: 8.00 }),
                PathEl::LineTo(Point { x: 30.00, y: 4.00 }),
                PathEl::LineTo(Point { x: 18.00, y: 4.00 }),
                PathEl::LineTo(Point { x: 14.34, y: 8.00 }),
                PathEl::LineTo(Point { x: 8.00, y: 8.00 }),
                PathEl::CurveTo(
                    Point { x: 5.79, y: 8.00 },
                    Point { x: 4.00, y: 9.79 },
                    Point { x: 4.00, y: 12.00 },
                ),
                PathEl::LineTo(Point { x: 4.00, y: 36.00 }),
                PathEl::CurveTo(
                    Point { x: 4.00, y: 38.21 },
                    Point { x: 5.79, y: 40.00 },
                    Point { x: 8.00, y: 40.00 },
                ),
                PathEl::LineTo(Point { x: 40.00, y: 40.00 }),
                PathEl::CurveTo(
                    Point { x: 42.21, y: 40.00 },
                    Point { x: 44.00, y: 38.21 },
                    Point { x: 44.00, y: 36.00 },
                ),
                PathEl::LineTo(Point { x: 44.00, y: 12.00 }),
                PathEl::CurveTo(
                    Point { x: 44.00, y: 9.79 },
                    Point { x: 42.21, y: 8.00 },
                    Point { x: 40.00, y: 8.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 30.00, y: 31.00 }),
                PathEl::LineTo(Point { x: 30.00, y: 26.00 }),
                PathEl::LineTo(Point { x: 18.00, y: 26.00 }),
                PathEl::LineTo(Point { x: 18.00, y: 31.00 }),
                PathEl::LineTo(Point { x: 11.00, y: 24.00 }),
                PathEl::LineTo(Point { x: 18.00, y: 17.00 }),
                PathEl::LineTo(Point { x: 18.00, y: 22.00 }),
                PathEl::LineTo(Point { x: 30.00, y: 22.00 }),
                PathEl::LineTo(Point { x: 30.00, y: 17.00 }),
                PathEl::LineTo(Point { x: 37.00, y: 24.00 }),
                PathEl::LineTo(Point { x: 30.00, y: 31.00 }),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct TagFaces {
    size: f64,
    color: Color,
}

impl TagFaces {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for TagFaces {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 23.99, y: 4.00 }),
                PathEl::CurveTo(
                    Point { x: 12.94, y: 4.00 },
                    Point { x: 4.00, y: 12.95 },
                    Point { x: 4.00, y: 24.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 4.00, y: 35.05 },
                    Point { x: 12.94, y: 44.00 },
                    Point { x: 23.99, y: 44.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 35.04, y: 44.00 },
                    Point { x: 44.00, y: 35.05 },
                    Point { x: 44.00, y: 24.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 44.00, y: 12.95 },
                    Point { x: 35.04, y: 4.00 },
                    Point { x: 23.99, y: 4.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 24.00, y: 40.00 }),
                PathEl::CurveTo(
                    Point { x: 15.16, y: 40.00 },
                    Point { x: 8.00, y: 32.84 },
                    Point { x: 8.00, y: 24.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 8.00, y: 15.16 },
                    Point { x: 15.16, y: 8.00 },
                    Point { x: 24.00, y: 8.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 32.84, y: 8.00 },
                    Point { x: 40.00, y: 15.16 },
                    Point { x: 40.00, y: 24.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 40.00, y: 32.84 },
                    Point { x: 32.84, y: 40.00 },
                    Point { x: 24.00, y: 40.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 31.00, y: 22.00 }),
                PathEl::CurveTo(
                    Point { x: 32.66, y: 22.00 },
                    Point { x: 34.00, y: 20.66 },
                    Point { x: 34.00, y: 19.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 34.00, y: 17.34 },
                    Point { x: 32.66, y: 16.00 },
                    Point { x: 31.00, y: 16.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 29.34, y: 16.00 },
                    Point { x: 28.00, y: 17.34 },
                    Point { x: 28.00, y: 19.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 28.00, y: 20.66 },
                    Point { x: 29.34, y: 22.00 },
                    Point { x: 31.00, y: 22.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 17.00, y: 22.00 }),
                PathEl::CurveTo(
                    Point { x: 18.66, y: 22.00 },
                    Point { x: 20.00, y: 20.66 },
                    Point { x: 20.00, y: 19.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 20.00, y: 17.34 },
                    Point { x: 18.66, y: 16.00 },
                    Point { x: 17.00, y: 16.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 15.34, y: 16.00 },
                    Point { x: 14.00, y: 17.34 },
                    Point { x: 14.00, y: 19.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 14.00, y: 20.66 },
                    Point { x: 15.34, y: 22.00 },
                    Point { x: 17.00, y: 22.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 24.00, y: 35.00 }),
                PathEl::CurveTo(
                    Point { x: 28.66, y: 35.00 },
                    Point { x: 32.61, y: 32.09 },
                    Point { x: 34.21, y: 28.00 },
                ),
                PathEl::LineTo(Point { x: 13.79, y: 28.00 }),
                PathEl::CurveTo(
                    Point { x: 15.39, y: 32.09 },
                    Point { x: 19.34, y: 35.00 },
                    Point { x: 24.00, y: 35.00 },
                ),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct SimCardAlert {
    size: f64,
    color: Color,
}

impl SimCardAlert {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for SimCardAlert {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 36.00, y: 4.00 }),
                PathEl::LineTo(Point { x: 20.00, y: 4.00 }),
                PathEl::LineTo(Point { x: 8.05, y: 16.00 }),
                PathEl::LineTo(Point { x: 8.00, y: 40.00 }),
                PathEl::CurveTo(
                    Point { x: 8.00, y: 42.20 },
                    Point { x: 9.80, y: 44.00 },
                    Point { x: 12.00, y: 44.00 },
                ),
                PathEl::LineTo(Point { x: 36.00, y: 44.00 }),
                PathEl::CurveTo(
                    Point { x: 38.20, y: 44.00 },
                    Point { x: 40.00, y: 42.20 },
                    Point { x: 40.00, y: 40.00 },
                ),
                PathEl::LineTo(Point { x: 40.00, y: 8.00 }),
                PathEl::CurveTo(
                    Point { x: 40.00, y: 5.80 },
                    Point { x: 38.20, y: 4.00 },
                    Point { x: 36.00, y: 4.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 26.00, y: 34.00 }),
                PathEl::LineTo(Point { x: 22.00, y: 34.00 }),
                PathEl::LineTo(Point { x: 22.00, y: 30.00 }),
                PathEl::LineTo(Point { x: 26.00, y: 30.00 }),
                PathEl::LineTo(Point { x: 26.00, y: 34.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 26.00, y: 26.00 }),
                PathEl::LineTo(Point { x: 22.00, y: 26.00 }),
                PathEl::LineTo(Point { x: 22.00, y: 16.00 }),
                PathEl::LineTo(Point { x: 26.00, y: 16.00 }),
                PathEl::LineTo(Point { x: 26.00, y: 26.00 }),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct VerticalAlignBottom {
    size: f64,
    color: Color,
}

impl VerticalAlignBottom {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for VerticalAlignBottom {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 32.00, y: 26.00 }),
                PathEl::LineTo(Point { x: 26.00, y: 26.00 }),
                PathEl::LineTo(Point { x: 26.00, y: 6.00 }),
                PathEl::LineTo(Point { x: 22.00, y: 6.00 }),
                PathEl::LineTo(Point { x: 22.00, y: 26.00 }),
                PathEl::LineTo(Point { x: 16.00, y: 26.00 }),
                PathEl::LineTo(Point { x: 24.00, y: 34.00 }),
                PathEl::LineTo(Point { x: 32.00, y: 26.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 8.00, y: 38.00 }),
                PathEl::LineTo(Point { x: 8.00, y: 42.00 }),
                PathEl::LineTo(Point { x: 40.00, y: 42.00 }),
                PathEl::LineTo(Point { x: 40.00, y: 38.00 }),
                PathEl::LineTo(Point { x: 8.00, y: 38.00 }),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct CameraFront {
    size: f64,
    color: Color,
}

impl CameraFront {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for CameraFront {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 20.00, y: 40.00 }),
                PathEl::LineTo(Point { x: 10.00, y: 40.00 }),
                PathEl::LineTo(Point { x: 10.00, y: 44.00 }),
                PathEl::LineTo(Point { x: 20.00, y: 44.00 }),
                PathEl::LineTo(Point { x: 20.00, y: 48.00 }),
                PathEl::LineTo(Point { x: 26.00, y: 42.00 }),
                PathEl::LineTo(Point { x: 20.00, y: 36.00 }),
                PathEl::LineTo(Point { x: 20.00, y: 40.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 28.00, y: 40.00 }),
                PathEl::LineTo(Point { x: 28.00, y: 44.00 }),
                PathEl::LineTo(Point { x: 38.00, y: 44.00 }),
                PathEl::LineTo(Point { x: 38.00, y: 40.00 }),
                PathEl::LineTo(Point { x: 28.00, y: 40.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 24.00, y: 16.00 }),
                PathEl::CurveTo(
                    Point { x: 26.21, y: 16.00 },
                    Point { x: 28.00, y: 14.21 },
                    Point { x: 28.00, y: 12.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 28.00, y: 9.79 },
                    Point { x: 26.21, y: 8.00 },
                    Point { x: 24.00, y: 8.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 21.79, y: 8.00 },
                    Point { x: 20.01, y: 9.79 },
                    Point { x: 20.01, y: 12.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 20.02, y: 14.21 },
                    Point { x: 21.79, y: 16.00 },
                    Point { x: 24.00, y: 16.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 34.00, y: 0.00 }),
                PathEl::LineTo(Point { x: 14.00, y: 0.00 }),
                PathEl::CurveTo(
                    Point { x: 11.79, y: 0.00 },
                    Point { x: 10.00, y: 1.79 },
                    Point { x: 10.00, y: 4.00 },
                ),
                PathEl::LineTo(Point { x: 10.00, y: 32.00 }),
                PathEl::CurveTo(
                    Point { x: 10.00, y: 34.21 },
                    Point { x: 11.79, y: 36.00 },
                    Point { x: 14.00, y: 36.00 },
                ),
                PathEl::LineTo(Point { x: 34.00, y: 36.00 }),
                PathEl::CurveTo(
                    Point { x: 36.21, y: 36.00 },
                    Point { x: 38.00, y: 34.21 },
                    Point { x: 38.00, y: 32.00 },
                ),
                PathEl::LineTo(Point { x: 38.00, y: 4.00 }),
                PathEl::CurveTo(
                    Point { x: 38.00, y: 1.79 },
                    Point { x: 36.21, y: 0.00 },
                    Point { x: 34.00, y: 0.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 14.00, y: 4.00 }),
                PathEl::LineTo(Point { x: 34.00, y: 4.00 }),
                PathEl::LineTo(Point { x: 34.00, y: 25.00 }),
                PathEl::CurveTo(
                    Point { x: 34.00, y: 21.67 },
                    Point { x: 27.33, y: 20.00 },
                    Point { x: 24.00, y: 20.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 20.67, y: 20.00 },
                    Point { x: 14.00, y: 21.67 },
                    Point { x: 14.00, y: 25.00 },
                ),
                PathEl::LineTo(Point { x: 14.00, y: 4.00 }),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct HdrWeak {
    size: f64,
    color: Color,
}

impl HdrWeak {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for HdrWeak {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 10.00, y: 16.00 }),
                PathEl::CurveTo(
                    Point { x: 5.58, y: 16.00 },
                    Point { x: 2.00, y: 19.58 },
                    Point { x: 2.00, y: 24.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 2.00, y: 28.42 },
                    Point { x: 5.58, y: 32.00 },
                    Point { x: 10.00, y: 32.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 14.42, y: 32.00 },
                    Point { x: 18.00, y: 28.42 },
                    Point { x: 18.00, y: 24.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 18.00, y: 19.58 },
                    Point { x: 14.42, y: 16.00 },
                    Point { x: 10.00, y: 16.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 34.00, y: 12.00 }),
                PathEl::CurveTo(
                    Point { x: 27.37, y: 12.00 },
                    Point { x: 22.00, y: 17.37 },
                    Point { x: 22.00, y: 24.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 22.00, y: 30.63 },
                    Point { x: 27.37, y: 36.00 },
                    Point { x: 34.00, y: 36.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 40.63, y: 36.00 },
                    Point { x: 46.00, y: 30.63 },
                    Point { x: 46.00, y: 24.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 46.00, y: 17.37 },
                    Point { x: 40.63, y: 12.00 },
                    Point { x: 34.00, y: 12.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 34.00, y: 32.00 }),
                PathEl::CurveTo(
                    Point { x: 29.58, y: 32.00 },
                    Point { x: 26.00, y: 28.42 },
                    Point { x: 26.00, y: 24.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 26.00, y: 19.58 },
                    Point { x: 29.58, y: 16.00 },
                    Point { x: 34.00, y: 16.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 38.42, y: 16.00 },
                    Point { x: 42.00, y: 19.58 },
                    Point { x: 42.00, y: 24.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 42.00, y: 28.42 },
                    Point { x: 38.42, y: 32.00 },
                    Point { x: 34.00, y: 32.00 },
                ),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct TabletAndroid {
    size: f64,
    color: Color,
}

impl TabletAndroid {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for TabletAndroid {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 36.00, y: 0.00 }),
                PathEl::LineTo(Point { x: 12.00, y: 0.00 }),
                PathEl::CurveTo(
                    Point { x: 8.68, y: 0.00 },
                    Point { x: 6.00, y: 2.68 },
                    Point { x: 6.00, y: 6.00 },
                ),
                PathEl::LineTo(Point { x: 6.00, y: 42.00 }),
                PathEl::CurveTo(
                    Point { x: 6.00, y: 45.32 },
                    Point { x: 8.68, y: 48.00 },
                    Point { x: 12.00, y: 48.00 },
                ),
                PathEl::LineTo(Point { x: 36.00, y: 48.00 }),
                PathEl::CurveTo(
                    Point { x: 39.32, y: 48.00 },
                    Point { x: 42.00, y: 45.32 },
                    Point { x: 42.00, y: 42.00 },
                ),
                PathEl::LineTo(Point { x: 42.00, y: 6.00 }),
                PathEl::CurveTo(
                    Point { x: 42.00, y: 2.68 },
                    Point { x: 39.32, y: 0.00 },
                    Point { x: 36.00, y: 0.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 28.00, y: 44.00 }),
                PathEl::LineTo(Point { x: 20.00, y: 44.00 }),
                PathEl::LineTo(Point { x: 20.00, y: 42.00 }),
                PathEl::LineTo(Point { x: 28.00, y: 42.00 }),
                PathEl::LineTo(Point { x: 28.00, y: 44.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 38.50, y: 38.00 }),
                PathEl::LineTo(Point { x: 9.50, y: 38.00 }),
                PathEl::LineTo(Point { x: 9.50, y: 6.00 }),
                PathEl::LineTo(Point { x: 38.50, y: 6.00 }),
                PathEl::LineTo(Point { x: 38.50, y: 38.00 }),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct EditLocation {
    size: f64,
    color: Color,
}

impl EditLocation {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for EditLocation {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 24.00, y: 4.00 }),
                PathEl::CurveTo(
                    Point { x: 16.28, y: 4.00 },
                    Point { x: 10.00, y: 10.28 },
                    Point { x: 10.00, y: 18.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 10.00, y: 28.50 },
                    Point { x: 24.00, y: 44.00 },
                    Point { x: 24.00, y: 44.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 24.00, y: 44.00 },
                    Point { x: 38.00, y: 28.50 },
                    Point { x: 38.00, y: 18.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 38.00, y: 10.28 },
                    Point { x: 31.72, y: 4.00 },
                    Point { x: 24.00, y: 4.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 20.88, y: 24.00 }),
                PathEl::LineTo(Point { x: 18.00, y: 24.00 }),
                PathEl::LineTo(Point { x: 18.00, y: 21.12 }),
                PathEl::LineTo(Point { x: 24.70, y: 14.44 }),
                PathEl::LineTo(Point { x: 27.56, y: 17.30 }),
                PathEl::LineTo(Point { x: 20.88, y: 24.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 29.78, y: 15.10 }),
                PathEl::LineTo(Point { x: 28.38, y: 16.50 }),
                PathEl::LineTo(Point { x: 25.50, y: 13.62 }),
                PathEl::LineTo(Point { x: 26.90, y: 12.22 }),
                PathEl::CurveTo(
                    Point { x: 27.20, y: 11.92 },
                    Point { x: 27.68, y: 11.92 },
                    Point { x: 27.98, y: 12.22 },
                ),
                PathEl::LineTo(Point { x: 29.78, y: 14.02 }),
                PathEl::CurveTo(
                    Point { x: 30.08, y: 14.32 },
                    Point { x: 30.08, y: 14.80 },
                    Point { x: 29.78, y: 15.10 },
                ),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct KeyboardReturn {
    size: f64,
    color: Color,
}

impl KeyboardReturn {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for KeyboardReturn {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 38.00, y: 14.00 }),
                PathEl::LineTo(Point { x: 38.00, y: 22.00 }),
                PathEl::LineTo(Point { x: 11.66, y: 22.00 }),
                PathEl::LineTo(Point { x: 18.83, y: 14.83 }),
                PathEl::LineTo(Point { x: 16.00, y: 12.00 }),
                PathEl::LineTo(Point { x: 4.00, y: 24.00 }),
                PathEl::LineTo(Point { x: 16.00, y: 36.00 }),
                PathEl::LineTo(Point { x: 18.83, y: 33.17 }),
                PathEl::LineTo(Point { x: 11.66, y: 26.00 }),
                PathEl::LineTo(Point { x: 42.00, y: 26.00 }),
                PathEl::LineTo(Point { x: 42.00, y: 14.00 }),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct Bookmark {
    size: f64,
    color: Color,
}

impl Bookmark {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for Bookmark {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 34.00, y: 6.00 }),
                PathEl::LineTo(Point { x: 14.00, y: 6.00 }),
                PathEl::CurveTo(
                    Point { x: 11.79, y: 6.00 },
                    Point { x: 10.02, y: 7.79 },
                    Point { x: 10.02, y: 10.00 },
                ),
                PathEl::LineTo(Point { x: 10.00, y: 42.00 }),
                PathEl::LineTo(Point { x: 24.00, y: 36.00 }),
                PathEl::LineTo(Point { x: 38.00, y: 42.00 }),
                PathEl::LineTo(Point { x: 38.00, y: 10.00 }),
                PathEl::CurveTo(
                    Point { x: 38.00, y: 7.79 },
                    Point { x: 36.21, y: 6.00 },
                    Point { x: 34.00, y: 6.00 },
                ),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct AssignmentReturned {
    size: f64,
    color: Color,
}

impl AssignmentReturned {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for AssignmentReturned {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 38.00, y: 6.00 }),
                PathEl::LineTo(Point { x: 29.63, y: 6.00 }),
                PathEl::CurveTo(
                    Point { x: 28.81, y: 3.68 },
                    Point { x: 26.61, y: 2.00 },
                    Point { x: 24.00, y: 2.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 21.39, y: 2.00 },
                    Point { x: 19.19, y: 3.68 },
                    Point { x: 18.37, y: 6.00 },
                ),
                PathEl::LineTo(Point { x: 10.00, y: 6.00 }),
                PathEl::CurveTo(
                    Point { x: 7.79, y: 6.00 },
                    Point { x: 6.00, y: 7.79 },
                    Point { x: 6.00, y: 10.00 },
                ),
                PathEl::LineTo(Point { x: 6.00, y: 38.00 }),
                PathEl::CurveTo(
                    Point { x: 6.00, y: 40.21 },
                    Point { x: 7.79, y: 42.00 },
                    Point { x: 10.00, y: 42.00 },
                ),
                PathEl::LineTo(Point { x: 38.00, y: 42.00 }),
                PathEl::CurveTo(
                    Point { x: 40.21, y: 42.00 },
                    Point { x: 42.00, y: 40.21 },
                    Point { x: 42.00, y: 38.00 },
                ),
                PathEl::LineTo(Point { x: 42.00, y: 10.00 }),
                PathEl::CurveTo(
                    Point { x: 42.00, y: 7.79 },
                    Point { x: 40.21, y: 6.00 },
                    Point { x: 38.00, y: 6.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 24.00, y: 6.00 }),
                PathEl::CurveTo(
                    Point { x: 25.10, y: 6.00 },
                    Point { x: 26.00, y: 6.89 },
                    Point { x: 26.00, y: 8.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 26.00, y: 9.11 },
                    Point { x: 25.10, y: 10.00 },
                    Point { x: 24.00, y: 10.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 22.90, y: 10.00 },
                    Point { x: 22.00, y: 9.11 },
                    Point { x: 22.00, y: 8.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 22.00, y: 6.89 },
                    Point { x: 22.90, y: 6.00 },
                    Point { x: 24.00, y: 6.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 24.00, y: 36.00 }),
                PathEl::LineTo(Point { x: 14.00, y: 26.00 }),
                PathEl::LineTo(Point { x: 20.00, y: 26.00 }),
                PathEl::LineTo(Point { x: 20.00, y: 18.00 }),
                PathEl::LineTo(Point { x: 28.00, y: 18.00 }),
                PathEl::LineTo(Point { x: 28.00, y: 26.00 }),
                PathEl::LineTo(Point { x: 34.00, y: 26.00 }),
                PathEl::LineTo(Point { x: 24.00, y: 36.00 }),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct Slideshow {
    size: f64,
    color: Color,
}

impl Slideshow {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for Slideshow {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 20.00, y: 16.00 }),
                PathEl::LineTo(Point { x: 20.00, y: 32.00 }),
                PathEl::LineTo(Point { x: 30.00, y: 24.00 }),
                PathEl::LineTo(Point { x: 20.00, y: 16.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 38.00, y: 6.00 }),
                PathEl::LineTo(Point { x: 10.00, y: 6.00 }),
                PathEl::CurveTo(
                    Point { x: 7.79, y: 6.00 },
                    Point { x: 6.00, y: 7.79 },
                    Point { x: 6.00, y: 10.00 },
                ),
                PathEl::LineTo(Point { x: 6.00, y: 38.00 }),
                PathEl::CurveTo(
                    Point { x: 6.00, y: 40.21 },
                    Point { x: 7.79, y: 42.00 },
                    Point { x: 10.00, y: 42.00 },
                ),
                PathEl::LineTo(Point { x: 38.00, y: 42.00 }),
                PathEl::CurveTo(
                    Point { x: 40.21, y: 42.00 },
                    Point { x: 42.00, y: 40.21 },
                    Point { x: 42.00, y: 38.00 },
                ),
                PathEl::LineTo(Point { x: 42.00, y: 10.00 }),
                PathEl::CurveTo(
                    Point { x: 42.00, y: 7.79 },
                    Point { x: 40.21, y: 6.00 },
                    Point { x: 38.00, y: 6.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 38.00, y: 38.00 }),
                PathEl::LineTo(Point { x: 10.00, y: 38.00 }),
                PathEl::LineTo(Point { x: 10.00, y: 10.00 }),
                PathEl::LineTo(Point { x: 38.00, y: 10.00 }),
                PathEl::LineTo(Point { x: 38.00, y: 38.00 }),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct SortByAlpha {
    size: f64,
    color: Color,
}

impl SortByAlpha {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for SortByAlpha {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 24.0, height / 24.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 14.94, y: 4.66 }),
                PathEl::LineTo(Point { x: 10.22, y: 4.66 }),
                PathEl::LineTo(Point { x: 12.58, y: 2.30 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 10.25, y: 19.37 }),
                PathEl::LineTo(Point { x: 14.91, y: 19.37 }),
                PathEl::LineTo(Point { x: 12.58, y: 21.70 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 6.10, y: 6.27 }),
                PathEl::LineTo(Point { x: 1.60, y: 17.73 }),
                PathEl::LineTo(Point { x: 3.44, y: 17.73 }),
                PathEl::LineTo(Point { x: 4.36, y: 15.28 }),
                PathEl::LineTo(Point { x: 9.47, y: 15.28 }),
                PathEl::LineTo(Point { x: 10.39, y: 17.73 }),
                PathEl::LineTo(Point { x: 12.23, y: 17.73 }),
                PathEl::LineTo(Point { x: 7.74, y: 6.27 }),
                PathEl::LineTo(Point { x: 6.10, y: 6.27 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 4.97, y: 13.64 }),
                PathEl::LineTo(Point { x: 6.91, y: 8.46 }),
                PathEl::LineTo(Point { x: 8.85, y: 13.64 }),
                PathEl::LineTo(Point { x: 4.97, y: 13.64 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 15.73, y: 16.14 }),
                PathEl::LineTo(Point { x: 21.85, y: 16.14 }),
                PathEl::LineTo(Point { x: 21.85, y: 17.73 }),
                PathEl::LineTo(Point { x: 13.32, y: 17.73 }),
                PathEl::LineTo(Point { x: 13.32, y: 16.44 }),
                PathEl::LineTo(Point { x: 19.24, y: 7.88 }),
                PathEl::LineTo(Point { x: 13.36, y: 7.88 }),
                PathEl::LineTo(Point { x: 13.36, y: 6.28 }),
                PathEl::LineTo(Point { x: 21.66, y: 6.28 }),
                PathEl::LineTo(Point { x: 21.66, y: 7.54 }),
                PathEl::LineTo(Point { x: 15.73, y: 16.14 }),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct Restore {
    size: f64,
    color: Color,
}

impl Restore {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for Restore {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 25.99, y: 6.00 }),
                PathEl::CurveTo(
                    Point { x: 16.04, y: 6.00 },
                    Point { x: 8.00, y: 14.06 },
                    Point { x: 8.00, y: 24.00 },
                ),
                PathEl::LineTo(Point { x: 2.00, y: 24.00 }),
                PathEl::LineTo(Point { x: 9.79, y: 31.79 }),
                PathEl::LineTo(Point { x: 9.93, y: 32.08 }),
                PathEl::LineTo(Point { x: 18.00, y: 24.00 }),
                PathEl::LineTo(Point { x: 12.00, y: 24.00 }),
                PathEl::CurveTo(
                    Point { x: 12.00, y: 16.27 },
                    Point { x: 18.27, y: 10.00 },
                    Point { x: 26.00, y: 10.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 33.73, y: 10.00 },
                    Point { x: 40.00, y: 16.27 },
                    Point { x: 40.00, y: 24.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 40.00, y: 31.73 },
                    Point { x: 33.73, y: 38.00 },
                    Point { x: 26.00, y: 38.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 22.13, y: 38.00 },
                    Point { x: 18.64, y: 36.42 },
                    Point { x: 16.11, y: 33.89 },
                ),
                PathEl::LineTo(Point { x: 13.28, y: 36.72 }),
                PathEl::CurveTo(
                    Point { x: 16.53, y: 39.98 },
                    Point { x: 21.02, y: 42.00 },
                    Point { x: 25.99, y: 42.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 35.94, y: 42.00 },
                    Point { x: 44.00, y: 33.94 },
                    Point { x: 44.00, y: 24.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 44.00, y: 14.06 },
                    Point { x: 35.94, y: 6.00 },
                    Point { x: 25.99, y: 6.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 24.00, y: 16.00 }),
                PathEl::LineTo(Point { x: 24.00, y: 26.00 }),
                PathEl::LineTo(Point { x: 32.56, y: 31.08 }),
                PathEl::LineTo(Point { x: 34.00, y: 28.65 }),
                PathEl::LineTo(Point { x: 27.00, y: 24.50 }),
                PathEl::LineTo(Point { x: 27.00, y: 16.00 }),
                PathEl::LineTo(Point { x: 24.00, y: 16.00 }),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct Link {
    size: f64,
    color: Color,
}

impl Link {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for Link {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 7.80, y: 24.00 }),
                PathEl::CurveTo(
                    Point { x: 7.80, y: 20.58 },
                    Point { x: 10.58, y: 17.80 },
                    Point { x: 14.00, y: 17.80 },
                ),
                PathEl::LineTo(Point { x: 22.00, y: 17.80 }),
                PathEl::LineTo(Point { x: 22.00, y: 14.00 }),
                PathEl::LineTo(Point { x: 14.00, y: 14.00 }),
                PathEl::CurveTo(
                    Point { x: 8.48, y: 14.00 },
                    Point { x: 4.00, y: 18.48 },
                    Point { x: 4.00, y: 24.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 4.00, y: 29.52 },
                    Point { x: 8.48, y: 34.00 },
                    Point { x: 14.00, y: 34.00 },
                ),
                PathEl::LineTo(Point { x: 22.00, y: 34.00 }),
                PathEl::LineTo(Point { x: 22.00, y: 30.20 }),
                PathEl::LineTo(Point { x: 14.00, y: 30.20 }),
                PathEl::CurveTo(
                    Point { x: 10.58, y: 30.20 },
                    Point { x: 7.80, y: 27.42 },
                    Point { x: 7.80, y: 24.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 16.00, y: 26.00 }),
                PathEl::LineTo(Point { x: 32.00, y: 26.00 }),
                PathEl::LineTo(Point { x: 32.00, y: 22.00 }),
                PathEl::LineTo(Point { x: 16.00, y: 22.00 }),
                PathEl::LineTo(Point { x: 16.00, y: 26.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 34.00, y: 14.00 }),
                PathEl::LineTo(Point { x: 26.00, y: 14.00 }),
                PathEl::LineTo(Point { x: 26.00, y: 17.80 }),
                PathEl::LineTo(Point { x: 34.00, y: 17.80 }),
                PathEl::CurveTo(
                    Point { x: 37.42, y: 17.80 },
                    Point { x: 40.20, y: 20.58 },
                    Point { x: 40.20, y: 24.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 40.20, y: 27.42 },
                    Point { x: 37.42, y: 30.20 },
                    Point { x: 34.00, y: 30.20 },
                ),
                PathEl::LineTo(Point { x: 26.00, y: 30.20 }),
                PathEl::LineTo(Point { x: 26.00, y: 34.00 }),
                PathEl::LineTo(Point { x: 34.00, y: 34.00 }),
                PathEl::CurveTo(
                    Point { x: 39.52, y: 34.00 },
                    Point { x: 44.00, y: 29.52 },
                    Point { x: 44.00, y: 24.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 44.00, y: 18.48 },
                    Point { x: 39.52, y: 14.00 },
                    Point { x: 34.00, y: 14.00 },
                ),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct ChildFriendly {
    size: f64,
    color: Color,
}

impl ChildFriendly {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for ChildFriendly {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 26.00, y: 4.00 }),
                PathEl::LineTo(Point { x: 26.00, y: 20.00 }),
                PathEl::LineTo(Point { x: 42.00, y: 20.00 }),
                PathEl::CurveTo(
                    Point { x: 42.00, y: 11.16 },
                    Point { x: 34.84, y: 4.00 },
                    Point { x: 26.00, y: 4.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 38.65, y: 31.78 }),
                PathEl::CurveTo(
                    Point { x: 40.74, y: 29.07 },
                    Point { x: 42.00, y: 25.69 },
                    Point { x: 42.00, y: 22.00 },
                ),
                PathEl::LineTo(Point { x: 12.88, y: 22.00 }),
                PathEl::LineTo(Point { x: 10.98, y: 18.00 }),
                PathEl::LineTo(Point { x: 4.00, y: 18.00 }),
                PathEl::LineTo(Point { x: 4.00, y: 22.00 }),
                PathEl::LineTo(Point { x: 8.45, y: 22.00 }),
                PathEl::CurveTo(
                    Point { x: 8.45, y: 22.00 },
                    Point { x: 12.23, y: 30.14 },
                    Point { x: 12.69, y: 30.83 },
                ),
                PathEl::CurveTo(
                    Point { x: 10.49, y: 32.02 },
                    Point { x: 9.00, y: 34.33 },
                    Point { x: 9.00, y: 37.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 9.00, y: 40.87 },
                    Point { x: 12.13, y: 44.00 },
                    Point { x: 16.00, y: 44.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 19.53, y: 44.00 },
                    Point { x: 22.43, y: 41.39 },
                    Point { x: 22.92, y: 38.00 },
                ),
                PathEl::LineTo(Point { x: 27.08, y: 38.00 }),
                PathEl::CurveTo(
                    Point { x: 27.57, y: 41.39 },
                    Point { x: 30.47, y: 44.00 },
                    Point { x: 34.00, y: 44.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 37.87, y: 44.00 },
                    Point { x: 41.00, y: 40.87 },
                    Point { x: 41.00, y: 37.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 41.00, y: 34.92 },
                    Point { x: 40.09, y: 33.06 },
                    Point { x: 38.65, y: 31.78 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 16.00, y: 40.00 }),
                PathEl::CurveTo(
                    Point { x: 14.34, y: 40.00 },
                    Point { x: 13.00, y: 38.66 },
                    Point { x: 13.00, y: 37.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 13.00, y: 35.34 },
                    Point { x: 14.34, y: 34.00 },
                    Point { x: 16.00, y: 34.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 17.66, y: 34.00 },
                    Point { x: 19.00, y: 35.34 },
                    Point { x: 19.00, y: 37.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 19.00, y: 38.66 },
                    Point { x: 17.66, y: 40.00 },
                    Point { x: 16.00, y: 40.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 34.00, y: 40.00 }),
                PathEl::CurveTo(
                    Point { x: 32.34, y: 40.00 },
                    Point { x: 31.00, y: 38.66 },
                    Point { x: 31.00, y: 37.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 31.00, y: 35.34 },
                    Point { x: 32.34, y: 34.00 },
                    Point { x: 34.00, y: 34.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 35.66, y: 34.00 },
                    Point { x: 37.00, y: 35.34 },
                    Point { x: 37.00, y: 37.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 37.00, y: 38.66 },
                    Point { x: 35.66, y: 40.00 },
                    Point { x: 34.00, y: 40.00 },
                ),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct HourglassFull {
    size: f64,
    color: Color,
}

impl HourglassFull {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for HourglassFull {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 32.00, y: 4.00 }),
                PathEl::LineTo(Point { x: 12.00, y: 4.00 }),
                PathEl::LineTo(Point { x: 12.00, y: 15.00 }),
                PathEl::LineTo(Point { x: 12.02, y: 15.00 }),
                PathEl::LineTo(Point { x: 12.00, y: 15.02 }),
                PathEl::LineTo(Point { x: 20.98, y: 24.00 }),
                PathEl::LineTo(Point { x: 12.00, y: 32.98 }),
                PathEl::LineTo(Point { x: 12.02, y: 33.00 }),
                PathEl::LineTo(Point { x: 12.00, y: 33.00 }),
                PathEl::LineTo(Point { x: 12.00, y: 44.00 }),
                PathEl::LineTo(Point { x: 36.00, y: 44.00 }),
                PathEl::LineTo(Point { x: 36.00, y: 33.00 }),
                PathEl::LineTo(Point { x: 35.98, y: 33.00 }),
                PathEl::LineTo(Point { x: 36.00, y: 32.98 }),
                PathEl::LineTo(Point { x: 27.02, y: 24.00 }),
                PathEl::LineTo(Point { x: 36.00, y: 15.02 }),
                PathEl::LineTo(Point { x: 35.98, y: 15.00 }),
                PathEl::LineTo(Point { x: 36.00, y: 15.00 }),
                PathEl::LineTo(Point { x: 36.00, y: 4.00 }),
                PathEl::LineTo(Point { x: 32.00, y: 4.00 }),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct SignalWifi4BarLock {
    size: f64,
    color: Color,
}

impl SignalWifi4BarLock {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for SignalWifi4BarLock {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 41.00, y: 19.00 }),
                PathEl::CurveTo(
                    Point { x: 41.72, y: 19.00 },
                    Point { x: 42.41, y: 19.08 },
                    Point { x: 43.09, y: 19.22 },
                ),
                PathEl::LineTo(Point { x: 47.28, y: 14.00 }),
                PathEl::CurveTo(
                    Point { x: 46.38, y: 13.32 },
                    Point { x: 37.43, y: 6.00 },
                    Point { x: 24.00, y: 6.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 10.57, y: 6.00 },
                    Point { x: 1.62, y: 13.32 },
                    Point { x: 0.72, y: 14.00 },
                ),
                PathEl::LineTo(Point { x: 23.98, y: 42.98 }),
                PathEl::LineTo(Point { x: 24.00, y: 43.00 }),
                PathEl::LineTo(Point { x: 24.02, y: 42.98 }),
                PathEl::LineTo(Point { x: 31.00, y: 34.28 }),
                PathEl::LineTo(Point { x: 31.00, y: 29.00 }),
                PathEl::CurveTo(
                    Point { x: 31.00, y: 23.48 },
                    Point { x: 35.48, y: 19.00 },
                    Point { x: 41.00, y: 19.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 46.00, y: 32.00 }),
                PathEl::LineTo(Point { x: 46.00, y: 29.00 }),
                PathEl::CurveTo(
                    Point { x: 46.00, y: 26.24 },
                    Point { x: 43.76, y: 24.00 },
                    Point { x: 41.00, y: 24.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 38.24, y: 24.00 },
                    Point { x: 36.00, y: 26.24 },
                    Point { x: 36.00, y: 29.00 },
                ),
                PathEl::LineTo(Point { x: 36.00, y: 32.00 }),
                PathEl::CurveTo(
                    Point { x: 34.90, y: 32.00 },
                    Point { x: 34.00, y: 32.90 },
                    Point { x: 34.00, y: 34.00 },
                ),
                PathEl::LineTo(Point { x: 34.00, y: 42.00 }),
                PathEl::CurveTo(
                    Point { x: 34.00, y: 43.10 },
                    Point { x: 34.90, y: 44.00 },
                    Point { x: 36.00, y: 44.00 },
                ),
                PathEl::LineTo(Point { x: 46.00, y: 44.00 }),
                PathEl::CurveTo(
                    Point { x: 47.10, y: 44.00 },
                    Point { x: 48.00, y: 43.10 },
                    Point { x: 48.00, y: 42.00 },
                ),
                PathEl::LineTo(Point { x: 48.00, y: 34.00 }),
                PathEl::CurveTo(
                    Point { x: 48.00, y: 32.90 },
                    Point { x: 47.10, y: 32.00 },
                    Point { x: 46.00, y: 32.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 44.00, y: 32.00 }),
                PathEl::LineTo(Point { x: 38.00, y: 32.00 }),
                PathEl::LineTo(Point { x: 38.00, y: 29.00 }),
                PathEl::CurveTo(
                    Point { x: 38.00, y: 27.34 },
                    Point { x: 39.34, y: 26.00 },
                    Point { x: 41.00, y: 26.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 42.66, y: 26.00 },
                    Point { x: 44.00, y: 27.34 },
                    Point { x: 44.00, y: 29.00 },
                ),
                PathEl::LineTo(Point { x: 44.00, y: 32.00 }),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct PlaylistPlay {
    size: f64,
    color: Color,
}

impl PlaylistPlay {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for PlaylistPlay {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 26.00, y: 6.00 }),
                PathEl::LineTo(Point { x: -8.00, y: 6.00 }),
                PathEl::LineTo(Point { x: -8.00, y: 10.00 }),
                PathEl::LineTo(Point { x: 26.00, y: 10.00 }),
                PathEl::LineTo(Point { x: 26.00, y: 6.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 26.00, y: -2.00 }),
                PathEl::LineTo(Point { x: -8.00, y: -2.00 }),
                PathEl::LineTo(Point { x: -8.00, y: 2.00 }),
                PathEl::LineTo(Point { x: 26.00, y: 2.00 }),
                PathEl::LineTo(Point { x: 26.00, y: -2.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: -8.00, y: 18.00 }),
                PathEl::LineTo(Point { x: 18.00, y: 18.00 }),
                PathEl::LineTo(Point { x: 18.00, y: 14.00 }),
                PathEl::LineTo(Point { x: -8.00, y: 14.00 }),
                PathEl::LineTo(Point { x: -8.00, y: 18.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 22.00, y: 14.00 }),
                PathEl::LineTo(Point { x: 22.00, y: 26.00 }),
                PathEl::LineTo(Point { x: 32.00, y: 20.00 }),
                PathEl::LineTo(Point { x: 22.00, y: 14.00 }),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct ArrowForward {
    size: f64,
    color: Color,
}

impl ArrowForward {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for ArrowForward {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 24.00, y: 8.00 }),
                PathEl::LineTo(Point { x: 21.17, y: 10.83 }),
                PathEl::LineTo(Point { x: 32.34, y: 22.00 }),
                PathEl::LineTo(Point { x: 8.00, y: 22.00 }),
                PathEl::LineTo(Point { x: 8.00, y: 26.00 }),
                PathEl::LineTo(Point { x: 32.34, y: 26.00 }),
                PathEl::LineTo(Point { x: 21.17, y: 37.17 }),
                PathEl::LineTo(Point { x: 24.00, y: 40.00 }),
                PathEl::LineTo(Point { x: 40.00, y: 24.00 }),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct PhoneIphone {
    size: f64,
    color: Color,
}

impl PhoneIphone {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for PhoneIphone {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 31.00, y: 2.00 }),
                PathEl::LineTo(Point { x: 15.00, y: 2.00 }),
                PathEl::CurveTo(
                    Point { x: 12.24, y: 2.00 },
                    Point { x: 10.00, y: 4.24 },
                    Point { x: 10.00, y: 7.00 },
                ),
                PathEl::LineTo(Point { x: 10.00, y: 41.00 }),
                PathEl::CurveTo(
                    Point { x: 10.00, y: 43.76 },
                    Point { x: 12.24, y: 46.00 },
                    Point { x: 15.00, y: 46.00 },
                ),
                PathEl::LineTo(Point { x: 31.00, y: 46.00 }),
                PathEl::CurveTo(
                    Point { x: 33.76, y: 46.00 },
                    Point { x: 36.00, y: 43.76 },
                    Point { x: 36.00, y: 41.00 },
                ),
                PathEl::LineTo(Point { x: 36.00, y: 7.00 }),
                PathEl::CurveTo(
                    Point { x: 36.00, y: 4.24 },
                    Point { x: 33.76, y: 2.00 },
                    Point { x: 31.00, y: 2.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 23.00, y: 44.00 }),
                PathEl::CurveTo(
                    Point { x: 21.34, y: 44.00 },
                    Point { x: 20.00, y: 42.66 },
                    Point { x: 20.00, y: 41.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 20.00, y: 39.34 },
                    Point { x: 21.34, y: 38.00 },
                    Point { x: 23.00, y: 38.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 24.66, y: 38.00 },
                    Point { x: 26.00, y: 39.34 },
                    Point { x: 26.00, y: 41.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 26.00, y: 42.66 },
                    Point { x: 24.66, y: 44.00 },
                    Point { x: 23.00, y: 44.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 32.00, y: 36.00 }),
                PathEl::LineTo(Point { x: 14.00, y: 36.00 }),
                PathEl::LineTo(Point { x: 14.00, y: 8.00 }),
                PathEl::LineTo(Point { x: 32.00, y: 8.00 }),
                PathEl::LineTo(Point { x: 32.00, y: 36.00 }),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct PieChart {
    size: f64,
    color: Color,
}

impl PieChart {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for PieChart {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 22.00, y: 4.00 }),
                PathEl::LineTo(Point { x: 22.00, y: 44.00 }),
                PathEl::CurveTo(
                    Point { x: 11.86, y: 42.99 },
                    Point { x: 4.00, y: 34.42 },
                    Point { x: 4.00, y: 24.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 4.00, y: 13.58 },
                    Point { x: 11.86, y: 5.00 },
                    Point { x: 22.00, y: 4.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 26.06, y: 4.00 }),
                PathEl::LineTo(Point { x: 26.06, y: 21.99 }),
                PathEl::LineTo(Point { x: 44.00, y: 21.99 }),
                PathEl::CurveTo(
                    Point { x: 43.06, y: 12.49 },
                    Point { x: 35.53, y: 4.94 },
                    Point { x: 26.06, y: 4.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 26.06, y: 26.01 }),
                PathEl::LineTo(Point { x: 26.06, y: 44.00 }),
                PathEl::CurveTo(
                    Point { x: 35.53, y: 43.06 },
                    Point { x: 43.06, y: 35.51 },
                    Point { x: 44.00, y: 26.01 },
                ),
                PathEl::LineTo(Point { x: 26.06, y: 26.01 }),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct SettingsBackupRestore {
    size: f64,
    color: Color,
}

impl SettingsBackupRestore {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for SettingsBackupRestore {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 28.00, y: 24.00 }),
                PathEl::CurveTo(
                    Point { x: 28.00, y: 21.79 },
                    Point { x: 26.21, y: 20.00 },
                    Point { x: 24.00, y: 20.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 21.79, y: 20.00 },
                    Point { x: 20.00, y: 21.79 },
                    Point { x: 20.00, y: 24.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 20.00, y: 26.21 },
                    Point { x: 21.79, y: 28.00 },
                    Point { x: 24.00, y: 28.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 26.21, y: 28.00 },
                    Point { x: 28.00, y: 26.21 },
                    Point { x: 28.00, y: 24.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 24.00, y: 6.00 }),
                PathEl::CurveTo(
                    Point { x: 14.06, y: 6.00 },
                    Point { x: 6.00, y: 14.06 },
                    Point { x: 6.00, y: 24.00 },
                ),
                PathEl::LineTo(Point { x: 0.00, y: 24.00 }),
                PathEl::LineTo(Point { x: 8.00, y: 32.00 }),
                PathEl::LineTo(Point { x: 16.00, y: 24.00 }),
                PathEl::LineTo(Point { x: 10.00, y: 24.00 }),
                PathEl::CurveTo(
                    Point { x: 10.00, y: 16.27 },
                    Point { x: 16.27, y: 10.00 },
                    Point { x: 24.00, y: 10.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 31.73, y: 10.00 },
                    Point { x: 38.00, y: 16.27 },
                    Point { x: 38.00, y: 24.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 38.00, y: 31.73 },
                    Point { x: 31.73, y: 38.00 },
                    Point { x: 24.00, y: 38.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 20.97, y: 38.00 },
                    Point { x: 18.18, y: 37.03 },
                    Point { x: 15.88, y: 35.39 },
                ),
                PathEl::LineTo(Point { x: 13.05, y: 38.26 }),
                PathEl::CurveTo(
                    Point { x: 16.09, y: 40.60 },
                    Point { x: 19.88, y: 42.00 },
                    Point { x: 24.00, y: 42.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 33.94, y: 42.00 },
                    Point { x: 42.00, y: 33.94 },
                    Point { x: 42.00, y: 24.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 42.00, y: 14.06 },
                    Point { x: 33.94, y: 6.00 },
                    Point { x: 24.00, y: 6.00 },
                ),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct Folder {
    size: f64,
    color: Color,
}

impl Folder {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for Folder {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 20.00, y: 8.00 }),
                PathEl::LineTo(Point { x: 8.00, y: 8.00 }),
                PathEl::CurveTo(
                    Point { x: 5.79, y: 8.00 },
                    Point { x: 4.02, y: 9.79 },
                    Point { x: 4.02, y: 12.00 },
                ),
                PathEl::LineTo(Point { x: 4.00, y: 36.00 }),
                PathEl::CurveTo(
                    Point { x: 4.00, y: 38.21 },
                    Point { x: 5.79, y: 40.00 },
                    Point { x: 8.00, y: 40.00 },
                ),
                PathEl::LineTo(Point { x: 40.00, y: 40.00 }),
                PathEl::CurveTo(
                    Point { x: 42.21, y: 40.00 },
                    Point { x: 44.00, y: 38.21 },
                    Point { x: 44.00, y: 36.00 },
                ),
                PathEl::LineTo(Point { x: 44.00, y: 16.00 }),
                PathEl::CurveTo(
                    Point { x: 44.00, y: 13.79 },
                    Point { x: 42.21, y: 12.00 },
                    Point { x: 40.00, y: 12.00 },
                ),
                PathEl::LineTo(Point { x: 24.00, y: 12.00 }),
                PathEl::LineTo(Point { x: 20.00, y: 8.00 }),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct Explore {
    size: f64,
    color: Color,
}

impl Explore {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for Explore {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 24.00, y: 21.80 }),
                PathEl::CurveTo(
                    Point { x: 22.79, y: 21.80 },
                    Point { x: 21.80, y: 22.79 },
                    Point { x: 21.80, y: 24.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 21.80, y: 25.21 },
                    Point { x: 22.79, y: 26.20 },
                    Point { x: 24.00, y: 26.20 },
                ),
                PathEl::CurveTo(
                    Point { x: 25.22, y: 26.20 },
                    Point { x: 26.20, y: 25.21 },
                    Point { x: 26.20, y: 24.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 26.20, y: 22.79 },
                    Point { x: 25.22, y: 21.80 },
                    Point { x: 24.00, y: 21.80 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 24.00, y: 4.00 }),
                PathEl::CurveTo(
                    Point { x: 12.95, y: 4.00 },
                    Point { x: 4.00, y: 12.95 },
                    Point { x: 4.00, y: 24.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 4.00, y: 35.04 },
                    Point { x: 12.95, y: 44.00 },
                    Point { x: 24.00, y: 44.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 35.05, y: 44.00 },
                    Point { x: 44.00, y: 35.04 },
                    Point { x: 44.00, y: 24.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 44.00, y: 12.95 },
                    Point { x: 35.05, y: 4.00 },
                    Point { x: 24.00, y: 4.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 28.38, y: 28.38 }),
                PathEl::LineTo(Point { x: 12.00, y: 36.00 }),
                PathEl::LineTo(Point { x: 19.62, y: 19.62 }),
                PathEl::LineTo(Point { x: 36.00, y: 12.00 }),
                PathEl::LineTo(Point { x: 28.38, y: 28.38 }),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct BatteryCharging50 {
    size: f64,
    color: Color,
}

impl BatteryCharging50 {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for BatteryCharging50 {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 28.93, y: 27.00 }),
                PathEl::LineTo(Point { x: 22.00, y: 40.00 }),
                PathEl::LineTo(Point { x: 22.00, y: 29.00 }),
                PathEl::LineTo(Point { x: 18.00, y: 29.00 }),
                PathEl::LineTo(Point { x: 19.07, y: 27.00 }),
                PathEl::LineTo(Point { x: 14.00, y: 27.00 }),
                PathEl::LineTo(Point { x: 14.00, y: 41.33 }),
                PathEl::CurveTo(
                    Point { x: 14.00, y: 42.80 },
                    Point { x: 15.19, y: 44.00 },
                    Point { x: 16.67, y: 44.00 },
                ),
                PathEl::LineTo(Point { x: 31.34, y: 44.00 }),
                PathEl::CurveTo(
                    Point { x: 32.81, y: 44.00 },
                    Point { x: 34.01, y: 42.81 },
                    Point { x: 34.01, y: 41.33 },
                ),
                PathEl::LineTo(Point { x: 34.01, y: 27.00 }),
                PathEl::LineTo(Point { x: 28.93, y: 27.00 }),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 31.33, y: 8.00 }),
                PathEl::LineTo(Point { x: 28.00, y: 8.00 }),
                PathEl::LineTo(Point { x: 28.00, y: 4.00 }),
                PathEl::LineTo(Point { x: 20.00, y: 4.00 }),
                PathEl::LineTo(Point { x: 20.00, y: 8.00 }),
                PathEl::LineTo(Point { x: 16.67, y: 8.00 }),
                PathEl::CurveTo(
                    Point { x: 15.19, y: 8.00 },
                    Point { x: 14.00, y: 9.19 },
                    Point { x: 14.00, y: 10.67 },
                ),
                PathEl::LineTo(Point { x: 14.00, y: 27.00 }),
                PathEl::LineTo(Point { x: 19.07, y: 27.00 }),
                PathEl::LineTo(Point { x: 26.00, y: 14.00 }),
                PathEl::LineTo(Point { x: 26.00, y: 25.00 }),
                PathEl::LineTo(Point { x: 30.00, y: 25.00 }),
                PathEl::LineTo(Point { x: 28.93, y: 27.00 }),
                PathEl::LineTo(Point { x: 34.00, y: 27.00 }),
                PathEl::LineTo(Point { x: 34.00, y: 10.67 }),
                PathEl::CurveTo(
                    Point { x: 34.00, y: 9.19 },
                    Point { x: 32.81, y: 8.00 },
                    Point { x: 31.33, y: 8.00 },
                ),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct Repeat {
    size: f64,
    color: Color,
}

impl Repeat {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for Repeat {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 14.00, y: 14.00 }),
                PathEl::LineTo(Point { x: 34.00, y: 14.00 }),
                PathEl::LineTo(Point { x: 34.00, y: 20.00 }),
                PathEl::LineTo(Point { x: 42.00, y: 12.00 }),
                PathEl::LineTo(Point { x: 34.00, y: 4.00 }),
                PathEl::LineTo(Point { x: 34.00, y: 10.00 }),
                PathEl::LineTo(Point { x: 10.00, y: 10.00 }),
                PathEl::LineTo(Point { x: 10.00, y: 22.00 }),
                PathEl::LineTo(Point { x: 14.00, y: 22.00 }),
                PathEl::LineTo(Point { x: 14.00, y: 14.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 34.00, y: 34.00 }),
                PathEl::LineTo(Point { x: 14.00, y: 34.00 }),
                PathEl::LineTo(Point { x: 14.00, y: 28.00 }),
                PathEl::LineTo(Point { x: 6.00, y: 36.00 }),
                PathEl::LineTo(Point { x: 14.00, y: 44.00 }),
                PathEl::LineTo(Point { x: 14.00, y: 38.00 }),
                PathEl::LineTo(Point { x: 38.00, y: 38.00 }),
                PathEl::LineTo(Point { x: 38.00, y: 26.00 }),
                PathEl::LineTo(Point { x: 34.00, y: 26.00 }),
                PathEl::LineTo(Point { x: 34.00, y: 34.00 }),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct Class {
    size: f64,
    color: Color,
}

impl Class {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for Class {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 36.00, y: 4.00 }),
                PathEl::LineTo(Point { x: 12.00, y: 4.00 }),
                PathEl::CurveTo(
                    Point { x: 9.79, y: 4.00 },
                    Point { x: 8.00, y: 5.79 },
                    Point { x: 8.00, y: 8.00 },
                ),
                PathEl::LineTo(Point { x: 8.00, y: 40.00 }),
                PathEl::CurveTo(
                    Point { x: 8.00, y: 42.21 },
                    Point { x: 9.79, y: 44.00 },
                    Point { x: 12.00, y: 44.00 },
                ),
                PathEl::LineTo(Point { x: 36.00, y: 44.00 }),
                PathEl::CurveTo(
                    Point { x: 38.21, y: 44.00 },
                    Point { x: 40.00, y: 42.21 },
                    Point { x: 40.00, y: 40.00 },
                ),
                PathEl::LineTo(Point { x: 40.00, y: 8.00 }),
                PathEl::CurveTo(
                    Point { x: 40.00, y: 5.79 },
                    Point { x: 38.21, y: 4.00 },
                    Point { x: 36.00, y: 4.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 12.00, y: 8.00 }),
                PathEl::LineTo(Point { x: 22.00, y: 8.00 }),
                PathEl::LineTo(Point { x: 22.00, y: 24.00 }),
                PathEl::LineTo(Point { x: 17.00, y: 21.00 }),
                PathEl::LineTo(Point { x: 12.00, y: 24.00 }),
                PathEl::LineTo(Point { x: 12.00, y: 8.00 }),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct CropOriginal {
    size: f64,
    color: Color,
}

impl CropOriginal {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for CropOriginal {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 38.00, y: 6.00 }),
                PathEl::LineTo(Point { x: 10.00, y: 6.00 }),
                PathEl::CurveTo(
                    Point { x: 7.79, y: 6.00 },
                    Point { x: 6.00, y: 7.79 },
                    Point { x: 6.00, y: 10.00 },
                ),
                PathEl::LineTo(Point { x: 6.00, y: 38.00 }),
                PathEl::CurveTo(
                    Point { x: 6.00, y: 40.21 },
                    Point { x: 7.79, y: 42.00 },
                    Point { x: 10.00, y: 42.00 },
                ),
                PathEl::LineTo(Point { x: 38.00, y: 42.00 }),
                PathEl::CurveTo(
                    Point { x: 40.21, y: 42.00 },
                    Point { x: 42.00, y: 40.21 },
                    Point { x: 42.00, y: 38.00 },
                ),
                PathEl::LineTo(Point { x: 42.00, y: 10.00 }),
                PathEl::CurveTo(
                    Point { x: 42.00, y: 7.79 },
                    Point { x: 40.21, y: 6.00 },
                    Point { x: 38.00, y: 6.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 38.00, y: 38.00 }),
                PathEl::LineTo(Point { x: 10.00, y: 38.00 }),
                PathEl::LineTo(Point { x: 10.00, y: 10.00 }),
                PathEl::LineTo(Point { x: 38.00, y: 10.00 }),
                PathEl::LineTo(Point { x: 38.00, y: 38.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 27.93, y: 24.57 }),
                PathEl::LineTo(Point { x: 22.43, y: 31.65 }),
                PathEl::LineTo(Point { x: 18.50, y: 26.93 }),
                PathEl::LineTo(Point { x: 13.00, y: 34.00 }),
                PathEl::LineTo(Point { x: 35.00, y: 34.00 }),
                PathEl::LineTo(Point { x: 27.93, y: 24.57 }),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct VideoLabel {
    size: f64,
    color: Color,
}

impl VideoLabel {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for VideoLabel {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 42.00, y: 6.00 }),
                PathEl::LineTo(Point { x: 6.00, y: 6.00 }),
                PathEl::CurveTo(
                    Point { x: 3.80, y: 6.00 },
                    Point { x: 2.00, y: 7.80 },
                    Point { x: 2.00, y: 10.00 },
                ),
                PathEl::LineTo(Point { x: 2.00, y: 38.00 }),
                PathEl::CurveTo(
                    Point { x: 2.00, y: 40.20 },
                    Point { x: 3.80, y: 42.00 },
                    Point { x: 6.00, y: 42.00 },
                ),
                PathEl::LineTo(Point { x: 42.00, y: 42.00 }),
                PathEl::CurveTo(
                    Point { x: 44.20, y: 42.00 },
                    Point { x: 46.00, y: 40.20 },
                    Point { x: 46.00, y: 38.00 },
                ),
                PathEl::LineTo(Point { x: 46.00, y: 10.00 }),
                PathEl::CurveTo(
                    Point { x: 46.00, y: 7.80 },
                    Point { x: 44.20, y: 6.00 },
                    Point { x: 42.00, y: 6.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 42.00, y: 32.00 }),
                PathEl::LineTo(Point { x: 6.00, y: 32.00 }),
                PathEl::LineTo(Point { x: 6.00, y: 10.00 }),
                PathEl::LineTo(Point { x: 42.00, y: 10.00 }),
                PathEl::LineTo(Point { x: 42.00, y: 32.00 }),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct Report {
    size: f64,
    color: Color,
}

impl Report {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for Report {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 31.46, y: 6.00 }),
                PathEl::LineTo(Point { x: 16.54, y: 6.00 }),
                PathEl::LineTo(Point { x: 6.00, y: 16.54 }),
                PathEl::LineTo(Point { x: 6.00, y: 31.45 }),
                PathEl::LineTo(Point { x: 16.54, y: 42.00 }),
                PathEl::LineTo(Point { x: 31.45, y: 42.00 }),
                PathEl::LineTo(Point { x: 42.00, y: 31.46 }),
                PathEl::LineTo(Point { x: 42.00, y: 16.54 }),
                PathEl::LineTo(Point { x: 31.46, y: 6.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 24.00, y: 34.60 }),
                PathEl::CurveTo(
                    Point { x: 22.57, y: 34.60 },
                    Point { x: 21.40, y: 33.44 },
                    Point { x: 21.40, y: 32.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 21.40, y: 30.57 },
                    Point { x: 22.57, y: 29.40 },
                    Point { x: 24.00, y: 29.40 },
                ),
                PathEl::CurveTo(
                    Point { x: 25.43, y: 29.40 },
                    Point { x: 26.60, y: 30.56 },
                    Point { x: 26.60, y: 32.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 26.60, y: 33.44 },
                    Point { x: 25.43, y: 34.60 },
                    Point { x: 24.00, y: 34.60 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 26.00, y: 26.00 }),
                PathEl::LineTo(Point { x: 22.00, y: 26.00 }),
                PathEl::LineTo(Point { x: 22.00, y: 14.00 }),
                PathEl::LineTo(Point { x: 26.00, y: 14.00 }),
                PathEl::LineTo(Point { x: 26.00, y: 26.00 }),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct ScreenLockLandscape {
    size: f64,
    color: Color,
}

impl ScreenLockLandscape {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for ScreenLockLandscape {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 42.00, y: 10.00 }),
                PathEl::LineTo(Point { x: 6.00, y: 10.00 }),
                PathEl::CurveTo(
                    Point { x: 3.79, y: 10.00 },
                    Point { x: 2.00, y: 11.79 },
                    Point { x: 2.00, y: 14.00 },
                ),
                PathEl::LineTo(Point { x: 2.00, y: 34.00 }),
                PathEl::CurveTo(
                    Point { x: 2.00, y: 36.21 },
                    Point { x: 3.79, y: 38.00 },
                    Point { x: 6.00, y: 38.00 },
                ),
                PathEl::LineTo(Point { x: 42.00, y: 38.00 }),
                PathEl::CurveTo(
                    Point { x: 44.21, y: 38.00 },
                    Point { x: 46.00, y: 36.21 },
                    Point { x: 46.00, y: 34.00 },
                ),
                PathEl::LineTo(Point { x: 46.00, y: 14.00 }),
                PathEl::CurveTo(
                    Point { x: 46.00, y: 11.79 },
                    Point { x: 44.21, y: 10.00 },
                    Point { x: 42.00, y: 10.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 38.00, y: 34.00 }),
                PathEl::LineTo(Point { x: 10.00, y: 34.00 }),
                PathEl::LineTo(Point { x: 10.00, y: 14.00 }),
                PathEl::LineTo(Point { x: 38.00, y: 14.00 }),
                PathEl::LineTo(Point { x: 38.00, y: 34.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 20.00, y: 32.00 }),
                PathEl::LineTo(Point { x: 28.00, y: 32.00 }),
                PathEl::CurveTo(
                    Point { x: 29.11, y: 32.00 },
                    Point { x: 30.00, y: 31.10 },
                    Point { x: 30.00, y: 30.00 },
                ),
                PathEl::LineTo(Point { x: 30.00, y: 24.00 }),
                PathEl::CurveTo(
                    Point { x: 30.00, y: 22.90 },
                    Point { x: 29.11, y: 22.00 },
                    Point { x: 28.00, y: 22.00 },
                ),
                PathEl::LineTo(Point { x: 28.00, y: 20.00 }),
                PathEl::CurveTo(
                    Point { x: 28.00, y: 17.79 },
                    Point { x: 26.21, y: 16.00 },
                    Point { x: 24.00, y: 16.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 21.79, y: 16.00 },
                    Point { x: 20.00, y: 17.79 },
                    Point { x: 20.00, y: 20.00 },
                ),
                PathEl::LineTo(Point { x: 20.00, y: 22.00 }),
                PathEl::CurveTo(
                    Point { x: 18.89, y: 22.00 },
                    Point { x: 18.00, y: 22.90 },
                    Point { x: 18.00, y: 24.00 },
                ),
                PathEl::LineTo(Point { x: 18.00, y: 30.00 }),
                PathEl::CurveTo(
                    Point { x: 18.00, y: 31.10 },
                    Point { x: 18.89, y: 32.00 },
                    Point { x: 20.00, y: 32.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 21.60, y: 20.00 }),
                PathEl::CurveTo(
                    Point { x: 21.60, y: 18.67 },
                    Point { x: 22.67, y: 17.60 },
                    Point { x: 24.00, y: 17.60 },
                ),
                PathEl::CurveTo(
                    Point { x: 25.33, y: 17.60 },
                    Point { x: 26.40, y: 18.68 },
                    Point { x: 26.40, y: 20.00 },
                ),
                PathEl::LineTo(Point { x: 26.40, y: 22.00 }),
                PathEl::LineTo(Point { x: 21.60, y: 22.00 }),
                PathEl::LineTo(Point { x: 21.60, y: 20.00 }),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct Transform {
    size: f64,
    color: Color,
}

impl Transform {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for Transform {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 44.00, y: 36.00 }),
                PathEl::LineTo(Point { x: 44.00, y: 32.00 }),
                PathEl::LineTo(Point { x: 16.00, y: 32.00 }),
                PathEl::LineTo(Point { x: 16.00, y: 8.00 }),
                PathEl::LineTo(Point { x: 20.00, y: 8.00 }),
                PathEl::LineTo(Point { x: 14.00, y: 2.00 }),
                PathEl::LineTo(Point { x: 8.00, y: 8.00 }),
                PathEl::LineTo(Point { x: 12.00, y: 8.00 }),
                PathEl::LineTo(Point { x: 12.00, y: 12.00 }),
                PathEl::LineTo(Point { x: 4.00, y: 12.00 }),
                PathEl::LineTo(Point { x: 4.00, y: 16.00 }),
                PathEl::LineTo(Point { x: 12.00, y: 16.00 }),
                PathEl::LineTo(Point { x: 12.00, y: 32.00 }),
                PathEl::CurveTo(
                    Point { x: 12.00, y: 34.21 },
                    Point { x: 13.79, y: 36.00 },
                    Point { x: 16.00, y: 36.00 },
                ),
                PathEl::LineTo(Point { x: 32.00, y: 36.00 }),
                PathEl::LineTo(Point { x: 32.00, y: 40.00 }),
                PathEl::LineTo(Point { x: 28.00, y: 40.00 }),
                PathEl::LineTo(Point { x: 34.00, y: 46.00 }),
                PathEl::LineTo(Point { x: 40.00, y: 40.00 }),
                PathEl::LineTo(Point { x: 36.00, y: 40.00 }),
                PathEl::LineTo(Point { x: 36.00, y: 36.00 }),
                PathEl::LineTo(Point { x: 44.00, y: 36.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 20.00, y: 16.00 }),
                PathEl::LineTo(Point { x: 32.00, y: 16.00 }),
                PathEl::LineTo(Point { x: 32.00, y: 28.00 }),
                PathEl::LineTo(Point { x: 36.00, y: 28.00 }),
                PathEl::LineTo(Point { x: 36.00, y: 16.00 }),
                PathEl::CurveTo(
                    Point { x: 36.00, y: 13.79 },
                    Point { x: 34.21, y: 12.00 },
                    Point { x: 32.00, y: 12.00 },
                ),
                PathEl::LineTo(Point { x: 20.00, y: 12.00 }),
                PathEl::LineTo(Point { x: 20.00, y: 16.00 }),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct VpnLock {
    size: f64,
    color: Color,
}

impl VpnLock {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for VpnLock {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 44.00, y: 8.00 }),
                PathEl::LineTo(Point { x: 44.00, y: 7.00 }),
                PathEl::CurveTo(
                    Point { x: 44.00, y: 4.24 },
                    Point { x: 41.76, y: 2.00 },
                    Point { x: 39.00, y: 2.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 36.24, y: 2.00 },
                    Point { x: 34.00, y: 4.24 },
                    Point { x: 34.00, y: 7.00 },
                ),
                PathEl::LineTo(Point { x: 34.00, y: 8.00 }),
                PathEl::CurveTo(
                    Point { x: 32.89, y: 8.00 },
                    Point { x: 32.00, y: 8.90 },
                    Point { x: 32.00, y: 10.00 },
                ),
                PathEl::LineTo(Point { x: 32.00, y: 18.00 }),
                PathEl::CurveTo(
                    Point { x: 32.00, y: 19.10 },
                    Point { x: 32.89, y: 20.00 },
                    Point { x: 34.00, y: 20.00 },
                ),
                PathEl::LineTo(Point { x: 44.00, y: 20.00 }),
                PathEl::CurveTo(
                    Point { x: 45.11, y: 20.00 },
                    Point { x: 46.00, y: 19.10 },
                    Point { x: 46.00, y: 18.00 },
                ),
                PathEl::LineTo(Point { x: 46.00, y: 10.00 }),
                PathEl::CurveTo(
                    Point { x: 46.00, y: 8.90 },
                    Point { x: 45.11, y: 8.00 },
                    Point { x: 44.00, y: 8.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 42.40, y: 8.00 }),
                PathEl::LineTo(Point { x: 35.60, y: 8.00 }),
                PathEl::LineTo(Point { x: 35.60, y: 7.00 }),
                PathEl::CurveTo(
                    Point { x: 35.60, y: 5.12 },
                    Point { x: 37.12, y: 3.60 },
                    Point { x: 39.00, y: 3.60 },
                ),
                PathEl::CurveTo(
                    Point { x: 40.88, y: 3.60 },
                    Point { x: 42.40, y: 5.12 },
                    Point { x: 42.40, y: 7.00 },
                ),
                PathEl::LineTo(Point { x: 42.40, y: 8.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 37.85, y: 24.00 }),
                PathEl::CurveTo(
                    Point { x: 37.93, y: 24.66 },
                    Point { x: 38.00, y: 25.32 },
                    Point { x: 38.00, y: 26.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 38.00, y: 30.16 },
                    Point { x: 36.40, y: 33.94 },
                    Point { x: 33.79, y: 36.79 },
                ),
                PathEl::CurveTo(
                    Point { x: 33.28, y: 35.17 },
                    Point { x: 31.78, y: 34.00 },
                    Point { x: 30.00, y: 34.00 },
                ),
                PathEl::LineTo(Point { x: 28.00, y: 34.00 }),
                PathEl::LineTo(Point { x: 28.00, y: 28.00 }),
                PathEl::CurveTo(
                    Point { x: 28.00, y: 26.90 },
                    Point { x: 27.10, y: 26.00 },
                    Point { x: 26.00, y: 26.00 },
                ),
                PathEl::LineTo(Point { x: 14.00, y: 26.00 }),
                PathEl::LineTo(Point { x: 14.00, y: 22.00 }),
                PathEl::LineTo(Point { x: 18.00, y: 22.00 }),
                PathEl::CurveTo(
                    Point { x: 19.10, y: 22.00 },
                    Point { x: 20.00, y: 21.10 },
                    Point { x: 20.00, y: 20.00 },
                ),
                PathEl::LineTo(Point { x: 20.00, y: 16.00 }),
                PathEl::LineTo(Point { x: 24.00, y: 16.00 }),
                PathEl::CurveTo(
                    Point { x: 26.21, y: 16.00 },
                    Point { x: 28.00, y: 14.21 },
                    Point { x: 28.00, y: 12.00 },
                ),
                PathEl::LineTo(Point { x: 28.00, y: 6.92 }),
                PathEl::CurveTo(
                    Point { x: 26.11, y: 6.32 },
                    Point { x: 24.09, y: 6.00 },
                    Point { x: 22.00, y: 6.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 10.95, y: 6.00 },
                    Point { x: 2.00, y: 14.95 },
                    Point { x: 2.00, y: 26.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 2.00, y: 37.05 },
                    Point { x: 10.95, y: 46.00 },
                    Point { x: 22.00, y: 46.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 33.05, y: 46.00 },
                    Point { x: 42.00, y: 37.05 },
                    Point { x: 42.00, y: 26.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 42.00, y: 25.32 },
                    Point { x: 41.96, y: 24.66 },
                    Point { x: 41.90, y: 24.00 },
                ),
                PathEl::LineTo(Point { x: 37.85, y: 24.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 20.00, y: 41.86 }),
                PathEl::CurveTo(
                    Point { x: 12.11, y: 40.88 },
                    Point { x: 6.00, y: 34.16 },
                    Point { x: 6.00, y: 26.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 6.00, y: 24.77 },
                    Point { x: 6.15, y: 23.57 },
                    Point { x: 6.42, y: 22.42 },
                ),
                PathEl::LineTo(Point { x: 16.00, y: 32.00 }),
                PathEl::LineTo(Point { x: 16.00, y: 34.00 }),
                PathEl::CurveTo(
                    Point { x: 16.00, y: 36.21 },
                    Point { x: 17.79, y: 38.00 },
                    Point { x: 20.00, y: 38.00 },
                ),
                PathEl::LineTo(Point { x: 20.00, y: 41.86 }),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct PersonalVideo {
    size: f64,
    color: Color,
}

impl PersonalVideo {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for PersonalVideo {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 42.00, y: 6.00 }),
                PathEl::LineTo(Point { x: 6.00, y: 6.00 }),
                PathEl::CurveTo(
                    Point { x: 3.79, y: 6.00 },
                    Point { x: 2.00, y: 7.79 },
                    Point { x: 2.00, y: 10.00 },
                ),
                PathEl::LineTo(Point { x: 2.00, y: 34.00 }),
                PathEl::CurveTo(
                    Point { x: 2.00, y: 36.21 },
                    Point { x: 3.79, y: 38.00 },
                    Point { x: 6.00, y: 38.00 },
                ),
                PathEl::LineTo(Point { x: 16.00, y: 38.00 }),
                PathEl::LineTo(Point { x: 16.00, y: 42.00 }),
                PathEl::LineTo(Point { x: 32.00, y: 42.00 }),
                PathEl::LineTo(Point { x: 32.00, y: 38.00 }),
                PathEl::LineTo(Point { x: 42.00, y: 38.00 }),
                PathEl::CurveTo(
                    Point { x: 44.21, y: 38.00 },
                    Point { x: 45.98, y: 36.21 },
                    Point { x: 45.98, y: 34.00 },
                ),
                PathEl::LineTo(Point { x: 46.00, y: 10.00 }),
                PathEl::CurveTo(
                    Point { x: 46.00, y: 7.79 },
                    Point { x: 44.21, y: 6.00 },
                    Point { x: 42.00, y: 6.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 42.00, y: 34.00 }),
                PathEl::LineTo(Point { x: 6.00, y: 34.00 }),
                PathEl::LineTo(Point { x: 6.00, y: 10.00 }),
                PathEl::LineTo(Point { x: 42.00, y: 10.00 }),
                PathEl::LineTo(Point { x: 42.00, y: 34.00 }),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct Mouse {
    size: f64,
    color: Color,
}

impl Mouse {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for Mouse {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 26.00, y: 2.14 }),
                PathEl::LineTo(Point { x: 26.00, y: 18.00 }),
                PathEl::LineTo(Point { x: 40.00, y: 18.00 }),
                PathEl::CurveTo(
                    Point { x: 40.00, y: 9.84 },
                    Point { x: 33.89, y: 3.12 },
                    Point { x: 26.00, y: 2.14 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 8.00, y: 30.00 }),
                PathEl::CurveTo(
                    Point { x: 8.00, y: 38.84 },
                    Point { x: 15.16, y: 46.00 },
                    Point { x: 24.00, y: 46.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 32.84, y: 46.00 },
                    Point { x: 40.00, y: 38.84 },
                    Point { x: 40.00, y: 30.00 },
                ),
                PathEl::LineTo(Point { x: 40.00, y: 22.00 }),
                PathEl::LineTo(Point { x: 8.00, y: 22.00 }),
                PathEl::LineTo(Point { x: 8.00, y: 30.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 22.00, y: 2.14 }),
                PathEl::CurveTo(
                    Point { x: 14.11, y: 3.12 },
                    Point { x: 8.00, y: 9.84 },
                    Point { x: 8.00, y: 18.00 },
                ),
                PathEl::LineTo(Point { x: 22.00, y: 18.00 }),
                PathEl::LineTo(Point { x: 22.00, y: 2.14 }),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct DonutLarge {
    size: f64,
    color: Color,
}

impl DonutLarge {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for DonutLarge {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 22.00, y: 10.16 }),
                PathEl::LineTo(Point { x: 22.00, y: 4.00 }),
                PathEl::CurveTo(
                    Point { x: 12.00, y: 5.00 },
                    Point { x: 4.00, y: 13.62 },
                    Point { x: 4.00, y: 24.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 4.00, y: 34.38 },
                    Point { x: 12.00, y: 43.00 },
                    Point { x: 22.00, y: 44.00 },
                ),
                PathEl::LineTo(Point { x: 22.00, y: 37.84 }),
                PathEl::CurveTo(
                    Point { x: 16.00, y: 36.88 },
                    Point { x: 10.00, y: 31.04 },
                    Point { x: 10.00, y: 24.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 10.00, y: 16.96 },
                    Point { x: 16.00, y: 11.12 },
                    Point { x: 22.00, y: 10.16 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 37.94, y: 22.00 }),
                PathEl::LineTo(Point { x: 44.00, y: 22.00 }),
                PathEl::CurveTo(
                    Point { x: 43.06, y: 12.00 },
                    Point { x: 36.00, y: 4.94 },
                    Point { x: 26.00, y: 4.00 },
                ),
                PathEl::LineTo(Point { x: 26.00, y: 10.16 }),
                PathEl::CurveTo(
                    Point { x: 32.00, y: 11.02 },
                    Point { x: 37.08, y: 16.00 },
                    Point { x: 37.94, y: 22.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 26.00, y: 37.84 }),
                PathEl::LineTo(Point { x: 26.00, y: 44.00 }),
                PathEl::CurveTo(
                    Point { x: 36.00, y: 43.06 },
                    Point { x: 43.06, y: 36.00 },
                    Point { x: 44.00, y: 26.00 },
                ),
                PathEl::LineTo(Point { x: 37.94, y: 26.00 }),
                PathEl::CurveTo(
                    Point { x: 37.08, y: 32.00 },
                    Point { x: 32.00, y: 36.98 },
                    Point { x: 26.00, y: 37.84 },
                ),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct SpeakerNotes {
    size: f64,
    color: Color,
}

impl SpeakerNotes {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for SpeakerNotes {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 40.00, y: 4.00 }),
                PathEl::LineTo(Point { x: 8.00, y: 4.00 }),
                PathEl::CurveTo(
                    Point { x: 5.79, y: 4.00 },
                    Point { x: 4.02, y: 5.79 },
                    Point { x: 4.02, y: 8.00 },
                ),
                PathEl::LineTo(Point { x: 4.00, y: 44.00 }),
                PathEl::LineTo(Point { x: 12.00, y: 36.00 }),
                PathEl::LineTo(Point { x: 40.00, y: 36.00 }),
                PathEl::CurveTo(
                    Point { x: 42.21, y: 36.00 },
                    Point { x: 44.00, y: 34.21 },
                    Point { x: 44.00, y: 32.00 },
                ),
                PathEl::LineTo(Point { x: 44.00, y: 8.00 }),
                PathEl::CurveTo(
                    Point { x: 44.00, y: 5.79 },
                    Point { x: 42.21, y: 4.00 },
                    Point { x: 40.00, y: 4.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 16.00, y: 28.00 }),
                PathEl::LineTo(Point { x: 12.00, y: 28.00 }),
                PathEl::LineTo(Point { x: 12.00, y: 24.00 }),
                PathEl::LineTo(Point { x: 16.00, y: 24.00 }),
                PathEl::LineTo(Point { x: 16.00, y: 28.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 16.00, y: 22.00 }),
                PathEl::LineTo(Point { x: 12.00, y: 22.00 }),
                PathEl::LineTo(Point { x: 12.00, y: 18.00 }),
                PathEl::LineTo(Point { x: 16.00, y: 18.00 }),
                PathEl::LineTo(Point { x: 16.00, y: 22.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 16.00, y: 16.00 }),
                PathEl::LineTo(Point { x: 12.00, y: 16.00 }),
                PathEl::LineTo(Point { x: 12.00, y: 12.00 }),
                PathEl::LineTo(Point { x: 16.00, y: 12.00 }),
                PathEl::LineTo(Point { x: 16.00, y: 16.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 30.00, y: 28.00 }),
                PathEl::LineTo(Point { x: 20.00, y: 28.00 }),
                PathEl::LineTo(Point { x: 20.00, y: 24.00 }),
                PathEl::LineTo(Point { x: 30.00, y: 24.00 }),
                PathEl::LineTo(Point { x: 30.00, y: 28.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 36.00, y: 22.00 }),
                PathEl::LineTo(Point { x: 20.00, y: 22.00 }),
                PathEl::LineTo(Point { x: 20.00, y: 18.00 }),
                PathEl::LineTo(Point { x: 36.00, y: 18.00 }),
                PathEl::LineTo(Point { x: 36.00, y: 22.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 36.00, y: 16.00 }),
                PathEl::LineTo(Point { x: 20.00, y: 16.00 }),
                PathEl::LineTo(Point { x: 20.00, y: 12.00 }),
                PathEl::LineTo(Point { x: 36.00, y: 12.00 }),
                PathEl::LineTo(Point { x: 36.00, y: 16.00 }),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct Title {
    size: f64,
    color: Color,
}

impl Title {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for Title {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 10.00, y: 8.00 }),
                PathEl::LineTo(Point { x: 10.00, y: 14.00 }),
                PathEl::LineTo(Point { x: 21.00, y: 14.00 }),
                PathEl::LineTo(Point { x: 21.00, y: 38.00 }),
                PathEl::LineTo(Point { x: 27.00, y: 38.00 }),
                PathEl::LineTo(Point { x: 27.00, y: 14.00 }),
                PathEl::LineTo(Point { x: 38.00, y: 14.00 }),
                PathEl::LineTo(Point { x: 38.00, y: 8.00 }),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct SkipPrevious {
    size: f64,
    color: Color,
}

impl SkipPrevious {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for SkipPrevious {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 12.00, y: 12.00 }),
                PathEl::LineTo(Point { x: 16.00, y: 12.00 }),
                PathEl::LineTo(Point { x: 16.00, y: 36.00 }),
                PathEl::LineTo(Point { x: 12.00, y: 36.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 19.00, y: 24.00 }),
                PathEl::LineTo(Point { x: 36.00, y: 36.00 }),
                PathEl::LineTo(Point { x: 36.00, y: 12.00 }),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct AccessAlarm {
    size: f64,
    color: Color,
}

impl AccessAlarm {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for AccessAlarm {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 44.00, y: 11.44 }),
                PathEl::LineTo(Point { x: 34.81, y: 3.73 }),
                PathEl::LineTo(Point { x: 32.24, y: 6.79 }),
                PathEl::LineTo(Point { x: 41.43, y: 14.50 }),
                PathEl::LineTo(Point { x: 44.00, y: 11.44 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 15.76, y: 6.78 }),
                PathEl::LineTo(Point { x: 13.19, y: 3.72 }),
                PathEl::LineTo(Point { x: 4.00, y: 11.43 }),
                PathEl::LineTo(Point { x: 6.57, y: 14.49 }),
                PathEl::LineTo(Point { x: 15.76, y: 6.78 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 25.00, y: 16.00 }),
                PathEl::LineTo(Point { x: 22.00, y: 16.00 }),
                PathEl::LineTo(Point { x: 22.00, y: 28.00 }),
                PathEl::LineTo(Point { x: 31.49, y: 33.71 }),
                PathEl::LineTo(Point { x: 33.00, y: 31.24 }),
                PathEl::LineTo(Point { x: 25.00, y: 26.50 }),
                PathEl::LineTo(Point { x: 25.00, y: 16.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 23.99, y: 8.00 }),
                PathEl::CurveTo(
                    Point { x: 14.04, y: 8.00 },
                    Point { x: 6.00, y: 16.06 },
                    Point { x: 6.00, y: 26.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 6.00, y: 35.94 },
                    Point { x: 14.04, y: 44.00 },
                    Point { x: 23.99, y: 44.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 33.94, y: 44.00 },
                    Point { x: 42.00, y: 35.94 },
                    Point { x: 42.00, y: 26.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 42.00, y: 16.06 },
                    Point { x: 33.94, y: 8.00 },
                    Point { x: 23.99, y: 8.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 24.00, y: 40.00 }),
                PathEl::CurveTo(
                    Point { x: 16.27, y: 40.00 },
                    Point { x: 10.00, y: 33.73 },
                    Point { x: 10.00, y: 26.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 10.00, y: 18.27 },
                    Point { x: 16.27, y: 12.00 },
                    Point { x: 24.00, y: 12.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 31.73, y: 12.00 },
                    Point { x: 38.00, y: 18.27 },
                    Point { x: 38.00, y: 26.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 38.00, y: 33.73 },
                    Point { x: 31.74, y: 40.00 },
                    Point { x: 24.00, y: 40.00 },
                ),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct LibraryMusic {
    size: f64,
    color: Color,
}

impl LibraryMusic {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for LibraryMusic {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 40.00, y: 4.00 }),
                PathEl::LineTo(Point { x: 16.00, y: 4.00 }),
                PathEl::CurveTo(
                    Point { x: 13.79, y: 4.00 },
                    Point { x: 12.00, y: 5.79 },
                    Point { x: 12.00, y: 8.00 },
                ),
                PathEl::LineTo(Point { x: 12.00, y: 32.00 }),
                PathEl::CurveTo(
                    Point { x: 12.00, y: 34.21 },
                    Point { x: 13.79, y: 36.00 },
                    Point { x: 16.00, y: 36.00 },
                ),
                PathEl::LineTo(Point { x: 40.00, y: 36.00 }),
                PathEl::CurveTo(
                    Point { x: 42.21, y: 36.00 },
                    Point { x: 44.00, y: 34.21 },
                    Point { x: 44.00, y: 32.00 },
                ),
                PathEl::LineTo(Point { x: 44.00, y: 8.00 }),
                PathEl::CurveTo(
                    Point { x: 44.00, y: 5.79 },
                    Point { x: 42.21, y: 4.00 },
                    Point { x: 40.00, y: 4.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 36.00, y: 14.00 }),
                PathEl::LineTo(Point { x: 30.00, y: 14.00 }),
                PathEl::LineTo(Point { x: 30.00, y: 25.00 }),
                PathEl::CurveTo(
                    Point { x: 30.00, y: 27.76 },
                    Point { x: 27.76, y: 30.00 },
                    Point { x: 25.00, y: 30.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 22.24, y: 30.00 },
                    Point { x: 20.00, y: 27.76 },
                    Point { x: 20.00, y: 25.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 20.00, y: 22.24 },
                    Point { x: 22.24, y: 20.00 },
                    Point { x: 25.00, y: 20.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 26.13, y: 20.00 },
                    Point { x: 27.16, y: 20.39 },
                    Point { x: 28.00, y: 21.02 },
                ),
                PathEl::LineTo(Point { x: 28.00, y: 10.00 }),
                PathEl::LineTo(Point { x: 36.00, y: 10.00 }),
                PathEl::LineTo(Point { x: 36.00, y: 14.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 8.00, y: 12.00 }),
                PathEl::LineTo(Point { x: 4.00, y: 12.00 }),
                PathEl::LineTo(Point { x: 4.00, y: 40.00 }),
                PathEl::CurveTo(
                    Point { x: 4.00, y: 42.21 },
                    Point { x: 5.79, y: 44.00 },
                    Point { x: 8.00, y: 44.00 },
                ),
                PathEl::LineTo(Point { x: 36.00, y: 44.00 }),
                PathEl::LineTo(Point { x: 36.00, y: 40.00 }),
                PathEl::LineTo(Point { x: 8.00, y: 40.00 }),
                PathEl::LineTo(Point { x: 8.00, y: 12.00 }),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct SignalWifi3BarLock {
    size: f64,
    color: Color,
}

impl SignalWifi3BarLock {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for SignalWifi3BarLock {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 41.00, y: 19.00 }),
                PathEl::CurveTo(
                    Point { x: 41.70, y: 19.00 },
                    Point { x: 42.40, y: 19.10 },
                    Point { x: 43.10, y: 19.20 },
                ),
                PathEl::LineTo(Point { x: 47.30, y: 14.00 }),
                PathEl::CurveTo(
                    Point { x: 46.40, y: 13.30 },
                    Point { x: 37.50, y: 6.00 },
                    Point { x: 24.00, y: 6.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 10.50, y: 6.00 },
                    Point { x: 1.60, y: 13.30 },
                    Point { x: 0.70, y: 14.00 },
                ),
                PathEl::LineTo(Point { x: 24.00, y: 43.00 }),
                PathEl::LineTo(Point { x: 31.00, y: 34.30 }),
                PathEl::LineTo(Point { x: 31.00, y: 29.00 }),
                PathEl::CurveTo(
                    Point { x: 31.00, y: 23.50 },
                    Point { x: 35.50, y: 19.00 },
                    Point { x: 41.00, y: 19.00 },
                ),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 46.00, y: 32.00 }),
                PathEl::LineTo(Point { x: 46.00, y: 29.00 }),
                PathEl::CurveTo(
                    Point { x: 46.00, y: 26.20 },
                    Point { x: 43.80, y: 24.00 },
                    Point { x: 41.00, y: 24.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 38.20, y: 24.00 },
                    Point { x: 36.00, y: 26.20 },
                    Point { x: 36.00, y: 29.00 },
                ),
                PathEl::LineTo(Point { x: 36.00, y: 32.00 }),
                PathEl::CurveTo(
                    Point { x: 34.90, y: 32.00 },
                    Point { x: 34.00, y: 32.90 },
                    Point { x: 34.00, y: 34.00 },
                ),
                PathEl::LineTo(Point { x: 34.00, y: 42.00 }),
                PathEl::CurveTo(
                    Point { x: 34.00, y: 43.10 },
                    Point { x: 34.90, y: 44.00 },
                    Point { x: 36.00, y: 44.00 },
                ),
                PathEl::LineTo(Point { x: 46.00, y: 44.00 }),
                PathEl::CurveTo(
                    Point { x: 47.10, y: 44.00 },
                    Point { x: 48.00, y: 43.10 },
                    Point { x: 48.00, y: 42.00 },
                ),
                PathEl::LineTo(Point { x: 48.00, y: 34.00 }),
                PathEl::CurveTo(
                    Point { x: 48.00, y: 32.90 },
                    Point { x: 47.10, y: 32.00 },
                    Point { x: 46.00, y: 32.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 44.00, y: 32.00 }),
                PathEl::LineTo(Point { x: 38.00, y: 32.00 }),
                PathEl::LineTo(Point { x: 38.00, y: 29.00 }),
                PathEl::CurveTo(
                    Point { x: 38.00, y: 27.30 },
                    Point { x: 39.30, y: 26.00 },
                    Point { x: 41.00, y: 26.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 42.70, y: 26.00 },
                    Point { x: 44.00, y: 27.30 },
                    Point { x: 44.00, y: 29.00 },
                ),
                PathEl::LineTo(Point { x: 44.00, y: 32.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 7.10, y: 21.90 }),
                PathEl::LineTo(Point { x: 24.00, y: 43.00 }),
                PathEl::LineTo(Point { x: 31.00, y: 34.30 }),
                PathEl::LineTo(Point { x: 31.00, y: 29.00 }),
                PathEl::CurveTo(
                    Point { x: 31.00, y: 24.70 },
                    Point { x: 33.70, y: 21.00 },
                    Point { x: 37.50, y: 19.60 },
                ),
                PathEl::CurveTo(
                    Point { x: 34.60, y: 18.00 },
                    Point { x: 29.90, y: 16.00 },
                    Point { x: 24.00, y: 16.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 14.40, y: 16.00 },
                    Point { x: 7.90, y: 21.20 },
                    Point { x: 7.10, y: 21.90 },
                ),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct DesktopWindows {
    size: f64,
    color: Color,
}

impl DesktopWindows {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for DesktopWindows {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 42.00, y: 4.00 }),
                PathEl::LineTo(Point { x: 6.00, y: 4.00 }),
                PathEl::CurveTo(
                    Point { x: 3.79, y: 4.00 },
                    Point { x: 2.00, y: 5.79 },
                    Point { x: 2.00, y: 8.00 },
                ),
                PathEl::LineTo(Point { x: 2.00, y: 32.00 }),
                PathEl::CurveTo(
                    Point { x: 2.00, y: 34.21 },
                    Point { x: 3.79, y: 36.00 },
                    Point { x: 6.00, y: 36.00 },
                ),
                PathEl::LineTo(Point { x: 20.00, y: 36.00 }),
                PathEl::LineTo(Point { x: 20.00, y: 40.00 }),
                PathEl::LineTo(Point { x: 16.00, y: 40.00 }),
                PathEl::LineTo(Point { x: 16.00, y: 44.00 }),
                PathEl::LineTo(Point { x: 32.00, y: 44.00 }),
                PathEl::LineTo(Point { x: 32.00, y: 40.00 }),
                PathEl::LineTo(Point { x: 28.00, y: 40.00 }),
                PathEl::LineTo(Point { x: 28.00, y: 36.00 }),
                PathEl::LineTo(Point { x: 42.00, y: 36.00 }),
                PathEl::CurveTo(
                    Point { x: 44.21, y: 36.00 },
                    Point { x: 46.00, y: 34.21 },
                    Point { x: 46.00, y: 32.00 },
                ),
                PathEl::LineTo(Point { x: 46.00, y: 8.00 }),
                PathEl::CurveTo(
                    Point { x: 46.00, y: 5.79 },
                    Point { x: 44.21, y: 4.00 },
                    Point { x: 42.00, y: 4.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 42.00, y: 32.00 }),
                PathEl::LineTo(Point { x: 6.00, y: 32.00 }),
                PathEl::LineTo(Point { x: 6.00, y: 8.00 }),
                PathEl::LineTo(Point { x: 42.00, y: 8.00 }),
                PathEl::LineTo(Point { x: 42.00, y: 32.00 }),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct Filter2 {
    size: f64,
    color: Color,
}

impl Filter2 {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for Filter2 {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 6.00, y: 10.00 }),
                PathEl::LineTo(Point { x: 2.00, y: 10.00 }),
                PathEl::LineTo(Point { x: 2.00, y: 42.00 }),
                PathEl::CurveTo(
                    Point { x: 2.00, y: 44.21 },
                    Point { x: 3.79, y: 46.00 },
                    Point { x: 6.00, y: 46.00 },
                ),
                PathEl::LineTo(Point { x: 38.00, y: 46.00 }),
                PathEl::LineTo(Point { x: 38.00, y: 42.00 }),
                PathEl::LineTo(Point { x: 6.00, y: 42.00 }),
                PathEl::LineTo(Point { x: 6.00, y: 10.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 42.00, y: 2.00 }),
                PathEl::LineTo(Point { x: 14.00, y: 2.00 }),
                PathEl::CurveTo(
                    Point { x: 11.79, y: 2.00 },
                    Point { x: 10.00, y: 3.79 },
                    Point { x: 10.00, y: 6.00 },
                ),
                PathEl::LineTo(Point { x: 10.00, y: 34.00 }),
                PathEl::CurveTo(
                    Point { x: 10.00, y: 36.21 },
                    Point { x: 11.79, y: 38.00 },
                    Point { x: 14.00, y: 38.00 },
                ),
                PathEl::LineTo(Point { x: 42.00, y: 38.00 }),
                PathEl::CurveTo(
                    Point { x: 44.21, y: 38.00 },
                    Point { x: 46.00, y: 36.21 },
                    Point { x: 46.00, y: 34.00 },
                ),
                PathEl::LineTo(Point { x: 46.00, y: 6.00 }),
                PathEl::CurveTo(
                    Point { x: 46.00, y: 3.79 },
                    Point { x: 44.21, y: 2.00 },
                    Point { x: 42.00, y: 2.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 42.00, y: 34.00 }),
                PathEl::LineTo(Point { x: 14.00, y: 34.00 }),
                PathEl::LineTo(Point { x: 14.00, y: 6.00 }),
                PathEl::LineTo(Point { x: 42.00, y: 6.00 }),
                PathEl::LineTo(Point { x: 42.00, y: 34.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 34.00, y: 26.00 }),
                PathEl::LineTo(Point { x: 26.00, y: 26.00 }),
                PathEl::LineTo(Point { x: 26.00, y: 22.00 }),
                PathEl::LineTo(Point { x: 30.00, y: 22.00 }),
                PathEl::CurveTo(
                    Point { x: 32.21, y: 22.00 },
                    Point { x: 34.00, y: 20.21 },
                    Point { x: 34.00, y: 18.00 },
                ),
                PathEl::LineTo(Point { x: 34.00, y: 14.00 }),
                PathEl::CurveTo(
                    Point { x: 34.00, y: 11.79 },
                    Point { x: 32.21, y: 10.00 },
                    Point { x: 30.00, y: 10.00 },
                ),
                PathEl::LineTo(Point { x: 22.00, y: 10.00 }),
                PathEl::LineTo(Point { x: 22.00, y: 14.00 }),
                PathEl::LineTo(Point { x: 30.00, y: 14.00 }),
                PathEl::LineTo(Point { x: 30.00, y: 18.00 }),
                PathEl::LineTo(Point { x: 26.00, y: 18.00 }),
                PathEl::CurveTo(
                    Point { x: 23.79, y: 18.00 },
                    Point { x: 22.00, y: 19.79 },
                    Point { x: 22.00, y: 22.00 },
                ),
                PathEl::LineTo(Point { x: 22.00, y: 30.00 }),
                PathEl::LineTo(Point { x: 34.00, y: 30.00 }),
                PathEl::LineTo(Point { x: 34.00, y: 26.00 }),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct FullscreenExit {
    size: f64,
    color: Color,
}

impl FullscreenExit {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for FullscreenExit {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 10.00, y: 32.00 }),
                PathEl::LineTo(Point { x: 16.00, y: 32.00 }),
                PathEl::LineTo(Point { x: 16.00, y: 38.00 }),
                PathEl::LineTo(Point { x: 20.00, y: 38.00 }),
                PathEl::LineTo(Point { x: 20.00, y: 28.00 }),
                PathEl::LineTo(Point { x: 10.00, y: 28.00 }),
                PathEl::LineTo(Point { x: 10.00, y: 32.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 16.00, y: 16.00 }),
                PathEl::LineTo(Point { x: 10.00, y: 16.00 }),
                PathEl::LineTo(Point { x: 10.00, y: 20.00 }),
                PathEl::LineTo(Point { x: 20.00, y: 20.00 }),
                PathEl::LineTo(Point { x: 20.00, y: 10.00 }),
                PathEl::LineTo(Point { x: 16.00, y: 10.00 }),
                PathEl::LineTo(Point { x: 16.00, y: 16.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 28.00, y: 38.00 }),
                PathEl::LineTo(Point { x: 32.00, y: 38.00 }),
                PathEl::LineTo(Point { x: 32.00, y: 32.00 }),
                PathEl::LineTo(Point { x: 38.00, y: 32.00 }),
                PathEl::LineTo(Point { x: 38.00, y: 28.00 }),
                PathEl::LineTo(Point { x: 28.00, y: 28.00 }),
                PathEl::LineTo(Point { x: 28.00, y: 38.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 32.00, y: 16.00 }),
                PathEl::LineTo(Point { x: 32.00, y: 10.00 }),
                PathEl::LineTo(Point { x: 28.00, y: 10.00 }),
                PathEl::LineTo(Point { x: 28.00, y: 20.00 }),
                PathEl::LineTo(Point { x: 38.00, y: 20.00 }),
                PathEl::LineTo(Point { x: 38.00, y: 16.00 }),
                PathEl::LineTo(Point { x: 32.00, y: 16.00 }),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct MultilineChart {
    size: f64,
    color: Color,
}

impl MultilineChart {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for MultilineChart {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 44.00, y: 13.84 }),
                PathEl::LineTo(Point { x: 41.18, y: 11.02 }),
                PathEl::LineTo(Point { x: 35.47, y: 17.43 }),
                PathEl::CurveTo(
                    Point { x: 31.36, y: 12.81 },
                    Point { x: 25.66, y: 10.00 },
                    Point { x: 19.22, y: 10.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 13.44, y: 10.00 },
                    Point { x: 8.14, y: 12.32 },
                    Point { x: 4.00, y: 16.00 },
                ),
                PathEl::LineTo(Point { x: 6.84, y: 18.84 }),
                PathEl::CurveTo(
                    Point { x: 10.24, y: 15.86 },
                    Point { x: 14.54, y: 14.00 },
                    Point { x: 19.22, y: 14.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 24.70, y: 14.00 },
                    Point { x: 29.40, y: 16.51 },
                    Point { x: 32.76, y: 20.49 },
                ),
                PathEl::LineTo(Point { x: 27.00, y: 26.96 }),
                PathEl::LineTo(Point { x: 19.00, y: 18.96 }),
                PathEl::LineTo(Point { x: 4.00, y: 33.98 }),
                PathEl::LineTo(Point { x: 7.00, y: 36.98 }),
                PathEl::LineTo(Point { x: 19.00, y: 24.96 }),
                PathEl::LineTo(Point { x: 27.00, y: 32.96 }),
                PathEl::LineTo(Point { x: 35.09, y: 23.86 }),
                PathEl::CurveTo(
                    Point { x: 36.59, y: 26.56 },
                    Point { x: 37.59, y: 29.65 },
                    Point { x: 37.98, y: 32.96 },
                ),
                PathEl::LineTo(Point { x: 42.00, y: 32.96 }),
                PathEl::CurveTo(
                    Point { x: 41.56, y: 28.35 },
                    Point { x: 40.11, y: 24.18 },
                    Point { x: 37.91, y: 20.69 },
                ),
                PathEl::LineTo(Point { x: 44.00, y: 13.84 }),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct Visibility {
    size: f64,
    color: Color,
}

impl Visibility {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for Visibility {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 24.00, y: 9.00 }),
                PathEl::CurveTo(
                    Point { x: 14.00, y: 9.00 },
                    Point { x: 5.46, y: 15.22 },
                    Point { x: 2.00, y: 24.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 5.46, y: 32.78 },
                    Point { x: 14.00, y: 39.00 },
                    Point { x: 24.00, y: 39.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 34.01, y: 39.00 },
                    Point { x: 42.54, y: 32.78 },
                    Point { x: 46.00, y: 24.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 42.54, y: 15.22 },
                    Point { x: 34.01, y: 9.00 },
                    Point { x: 24.00, y: 9.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 24.00, y: 34.00 }),
                PathEl::CurveTo(
                    Point { x: 18.48, y: 34.00 },
                    Point { x: 14.00, y: 29.52 },
                    Point { x: 14.00, y: 24.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 14.00, y: 18.48 },
                    Point { x: 18.48, y: 14.00 },
                    Point { x: 24.00, y: 14.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 29.52, y: 14.00 },
                    Point { x: 34.00, y: 18.48 },
                    Point { x: 34.00, y: 24.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 34.00, y: 29.52 },
                    Point { x: 29.52, y: 34.00 },
                    Point { x: 24.00, y: 34.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 24.00, y: 18.00 }),
                PathEl::CurveTo(
                    Point { x: 20.69, y: 18.00 },
                    Point { x: 18.00, y: 20.69 },
                    Point { x: 18.00, y: 24.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 18.00, y: 27.31 },
                    Point { x: 20.69, y: 30.00 },
                    Point { x: 24.00, y: 30.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 27.31, y: 30.00 },
                    Point { x: 30.00, y: 27.31 },
                    Point { x: 30.00, y: 24.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 30.00, y: 20.69 },
                    Point { x: 27.31, y: 18.00 },
                    Point { x: 24.00, y: 18.00 },
                ),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct Redeem {
    size: f64,
    color: Color,
}

impl Redeem {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for Redeem {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 40.00, y: 12.00 }),
                PathEl::LineTo(Point { x: 35.63, y: 12.00 }),
                PathEl::CurveTo(
                    Point { x: 35.85, y: 11.37 },
                    Point { x: 36.00, y: 10.71 },
                    Point { x: 36.00, y: 10.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 36.00, y: 6.69 },
                    Point { x: 33.31, y: 4.00 },
                    Point { x: 30.00, y: 4.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 27.91, y: 4.00 },
                    Point { x: 26.07, y: 5.07 },
                    Point { x: 25.00, y: 6.69 },
                ),
                PathEl::LineTo(Point { x: 24.00, y: 8.05 }),
                PathEl::LineTo(Point { x: 23.00, y: 6.69 }),
                PathEl::CurveTo(
                    Point { x: 21.93, y: 5.07 },
                    Point { x: 20.09, y: 4.00 },
                    Point { x: 18.00, y: 4.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 14.69, y: 4.00 },
                    Point { x: 12.00, y: 6.69 },
                    Point { x: 12.00, y: 10.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 12.00, y: 10.71 },
                    Point { x: 12.14, y: 11.37 },
                    Point { x: 12.37, y: 12.00 },
                ),
                PathEl::LineTo(Point { x: 8.00, y: 12.00 }),
                PathEl::CurveTo(
                    Point { x: 5.79, y: 12.00 },
                    Point { x: 4.02, y: 13.79 },
                    Point { x: 4.02, y: 16.00 },
                ),
                PathEl::LineTo(Point { x: 4.00, y: 38.00 }),
                PathEl::CurveTo(
                    Point { x: 4.00, y: 40.21 },
                    Point { x: 5.79, y: 42.00 },
                    Point { x: 8.00, y: 42.00 },
                ),
                PathEl::LineTo(Point { x: 40.00, y: 42.00 }),
                PathEl::CurveTo(
                    Point { x: 42.21, y: 42.00 },
                    Point { x: 44.00, y: 40.21 },
                    Point { x: 44.00, y: 38.00 },
                ),
                PathEl::LineTo(Point { x: 44.00, y: 16.00 }),
                PathEl::CurveTo(
                    Point { x: 44.00, y: 13.79 },
                    Point { x: 42.21, y: 12.00 },
                    Point { x: 40.00, y: 12.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 30.00, y: 8.00 }),
                PathEl::CurveTo(
                    Point { x: 31.10, y: 8.00 },
                    Point { x: 32.00, y: 8.90 },
                    Point { x: 32.00, y: 10.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 32.00, y: 11.10 },
                    Point { x: 31.10, y: 12.00 },
                    Point { x: 30.00, y: 12.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 28.90, y: 12.00 },
                    Point { x: 28.00, y: 11.10 },
                    Point { x: 28.00, y: 10.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 28.00, y: 8.90 },
                    Point { x: 28.90, y: 8.00 },
                    Point { x: 30.00, y: 8.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 18.00, y: 8.00 }),
                PathEl::CurveTo(
                    Point { x: 19.10, y: 8.00 },
                    Point { x: 20.00, y: 8.90 },
                    Point { x: 20.00, y: 10.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 20.00, y: 11.10 },
                    Point { x: 19.10, y: 12.00 },
                    Point { x: 18.00, y: 12.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 16.90, y: 12.00 },
                    Point { x: 16.00, y: 11.10 },
                    Point { x: 16.00, y: 10.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 16.00, y: 8.90 },
                    Point { x: 16.90, y: 8.00 },
                    Point { x: 18.00, y: 8.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 40.00, y: 38.00 }),
                PathEl::LineTo(Point { x: 8.00, y: 38.00 }),
                PathEl::LineTo(Point { x: 8.00, y: 34.00 }),
                PathEl::LineTo(Point { x: 40.00, y: 34.00 }),
                PathEl::LineTo(Point { x: 40.00, y: 38.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 40.00, y: 28.00 }),
                PathEl::LineTo(Point { x: 8.00, y: 28.00 }),
                PathEl::LineTo(Point { x: 8.00, y: 16.00 }),
                PathEl::LineTo(Point { x: 18.16, y: 16.00 }),
                PathEl::LineTo(Point { x: 14.00, y: 21.67 }),
                PathEl::LineTo(Point { x: 17.25, y: 24.00 }),
                PathEl::LineTo(Point { x: 22.00, y: 17.53 }),
                PathEl::LineTo(Point { x: 24.00, y: 14.81 }),
                PathEl::LineTo(Point { x: 26.00, y: 17.53 }),
                PathEl::LineTo(Point { x: 30.75, y: 24.00 }),
                PathEl::LineTo(Point { x: 34.00, y: 21.67 }),
                PathEl::LineTo(Point { x: 29.84, y: 16.00 }),
                PathEl::LineTo(Point { x: 40.00, y: 16.00 }),
                PathEl::LineTo(Point { x: 40.00, y: 28.00 }),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct TransferWithinAStation {
    size: f64,
    color: Color,
}

impl TransferWithinAStation {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for TransferWithinAStation {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 32.99, y: 31.00 }),
                PathEl::LineTo(Point { x: 32.99, y: 27.50 }),
                PathEl::LineTo(Point { x: 28.00, y: 32.50 }),
                PathEl::LineTo(Point { x: 32.99, y: 37.50 }),
                PathEl::LineTo(Point { x: 32.99, y: 34.00 }),
                PathEl::LineTo(Point { x: 44.00, y: 34.00 }),
                PathEl::LineTo(Point { x: 44.00, y: 31.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 39.01, y: 39.50 }),
                PathEl::LineTo(Point { x: 28.00, y: 39.50 }),
                PathEl::LineTo(Point { x: 28.00, y: 42.50 }),
                PathEl::LineTo(Point { x: 39.01, y: 42.50 }),
                PathEl::LineTo(Point { x: 39.01, y: 46.00 }),
                PathEl::LineTo(Point { x: 44.00, y: 41.00 }),
                PathEl::LineTo(Point { x: 39.01, y: 36.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 19.00, y: 11.00 }),
                PathEl::CurveTo(
                    Point { x: 21.20, y: 11.00 },
                    Point { x: 23.00, y: 9.20 },
                    Point { x: 23.00, y: 7.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 23.00, y: 4.80 },
                    Point { x: 21.20, y: 3.00 },
                    Point { x: 19.00, y: 3.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 16.80, y: 3.00 },
                    Point { x: 15.00, y: 4.80 },
                    Point { x: 15.00, y: 7.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 15.00, y: 9.20 },
                    Point { x: 16.80, y: 11.00 },
                    Point { x: 19.00, y: 11.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 11.50, y: 17.80 }),
                PathEl::LineTo(Point { x: 6.00, y: 46.00 }),
                PathEl::LineTo(Point { x: 10.20, y: 46.00 }),
                PathEl::LineTo(Point { x: 13.70, y: 30.00 }),
                PathEl::LineTo(Point { x: 18.00, y: 34.00 }),
                PathEl::LineTo(Point { x: 18.00, y: 46.00 }),
                PathEl::LineTo(Point { x: 22.00, y: 46.00 }),
                PathEl::LineTo(Point { x: 22.00, y: 30.90 }),
                PathEl::LineTo(Point { x: 17.90, y: 26.80 }),
                PathEl::LineTo(Point { x: 19.10, y: 20.80 }),
                PathEl::CurveTo(
                    Point { x: 21.70, y: 24.00 },
                    Point { x: 25.60, y: 26.00 },
                    Point { x: 30.00, y: 26.00 },
                ),
                PathEl::LineTo(Point { x: 30.00, y: 22.00 }),
                PathEl::CurveTo(
                    Point { x: 26.30, y: 22.00 },
                    Point { x: 23.10, y: 20.00 },
                    Point { x: 21.30, y: 17.10 },
                ),
                PathEl::LineTo(Point { x: 19.40, y: 13.90 }),
                PathEl::CurveTo(
                    Point { x: 18.70, y: 12.70 },
                    Point { x: 17.40, y: 12.00 },
                    Point { x: 16.00, y: 12.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 15.50, y: 12.00 },
                    Point { x: 15.00, y: 12.10 },
                    Point { x: 14.50, y: 12.30 },
                ),
                PathEl::LineTo(Point { x: 4.00, y: 16.60 }),
                PathEl::LineTo(Point { x: 4.00, y: 26.00 }),
                PathEl::LineTo(Point { x: 8.00, y: 26.00 }),
                PathEl::LineTo(Point { x: 8.00, y: 19.30 }),
                PathEl::LineTo(Point { x: 11.50, y: 17.80 }),
            ][..],
            &brush,
        );
    }
}

pub struct RestaurantMenu {
    size: f64,
    color: Color,
}

impl RestaurantMenu {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for RestaurantMenu {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 16.20, y: 26.69 }),
                PathEl::LineTo(Point { x: 21.86, y: 21.03 }),
                PathEl::LineTo(Point { x: 7.83, y: 7.00 }),
                PathEl::CurveTo(
                    Point { x: 4.71, y: 10.12 },
                    Point { x: 4.71, y: 15.19 },
                    Point { x: 7.83, y: 18.31 },
                ),
                PathEl::LineTo(Point { x: 16.20, y: 26.69 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 29.77, y: 23.06 }),
                PathEl::CurveTo(
                    Point { x: 32.82, y: 24.49 },
                    Point { x: 37.13, y: 23.48 },
                    Point { x: 40.31, y: 20.30 },
                ),
                PathEl::CurveTo(
                    Point { x: 44.14, y: 16.47 },
                    Point { x: 44.87, y: 11.00 },
                    Point { x: 41.94, y: 8.07 },
                ),
                PathEl::CurveTo(
                    Point { x: 39.00, y: 5.14 },
                    Point { x: 33.52, y: 5.87 },
                    Point { x: 29.70, y: 9.70 },
                ),
                PathEl::CurveTo(
                    Point { x: 26.52, y: 12.88 },
                    Point { x: 25.52, y: 17.19 },
                    Point { x: 26.94, y: 20.24 },
                ),
                PathEl::CurveTo(
                    Point { x: 22.49, y: 24.68 },
                    Point { x: 7.41, y: 39.76 },
                    Point { x: 7.41, y: 39.76 },
                ),
                PathEl::LineTo(Point { x: 10.24, y: 42.59 }),
                PathEl::LineTo(Point { x: 24.00, y: 28.83 }),
                PathEl::LineTo(Point { x: 37.76, y: 42.59 }),
                PathEl::LineTo(Point { x: 40.59, y: 39.76 }),
                PathEl::LineTo(Point { x: 26.83, y: 26.00 }),
                PathEl::LineTo(Point { x: 29.77, y: 23.06 }),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct HdrOn {
    size: f64,
    color: Color,
}

impl HdrOn {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for HdrOn {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 42.00, y: 23.00 }),
                PathEl::LineTo(Point { x: 42.00, y: 21.00 }),
                PathEl::CurveTo(
                    Point { x: 42.00, y: 19.30 },
                    Point { x: 40.70, y: 18.00 },
                    Point { x: 39.00, y: 18.00 },
                ),
                PathEl::LineTo(Point { x: 32.00, y: 18.00 }),
                PathEl::LineTo(Point { x: 32.00, y: 30.00 }),
                PathEl::LineTo(Point { x: 35.00, y: 30.00 }),
                PathEl::LineTo(Point { x: 35.00, y: 26.00 }),
                PathEl::LineTo(Point { x: 37.30, y: 26.00 }),
                PathEl::LineTo(Point { x: 39.00, y: 30.00 }),
                PathEl::LineTo(Point { x: 42.00, y: 30.00 }),
                PathEl::LineTo(Point { x: 40.20, y: 25.80 }),
                PathEl::CurveTo(
                    Point { x: 41.20, y: 25.30 },
                    Point { x: 42.00, y: 24.20 },
                    Point { x: 42.00, y: 23.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 39.00, y: 23.00 }),
                PathEl::LineTo(Point { x: 35.00, y: 23.00 }),
                PathEl::LineTo(Point { x: 35.00, y: 21.00 }),
                PathEl::LineTo(Point { x: 39.00, y: 21.00 }),
                PathEl::LineTo(Point { x: 39.00, y: 23.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 13.00, y: 22.00 }),
                PathEl::LineTo(Point { x: 9.00, y: 22.00 }),
                PathEl::LineTo(Point { x: 9.00, y: 18.00 }),
                PathEl::LineTo(Point { x: 6.00, y: 18.00 }),
                PathEl::LineTo(Point { x: 6.00, y: 30.00 }),
                PathEl::LineTo(Point { x: 9.00, y: 30.00 }),
                PathEl::LineTo(Point { x: 9.00, y: 25.00 }),
                PathEl::LineTo(Point { x: 13.00, y: 25.00 }),
                PathEl::LineTo(Point { x: 13.00, y: 30.00 }),
                PathEl::LineTo(Point { x: 16.00, y: 30.00 }),
                PathEl::LineTo(Point { x: 16.00, y: 18.00 }),
                PathEl::LineTo(Point { x: 13.00, y: 18.00 }),
                PathEl::LineTo(Point { x: 13.00, y: 22.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 26.00, y: 18.00 }),
                PathEl::LineTo(Point { x: 19.00, y: 18.00 }),
                PathEl::LineTo(Point { x: 19.00, y: 30.00 }),
                PathEl::LineTo(Point { x: 26.00, y: 30.00 }),
                PathEl::CurveTo(
                    Point { x: 27.70, y: 30.00 },
                    Point { x: 29.00, y: 28.70 },
                    Point { x: 29.00, y: 27.00 },
                ),
                PathEl::LineTo(Point { x: 29.00, y: 21.00 }),
                PathEl::CurveTo(
                    Point { x: 29.00, y: 19.30 },
                    Point { x: 27.70, y: 18.00 },
                    Point { x: 26.00, y: 18.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 26.00, y: 27.00 }),
                PathEl::LineTo(Point { x: 22.00, y: 27.00 }),
                PathEl::LineTo(Point { x: 22.00, y: 21.00 }),
                PathEl::LineTo(Point { x: 26.00, y: 21.00 }),
                PathEl::LineTo(Point { x: 26.00, y: 27.00 }),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct SignalWifi3Bar {
    size: f64,
    color: Color,
}

impl SignalWifi3Bar {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for SignalWifi3Bar {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 24.02, y: 42.98 }),
                PathEl::LineTo(Point { x: 47.28, y: 14.00 }),
                PathEl::CurveTo(
                    Point { x: 46.38, y: 13.32 },
                    Point { x: 37.43, y: 6.00 },
                    Point { x: 24.00, y: 6.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 10.57, y: 6.00 },
                    Point { x: 1.62, y: 13.32 },
                    Point { x: 0.72, y: 14.00 },
                ),
                PathEl::LineTo(Point { x: 23.98, y: 42.98 }),
                PathEl::LineTo(Point { x: 24.00, y: 43.00 }),
                PathEl::LineTo(Point { x: 24.02, y: 42.98 }),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 7.07, y: 21.91 }),
                PathEl::LineTo(Point { x: 23.99, y: 42.98 }),
                PathEl::LineTo(Point { x: 24.00, y: 43.00 }),
                PathEl::LineTo(Point { x: 24.02, y: 42.98 }),
                PathEl::LineTo(Point { x: 40.94, y: 21.91 }),
                PathEl::CurveTo(
                    Point { x: 40.08, y: 21.25 },
                    Point { x: 33.62, y: 16.00 },
                    Point { x: 24.00, y: 16.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 14.37, y: 16.00 },
                    Point { x: 7.92, y: 21.25 },
                    Point { x: 7.07, y: 21.91 },
                ),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct AirlineSeatLegroomReduced {
    size: f64,
    color: Color,
}

impl AirlineSeatLegroomReduced {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for AirlineSeatLegroomReduced {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 39.94, y: 38.41 }),
                PathEl::CurveTo(
                    Point { x: 40.31, y: 40.32 },
                    Point { x: 38.85, y: 42.00 },
                    Point { x: 37.00, y: 42.00 },
                ),
                PathEl::LineTo(Point { x: 28.00, y: 42.00 }),
                PathEl::LineTo(Point { x: 28.00, y: 36.00 }),
                PathEl::LineTo(Point { x: 30.00, y: 28.00 }),
                PathEl::LineTo(Point { x: 18.00, y: 28.00 }),
                PathEl::CurveTo(
                    Point { x: 14.70, y: 28.00 },
                    Point { x: 12.00, y: 25.30 },
                    Point { x: 12.00, y: 22.00 },
                ),
                PathEl::LineTo(Point { x: 12.00, y: 6.00 }),
                PathEl::LineTo(Point { x: 24.00, y: 6.00 }),
                PathEl::LineTo(Point { x: 24.00, y: 18.00 }),
                PathEl::LineTo(Point { x: 34.00, y: 18.00 }),
                PathEl::CurveTo(
                    Point { x: 36.21, y: 18.00 },
                    Point { x: 38.00, y: 19.79 },
                    Point { x: 38.00, y: 22.00 },
                ),
                PathEl::LineTo(Point { x: 34.00, y: 36.00 }),
                PathEl::LineTo(Point { x: 36.89, y: 36.00 }),
                PathEl::CurveTo(
                    Point { x: 38.34, y: 36.00 },
                    Point { x: 39.67, y: 36.98 },
                    Point { x: 39.94, y: 38.41 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 10.00, y: 24.00 }),
                PathEl::LineTo(Point { x: 10.00, y: 6.00 }),
                PathEl::LineTo(Point { x: 6.00, y: 6.00 }),
                PathEl::LineTo(Point { x: 6.00, y: 24.00 }),
                PathEl::CurveTo(
                    Point { x: 6.00, y: 29.52 },
                    Point { x: 10.48, y: 34.00 },
                    Point { x: 16.00, y: 34.00 },
                ),
                PathEl::LineTo(Point { x: 24.00, y: 34.00 }),
                PathEl::LineTo(Point { x: 24.00, y: 30.00 }),
                PathEl::LineTo(Point { x: 16.00, y: 30.00 }),
                PathEl::CurveTo(
                    Point { x: 12.69, y: 30.00 },
                    Point { x: 10.00, y: 27.31 },
                    Point { x: 10.00, y: 24.00 },
                ),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct EvStation {
    size: f64,
    color: Color,
}

impl EvStation {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for EvStation {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 39.54, y: 14.46 }),
                PathEl::LineTo(Point { x: 39.57, y: 14.43 }),
                PathEl::LineTo(Point { x: 32.12, y: 7.00 }),
                PathEl::LineTo(Point { x: 30.00, y: 9.12 }),
                PathEl::LineTo(Point { x: 34.22, y: 13.34 }),
                PathEl::CurveTo(
                    Point { x: 32.34, y: 14.06 },
                    Point { x: 31.00, y: 15.87 },
                    Point { x: 31.00, y: 18.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 31.00, y: 20.76 },
                    Point { x: 33.24, y: 23.00 },
                    Point { x: 36.00, y: 23.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 36.71, y: 23.00 },
                    Point { x: 37.39, y: 22.85 },
                    Point { x: 38.00, y: 22.58 },
                ),
                PathEl::LineTo(Point { x: 38.00, y: 37.00 }),
                PathEl::CurveTo(
                    Point { x: 38.00, y: 38.10 },
                    Point { x: 37.10, y: 39.00 },
                    Point { x: 36.00, y: 39.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 34.90, y: 39.00 },
                    Point { x: 34.00, y: 38.10 },
                    Point { x: 34.00, y: 37.00 },
                ),
                PathEl::LineTo(Point { x: 34.00, y: 28.00 }),
                PathEl::CurveTo(
                    Point { x: 34.00, y: 25.79 },
                    Point { x: 32.21, y: 24.00 },
                    Point { x: 30.00, y: 24.00 },
                ),
                PathEl::LineTo(Point { x: 28.00, y: 24.00 }),
                PathEl::LineTo(Point { x: 28.00, y: 10.00 }),
                PathEl::CurveTo(
                    Point { x: 28.00, y: 7.79 },
                    Point { x: 26.21, y: 6.00 },
                    Point { x: 24.00, y: 6.00 },
                ),
                PathEl::LineTo(Point { x: 12.00, y: 6.00 }),
                PathEl::CurveTo(
                    Point { x: 9.79, y: 6.00 },
                    Point { x: 8.00, y: 7.79 },
                    Point { x: 8.00, y: 10.00 },
                ),
                PathEl::LineTo(Point { x: 8.00, y: 42.00 }),
                PathEl::LineTo(Point { x: 28.00, y: 42.00 }),
                PathEl::LineTo(Point { x: 28.00, y: 27.00 }),
                PathEl::LineTo(Point { x: 31.00, y: 27.00 }),
                PathEl::LineTo(Point { x: 31.00, y: 37.00 }),
                PathEl::CurveTo(
                    Point { x: 31.00, y: 39.76 },
                    Point { x: 33.24, y: 42.00 },
                    Point { x: 36.00, y: 42.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 38.76, y: 42.00 },
                    Point { x: 41.00, y: 39.76 },
                    Point { x: 41.00, y: 37.00 },
                ),
                PathEl::LineTo(Point { x: 41.00, y: 18.00 }),
                PathEl::CurveTo(
                    Point { x: 41.00, y: 16.62 },
                    Point { x: 40.44, y: 15.37 },
                    Point { x: 39.54, y: 14.46 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 16.00, y: 36.00 }),
                PathEl::LineTo(Point { x: 16.00, y: 27.00 }),
                PathEl::LineTo(Point { x: 12.00, y: 27.00 }),
                PathEl::LineTo(Point { x: 20.00, y: 12.00 }),
                PathEl::LineTo(Point { x: 20.00, y: 22.00 }),
                PathEl::LineTo(Point { x: 24.00, y: 22.00 }),
                PathEl::LineTo(Point { x: 16.00, y: 36.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 36.00, y: 20.00 }),
                PathEl::CurveTo(
                    Point { x: 34.90, y: 20.00 },
                    Point { x: 34.00, y: 19.10 },
                    Point { x: 34.00, y: 18.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 34.00, y: 16.90 },
                    Point { x: 34.90, y: 16.00 },
                    Point { x: 36.00, y: 16.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 37.10, y: 16.00 },
                    Point { x: 38.00, y: 16.90 },
                    Point { x: 38.00, y: 18.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 38.00, y: 19.10 },
                    Point { x: 37.10, y: 20.00 },
                    Point { x: 36.00, y: 20.00 },
                ),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct PersonOutline {
    size: f64,
    color: Color,
}

impl PersonOutline {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for PersonOutline {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 24.00, y: 11.80 }),
                PathEl::CurveTo(
                    Point { x: 26.32, y: 11.80 },
                    Point { x: 28.20, y: 13.68 },
                    Point { x: 28.20, y: 16.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 28.20, y: 18.32 },
                    Point { x: 26.32, y: 20.20 },
                    Point { x: 24.00, y: 20.20 },
                ),
                PathEl::CurveTo(
                    Point { x: 21.68, y: 20.20 },
                    Point { x: 19.80, y: 18.32 },
                    Point { x: 19.80, y: 16.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 19.80, y: 13.68 },
                    Point { x: 21.68, y: 11.80 },
                    Point { x: 24.00, y: 11.80 },
                ),
                PathEl::MoveTo(Point { x: 24.00, y: 29.80 }),
                PathEl::CurveTo(
                    Point { x: 29.95, y: 29.80 },
                    Point { x: 36.20, y: 32.71 },
                    Point { x: 36.20, y: 34.00 },
                ),
                PathEl::LineTo(Point { x: 36.20, y: 36.20 }),
                PathEl::LineTo(Point { x: 11.80, y: 36.20 }),
                PathEl::LineTo(Point { x: 11.80, y: 34.00 }),
                PathEl::CurveTo(
                    Point { x: 11.80, y: 32.71 },
                    Point { x: 18.05, y: 29.80 },
                    Point { x: 24.00, y: 29.80 },
                ),
                PathEl::MoveTo(Point { x: 24.00, y: 8.00 }),
                PathEl::CurveTo(
                    Point { x: 19.58, y: 8.00 },
                    Point { x: 16.00, y: 11.58 },
                    Point { x: 16.00, y: 16.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 16.00, y: 20.41 },
                    Point { x: 19.58, y: 24.00 },
                    Point { x: 24.00, y: 24.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 28.42, y: 24.00 },
                    Point { x: 32.00, y: 20.41 },
                    Point { x: 32.00, y: 16.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 32.00, y: 11.58 },
                    Point { x: 28.42, y: 8.00 },
                    Point { x: 24.00, y: 8.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 24.00, y: 26.00 }),
                PathEl::CurveTo(
                    Point { x: 18.67, y: 26.00 },
                    Point { x: 8.00, y: 28.67 },
                    Point { x: 8.00, y: 34.00 },
                ),
                PathEl::LineTo(Point { x: 8.00, y: 40.00 }),
                PathEl::LineTo(Point { x: 40.00, y: 40.00 }),
                PathEl::LineTo(Point { x: 40.00, y: 34.00 }),
                PathEl::CurveTo(
                    Point { x: 40.00, y: 28.67 },
                    Point { x: 29.33, y: 26.00 },
                    Point { x: 24.00, y: 26.00 },
                ),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct FormatIndentIncrease {
    size: f64,
    color: Color,
}

impl FormatIndentIncrease {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for FormatIndentIncrease {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 6.00, y: 42.00 }),
                PathEl::LineTo(Point { x: 42.00, y: 42.00 }),
                PathEl::LineTo(Point { x: 42.00, y: 38.00 }),
                PathEl::LineTo(Point { x: 6.00, y: 38.00 }),
                PathEl::LineTo(Point { x: 6.00, y: 42.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 6.00, y: 16.00 }),
                PathEl::LineTo(Point { x: 6.00, y: 32.00 }),
                PathEl::LineTo(Point { x: 14.00, y: 24.00 }),
                PathEl::LineTo(Point { x: 6.00, y: 16.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 22.00, y: 34.00 }),
                PathEl::LineTo(Point { x: 42.00, y: 34.00 }),
                PathEl::LineTo(Point { x: 42.00, y: 30.00 }),
                PathEl::LineTo(Point { x: 22.00, y: 30.00 }),
                PathEl::LineTo(Point { x: 22.00, y: 34.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 6.00, y: 6.00 }),
                PathEl::LineTo(Point { x: 6.00, y: 10.00 }),
                PathEl::LineTo(Point { x: 42.00, y: 10.00 }),
                PathEl::LineTo(Point { x: 42.00, y: 6.00 }),
                PathEl::LineTo(Point { x: 6.00, y: 6.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 22.00, y: 18.00 }),
                PathEl::LineTo(Point { x: 42.00, y: 18.00 }),
                PathEl::LineTo(Point { x: 42.00, y: 14.00 }),
                PathEl::LineTo(Point { x: 22.00, y: 14.00 }),
                PathEl::LineTo(Point { x: 22.00, y: 18.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 22.00, y: 26.00 }),
                PathEl::LineTo(Point { x: 42.00, y: 26.00 }),
                PathEl::LineTo(Point { x: 42.00, y: 22.00 }),
                PathEl::LineTo(Point { x: 22.00, y: 22.00 }),
                PathEl::LineTo(Point { x: 22.00, y: 26.00 }),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct ChromeReaderMode {
    size: f64,
    color: Color,
}

impl ChromeReaderMode {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for ChromeReaderMode {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 26.00, y: 24.00 }),
                PathEl::LineTo(Point { x: 40.00, y: 24.00 }),
                PathEl::LineTo(Point { x: 40.00, y: 27.00 }),
                PathEl::LineTo(Point { x: 26.00, y: 27.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 26.00, y: 19.00 }),
                PathEl::LineTo(Point { x: 40.00, y: 19.00 }),
                PathEl::LineTo(Point { x: 40.00, y: 22.00 }),
                PathEl::LineTo(Point { x: 26.00, y: 22.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 26.00, y: 29.00 }),
                PathEl::LineTo(Point { x: 40.00, y: 29.00 }),
                PathEl::LineTo(Point { x: 40.00, y: 32.00 }),
                PathEl::LineTo(Point { x: 26.00, y: 32.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 42.00, y: 8.00 }),
                PathEl::LineTo(Point { x: 6.00, y: 8.00 }),
                PathEl::CurveTo(
                    Point { x: 3.80, y: 8.00 },
                    Point { x: 2.00, y: 9.80 },
                    Point { x: 2.00, y: 12.00 },
                ),
                PathEl::LineTo(Point { x: 2.00, y: 38.00 }),
                PathEl::CurveTo(
                    Point { x: 2.00, y: 40.20 },
                    Point { x: 3.80, y: 42.00 },
                    Point { x: 6.00, y: 42.00 },
                ),
                PathEl::LineTo(Point { x: 42.00, y: 42.00 }),
                PathEl::CurveTo(
                    Point { x: 44.20, y: 42.00 },
                    Point { x: 46.00, y: 40.20 },
                    Point { x: 46.00, y: 38.00 },
                ),
                PathEl::LineTo(Point { x: 46.00, y: 12.00 }),
                PathEl::CurveTo(
                    Point { x: 46.00, y: 9.80 },
                    Point { x: 44.20, y: 8.00 },
                    Point { x: 42.00, y: 8.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 42.00, y: 38.00 }),
                PathEl::LineTo(Point { x: 24.00, y: 38.00 }),
                PathEl::LineTo(Point { x: 24.00, y: 12.00 }),
                PathEl::LineTo(Point { x: 42.00, y: 12.00 }),
                PathEl::LineTo(Point { x: 42.00, y: 38.00 }),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct WbSunny {
    size: f64,
    color: Color,
}

impl WbSunny {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for WbSunny {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 13.51, y: 9.69 }),
                PathEl::LineTo(Point { x: 9.93, y: 6.10 }),
                PathEl::LineTo(Point { x: 7.10, y: 8.93 }),
                PathEl::LineTo(Point { x: 10.69, y: 12.52 }),
                PathEl::LineTo(Point { x: 13.51, y: 9.69 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 8.00, y: 21.00 }),
                PathEl::LineTo(Point { x: 2.00, y: 21.00 }),
                PathEl::LineTo(Point { x: 2.00, y: 25.00 }),
                PathEl::LineTo(Point { x: 8.00, y: 25.00 }),
                PathEl::LineTo(Point { x: 8.00, y: 21.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 26.00, y: 1.10 }),
                PathEl::LineTo(Point { x: 22.00, y: 1.10 }),
                PathEl::LineTo(Point { x: 22.00, y: 7.00 }),
                PathEl::LineTo(Point { x: 26.00, y: 7.00 }),
                PathEl::LineTo(Point { x: 26.00, y: 1.10 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 40.90, y: 8.93 }),
                PathEl::LineTo(Point { x: 38.07, y: 6.10 }),
                PathEl::LineTo(Point { x: 34.48, y: 9.69 }),
                PathEl::LineTo(Point { x: 37.31, y: 12.52 }),
                PathEl::LineTo(Point { x: 40.90, y: 8.93 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 34.49, y: 36.31 }),
                PathEl::LineTo(Point { x: 38.08, y: 39.90 }),
                PathEl::LineTo(Point { x: 40.91, y: 37.07 }),
                PathEl::LineTo(Point { x: 37.32, y: 33.48 }),
                PathEl::LineTo(Point { x: 34.49, y: 36.31 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 40.00, y: 21.00 }),
                PathEl::LineTo(Point { x: 40.00, y: 25.00 }),
                PathEl::LineTo(Point { x: 46.00, y: 25.00 }),
                PathEl::LineTo(Point { x: 46.00, y: 21.00 }),
                PathEl::LineTo(Point { x: 40.00, y: 21.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 24.00, y: 11.00 }),
                PathEl::CurveTo(
                    Point { x: 17.37, y: 11.00 },
                    Point { x: 12.00, y: 16.37 },
                    Point { x: 12.00, y: 23.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 12.00, y: 29.63 },
                    Point { x: 17.37, y: 35.00 },
                    Point { x: 24.00, y: 35.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 30.63, y: 35.00 },
                    Point { x: 36.00, y: 29.63 },
                    Point { x: 36.00, y: 23.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 36.00, y: 16.37 },
                    Point { x: 30.63, y: 11.00 },
                    Point { x: 24.00, y: 11.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 22.00, y: 44.90 }),
                PathEl::LineTo(Point { x: 26.00, y: 44.90 }),
                PathEl::LineTo(Point { x: 26.00, y: 39.00 }),
                PathEl::LineTo(Point { x: 22.00, y: 39.00 }),
                PathEl::LineTo(Point { x: 22.00, y: 44.90 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 7.10, y: 37.07 }),
                PathEl::LineTo(Point { x: 9.93, y: 39.90 }),
                PathEl::LineTo(Point { x: 13.52, y: 36.31 }),
                PathEl::LineTo(Point { x: 10.69, y: 33.48 }),
                PathEl::LineTo(Point { x: 7.10, y: 37.07 }),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct Photo {
    size: f64,
    color: Color,
}

impl Photo {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for Photo {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 42.00, y: 38.00 }),
                PathEl::LineTo(Point { x: 42.00, y: 10.00 }),
                PathEl::CurveTo(
                    Point { x: 42.00, y: 7.79 },
                    Point { x: 40.21, y: 6.00 },
                    Point { x: 38.00, y: 6.00 },
                ),
                PathEl::LineTo(Point { x: 10.00, y: 6.00 }),
                PathEl::CurveTo(
                    Point { x: 7.79, y: 6.00 },
                    Point { x: 6.00, y: 7.79 },
                    Point { x: 6.00, y: 10.00 },
                ),
                PathEl::LineTo(Point { x: 6.00, y: 38.00 }),
                PathEl::CurveTo(
                    Point { x: 6.00, y: 40.21 },
                    Point { x: 7.79, y: 42.00 },
                    Point { x: 10.00, y: 42.00 },
                ),
                PathEl::LineTo(Point { x: 38.00, y: 42.00 }),
                PathEl::CurveTo(
                    Point { x: 40.21, y: 42.00 },
                    Point { x: 42.00, y: 40.21 },
                    Point { x: 42.00, y: 38.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 17.00, y: 27.00 }),
                PathEl::LineTo(Point { x: 22.00, y: 33.01 }),
                PathEl::LineTo(Point { x: 29.00, y: 24.00 }),
                PathEl::LineTo(Point { x: 38.00, y: 36.00 }),
                PathEl::LineTo(Point { x: 10.00, y: 36.00 }),
                PathEl::LineTo(Point { x: 17.00, y: 27.00 }),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct BeachAccess {
    size: f64,
    color: Color,
}

impl BeachAccess {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for BeachAccess {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 26.25, y: 29.11 }),
                PathEl::LineTo(Point { x: 29.11, y: 26.25 }),
                PathEl::LineTo(Point { x: 42.01, y: 39.14 }),
                PathEl::LineTo(Point { x: 39.15, y: 42.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 34.84, y: 17.66 }),
                PathEl::LineTo(Point { x: 40.57, y: 11.93 }),
                PathEl::CurveTo(
                    Point { x: 32.67, y: 4.03 },
                    Point { x: 19.87, y: 4.02 },
                    Point { x: 11.96, y: 11.91 },
                ),
                PathEl::CurveTo(
                    Point { x: 19.83, y: 9.30 },
                    Point { x: 28.58, y: 11.39 },
                    Point { x: 34.84, y: 17.66 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 11.91, y: 11.95 }),
                PathEl::CurveTo(
                    Point { x: 4.03, y: 19.86 },
                    Point { x: 4.03, y: 32.66 },
                    Point { x: 11.93, y: 40.56 },
                ),
                PathEl::LineTo(Point { x: 17.66, y: 34.83 }),
                PathEl::CurveTo(
                    Point { x: 11.39, y: 28.58 },
                    Point { x: 9.30, y: 19.83 },
                    Point { x: 11.91, y: 11.95 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 11.95, y: 11.92 }),
                PathEl::CurveTo(
                    Point { x: 11.94, y: 11.93 },
                    Point { x: 11.94, y: 11.93 },
                    Point { x: 11.93, y: 11.93 },
                ),
                PathEl::CurveTo(
                    Point { x: 11.92, y: 11.94 },
                    Point { x: 11.92, y: 11.94 },
                    Point { x: 11.92, y: 11.95 },
                ),
                PathEl::CurveTo(
                    Point { x: 11.17, y: 17.97 },
                    Point { x: 14.26, y: 25.72 },
                    Point { x: 20.53, y: 31.98 },
                ),
                PathEl::LineTo(Point { x: 31.99, y: 20.52 }),
                PathEl::CurveTo(
                    Point { x: 25.71, y: 14.26 },
                    Point { x: 17.97, y: 11.16 },
                    Point { x: 11.95, y: 11.92 },
                ),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct SentimentSatisfied {
    size: f64,
    color: Color,
}

impl SentimentSatisfied {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for SentimentSatisfied {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 31.00, y: 22.00 }),
                PathEl::CurveTo(
                    Point { x: 32.66, y: 22.00 },
                    Point { x: 34.00, y: 20.66 },
                    Point { x: 34.00, y: 19.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 34.00, y: 17.34 },
                    Point { x: 32.66, y: 16.00 },
                    Point { x: 31.00, y: 16.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 29.34, y: 16.00 },
                    Point { x: 28.00, y: 17.34 },
                    Point { x: 28.00, y: 19.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 28.00, y: 20.66 },
                    Point { x: 29.34, y: 22.00 },
                    Point { x: 31.00, y: 22.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 17.00, y: 22.00 }),
                PathEl::CurveTo(
                    Point { x: 18.66, y: 22.00 },
                    Point { x: 20.00, y: 20.66 },
                    Point { x: 20.00, y: 19.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 20.00, y: 17.34 },
                    Point { x: 18.66, y: 16.00 },
                    Point { x: 17.00, y: 16.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 15.34, y: 16.00 },
                    Point { x: 14.00, y: 17.34 },
                    Point { x: 14.00, y: 19.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 14.00, y: 20.66 },
                    Point { x: 15.34, y: 22.00 },
                    Point { x: 17.00, y: 22.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 23.98, y: 4.00 }),
                PathEl::CurveTo(
                    Point { x: 12.94, y: 4.00 },
                    Point { x: 4.00, y: 12.96 },
                    Point { x: 4.00, y: 24.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 4.00, y: 35.04 },
                    Point { x: 12.94, y: 44.00 },
                    Point { x: 23.98, y: 44.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 35.04, y: 44.00 },
                    Point { x: 44.00, y: 35.04 },
                    Point { x: 44.00, y: 24.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 44.00, y: 12.96 },
                    Point { x: 35.04, y: 4.00 },
                    Point { x: 23.98, y: 4.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 24.00, y: 40.00 }),
                PathEl::CurveTo(
                    Point { x: 15.16, y: 40.00 },
                    Point { x: 8.00, y: 32.84 },
                    Point { x: 8.00, y: 24.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 8.00, y: 15.16 },
                    Point { x: 15.16, y: 8.00 },
                    Point { x: 24.00, y: 8.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 32.84, y: 8.00 },
                    Point { x: 40.00, y: 15.16 },
                    Point { x: 40.00, y: 24.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 40.00, y: 32.84 },
                    Point { x: 32.84, y: 40.00 },
                    Point { x: 24.00, y: 40.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 24.00, y: 32.00 }),
                PathEl::CurveTo(
                    Point { x: 21.05, y: 32.00 },
                    Point { x: 18.50, y: 30.38 },
                    Point { x: 17.11, y: 28.00 },
                ),
                PathEl::LineTo(Point { x: 13.76, y: 28.00 }),
                PathEl::CurveTo(
                    Point { x: 15.36, y: 32.09 },
                    Point { x: 19.34, y: 35.00 },
                    Point { x: 24.00, y: 35.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 28.66, y: 35.00 },
                    Point { x: 32.64, y: 32.09 },
                    Point { x: 34.24, y: 28.00 },
                ),
                PathEl::LineTo(Point { x: 30.89, y: 28.00 }),
                PathEl::CurveTo(
                    Point { x: 29.50, y: 30.38 },
                    Point { x: 26.95, y: 32.00 },
                    Point { x: 24.00, y: 32.00 },
                ),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct DirectionsRailway {
    size: f64,
    color: Color,
}

impl DirectionsRailway {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for DirectionsRailway {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 8.00, y: 31.00 }),
                PathEl::CurveTo(
                    Point { x: 8.00, y: 34.87 },
                    Point { x: 11.14, y: 38.00 },
                    Point { x: 15.00, y: 38.00 },
                ),
                PathEl::LineTo(Point { x: 12.00, y: 41.00 }),
                PathEl::LineTo(Point { x: 12.00, y: 42.00 }),
                PathEl::LineTo(Point { x: 36.00, y: 42.00 }),
                PathEl::LineTo(Point { x: 36.00, y: 41.00 }),
                PathEl::LineTo(Point { x: 33.00, y: 38.00 }),
                PathEl::CurveTo(
                    Point { x: 36.87, y: 38.00 },
                    Point { x: 40.00, y: 34.87 },
                    Point { x: 40.00, y: 31.00 },
                ),
                PathEl::LineTo(Point { x: 40.00, y: 10.00 }),
                PathEl::CurveTo(
                    Point { x: 40.00, y: 3.00 },
                    Point { x: 32.84, y: 2.00 },
                    Point { x: 24.00, y: 2.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 15.16, y: 2.00 },
                    Point { x: 8.00, y: 3.00 },
                    Point { x: 8.00, y: 10.00 },
                ),
                PathEl::LineTo(Point { x: 8.00, y: 31.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 24.00, y: 34.00 }),
                PathEl::CurveTo(
                    Point { x: 21.79, y: 34.00 },
                    Point { x: 20.00, y: 32.21 },
                    Point { x: 20.00, y: 30.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 20.00, y: 27.79 },
                    Point { x: 21.79, y: 26.00 },
                    Point { x: 24.00, y: 26.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 26.21, y: 26.00 },
                    Point { x: 28.00, y: 27.79 },
                    Point { x: 28.00, y: 30.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 28.00, y: 32.21 },
                    Point { x: 26.21, y: 34.00 },
                    Point { x: 24.00, y: 34.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 36.00, y: 20.00 }),
                PathEl::LineTo(Point { x: 12.00, y: 20.00 }),
                PathEl::LineTo(Point { x: 12.00, y: 10.00 }),
                PathEl::LineTo(Point { x: 36.00, y: 10.00 }),
                PathEl::LineTo(Point { x: 36.00, y: 20.00 }),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct TrendingUp {
    size: f64,
    color: Color,
}

impl TrendingUp {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for TrendingUp {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 32.00, y: 12.00 }),
                PathEl::LineTo(Point { x: 36.59, y: 16.59 }),
                PathEl::LineTo(Point { x: 26.83, y: 26.34 }),
                PathEl::LineTo(Point { x: 18.83, y: 18.34 }),
                PathEl::LineTo(Point { x: 4.00, y: 33.17 }),
                PathEl::LineTo(Point { x: 6.83, y: 36.00 }),
                PathEl::LineTo(Point { x: 18.83, y: 24.00 }),
                PathEl::LineTo(Point { x: 26.83, y: 32.00 }),
                PathEl::LineTo(Point { x: 39.41, y: 19.41 }),
                PathEl::LineTo(Point { x: 44.00, y: 24.00 }),
                PathEl::LineTo(Point { x: 44.00, y: 12.00 }),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct Games {
    size: f64,
    color: Color,
}

impl Games {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for Games {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 30.00, y: 15.00 }),
                PathEl::LineTo(Point { x: 30.00, y: 4.00 }),
                PathEl::LineTo(Point { x: 18.00, y: 4.00 }),
                PathEl::LineTo(Point { x: 18.00, y: 15.00 }),
                PathEl::LineTo(Point { x: 24.00, y: 21.00 }),
                PathEl::LineTo(Point { x: 30.00, y: 15.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 15.00, y: 18.00 }),
                PathEl::LineTo(Point { x: 4.00, y: 18.00 }),
                PathEl::LineTo(Point { x: 4.00, y: 30.00 }),
                PathEl::LineTo(Point { x: 15.00, y: 30.00 }),
                PathEl::LineTo(Point { x: 21.00, y: 24.00 }),
                PathEl::LineTo(Point { x: 15.00, y: 18.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 18.00, y: 33.00 }),
                PathEl::LineTo(Point { x: 18.00, y: 44.00 }),
                PathEl::LineTo(Point { x: 30.00, y: 44.00 }),
                PathEl::LineTo(Point { x: 30.00, y: 33.00 }),
                PathEl::LineTo(Point { x: 24.00, y: 27.00 }),
                PathEl::LineTo(Point { x: 18.00, y: 33.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 33.00, y: 18.00 }),
                PathEl::LineTo(Point { x: 27.00, y: 24.00 }),
                PathEl::LineTo(Point { x: 33.00, y: 30.00 }),
                PathEl::LineTo(Point { x: 44.00, y: 30.00 }),
                PathEl::LineTo(Point { x: 44.00, y: 18.00 }),
                PathEl::LineTo(Point { x: 33.00, y: 18.00 }),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct InvertColorsOff {
    size: f64,
    color: Color,
}

impl InvertColorsOff {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for InvertColorsOff {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 41.29, y: 41.75 }),
                PathEl::LineTo(Point { x: 36.58, y: 37.04 }),
                PathEl::LineTo(Point { x: 24.00, y: 24.46 }),
                PathEl::LineTo(Point { x: 16.87, y: 17.33 }),
                PathEl::LineTo(Point { x: 14.04, y: 14.50 }),
                PathEl::LineTo(Point { x: 8.54, y: 9.00 }),
                PathEl::LineTo(Point { x: 6.00, y: 11.55 }),
                PathEl::LineTo(Point { x: 11.56, y: 17.11 }),
                PathEl::CurveTo(
                    Point { x: 6.46, y: 23.39 },
                    Point { x: 6.84, y: 32.64 },
                    Point { x: 12.68, y: 38.49 },
                ),
                PathEl::CurveTo(
                    Point { x: 15.80, y: 41.61 },
                    Point { x: 19.90, y: 43.18 },
                    Point { x: 23.99, y: 43.18 },
                ),
                PathEl::CurveTo(
                    Point { x: 27.56, y: 43.18 },
                    Point { x: 31.13, y: 41.99 },
                    Point { x: 34.05, y: 39.62 },
                ),
                PathEl::LineTo(Point { x: 39.45, y: 45.00 }),
                PathEl::LineTo(Point { x: 42.00, y: 42.45 }),
                PathEl::LineTo(Point { x: 41.29, y: 41.75 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 24.00, y: 39.17 }),
                PathEl::CurveTo(
                    Point { x: 20.79, y: 39.17 },
                    Point { x: 17.78, y: 37.92 },
                    Point { x: 15.52, y: 35.66 },
                ),
                PathEl::CurveTo(
                    Point { x: 13.25, y: 33.39 },
                    Point { x: 12.00, y: 30.38 },
                    Point { x: 12.00, y: 27.17 },
                ),
                PathEl::CurveTo(
                    Point { x: 12.00, y: 24.53 },
                    Point { x: 12.86, y: 22.03 },
                    Point { x: 14.42, y: 19.96 },
                ),
                PathEl::LineTo(Point { x: 24.00, y: 29.55 }),
                PathEl::LineTo(Point { x: 24.00, y: 39.17 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 24.00, y: 10.20 }),
                PathEl::LineTo(Point { x: 24.00, y: 19.36 }),
                PathEl::LineTo(Point { x: 38.51, y: 33.87 }),
                PathEl::CurveTo(
                    Point { x: 41.24, y: 27.96 },
                    Point { x: 40.19, y: 20.73 },
                    Point { x: 35.31, y: 15.85 },
                ),
                PathEl::LineTo(Point { x: 24.00, y: 4.54 }),
                PathEl::LineTo(Point { x: 16.59, y: 11.95 }),
                PathEl::LineTo(Point { x: 19.42, y: 14.78 }),
                PathEl::LineTo(Point { x: 24.00, y: 10.20 }),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct KeyboardHide {
    size: f64,
    color: Color,
}

impl KeyboardHide {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for KeyboardHide {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 40.00, y: 6.00 }),
                PathEl::LineTo(Point { x: 8.00, y: 6.00 }),
                PathEl::CurveTo(
                    Point { x: 5.79, y: 6.00 },
                    Point { x: 4.02, y: 7.79 },
                    Point { x: 4.02, y: 10.00 },
                ),
                PathEl::LineTo(Point { x: 4.00, y: 30.00 }),
                PathEl::CurveTo(
                    Point { x: 4.00, y: 32.21 },
                    Point { x: 5.79, y: 34.00 },
                    Point { x: 8.00, y: 34.00 },
                ),
                PathEl::LineTo(Point { x: 40.00, y: 34.00 }),
                PathEl::CurveTo(
                    Point { x: 42.21, y: 34.00 },
                    Point { x: 44.00, y: 32.21 },
                    Point { x: 44.00, y: 30.00 },
                ),
                PathEl::LineTo(Point { x: 44.00, y: 10.00 }),
                PathEl::CurveTo(
                    Point { x: 44.00, y: 7.79 },
                    Point { x: 42.21, y: 6.00 },
                    Point { x: 40.00, y: 6.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 22.00, y: 12.00 }),
                PathEl::LineTo(Point { x: 26.00, y: 12.00 }),
                PathEl::LineTo(Point { x: 26.00, y: 16.00 }),
                PathEl::LineTo(Point { x: 22.00, y: 16.00 }),
                PathEl::LineTo(Point { x: 22.00, y: 12.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 22.00, y: 18.00 }),
                PathEl::LineTo(Point { x: 26.00, y: 18.00 }),
                PathEl::LineTo(Point { x: 26.00, y: 22.00 }),
                PathEl::LineTo(Point { x: 22.00, y: 22.00 }),
                PathEl::LineTo(Point { x: 22.00, y: 18.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 16.00, y: 12.00 }),
                PathEl::LineTo(Point { x: 20.00, y: 12.00 }),
                PathEl::LineTo(Point { x: 20.00, y: 16.00 }),
                PathEl::LineTo(Point { x: 16.00, y: 16.00 }),
                PathEl::LineTo(Point { x: 16.00, y: 12.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 16.00, y: 18.00 }),
                PathEl::LineTo(Point { x: 20.00, y: 18.00 }),
                PathEl::LineTo(Point { x: 20.00, y: 22.00 }),
                PathEl::LineTo(Point { x: 16.00, y: 22.00 }),
                PathEl::LineTo(Point { x: 16.00, y: 18.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 14.00, y: 22.00 }),
                PathEl::LineTo(Point { x: 10.00, y: 22.00 }),
                PathEl::LineTo(Point { x: 10.00, y: 18.00 }),
                PathEl::LineTo(Point { x: 14.00, y: 18.00 }),
                PathEl::LineTo(Point { x: 14.00, y: 22.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 14.00, y: 16.00 }),
                PathEl::LineTo(Point { x: 10.00, y: 16.00 }),
                PathEl::LineTo(Point { x: 10.00, y: 12.00 }),
                PathEl::LineTo(Point { x: 14.00, y: 12.00 }),
                PathEl::LineTo(Point { x: 14.00, y: 16.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 32.00, y: 30.00 }),
                PathEl::LineTo(Point { x: 16.00, y: 30.00 }),
                PathEl::LineTo(Point { x: 16.00, y: 26.00 }),
                PathEl::LineTo(Point { x: 32.00, y: 26.00 }),
                PathEl::LineTo(Point { x: 32.00, y: 30.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 32.00, y: 22.00 }),
                PathEl::LineTo(Point { x: 28.00, y: 22.00 }),
                PathEl::LineTo(Point { x: 28.00, y: 18.00 }),
                PathEl::LineTo(Point { x: 32.00, y: 18.00 }),
                PathEl::LineTo(Point { x: 32.00, y: 22.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 32.00, y: 16.00 }),
                PathEl::LineTo(Point { x: 28.00, y: 16.00 }),
                PathEl::LineTo(Point { x: 28.00, y: 12.00 }),
                PathEl::LineTo(Point { x: 32.00, y: 12.00 }),
                PathEl::LineTo(Point { x: 32.00, y: 16.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 38.00, y: 22.00 }),
                PathEl::LineTo(Point { x: 34.00, y: 22.00 }),
                PathEl::LineTo(Point { x: 34.00, y: 18.00 }),
                PathEl::LineTo(Point { x: 38.00, y: 18.00 }),
                PathEl::LineTo(Point { x: 38.00, y: 22.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 38.00, y: 16.00 }),
                PathEl::LineTo(Point { x: 34.00, y: 16.00 }),
                PathEl::LineTo(Point { x: 34.00, y: 12.00 }),
                PathEl::LineTo(Point { x: 38.00, y: 12.00 }),
                PathEl::LineTo(Point { x: 38.00, y: 16.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 24.00, y: 46.00 }),
                PathEl::LineTo(Point { x: 32.00, y: 38.00 }),
                PathEl::LineTo(Point { x: 16.00, y: 38.00 }),
                PathEl::LineTo(Point { x: 24.00, y: 46.00 }),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct CloudUpload {
    size: f64,
    color: Color,
}

impl CloudUpload {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for CloudUpload {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 38.71, y: 20.07 }),
                PathEl::CurveTo(
                    Point { x: 37.35, y: 13.19 },
                    Point { x: 31.28, y: 8.00 },
                    Point { x: 24.00, y: 8.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 18.22, y: 8.00 },
                    Point { x: 13.21, y: 11.28 },
                    Point { x: 10.70, y: 16.07 },
                ),
                PathEl::CurveTo(
                    Point { x: 4.69, y: 16.72 },
                    Point { x: 0.00, y: 21.81 },
                    Point { x: 0.00, y: 28.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 0.00, y: 34.63 },
                    Point { x: 5.37, y: 40.00 },
                    Point { x: 12.00, y: 40.00 },
                ),
                PathEl::LineTo(Point { x: 38.00, y: 40.00 }),
                PathEl::CurveTo(
                    Point { x: 43.52, y: 40.00 },
                    Point { x: 48.00, y: 35.52 },
                    Point { x: 48.00, y: 30.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 48.00, y: 24.72 },
                    Point { x: 43.89, y: 20.44 },
                    Point { x: 38.71, y: 20.07 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 28.00, y: 26.00 }),
                PathEl::LineTo(Point { x: 28.00, y: 34.00 }),
                PathEl::LineTo(Point { x: 20.00, y: 34.00 }),
                PathEl::LineTo(Point { x: 20.00, y: 26.00 }),
                PathEl::LineTo(Point { x: 14.00, y: 26.00 }),
                PathEl::LineTo(Point { x: 24.00, y: 16.00 }),
                PathEl::LineTo(Point { x: 34.00, y: 26.00 }),
                PathEl::LineTo(Point { x: 28.00, y: 26.00 }),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct WbIncandescent {
    size: f64,
    color: Color,
}

impl WbIncandescent {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for WbIncandescent {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 7.10, y: 37.07 }),
                PathEl::LineTo(Point { x: 9.93, y: 39.90 }),
                PathEl::LineTo(Point { x: 13.52, y: 36.31 }),
                PathEl::LineTo(Point { x: 10.69, y: 33.48 }),
                PathEl::LineTo(Point { x: 7.10, y: 37.07 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 22.00, y: 44.90 }),
                PathEl::LineTo(Point { x: 26.00, y: 44.90 }),
                PathEl::LineTo(Point { x: 26.00, y: 39.00 }),
                PathEl::LineTo(Point { x: 22.00, y: 39.00 }),
                PathEl::LineTo(Point { x: 22.00, y: 44.90 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 8.00, y: 21.00 }),
                PathEl::LineTo(Point { x: 2.00, y: 21.00 }),
                PathEl::LineTo(Point { x: 2.00, y: 25.00 }),
                PathEl::LineTo(Point { x: 8.00, y: 25.00 }),
                PathEl::LineTo(Point { x: 8.00, y: 21.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 30.00, y: 12.62 }),
                PathEl::LineTo(Point { x: 30.00, y: 3.00 }),
                PathEl::LineTo(Point { x: 18.00, y: 3.00 }),
                PathEl::LineTo(Point { x: 18.00, y: 12.62 }),
                PathEl::CurveTo(
                    Point { x: 14.42, y: 14.70 },
                    Point { x: 12.00, y: 18.56 },
                    Point { x: 12.00, y: 23.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 12.00, y: 29.63 },
                    Point { x: 17.37, y: 35.00 },
                    Point { x: 24.00, y: 35.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 30.63, y: 35.00 },
                    Point { x: 36.00, y: 29.63 },
                    Point { x: 36.00, y: 23.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 36.00, y: 18.56 },
                    Point { x: 33.58, y: 14.69 },
                    Point { x: 30.00, y: 12.62 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 40.00, y: 21.00 }),
                PathEl::LineTo(Point { x: 40.00, y: 25.00 }),
                PathEl::LineTo(Point { x: 46.00, y: 25.00 }),
                PathEl::LineTo(Point { x: 46.00, y: 21.00 }),
                PathEl::LineTo(Point { x: 40.00, y: 21.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 34.49, y: 36.31 }),
                PathEl::LineTo(Point { x: 38.08, y: 39.90 }),
                PathEl::LineTo(Point { x: 40.91, y: 37.07 }),
                PathEl::LineTo(Point { x: 37.32, y: 33.48 }),
                PathEl::LineTo(Point { x: 34.49, y: 36.31 }),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct DateRange {
    size: f64,
    color: Color,
}

impl DateRange {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for DateRange {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 18.00, y: 22.00 }),
                PathEl::LineTo(Point { x: 14.00, y: 22.00 }),
                PathEl::LineTo(Point { x: 14.00, y: 26.00 }),
                PathEl::LineTo(Point { x: 18.00, y: 26.00 }),
                PathEl::LineTo(Point { x: 18.00, y: 22.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 26.00, y: 22.00 }),
                PathEl::LineTo(Point { x: 22.00, y: 22.00 }),
                PathEl::LineTo(Point { x: 22.00, y: 26.00 }),
                PathEl::LineTo(Point { x: 26.00, y: 26.00 }),
                PathEl::LineTo(Point { x: 26.00, y: 22.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 34.00, y: 22.00 }),
                PathEl::LineTo(Point { x: 30.00, y: 22.00 }),
                PathEl::LineTo(Point { x: 30.00, y: 26.00 }),
                PathEl::LineTo(Point { x: 34.00, y: 26.00 }),
                PathEl::LineTo(Point { x: 34.00, y: 22.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 38.00, y: 8.00 }),
                PathEl::LineTo(Point { x: 36.00, y: 8.00 }),
                PathEl::LineTo(Point { x: 36.00, y: 4.00 }),
                PathEl::LineTo(Point { x: 32.00, y: 4.00 }),
                PathEl::LineTo(Point { x: 32.00, y: 8.00 }),
                PathEl::LineTo(Point { x: 16.00, y: 8.00 }),
                PathEl::LineTo(Point { x: 16.00, y: 4.00 }),
                PathEl::LineTo(Point { x: 12.00, y: 4.00 }),
                PathEl::LineTo(Point { x: 12.00, y: 8.00 }),
                PathEl::LineTo(Point { x: 10.00, y: 8.00 }),
                PathEl::CurveTo(
                    Point { x: 7.78, y: 8.00 },
                    Point { x: 6.02, y: 9.80 },
                    Point { x: 6.02, y: 12.00 },
                ),
                PathEl::LineTo(Point { x: 6.00, y: 40.00 }),
                PathEl::CurveTo(
                    Point { x: 6.00, y: 42.20 },
                    Point { x: 7.78, y: 44.00 },
                    Point { x: 10.00, y: 44.00 },
                ),
                PathEl::LineTo(Point { x: 38.00, y: 44.00 }),
                PathEl::CurveTo(
                    Point { x: 40.20, y: 44.00 },
                    Point { x: 42.00, y: 42.20 },
                    Point { x: 42.00, y: 40.00 },
                ),
                PathEl::LineTo(Point { x: 42.00, y: 12.00 }),
                PathEl::CurveTo(
                    Point { x: 42.00, y: 9.80 },
                    Point { x: 40.20, y: 8.00 },
                    Point { x: 38.00, y: 8.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 38.00, y: 40.00 }),
                PathEl::LineTo(Point { x: 10.00, y: 40.00 }),
                PathEl::LineTo(Point { x: 10.00, y: 18.00 }),
                PathEl::LineTo(Point { x: 38.00, y: 18.00 }),
                PathEl::LineTo(Point { x: 38.00, y: 40.00 }),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct Panorama {
    size: f64,
    color: Color,
}

impl Panorama {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for Panorama {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 46.00, y: 36.00 }),
                PathEl::LineTo(Point { x: 46.00, y: 12.00 }),
                PathEl::CurveTo(
                    Point { x: 46.00, y: 9.79 },
                    Point { x: 44.21, y: 8.00 },
                    Point { x: 42.00, y: 8.00 },
                ),
                PathEl::LineTo(Point { x: 6.00, y: 8.00 }),
                PathEl::CurveTo(
                    Point { x: 3.79, y: 8.00 },
                    Point { x: 2.00, y: 9.79 },
                    Point { x: 2.00, y: 12.00 },
                ),
                PathEl::LineTo(Point { x: 2.00, y: 36.00 }),
                PathEl::CurveTo(
                    Point { x: 2.00, y: 38.21 },
                    Point { x: 3.79, y: 40.00 },
                    Point { x: 6.00, y: 40.00 },
                ),
                PathEl::LineTo(Point { x: 42.00, y: 40.00 }),
                PathEl::CurveTo(
                    Point { x: 44.21, y: 40.00 },
                    Point { x: 46.00, y: 38.21 },
                    Point { x: 46.00, y: 36.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 17.00, y: 25.00 }),
                PathEl::LineTo(Point { x: 22.00, y: 31.01 }),
                PathEl::LineTo(Point { x: 29.00, y: 22.00 }),
                PathEl::LineTo(Point { x: 38.00, y: 34.00 }),
                PathEl::LineTo(Point { x: 10.00, y: 34.00 }),
                PathEl::LineTo(Point { x: 17.00, y: 25.00 }),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct Forum {
    size: f64,
    color: Color,
}

impl Forum {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for Forum {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 42.00, y: 12.00 }),
                PathEl::LineTo(Point { x: 38.00, y: 12.00 }),
                PathEl::LineTo(Point { x: 38.00, y: 30.00 }),
                PathEl::LineTo(Point { x: 12.00, y: 30.00 }),
                PathEl::LineTo(Point { x: 12.00, y: 34.00 }),
                PathEl::CurveTo(
                    Point { x: 12.00, y: 35.10 },
                    Point { x: 12.90, y: 36.00 },
                    Point { x: 14.00, y: 36.00 },
                ),
                PathEl::LineTo(Point { x: 36.00, y: 36.00 }),
                PathEl::LineTo(Point { x: 44.00, y: 44.00 }),
                PathEl::LineTo(Point { x: 44.00, y: 14.00 }),
                PathEl::CurveTo(
                    Point { x: 44.00, y: 12.90 },
                    Point { x: 43.10, y: 12.00 },
                    Point { x: 42.00, y: 12.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 34.00, y: 24.00 }),
                PathEl::LineTo(Point { x: 34.00, y: 6.00 }),
                PathEl::CurveTo(
                    Point { x: 34.00, y: 4.90 },
                    Point { x: 33.10, y: 4.00 },
                    Point { x: 32.00, y: 4.00 },
                ),
                PathEl::LineTo(Point { x: 6.00, y: 4.00 }),
                PathEl::CurveTo(
                    Point { x: 4.90, y: 4.00 },
                    Point { x: 4.00, y: 4.90 },
                    Point { x: 4.00, y: 6.00 },
                ),
                PathEl::LineTo(Point { x: 4.00, y: 34.00 }),
                PathEl::LineTo(Point { x: 12.00, y: 26.00 }),
                PathEl::LineTo(Point { x: 32.00, y: 26.00 }),
                PathEl::CurveTo(
                    Point { x: 33.10, y: 26.00 },
                    Point { x: 34.00, y: 25.10 },
                    Point { x: 34.00, y: 24.00 },
                ),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct CardMembership {
    size: f64,
    color: Color,
}

impl CardMembership {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for CardMembership {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 40.00, y: 4.00 }),
                PathEl::LineTo(Point { x: 8.00, y: 4.00 }),
                PathEl::CurveTo(
                    Point { x: 5.79, y: 4.00 },
                    Point { x: 4.00, y: 5.79 },
                    Point { x: 4.00, y: 8.00 },
                ),
                PathEl::LineTo(Point { x: 4.00, y: 30.00 }),
                PathEl::CurveTo(
                    Point { x: 4.00, y: 32.21 },
                    Point { x: 5.79, y: 34.00 },
                    Point { x: 8.00, y: 34.00 },
                ),
                PathEl::LineTo(Point { x: 16.00, y: 34.00 }),
                PathEl::LineTo(Point { x: 16.00, y: 44.00 }),
                PathEl::LineTo(Point { x: 24.00, y: 40.00 }),
                PathEl::LineTo(Point { x: 32.00, y: 44.00 }),
                PathEl::LineTo(Point { x: 32.00, y: 34.00 }),
                PathEl::LineTo(Point { x: 40.00, y: 34.00 }),
                PathEl::CurveTo(
                    Point { x: 42.21, y: 34.00 },
                    Point { x: 44.00, y: 32.21 },
                    Point { x: 44.00, y: 30.00 },
                ),
                PathEl::LineTo(Point { x: 44.00, y: 8.00 }),
                PathEl::CurveTo(
                    Point { x: 44.00, y: 5.79 },
                    Point { x: 42.21, y: 4.00 },
                    Point { x: 40.00, y: 4.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 40.00, y: 30.00 }),
                PathEl::LineTo(Point { x: 8.00, y: 30.00 }),
                PathEl::LineTo(Point { x: 8.00, y: 26.00 }),
                PathEl::LineTo(Point { x: 40.00, y: 26.00 }),
                PathEl::LineTo(Point { x: 40.00, y: 30.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 40.00, y: 20.00 }),
                PathEl::LineTo(Point { x: 8.00, y: 20.00 }),
                PathEl::LineTo(Point { x: 8.00, y: 8.00 }),
                PathEl::LineTo(Point { x: 40.00, y: 8.00 }),
                PathEl::LineTo(Point { x: 40.00, y: 20.00 }),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct Undo {
    size: f64,
    color: Color,
}

impl Undo {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for Undo {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 25.00, y: 16.00 }),
                PathEl::CurveTo(
                    Point { x: 19.71, y: 16.00 },
                    Point { x: 14.89, y: 17.97 },
                    Point { x: 11.20, y: 21.20 },
                ),
                PathEl::LineTo(Point { x: 4.00, y: 14.00 }),
                PathEl::LineTo(Point { x: 4.00, y: 32.00 }),
                PathEl::LineTo(Point { x: 22.00, y: 32.00 }),
                PathEl::LineTo(Point { x: 14.77, y: 24.77 }),
                PathEl::CurveTo(
                    Point { x: 17.54, y: 22.44 },
                    Point { x: 21.09, y: 21.00 },
                    Point { x: 25.00, y: 21.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 32.09, y: 21.00 },
                    Point { x: 38.09, y: 25.61 },
                    Point { x: 40.19, y: 32.00 },
                ),
                PathEl::LineTo(Point { x: 44.92, y: 30.44 }),
                PathEl::CurveTo(
                    Point { x: 42.17, y: 22.06 },
                    Point { x: 34.30, y: 16.00 },
                    Point { x: 25.00, y: 16.00 },
                ),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct WifiLock {
    size: f64,
    color: Color,
}

impl WifiLock {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for WifiLock {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 41.00, y: 19.00 }),
                PathEl::CurveTo(
                    Point { x: 41.56, y: 19.00 },
                    Point { x: 42.09, y: 19.08 },
                    Point { x: 42.63, y: 19.16 },
                ),
                PathEl::LineTo(Point { x: 48.00, y: 12.00 }),
                PathEl::CurveTo(
                    Point { x: 41.31, y: 6.98 },
                    Point { x: 33.00, y: 4.00 },
                    Point { x: 24.00, y: 4.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 15.00, y: 4.00 },
                    Point { x: 6.69, y: 6.98 },
                    Point { x: 0.00, y: 12.00 },
                ),
                PathEl::LineTo(Point { x: 24.00, y: 44.00 }),
                PathEl::LineTo(Point { x: 31.00, y: 34.67 }),
                PathEl::LineTo(Point { x: 31.00, y: 29.00 }),
                PathEl::CurveTo(
                    Point { x: 31.00, y: 23.48 },
                    Point { x: 35.48, y: 19.00 },
                    Point { x: 41.00, y: 19.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 46.00, y: 32.00 }),
                PathEl::LineTo(Point { x: 46.00, y: 29.00 }),
                PathEl::CurveTo(
                    Point { x: 46.00, y: 26.24 },
                    Point { x: 43.76, y: 24.00 },
                    Point { x: 41.00, y: 24.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 38.24, y: 24.00 },
                    Point { x: 36.00, y: 26.24 },
                    Point { x: 36.00, y: 29.00 },
                ),
                PathEl::LineTo(Point { x: 36.00, y: 32.00 }),
                PathEl::CurveTo(
                    Point { x: 34.90, y: 32.00 },
                    Point { x: 34.00, y: 32.90 },
                    Point { x: 34.00, y: 34.00 },
                ),
                PathEl::LineTo(Point { x: 34.00, y: 42.00 }),
                PathEl::CurveTo(
                    Point { x: 34.00, y: 43.10 },
                    Point { x: 34.90, y: 44.00 },
                    Point { x: 36.00, y: 44.00 },
                ),
                PathEl::LineTo(Point { x: 46.00, y: 44.00 }),
                PathEl::CurveTo(
                    Point { x: 47.10, y: 44.00 },
                    Point { x: 48.00, y: 43.10 },
                    Point { x: 48.00, y: 42.00 },
                ),
                PathEl::LineTo(Point { x: 48.00, y: 34.00 }),
                PathEl::CurveTo(
                    Point { x: 48.00, y: 32.90 },
                    Point { x: 47.10, y: 32.00 },
                    Point { x: 46.00, y: 32.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 44.00, y: 32.00 }),
                PathEl::LineTo(Point { x: 38.00, y: 32.00 }),
                PathEl::LineTo(Point { x: 38.00, y: 29.00 }),
                PathEl::CurveTo(
                    Point { x: 38.00, y: 27.34 },
                    Point { x: 39.34, y: 26.00 },
                    Point { x: 41.00, y: 26.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 42.66, y: 26.00 },
                    Point { x: 44.00, y: 27.34 },
                    Point { x: 44.00, y: 29.00 },
                ),
                PathEl::LineTo(Point { x: 44.00, y: 32.00 }),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct PictureInPicture {
    size: f64,
    color: Color,
}

impl PictureInPicture {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for PictureInPicture {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 38.00, y: 14.00 }),
                PathEl::LineTo(Point { x: 22.00, y: 14.00 }),
                PathEl::LineTo(Point { x: 22.00, y: 26.00 }),
                PathEl::LineTo(Point { x: 38.00, y: 26.00 }),
                PathEl::LineTo(Point { x: 38.00, y: 14.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 42.00, y: 6.00 }),
                PathEl::LineTo(Point { x: 6.00, y: 6.00 }),
                PathEl::CurveTo(
                    Point { x: 3.79, y: 6.00 },
                    Point { x: 2.00, y: 7.79 },
                    Point { x: 2.00, y: 10.00 },
                ),
                PathEl::LineTo(Point { x: 2.00, y: 38.00 }),
                PathEl::CurveTo(
                    Point { x: 2.00, y: 40.21 },
                    Point { x: 3.79, y: 41.96 },
                    Point { x: 6.00, y: 41.96 },
                ),
                PathEl::LineTo(Point { x: 42.00, y: 41.96 }),
                PathEl::CurveTo(
                    Point { x: 44.21, y: 41.96 },
                    Point { x: 46.00, y: 40.20 },
                    Point { x: 46.00, y: 38.00 },
                ),
                PathEl::LineTo(Point { x: 46.00, y: 10.00 }),
                PathEl::CurveTo(
                    Point { x: 46.00, y: 7.79 },
                    Point { x: 44.21, y: 6.00 },
                    Point { x: 42.00, y: 6.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 42.00, y: 38.03 }),
                PathEl::LineTo(Point { x: 6.00, y: 38.03 }),
                PathEl::LineTo(Point { x: 6.00, y: 9.97 }),
                PathEl::LineTo(Point { x: 42.00, y: 9.97 }),
                PathEl::LineTo(Point { x: 42.00, y: 38.03 }),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct Wifi {
    size: f64,
    color: Color,
}

impl Wifi {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for Wifi {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 2.00, y: 18.00 }),
                PathEl::LineTo(Point { x: 6.00, y: 22.00 }),
                PathEl::CurveTo(
                    Point { x: 15.94, y: 12.06 },
                    Point { x: 32.06, y: 12.06 },
                    Point { x: 42.00, y: 22.00 },
                ),
                PathEl::LineTo(Point { x: 46.00, y: 18.00 }),
                PathEl::CurveTo(
                    Point { x: 33.85, y: 5.85 },
                    Point { x: 14.15, y: 5.85 },
                    Point { x: 2.00, y: 18.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 18.00, y: 34.00 }),
                PathEl::LineTo(Point { x: 24.00, y: 40.00 }),
                PathEl::LineTo(Point { x: 30.00, y: 34.00 }),
                PathEl::CurveTo(
                    Point { x: 26.69, y: 30.69 },
                    Point { x: 21.31, y: 30.69 },
                    Point { x: 18.00, y: 34.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 10.00, y: 26.00 }),
                PathEl::LineTo(Point { x: 14.00, y: 30.00 }),
                PathEl::CurveTo(
                    Point { x: 19.52, y: 24.48 },
                    Point { x: 28.48, y: 24.48 },
                    Point { x: 34.00, y: 30.00 },
                ),
                PathEl::LineTo(Point { x: 38.00, y: 26.00 }),
                PathEl::CurveTo(
                    Point { x: 30.27, y: 18.27 },
                    Point { x: 17.73, y: 18.27 },
                    Point { x: 10.00, y: 26.00 },
                ),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct SyncProblem {
    size: f64,
    color: Color,
}

impl SyncProblem {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for SyncProblem {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 6.00, y: 24.00 }),
                PathEl::CurveTo(
                    Point { x: 6.00, y: 28.42 },
                    Point { x: 7.82, y: 32.40 },
                    Point { x: 10.71, y: 35.29 },
                ),
                PathEl::LineTo(Point { x: 6.00, y: 40.00 }),
                PathEl::LineTo(Point { x: 18.00, y: 40.00 }),
                PathEl::LineTo(Point { x: 18.00, y: 28.00 }),
                PathEl::LineTo(Point { x: 13.53, y: 32.47 }),
                PathEl::CurveTo(
                    Point { x: 11.35, y: 30.30 },
                    Point { x: 10.00, y: 27.31 },
                    Point { x: 10.00, y: 24.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 10.00, y: 18.78 },
                    Point { x: 13.34, y: 14.35 },
                    Point { x: 18.00, y: 12.70 },
                ),
                PathEl::LineTo(Point { x: 18.00, y: 8.52 }),
                PathEl::CurveTo(
                    Point { x: 11.10, y: 10.30 },
                    Point { x: 6.00, y: 16.55 },
                    Point { x: 6.00, y: 24.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 22.00, y: 34.00 }),
                PathEl::LineTo(Point { x: 26.00, y: 34.00 }),
                PathEl::LineTo(Point { x: 26.00, y: 30.00 }),
                PathEl::LineTo(Point { x: 22.00, y: 30.00 }),
                PathEl::LineTo(Point { x: 22.00, y: 34.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 42.00, y: 8.00 }),
                PathEl::LineTo(Point { x: 30.00, y: 8.00 }),
                PathEl::LineTo(Point { x: 30.00, y: 20.00 }),
                PathEl::LineTo(Point { x: 34.47, y: 15.53 }),
                PathEl::CurveTo(
                    Point { x: 36.65, y: 17.70 },
                    Point { x: 38.00, y: 20.69 },
                    Point { x: 38.00, y: 24.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 38.00, y: 29.22 },
                    Point { x: 34.66, y: 33.65 },
                    Point { x: 30.00, y: 35.30 },
                ),
                PathEl::LineTo(Point { x: 30.00, y: 39.47 }),
                PathEl::CurveTo(
                    Point { x: 36.90, y: 37.70 },
                    Point { x: 42.00, y: 31.45 },
                    Point { x: 42.00, y: 24.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 42.00, y: 19.58 },
                    Point { x: 40.18, y: 15.60 },
                    Point { x: 37.29, y: 12.71 },
                ),
                PathEl::LineTo(Point { x: 42.00, y: 8.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 22.00, y: 26.00 }),
                PathEl::LineTo(Point { x: 26.00, y: 26.00 }),
                PathEl::LineTo(Point { x: 26.00, y: 14.00 }),
                PathEl::LineTo(Point { x: 22.00, y: 14.00 }),
                PathEl::LineTo(Point { x: 22.00, y: 26.00 }),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct PermCameraMic {
    size: f64,
    color: Color,
}

impl PermCameraMic {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for PermCameraMic {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 40.00, y: 10.00 }),
                PathEl::LineTo(Point { x: 33.66, y: 10.00 }),
                PathEl::LineTo(Point { x: 30.00, y: 6.00 }),
                PathEl::LineTo(Point { x: 18.00, y: 6.00 }),
                PathEl::LineTo(Point { x: 14.34, y: 10.00 }),
                PathEl::LineTo(Point { x: 8.00, y: 10.00 }),
                PathEl::CurveTo(
                    Point { x: 5.79, y: 10.00 },
                    Point { x: 4.00, y: 11.79 },
                    Point { x: 4.00, y: 14.00 },
                ),
                PathEl::LineTo(Point { x: 4.00, y: 38.00 }),
                PathEl::CurveTo(
                    Point { x: 4.00, y: 40.21 },
                    Point { x: 5.79, y: 42.00 },
                    Point { x: 8.00, y: 42.00 },
                ),
                PathEl::LineTo(Point { x: 22.00, y: 42.00 }),
                PathEl::LineTo(Point { x: 22.00, y: 37.82 }),
                PathEl::CurveTo(
                    Point { x: 16.33, y: 36.86 },
                    Point { x: 12.00, y: 31.93 },
                    Point { x: 12.00, y: 26.00 },
                ),
                PathEl::LineTo(Point { x: 16.00, y: 26.00 }),
                PathEl::CurveTo(
                    Point { x: 16.00, y: 30.41 },
                    Point { x: 19.59, y: 34.00 },
                    Point { x: 24.00, y: 34.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 28.41, y: 34.00 },
                    Point { x: 32.00, y: 30.41 },
                    Point { x: 32.00, y: 26.00 },
                ),
                PathEl::LineTo(Point { x: 36.00, y: 26.00 }),
                PathEl::CurveTo(
                    Point { x: 36.00, y: 31.93 },
                    Point { x: 31.67, y: 36.86 },
                    Point { x: 26.00, y: 37.82 },
                ),
                PathEl::LineTo(Point { x: 26.00, y: 42.00 }),
                PathEl::LineTo(Point { x: 40.00, y: 42.00 }),
                PathEl::CurveTo(
                    Point { x: 42.21, y: 42.00 },
                    Point { x: 44.00, y: 40.21 },
                    Point { x: 44.00, y: 38.00 },
                ),
                PathEl::LineTo(Point { x: 44.00, y: 14.00 }),
                PathEl::CurveTo(
                    Point { x: 44.00, y: 11.79 },
                    Point { x: 42.21, y: 10.00 },
                    Point { x: 40.00, y: 10.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 28.00, y: 26.00 }),
                PathEl::CurveTo(
                    Point { x: 28.00, y: 28.21 },
                    Point { x: 26.21, y: 30.00 },
                    Point { x: 24.00, y: 30.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 21.79, y: 30.00 },
                    Point { x: 20.00, y: 28.21 },
                    Point { x: 20.00, y: 26.00 },
                ),
                PathEl::LineTo(Point { x: 20.00, y: 18.00 }),
                PathEl::CurveTo(
                    Point { x: 20.00, y: 15.79 },
                    Point { x: 21.79, y: 14.00 },
                    Point { x: 24.00, y: 14.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 26.21, y: 14.00 },
                    Point { x: 28.00, y: 15.79 },
                    Point { x: 28.00, y: 18.00 },
                ),
                PathEl::LineTo(Point { x: 28.00, y: 26.00 }),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct BlurOn {
    size: f64,
    color: Color,
}

impl BlurOn {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for BlurOn {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 12.00, y: 26.00 }),
                PathEl::CurveTo(
                    Point { x: 10.90, y: 26.00 },
                    Point { x: 10.00, y: 26.90 },
                    Point { x: 10.00, y: 28.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 10.00, y: 29.10 },
                    Point { x: 10.90, y: 30.00 },
                    Point { x: 12.00, y: 30.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 13.10, y: 30.00 },
                    Point { x: 14.00, y: 29.10 },
                    Point { x: 14.00, y: 28.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 14.00, y: 26.90 },
                    Point { x: 13.10, y: 26.00 },
                    Point { x: 12.00, y: 26.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 12.00, y: 34.00 }),
                PathEl::CurveTo(
                    Point { x: 10.90, y: 34.00 },
                    Point { x: 10.00, y: 34.90 },
                    Point { x: 10.00, y: 36.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 10.00, y: 37.10 },
                    Point { x: 10.90, y: 38.00 },
                    Point { x: 12.00, y: 38.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 13.10, y: 38.00 },
                    Point { x: 14.00, y: 37.10 },
                    Point { x: 14.00, y: 36.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 14.00, y: 34.90 },
                    Point { x: 13.10, y: 34.00 },
                    Point { x: 12.00, y: 34.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 12.00, y: 18.00 }),
                PathEl::CurveTo(
                    Point { x: 10.90, y: 18.00 },
                    Point { x: 10.00, y: 18.90 },
                    Point { x: 10.00, y: 20.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 10.00, y: 21.10 },
                    Point { x: 10.90, y: 22.00 },
                    Point { x: 12.00, y: 22.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 13.10, y: 22.00 },
                    Point { x: 14.00, y: 21.10 },
                    Point { x: 14.00, y: 20.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 14.00, y: 18.90 },
                    Point { x: 13.10, y: 18.00 },
                    Point { x: 12.00, y: 18.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 6.00, y: 19.00 }),
                PathEl::CurveTo(
                    Point { x: 5.45, y: 19.00 },
                    Point { x: 5.00, y: 19.45 },
                    Point { x: 5.00, y: 20.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 5.00, y: 20.55 },
                    Point { x: 5.45, y: 21.00 },
                    Point { x: 6.00, y: 21.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 6.55, y: 21.00 },
                    Point { x: 7.00, y: 20.55 },
                    Point { x: 7.00, y: 20.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 7.00, y: 19.45 },
                    Point { x: 6.55, y: 19.00 },
                    Point { x: 6.00, y: 19.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 12.00, y: 10.00 }),
                PathEl::CurveTo(
                    Point { x: 10.90, y: 10.00 },
                    Point { x: 10.00, y: 10.90 },
                    Point { x: 10.00, y: 12.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 10.00, y: 13.10 },
                    Point { x: 10.90, y: 14.00 },
                    Point { x: 12.00, y: 14.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 13.10, y: 14.00 },
                    Point { x: 14.00, y: 13.10 },
                    Point { x: 14.00, y: 12.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 14.00, y: 10.90 },
                    Point { x: 13.10, y: 10.00 },
                    Point { x: 12.00, y: 10.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 42.00, y: 21.00 }),
                PathEl::CurveTo(
                    Point { x: 42.55, y: 21.00 },
                    Point { x: 43.00, y: 20.55 },
                    Point { x: 43.00, y: 20.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 43.00, y: 19.45 },
                    Point { x: 42.55, y: 19.00 },
                    Point { x: 42.00, y: 19.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 41.45, y: 19.00 },
                    Point { x: 41.00, y: 19.45 },
                    Point { x: 41.00, y: 20.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 41.00, y: 20.55 },
                    Point { x: 41.45, y: 21.00 },
                    Point { x: 42.00, y: 21.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 28.00, y: 14.00 }),
                PathEl::CurveTo(
                    Point { x: 29.10, y: 14.00 },
                    Point { x: 30.00, y: 13.10 },
                    Point { x: 30.00, y: 12.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 30.00, y: 10.90 },
                    Point { x: 29.10, y: 10.00 },
                    Point { x: 28.00, y: 10.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 26.90, y: 10.00 },
                    Point { x: 26.00, y: 10.90 },
                    Point { x: 26.00, y: 12.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 26.00, y: 13.10 },
                    Point { x: 26.90, y: 14.00 },
                    Point { x: 28.00, y: 14.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 28.00, y: 7.00 }),
                PathEl::CurveTo(
                    Point { x: 28.55, y: 7.00 },
                    Point { x: 29.00, y: 6.55 },
                    Point { x: 29.00, y: 6.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 29.00, y: 5.45 },
                    Point { x: 28.55, y: 5.00 },
                    Point { x: 28.00, y: 5.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 27.45, y: 5.00 },
                    Point { x: 27.00, y: 5.45 },
                    Point { x: 27.00, y: 6.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 27.00, y: 6.55 },
                    Point { x: 27.45, y: 7.00 },
                    Point { x: 28.00, y: 7.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 6.00, y: 27.00 }),
                PathEl::CurveTo(
                    Point { x: 5.45, y: 27.00 },
                    Point { x: 5.00, y: 27.45 },
                    Point { x: 5.00, y: 28.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 5.00, y: 28.55 },
                    Point { x: 5.45, y: 29.00 },
                    Point { x: 6.00, y: 29.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 6.55, y: 29.00 },
                    Point { x: 7.00, y: 28.55 },
                    Point { x: 7.00, y: 28.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 7.00, y: 27.45 },
                    Point { x: 6.55, y: 27.00 },
                    Point { x: 6.00, y: 27.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 20.00, y: 41.00 }),
                PathEl::CurveTo(
                    Point { x: 19.45, y: 41.00 },
                    Point { x: 19.00, y: 41.45 },
                    Point { x: 19.00, y: 42.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 19.00, y: 42.55 },
                    Point { x: 19.45, y: 43.00 },
                    Point { x: 20.00, y: 43.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 20.55, y: 43.00 },
                    Point { x: 21.00, y: 42.55 },
                    Point { x: 21.00, y: 42.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 21.00, y: 41.45 },
                    Point { x: 20.55, y: 41.00 },
                    Point { x: 20.00, y: 41.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 20.00, y: 7.00 }),
                PathEl::CurveTo(
                    Point { x: 20.55, y: 7.00 },
                    Point { x: 21.00, y: 6.55 },
                    Point { x: 21.00, y: 6.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 21.00, y: 5.45 },
                    Point { x: 20.55, y: 5.00 },
                    Point { x: 20.00, y: 5.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 19.45, y: 5.00 },
                    Point { x: 19.00, y: 5.45 },
                    Point { x: 19.00, y: 6.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 19.00, y: 6.55 },
                    Point { x: 19.45, y: 7.00 },
                    Point { x: 20.00, y: 7.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 20.00, y: 14.00 }),
                PathEl::CurveTo(
                    Point { x: 21.10, y: 14.00 },
                    Point { x: 22.00, y: 13.10 },
                    Point { x: 22.00, y: 12.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 22.00, y: 10.90 },
                    Point { x: 21.10, y: 10.00 },
                    Point { x: 20.00, y: 10.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 18.90, y: 10.00 },
                    Point { x: 18.00, y: 10.90 },
                    Point { x: 18.00, y: 12.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 18.00, y: 13.10 },
                    Point { x: 18.90, y: 14.00 },
                    Point { x: 20.00, y: 14.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 20.00, y: 25.00 }),
                PathEl::CurveTo(
                    Point { x: 18.34, y: 25.00 },
                    Point { x: 17.00, y: 26.34 },
                    Point { x: 17.00, y: 28.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 17.00, y: 29.66 },
                    Point { x: 18.34, y: 31.00 },
                    Point { x: 20.00, y: 31.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 21.66, y: 31.00 },
                    Point { x: 23.00, y: 29.66 },
                    Point { x: 23.00, y: 28.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 23.00, y: 26.34 },
                    Point { x: 21.66, y: 25.00 },
                    Point { x: 20.00, y: 25.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 36.00, y: 26.00 }),
                PathEl::CurveTo(
                    Point { x: 34.90, y: 26.00 },
                    Point { x: 34.00, y: 26.90 },
                    Point { x: 34.00, y: 28.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 34.00, y: 29.10 },
                    Point { x: 34.90, y: 30.00 },
                    Point { x: 36.00, y: 30.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 37.10, y: 30.00 },
                    Point { x: 38.00, y: 29.10 },
                    Point { x: 38.00, y: 28.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 38.00, y: 26.90 },
                    Point { x: 37.10, y: 26.00 },
                    Point { x: 36.00, y: 26.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 36.00, y: 34.00 }),
                PathEl::CurveTo(
                    Point { x: 34.90, y: 34.00 },
                    Point { x: 34.00, y: 34.90 },
                    Point { x: 34.00, y: 36.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 34.00, y: 37.10 },
                    Point { x: 34.90, y: 38.00 },
                    Point { x: 36.00, y: 38.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 37.10, y: 38.00 },
                    Point { x: 38.00, y: 37.10 },
                    Point { x: 38.00, y: 36.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 38.00, y: 34.90 },
                    Point { x: 37.10, y: 34.00 },
                    Point { x: 36.00, y: 34.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 36.00, y: 18.00 }),
                PathEl::CurveTo(
                    Point { x: 34.90, y: 18.00 },
                    Point { x: 34.00, y: 18.90 },
                    Point { x: 34.00, y: 20.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 34.00, y: 21.10 },
                    Point { x: 34.90, y: 22.00 },
                    Point { x: 36.00, y: 22.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 37.10, y: 22.00 },
                    Point { x: 38.00, y: 21.10 },
                    Point { x: 38.00, y: 20.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 38.00, y: 18.90 },
                    Point { x: 37.10, y: 18.00 },
                    Point { x: 36.00, y: 18.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 36.00, y: 10.00 }),
                PathEl::CurveTo(
                    Point { x: 34.90, y: 10.00 },
                    Point { x: 34.00, y: 10.90 },
                    Point { x: 34.00, y: 12.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 34.00, y: 13.10 },
                    Point { x: 34.90, y: 14.00 },
                    Point { x: 36.00, y: 14.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 37.10, y: 14.00 },
                    Point { x: 38.00, y: 13.10 },
                    Point { x: 38.00, y: 12.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 38.00, y: 10.90 },
                    Point { x: 37.10, y: 10.00 },
                    Point { x: 36.00, y: 10.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 42.00, y: 27.00 }),
                PathEl::CurveTo(
                    Point { x: 41.45, y: 27.00 },
                    Point { x: 41.00, y: 27.45 },
                    Point { x: 41.00, y: 28.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 41.00, y: 28.55 },
                    Point { x: 41.45, y: 29.00 },
                    Point { x: 42.00, y: 29.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 42.55, y: 29.00 },
                    Point { x: 43.00, y: 28.55 },
                    Point { x: 43.00, y: 28.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 43.00, y: 27.45 },
                    Point { x: 42.55, y: 27.00 },
                    Point { x: 42.00, y: 27.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 28.00, y: 34.00 }),
                PathEl::CurveTo(
                    Point { x: 26.90, y: 34.00 },
                    Point { x: 26.00, y: 34.90 },
                    Point { x: 26.00, y: 36.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 26.00, y: 37.10 },
                    Point { x: 26.90, y: 38.00 },
                    Point { x: 28.00, y: 38.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 29.10, y: 38.00 },
                    Point { x: 30.00, y: 37.10 },
                    Point { x: 30.00, y: 36.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 30.00, y: 34.90 },
                    Point { x: 29.10, y: 34.00 },
                    Point { x: 28.00, y: 34.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 28.00, y: 41.00 }),
                PathEl::CurveTo(
                    Point { x: 27.45, y: 41.00 },
                    Point { x: 27.00, y: 41.45 },
                    Point { x: 27.00, y: 42.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 27.00, y: 42.55 },
                    Point { x: 27.45, y: 43.00 },
                    Point { x: 28.00, y: 43.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 28.55, y: 43.00 },
                    Point { x: 29.00, y: 42.55 },
                    Point { x: 29.00, y: 42.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 29.00, y: 41.45 },
                    Point { x: 28.55, y: 41.00 },
                    Point { x: 28.00, y: 41.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 20.00, y: 17.00 }),
                PathEl::CurveTo(
                    Point { x: 18.34, y: 17.00 },
                    Point { x: 17.00, y: 18.34 },
                    Point { x: 17.00, y: 20.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 17.00, y: 21.66 },
                    Point { x: 18.34, y: 23.00 },
                    Point { x: 20.00, y: 23.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 21.66, y: 23.00 },
                    Point { x: 23.00, y: 21.66 },
                    Point { x: 23.00, y: 20.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 23.00, y: 18.34 },
                    Point { x: 21.66, y: 17.00 },
                    Point { x: 20.00, y: 17.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 20.00, y: 34.00 }),
                PathEl::CurveTo(
                    Point { x: 18.90, y: 34.00 },
                    Point { x: 18.00, y: 34.90 },
                    Point { x: 18.00, y: 36.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 18.00, y: 37.10 },
                    Point { x: 18.90, y: 38.00 },
                    Point { x: 20.00, y: 38.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 21.10, y: 38.00 },
                    Point { x: 22.00, y: 37.10 },
                    Point { x: 22.00, y: 36.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 22.00, y: 34.90 },
                    Point { x: 21.10, y: 34.00 },
                    Point { x: 20.00, y: 34.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 28.00, y: 25.00 }),
                PathEl::CurveTo(
                    Point { x: 26.34, y: 25.00 },
                    Point { x: 25.00, y: 26.34 },
                    Point { x: 25.00, y: 28.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 25.00, y: 29.66 },
                    Point { x: 26.34, y: 31.00 },
                    Point { x: 28.00, y: 31.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 29.66, y: 31.00 },
                    Point { x: 31.00, y: 29.66 },
                    Point { x: 31.00, y: 28.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 31.00, y: 26.34 },
                    Point { x: 29.66, y: 25.00 },
                    Point { x: 28.00, y: 25.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 28.00, y: 17.00 }),
                PathEl::CurveTo(
                    Point { x: 26.34, y: 17.00 },
                    Point { x: 25.00, y: 18.34 },
                    Point { x: 25.00, y: 20.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 25.00, y: 21.66 },
                    Point { x: 26.34, y: 23.00 },
                    Point { x: 28.00, y: 23.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 29.66, y: 23.00 },
                    Point { x: 31.00, y: 21.66 },
                    Point { x: 31.00, y: 20.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 31.00, y: 18.34 },
                    Point { x: 29.66, y: 17.00 },
                    Point { x: 28.00, y: 17.00 },
                ),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct RadioButtonChecked {
    size: f64,
    color: Color,
}

impl RadioButtonChecked {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for RadioButtonChecked {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 24.00, y: 14.00 }),
                PathEl::CurveTo(
                    Point { x: 18.48, y: 14.00 },
                    Point { x: 14.00, y: 18.48 },
                    Point { x: 14.00, y: 24.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 14.00, y: 29.52 },
                    Point { x: 18.48, y: 34.00 },
                    Point { x: 24.00, y: 34.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 29.52, y: 34.00 },
                    Point { x: 34.00, y: 29.52 },
                    Point { x: 34.00, y: 24.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 34.00, y: 18.48 },
                    Point { x: 29.52, y: 14.00 },
                    Point { x: 24.00, y: 14.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 24.00, y: 4.00 }),
                PathEl::CurveTo(
                    Point { x: 12.95, y: 4.00 },
                    Point { x: 4.00, y: 12.95 },
                    Point { x: 4.00, y: 24.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 4.00, y: 35.05 },
                    Point { x: 12.95, y: 44.00 },
                    Point { x: 24.00, y: 44.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 35.05, y: 44.00 },
                    Point { x: 44.00, y: 35.05 },
                    Point { x: 44.00, y: 24.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 44.00, y: 12.95 },
                    Point { x: 35.05, y: 4.00 },
                    Point { x: 24.00, y: 4.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 24.00, y: 40.00 }),
                PathEl::CurveTo(
                    Point { x: 15.16, y: 40.00 },
                    Point { x: 8.00, y: 32.84 },
                    Point { x: 8.00, y: 24.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 8.00, y: 15.16 },
                    Point { x: 15.16, y: 8.00 },
                    Point { x: 24.00, y: 8.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 32.84, y: 8.00 },
                    Point { x: 40.00, y: 15.16 },
                    Point { x: 40.00, y: 24.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 40.00, y: 32.84 },
                    Point { x: 32.84, y: 40.00 },
                    Point { x: 24.00, y: 40.00 },
                ),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct Done {
    size: f64,
    color: Color,
}

impl Done {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for Done {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 18.00, y: 32.34 }),
                PathEl::LineTo(Point { x: 9.66, y: 24.00 }),
                PathEl::LineTo(Point { x: 6.83, y: 26.83 }),
                PathEl::LineTo(Point { x: 18.00, y: 38.00 }),
                PathEl::LineTo(Point { x: 42.00, y: 14.00 }),
                PathEl::LineTo(Point { x: 39.17, y: 11.17 }),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct NewReleases {
    size: f64,
    color: Color,
}

impl NewReleases {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for NewReleases {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 46.00, y: 24.00 }),
                PathEl::LineTo(Point { x: 41.12, y: 18.44 }),
                PathEl::LineTo(Point { x: 41.80, y: 11.07 }),
                PathEl::LineTo(Point { x: 34.58, y: 9.44 }),
                PathEl::LineTo(Point { x: 30.80, y: 3.08 }),
                PathEl::LineTo(Point { x: 24.00, y: 6.00 }),
                PathEl::LineTo(Point { x: 17.20, y: 3.08 }),
                PathEl::LineTo(Point { x: 13.42, y: 9.44 }),
                PathEl::LineTo(Point { x: 6.20, y: 11.07 }),
                PathEl::LineTo(Point { x: 6.88, y: 18.44 }),
                PathEl::LineTo(Point { x: 2.00, y: 24.00 }),
                PathEl::LineTo(Point { x: 6.88, y: 29.56 }),
                PathEl::LineTo(Point { x: 6.20, y: 36.93 }),
                PathEl::LineTo(Point { x: 13.42, y: 38.56 }),
                PathEl::LineTo(Point { x: 17.20, y: 44.92 }),
                PathEl::LineTo(Point { x: 24.00, y: 42.00 }),
                PathEl::LineTo(Point { x: 30.80, y: 44.92 }),
                PathEl::LineTo(Point { x: 34.58, y: 38.56 }),
                PathEl::LineTo(Point { x: 41.80, y: 36.93 }),
                PathEl::LineTo(Point { x: 41.12, y: 29.56 }),
                PathEl::LineTo(Point { x: 46.00, y: 24.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 26.00, y: 34.00 }),
                PathEl::LineTo(Point { x: 22.00, y: 34.00 }),
                PathEl::LineTo(Point { x: 22.00, y: 30.00 }),
                PathEl::LineTo(Point { x: 26.00, y: 30.00 }),
                PathEl::LineTo(Point { x: 26.00, y: 34.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 26.00, y: 26.00 }),
                PathEl::LineTo(Point { x: 22.00, y: 26.00 }),
                PathEl::LineTo(Point { x: 22.00, y: 14.00 }),
                PathEl::LineTo(Point { x: 26.00, y: 14.00 }),
                PathEl::LineTo(Point { x: 26.00, y: 26.00 }),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct VerticalAlignTop {
    size: f64,
    color: Color,
}

impl VerticalAlignTop {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for VerticalAlignTop {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 16.00, y: 22.00 }),
                PathEl::LineTo(Point { x: 22.00, y: 22.00 }),
                PathEl::LineTo(Point { x: 22.00, y: 42.00 }),
                PathEl::LineTo(Point { x: 26.00, y: 42.00 }),
                PathEl::LineTo(Point { x: 26.00, y: 22.00 }),
                PathEl::LineTo(Point { x: 32.00, y: 22.00 }),
                PathEl::LineTo(Point { x: 24.00, y: 14.00 }),
                PathEl::LineTo(Point { x: 16.00, y: 22.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 8.00, y: 6.00 }),
                PathEl::LineTo(Point { x: 8.00, y: 10.00 }),
                PathEl::LineTo(Point { x: 40.00, y: 10.00 }),
                PathEl::LineTo(Point { x: 40.00, y: 6.00 }),
                PathEl::LineTo(Point { x: 8.00, y: 6.00 }),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct Shop {
    size: f64,
    color: Color,
}

impl Shop {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for Shop {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 32.00, y: 12.00 }),
                PathEl::LineTo(Point { x: 32.00, y: 8.00 }),
                PathEl::CurveTo(
                    Point { x: 32.00, y: 5.79 },
                    Point { x: 30.21, y: 4.00 },
                    Point { x: 28.00, y: 4.00 },
                ),
                PathEl::LineTo(Point { x: 20.00, y: 4.00 }),
                PathEl::CurveTo(
                    Point { x: 17.79, y: 4.00 },
                    Point { x: 16.00, y: 5.79 },
                    Point { x: 16.00, y: 8.00 },
                ),
                PathEl::LineTo(Point { x: 16.00, y: 12.00 }),
                PathEl::LineTo(Point { x: 4.00, y: 12.00 }),
                PathEl::LineTo(Point { x: 4.00, y: 38.00 }),
                PathEl::CurveTo(
                    Point { x: 4.00, y: 40.21 },
                    Point { x: 5.79, y: 42.00 },
                    Point { x: 8.00, y: 42.00 },
                ),
                PathEl::LineTo(Point { x: 40.00, y: 42.00 }),
                PathEl::CurveTo(
                    Point { x: 42.21, y: 42.00 },
                    Point { x: 44.00, y: 40.21 },
                    Point { x: 44.00, y: 38.00 },
                ),
                PathEl::LineTo(Point { x: 44.00, y: 12.00 }),
                PathEl::LineTo(Point { x: 32.00, y: 12.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 20.00, y: 8.00 }),
                PathEl::LineTo(Point { x: 28.00, y: 8.00 }),
                PathEl::LineTo(Point { x: 28.00, y: 12.00 }),
                PathEl::LineTo(Point { x: 20.00, y: 12.00 }),
                PathEl::LineTo(Point { x: 20.00, y: 8.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 18.00, y: 36.00 }),
                PathEl::LineTo(Point { x: 18.00, y: 18.00 }),
                PathEl::LineTo(Point { x: 33.00, y: 26.00 }),
                PathEl::LineTo(Point { x: 18.00, y: 36.00 }),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct Restaurant {
    size: f64,
    color: Color,
}

impl Restaurant {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for Restaurant {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 22.00, y: 18.00 }),
                PathEl::LineTo(Point { x: 18.00, y: 18.00 }),
                PathEl::LineTo(Point { x: 18.00, y: 4.00 }),
                PathEl::LineTo(Point { x: 14.00, y: 4.00 }),
                PathEl::LineTo(Point { x: 14.00, y: 18.00 }),
                PathEl::LineTo(Point { x: 10.00, y: 18.00 }),
                PathEl::LineTo(Point { x: 10.00, y: 4.00 }),
                PathEl::LineTo(Point { x: 6.00, y: 4.00 }),
                PathEl::LineTo(Point { x: 6.00, y: 18.00 }),
                PathEl::CurveTo(
                    Point { x: 6.00, y: 22.25 },
                    Point { x: 9.32, y: 25.69 },
                    Point { x: 13.50, y: 25.95 },
                ),
                PathEl::LineTo(Point { x: 13.50, y: 44.00 }),
                PathEl::LineTo(Point { x: 18.50, y: 44.00 }),
                PathEl::LineTo(Point { x: 18.50, y: 25.95 }),
                PathEl::CurveTo(
                    Point { x: 22.68, y: 25.69 },
                    Point { x: 26.00, y: 22.25 },
                    Point { x: 26.00, y: 18.00 },
                ),
                PathEl::LineTo(Point { x: 26.00, y: 4.00 }),
                PathEl::LineTo(Point { x: 22.00, y: 4.00 }),
                PathEl::LineTo(Point { x: 22.00, y: 18.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 32.00, y: 12.00 }),
                PathEl::LineTo(Point { x: 32.00, y: 28.00 }),
                PathEl::LineTo(Point { x: 37.00, y: 28.00 }),
                PathEl::LineTo(Point { x: 37.00, y: 44.00 }),
                PathEl::LineTo(Point { x: 42.00, y: 44.00 }),
                PathEl::LineTo(Point { x: 42.00, y: 4.00 }),
                PathEl::CurveTo(
                    Point { x: 36.48, y: 4.00 },
                    Point { x: 32.00, y: 8.48 },
                    Point { x: 32.00, y: 12.00 },
                ),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct LocalShipping {
    size: f64,
    color: Color,
}

impl LocalShipping {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for LocalShipping {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 40.00, y: 16.00 }),
                PathEl::LineTo(Point { x: 34.00, y: 16.00 }),
                PathEl::LineTo(Point { x: 34.00, y: 8.00 }),
                PathEl::LineTo(Point { x: 6.00, y: 8.00 }),
                PathEl::CurveTo(
                    Point { x: 3.79, y: 8.00 },
                    Point { x: 2.00, y: 9.79 },
                    Point { x: 2.00, y: 12.00 },
                ),
                PathEl::LineTo(Point { x: 2.00, y: 34.00 }),
                PathEl::LineTo(Point { x: 6.00, y: 34.00 }),
                PathEl::CurveTo(
                    Point { x: 6.00, y: 37.31 },
                    Point { x: 8.69, y: 40.00 },
                    Point { x: 12.00, y: 40.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 15.31, y: 40.00 },
                    Point { x: 18.00, y: 37.31 },
                    Point { x: 18.00, y: 34.00 },
                ),
                PathEl::LineTo(Point { x: 30.00, y: 34.00 }),
                PathEl::CurveTo(
                    Point { x: 30.00, y: 37.31 },
                    Point { x: 32.69, y: 40.00 },
                    Point { x: 36.00, y: 40.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 39.31, y: 40.00 },
                    Point { x: 42.00, y: 37.31 },
                    Point { x: 42.00, y: 34.00 },
                ),
                PathEl::LineTo(Point { x: 46.00, y: 34.00 }),
                PathEl::LineTo(Point { x: 46.00, y: 24.00 }),
                PathEl::LineTo(Point { x: 40.00, y: 16.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 12.00, y: 37.00 }),
                PathEl::CurveTo(
                    Point { x: 10.34, y: 37.00 },
                    Point { x: 9.00, y: 35.66 },
                    Point { x: 9.00, y: 34.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 9.00, y: 32.34 },
                    Point { x: 10.34, y: 31.00 },
                    Point { x: 12.00, y: 31.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 13.66, y: 31.00 },
                    Point { x: 15.00, y: 32.34 },
                    Point { x: 15.00, y: 34.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 15.00, y: 35.66 },
                    Point { x: 13.66, y: 37.00 },
                    Point { x: 12.00, y: 37.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 39.00, y: 19.00 }),
                PathEl::LineTo(Point { x: 42.93, y: 24.00 }),
                PathEl::LineTo(Point { x: 34.00, y: 24.00 }),
                PathEl::LineTo(Point { x: 34.00, y: 19.00 }),
                PathEl::LineTo(Point { x: 39.00, y: 19.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 36.00, y: 37.00 }),
                PathEl::CurveTo(
                    Point { x: 34.34, y: 37.00 },
                    Point { x: 33.00, y: 35.66 },
                    Point { x: 33.00, y: 34.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 33.00, y: 32.34 },
                    Point { x: 34.34, y: 31.00 },
                    Point { x: 36.00, y: 31.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 37.66, y: 31.00 },
                    Point { x: 39.00, y: 32.34 },
                    Point { x: 39.00, y: 34.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 39.00, y: 35.66 },
                    Point { x: 37.66, y: 37.00 },
                    Point { x: 36.00, y: 37.00 },
                ),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct TurnedIn {
    size: f64,
    color: Color,
}

impl TurnedIn {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for TurnedIn {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 34.00, y: 6.00 }),
                PathEl::LineTo(Point { x: 14.00, y: 6.00 }),
                PathEl::CurveTo(
                    Point { x: 11.79, y: 6.00 },
                    Point { x: 10.02, y: 7.79 },
                    Point { x: 10.02, y: 10.00 },
                ),
                PathEl::LineTo(Point { x: 10.00, y: 42.00 }),
                PathEl::LineTo(Point { x: 24.00, y: 36.00 }),
                PathEl::LineTo(Point { x: 38.00, y: 42.00 }),
                PathEl::LineTo(Point { x: 38.00, y: 10.00 }),
                PathEl::CurveTo(
                    Point { x: 38.00, y: 7.79 },
                    Point { x: 36.21, y: 6.00 },
                    Point { x: 34.00, y: 6.00 },
                ),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct InsertComment {
    size: f64,
    color: Color,
}

impl InsertComment {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for InsertComment {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 40.00, y: 4.00 }),
                PathEl::LineTo(Point { x: 8.00, y: 4.00 }),
                PathEl::CurveTo(
                    Point { x: 5.79, y: 4.00 },
                    Point { x: 4.00, y: 5.79 },
                    Point { x: 4.00, y: 8.00 },
                ),
                PathEl::LineTo(Point { x: 4.00, y: 32.00 }),
                PathEl::CurveTo(
                    Point { x: 4.00, y: 34.21 },
                    Point { x: 5.79, y: 36.00 },
                    Point { x: 8.00, y: 36.00 },
                ),
                PathEl::LineTo(Point { x: 36.00, y: 36.00 }),
                PathEl::LineTo(Point { x: 44.00, y: 44.00 }),
                PathEl::LineTo(Point { x: 44.00, y: 8.00 }),
                PathEl::CurveTo(
                    Point { x: 44.00, y: 5.79 },
                    Point { x: 42.21, y: 4.00 },
                    Point { x: 40.00, y: 4.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 36.00, y: 28.00 }),
                PathEl::LineTo(Point { x: 12.00, y: 28.00 }),
                PathEl::LineTo(Point { x: 12.00, y: 24.00 }),
                PathEl::LineTo(Point { x: 36.00, y: 24.00 }),
                PathEl::LineTo(Point { x: 36.00, y: 28.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 36.00, y: 22.00 }),
                PathEl::LineTo(Point { x: 12.00, y: 22.00 }),
                PathEl::LineTo(Point { x: 12.00, y: 18.00 }),
                PathEl::LineTo(Point { x: 36.00, y: 18.00 }),
                PathEl::LineTo(Point { x: 36.00, y: 22.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 36.00, y: 16.00 }),
                PathEl::LineTo(Point { x: 12.00, y: 16.00 }),
                PathEl::LineTo(Point { x: 12.00, y: 12.00 }),
                PathEl::LineTo(Point { x: 36.00, y: 12.00 }),
                PathEl::LineTo(Point { x: 36.00, y: 16.00 }),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct PermDeviceInformation {
    size: f64,
    color: Color,
}

impl PermDeviceInformation {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for PermDeviceInformation {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 26.00, y: 14.00 }),
                PathEl::LineTo(Point { x: 22.00, y: 14.00 }),
                PathEl::LineTo(Point { x: 22.00, y: 18.00 }),
                PathEl::LineTo(Point { x: 26.00, y: 18.00 }),
                PathEl::LineTo(Point { x: 26.00, y: 14.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 26.00, y: 22.00 }),
                PathEl::LineTo(Point { x: 22.00, y: 22.00 }),
                PathEl::LineTo(Point { x: 22.00, y: 34.00 }),
                PathEl::LineTo(Point { x: 26.00, y: 34.00 }),
                PathEl::LineTo(Point { x: 26.00, y: 22.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 34.00, y: 2.02 }),
                PathEl::LineTo(Point { x: 14.00, y: 2.00 }),
                PathEl::CurveTo(
                    Point { x: 11.79, y: 2.00 },
                    Point { x: 10.00, y: 3.79 },
                    Point { x: 10.00, y: 6.00 },
                ),
                PathEl::LineTo(Point { x: 10.00, y: 42.00 }),
                PathEl::CurveTo(
                    Point { x: 10.00, y: 44.21 },
                    Point { x: 11.79, y: 46.00 },
                    Point { x: 14.00, y: 46.00 },
                ),
                PathEl::LineTo(Point { x: 34.00, y: 46.00 }),
                PathEl::CurveTo(
                    Point { x: 36.21, y: 46.00 },
                    Point { x: 38.00, y: 44.21 },
                    Point { x: 38.00, y: 42.00 },
                ),
                PathEl::LineTo(Point { x: 38.00, y: 6.00 }),
                PathEl::CurveTo(
                    Point { x: 38.00, y: 3.79 },
                    Point { x: 36.21, y: 2.02 },
                    Point { x: 34.00, y: 2.02 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 34.00, y: 38.00 }),
                PathEl::LineTo(Point { x: 14.00, y: 38.00 }),
                PathEl::LineTo(Point { x: 14.00, y: 10.00 }),
                PathEl::LineTo(Point { x: 34.00, y: 10.00 }),
                PathEl::LineTo(Point { x: 34.00, y: 38.00 }),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct SettingsBrightness {
    size: f64,
    color: Color,
}

impl SettingsBrightness {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for SettingsBrightness {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 42.00, y: 6.00 }),
                PathEl::LineTo(Point { x: 6.00, y: 6.00 }),
                PathEl::CurveTo(
                    Point { x: 3.79, y: 6.00 },
                    Point { x: 2.00, y: 7.79 },
                    Point { x: 2.00, y: 10.00 },
                ),
                PathEl::LineTo(Point { x: 2.00, y: 38.00 }),
                PathEl::CurveTo(
                    Point { x: 2.00, y: 40.21 },
                    Point { x: 3.79, y: 42.00 },
                    Point { x: 6.00, y: 42.00 },
                ),
                PathEl::LineTo(Point { x: 42.00, y: 42.00 }),
                PathEl::CurveTo(
                    Point { x: 44.21, y: 42.00 },
                    Point { x: 46.00, y: 40.21 },
                    Point { x: 46.00, y: 38.00 },
                ),
                PathEl::LineTo(Point { x: 46.00, y: 10.00 }),
                PathEl::CurveTo(
                    Point { x: 46.00, y: 7.79 },
                    Point { x: 44.21, y: 6.00 },
                    Point { x: 42.00, y: 6.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 42.00, y: 38.03 }),
                PathEl::LineTo(Point { x: 6.00, y: 38.03 }),
                PathEl::LineTo(Point { x: 6.00, y: 9.97 }),
                PathEl::LineTo(Point { x: 42.00, y: 9.97 }),
                PathEl::LineTo(Point { x: 42.00, y: 38.03 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 16.00, y: 32.00 }),
                PathEl::LineTo(Point { x: 21.00, y: 32.00 }),
                PathEl::LineTo(Point { x: 24.00, y: 35.00 }),
                PathEl::LineTo(Point { x: 27.00, y: 32.00 }),
                PathEl::LineTo(Point { x: 32.00, y: 32.00 }),
                PathEl::LineTo(Point { x: 32.00, y: 27.00 }),
                PathEl::LineTo(Point { x: 35.00, y: 24.00 }),
                PathEl::LineTo(Point { x: 32.00, y: 21.00 }),
                PathEl::LineTo(Point { x: 32.00, y: 16.00 }),
                PathEl::LineTo(Point { x: 27.00, y: 16.00 }),
                PathEl::LineTo(Point { x: 24.00, y: 13.00 }),
                PathEl::LineTo(Point { x: 21.00, y: 16.00 }),
                PathEl::LineTo(Point { x: 16.00, y: 16.00 }),
                PathEl::LineTo(Point { x: 16.00, y: 21.00 }),
                PathEl::LineTo(Point { x: 13.00, y: 24.00 }),
                PathEl::LineTo(Point { x: 16.00, y: 27.00 }),
                PathEl::LineTo(Point { x: 16.00, y: 32.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 24.00, y: 18.00 }),
                PathEl::CurveTo(
                    Point { x: 27.31, y: 18.00 },
                    Point { x: 30.00, y: 20.69 },
                    Point { x: 30.00, y: 24.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 30.00, y: 27.31 },
                    Point { x: 27.31, y: 30.00 },
                    Point { x: 24.00, y: 30.00 },
                ),
                PathEl::LineTo(Point { x: 24.00, y: 18.00 }),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct FormatBold {
    size: f64,
    color: Color,
}

impl FormatBold {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for FormatBold {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 31.20, y: 21.58 }),
                PathEl::CurveTo(
                    Point { x: 33.13, y: 20.23 },
                    Point { x: 34.50, y: 18.05 },
                    Point { x: 34.50, y: 16.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 34.50, y: 11.49 },
                    Point { x: 31.01, y: 8.00 },
                    Point { x: 26.50, y: 8.00 },
                ),
                PathEl::LineTo(Point { x: 14.00, y: 8.00 }),
                PathEl::LineTo(Point { x: 14.00, y: 36.00 }),
                PathEl::LineTo(Point { x: 28.08, y: 36.00 }),
                PathEl::CurveTo(
                    Point { x: 32.27, y: 36.00 },
                    Point { x: 35.50, y: 32.60 },
                    Point { x: 35.50, y: 28.42 },
                ),
                PathEl::CurveTo(
                    Point { x: 35.50, y: 25.38 },
                    Point { x: 33.77, y: 22.79 },
                    Point { x: 31.20, y: 21.58 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 20.00, y: 13.00 }),
                PathEl::LineTo(Point { x: 26.00, y: 13.00 }),
                PathEl::CurveTo(
                    Point { x: 27.66, y: 13.00 },
                    Point { x: 29.00, y: 14.34 },
                    Point { x: 29.00, y: 16.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 29.00, y: 17.66 },
                    Point { x: 27.66, y: 19.00 },
                    Point { x: 26.00, y: 19.00 },
                ),
                PathEl::LineTo(Point { x: 20.00, y: 19.00 }),
                PathEl::LineTo(Point { x: 20.00, y: 13.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 27.00, y: 31.00 }),
                PathEl::LineTo(Point { x: 20.00, y: 31.00 }),
                PathEl::LineTo(Point { x: 20.00, y: 25.00 }),
                PathEl::LineTo(Point { x: 27.00, y: 25.00 }),
                PathEl::CurveTo(
                    Point { x: 28.66, y: 25.00 },
                    Point { x: 30.00, y: 26.34 },
                    Point { x: 30.00, y: 28.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 30.00, y: 29.66 },
                    Point { x: 28.66, y: 31.00 },
                    Point { x: 27.00, y: 31.00 },
                ),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct Mood {
    size: f64,
    color: Color,
}

impl Mood {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for Mood {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 23.99, y: 4.00 }),
                PathEl::CurveTo(
                    Point { x: 12.94, y: 4.00 },
                    Point { x: 4.00, y: 12.95 },
                    Point { x: 4.00, y: 24.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 4.00, y: 35.05 },
                    Point { x: 12.94, y: 44.00 },
                    Point { x: 23.99, y: 44.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 35.04, y: 44.00 },
                    Point { x: 44.00, y: 35.05 },
                    Point { x: 44.00, y: 24.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 44.00, y: 12.95 },
                    Point { x: 35.04, y: 4.00 },
                    Point { x: 23.99, y: 4.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 24.00, y: 40.00 }),
                PathEl::CurveTo(
                    Point { x: 15.16, y: 40.00 },
                    Point { x: 8.00, y: 32.84 },
                    Point { x: 8.00, y: 24.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 8.00, y: 15.16 },
                    Point { x: 15.16, y: 8.00 },
                    Point { x: 24.00, y: 8.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 32.84, y: 8.00 },
                    Point { x: 40.00, y: 15.16 },
                    Point { x: 40.00, y: 24.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 40.00, y: 32.84 },
                    Point { x: 32.84, y: 40.00 },
                    Point { x: 24.00, y: 40.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 31.00, y: 22.00 }),
                PathEl::CurveTo(
                    Point { x: 32.66, y: 22.00 },
                    Point { x: 34.00, y: 20.66 },
                    Point { x: 34.00, y: 19.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 34.00, y: 17.34 },
                    Point { x: 32.66, y: 16.00 },
                    Point { x: 31.00, y: 16.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 29.34, y: 16.00 },
                    Point { x: 28.00, y: 17.34 },
                    Point { x: 28.00, y: 19.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 28.00, y: 20.66 },
                    Point { x: 29.34, y: 22.00 },
                    Point { x: 31.00, y: 22.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 17.00, y: 22.00 }),
                PathEl::CurveTo(
                    Point { x: 18.66, y: 22.00 },
                    Point { x: 20.00, y: 20.66 },
                    Point { x: 20.00, y: 19.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 20.00, y: 17.34 },
                    Point { x: 18.66, y: 16.00 },
                    Point { x: 17.00, y: 16.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 15.34, y: 16.00 },
                    Point { x: 14.00, y: 17.34 },
                    Point { x: 14.00, y: 19.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 14.00, y: 20.66 },
                    Point { x: 15.34, y: 22.00 },
                    Point { x: 17.00, y: 22.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 24.00, y: 35.00 }),
                PathEl::CurveTo(
                    Point { x: 28.66, y: 35.00 },
                    Point { x: 32.61, y: 32.09 },
                    Point { x: 34.21, y: 28.00 },
                ),
                PathEl::LineTo(Point { x: 13.79, y: 28.00 }),
                PathEl::CurveTo(
                    Point { x: 15.39, y: 32.09 },
                    Point { x: 19.34, y: 35.00 },
                    Point { x: 24.00, y: 35.00 },
                ),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct DeleteSweep {
    size: f64,
    color: Color,
}

impl DeleteSweep {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for DeleteSweep {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 30.00, y: 32.00 }),
                PathEl::LineTo(Point { x: 38.00, y: 32.00 }),
                PathEl::LineTo(Point { x: 38.00, y: 36.00 }),
                PathEl::LineTo(Point { x: 30.00, y: 36.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 30.00, y: 16.00 }),
                PathEl::LineTo(Point { x: 44.00, y: 16.00 }),
                PathEl::LineTo(Point { x: 44.00, y: 20.00 }),
                PathEl::LineTo(Point { x: 30.00, y: 20.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 30.00, y: 24.00 }),
                PathEl::LineTo(Point { x: 42.00, y: 24.00 }),
                PathEl::LineTo(Point { x: 42.00, y: 28.00 }),
                PathEl::LineTo(Point { x: 30.00, y: 28.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 6.00, y: 36.00 }),
                PathEl::CurveTo(
                    Point { x: 6.00, y: 38.20 },
                    Point { x: 7.80, y: 40.00 },
                    Point { x: 10.00, y: 40.00 },
                ),
                PathEl::LineTo(Point { x: 22.00, y: 40.00 }),
                PathEl::CurveTo(
                    Point { x: 24.20, y: 40.00 },
                    Point { x: 26.00, y: 38.20 },
                    Point { x: 26.00, y: 36.00 },
                ),
                PathEl::LineTo(Point { x: 26.00, y: 16.00 }),
                PathEl::LineTo(Point { x: 6.00, y: 16.00 }),
                PathEl::LineTo(Point { x: 6.00, y: 36.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 28.00, y: 10.00 }),
                PathEl::LineTo(Point { x: 22.00, y: 10.00 }),
                PathEl::LineTo(Point { x: 20.00, y: 8.00 }),
                PathEl::LineTo(Point { x: 12.00, y: 8.00 }),
                PathEl::LineTo(Point { x: 10.00, y: 10.00 }),
                PathEl::LineTo(Point { x: 4.00, y: 10.00 }),
                PathEl::LineTo(Point { x: 4.00, y: 14.00 }),
                PathEl::LineTo(Point { x: 28.00, y: 14.00 }),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct SettingsInputSvideo {
    size: f64,
    color: Color,
}

impl SettingsInputSvideo {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for SettingsInputSvideo {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 16.00, y: 23.00 }),
                PathEl::CurveTo(
                    Point { x: 16.00, y: 21.34 },
                    Point { x: 14.66, y: 20.00 },
                    Point { x: 13.00, y: 20.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 11.34, y: 20.00 },
                    Point { x: 10.00, y: 21.34 },
                    Point { x: 10.00, y: 23.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 10.00, y: 24.66 },
                    Point { x: 11.34, y: 26.00 },
                    Point { x: 13.00, y: 26.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 14.66, y: 26.00 },
                    Point { x: 16.00, y: 24.66 },
                    Point { x: 16.00, y: 23.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 30.00, y: 13.00 }),
                PathEl::CurveTo(
                    Point { x: 30.00, y: 11.34 },
                    Point { x: 28.66, y: 10.00 },
                    Point { x: 27.00, y: 10.00 },
                ),
                PathEl::LineTo(Point { x: 21.00, y: 10.00 }),
                PathEl::CurveTo(
                    Point { x: 19.34, y: 10.00 },
                    Point { x: 18.00, y: 11.34 },
                    Point { x: 18.00, y: 13.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 18.00, y: 14.66 },
                    Point { x: 19.34, y: 16.00 },
                    Point { x: 21.00, y: 16.00 },
                ),
                PathEl::LineTo(Point { x: 27.00, y: 16.00 }),
                PathEl::CurveTo(
                    Point { x: 28.66, y: 16.00 },
                    Point { x: 30.00, y: 14.66 },
                    Point { x: 30.00, y: 13.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 17.00, y: 30.00 }),
                PathEl::CurveTo(
                    Point { x: 15.34, y: 30.00 },
                    Point { x: 14.00, y: 31.34 },
                    Point { x: 14.00, y: 33.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 14.00, y: 34.66 },
                    Point { x: 15.34, y: 36.00 },
                    Point { x: 17.00, y: 36.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 18.66, y: 36.00 },
                    Point { x: 20.00, y: 34.66 },
                    Point { x: 20.00, y: 33.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 20.00, y: 31.34 },
                    Point { x: 18.66, y: 30.00 },
                    Point { x: 17.00, y: 30.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 24.00, y: 2.00 }),
                PathEl::CurveTo(
                    Point { x: 11.87, y: 2.00 },
                    Point { x: 2.00, y: 11.87 },
                    Point { x: 2.00, y: 24.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 2.00, y: 36.13 },
                    Point { x: 11.87, y: 46.00 },
                    Point { x: 24.00, y: 46.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 36.13, y: 46.00 },
                    Point { x: 46.00, y: 36.13 },
                    Point { x: 46.00, y: 24.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 46.00, y: 11.87 },
                    Point { x: 36.13, y: 2.00 },
                    Point { x: 24.00, y: 2.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 24.00, y: 42.00 }),
                PathEl::CurveTo(
                    Point { x: 14.07, y: 42.00 },
                    Point { x: 6.00, y: 33.92 },
                    Point { x: 6.00, y: 24.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 6.00, y: 14.08 },
                    Point { x: 14.07, y: 6.00 },
                    Point { x: 24.00, y: 6.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 33.93, y: 6.00 },
                    Point { x: 42.00, y: 14.08 },
                    Point { x: 42.00, y: 24.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 42.00, y: 33.92 },
                    Point { x: 33.93, y: 42.00 },
                    Point { x: 24.00, y: 42.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 35.00, y: 20.00 }),
                PathEl::CurveTo(
                    Point { x: 33.34, y: 20.00 },
                    Point { x: 32.00, y: 21.34 },
                    Point { x: 32.00, y: 23.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 32.00, y: 24.66 },
                    Point { x: 33.34, y: 26.00 },
                    Point { x: 35.00, y: 26.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 36.66, y: 26.00 },
                    Point { x: 38.00, y: 24.66 },
                    Point { x: 38.00, y: 23.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 38.00, y: 21.34 },
                    Point { x: 36.66, y: 20.00 },
                    Point { x: 35.00, y: 20.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 31.00, y: 30.00 }),
                PathEl::CurveTo(
                    Point { x: 29.34, y: 30.00 },
                    Point { x: 28.00, y: 31.34 },
                    Point { x: 28.00, y: 33.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 28.00, y: 34.66 },
                    Point { x: 29.34, y: 36.00 },
                    Point { x: 31.00, y: 36.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 32.66, y: 36.00 },
                    Point { x: 34.00, y: 34.66 },
                    Point { x: 34.00, y: 33.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 34.00, y: 31.34 },
                    Point { x: 32.66, y: 30.00 },
                    Point { x: 31.00, y: 30.00 },
                ),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct Filter4 {
    size: f64,
    color: Color,
}

impl Filter4 {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for Filter4 {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 6.00, y: 10.00 }),
                PathEl::LineTo(Point { x: 2.00, y: 10.00 }),
                PathEl::LineTo(Point { x: 2.00, y: 42.00 }),
                PathEl::CurveTo(
                    Point { x: 2.00, y: 44.21 },
                    Point { x: 3.79, y: 46.00 },
                    Point { x: 6.00, y: 46.00 },
                ),
                PathEl::LineTo(Point { x: 38.00, y: 46.00 }),
                PathEl::LineTo(Point { x: 38.00, y: 42.00 }),
                PathEl::LineTo(Point { x: 6.00, y: 42.00 }),
                PathEl::LineTo(Point { x: 6.00, y: 10.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 30.00, y: 30.00 }),
                PathEl::LineTo(Point { x: 34.00, y: 30.00 }),
                PathEl::LineTo(Point { x: 34.00, y: 10.00 }),
                PathEl::LineTo(Point { x: 30.00, y: 10.00 }),
                PathEl::LineTo(Point { x: 30.00, y: 18.00 }),
                PathEl::LineTo(Point { x: 26.00, y: 18.00 }),
                PathEl::LineTo(Point { x: 26.00, y: 10.00 }),
                PathEl::LineTo(Point { x: 22.00, y: 10.00 }),
                PathEl::LineTo(Point { x: 22.00, y: 22.00 }),
                PathEl::LineTo(Point { x: 30.00, y: 22.00 }),
                PathEl::LineTo(Point { x: 30.00, y: 30.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 42.00, y: 2.00 }),
                PathEl::LineTo(Point { x: 14.00, y: 2.00 }),
                PathEl::CurveTo(
                    Point { x: 11.79, y: 2.00 },
                    Point { x: 10.00, y: 3.79 },
                    Point { x: 10.00, y: 6.00 },
                ),
                PathEl::LineTo(Point { x: 10.00, y: 34.00 }),
                PathEl::CurveTo(
                    Point { x: 10.00, y: 36.21 },
                    Point { x: 11.79, y: 38.00 },
                    Point { x: 14.00, y: 38.00 },
                ),
                PathEl::LineTo(Point { x: 42.00, y: 38.00 }),
                PathEl::CurveTo(
                    Point { x: 44.21, y: 38.00 },
                    Point { x: 46.00, y: 36.21 },
                    Point { x: 46.00, y: 34.00 },
                ),
                PathEl::LineTo(Point { x: 46.00, y: 6.00 }),
                PathEl::CurveTo(
                    Point { x: 46.00, y: 3.79 },
                    Point { x: 44.21, y: 2.00 },
                    Point { x: 42.00, y: 2.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 42.00, y: 34.00 }),
                PathEl::LineTo(Point { x: 14.00, y: 34.00 }),
                PathEl::LineTo(Point { x: 14.00, y: 6.00 }),
                PathEl::LineTo(Point { x: 42.00, y: 6.00 }),
                PathEl::LineTo(Point { x: 42.00, y: 34.00 }),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct Loupe {
    size: f64,
    color: Color,
}

impl Loupe {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for Loupe {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 26.00, y: 14.00 }),
                PathEl::LineTo(Point { x: 22.00, y: 14.00 }),
                PathEl::LineTo(Point { x: 22.00, y: 22.00 }),
                PathEl::LineTo(Point { x: 14.00, y: 22.00 }),
                PathEl::LineTo(Point { x: 14.00, y: 26.00 }),
                PathEl::LineTo(Point { x: 22.00, y: 26.00 }),
                PathEl::LineTo(Point { x: 22.00, y: 34.00 }),
                PathEl::LineTo(Point { x: 26.00, y: 34.00 }),
                PathEl::LineTo(Point { x: 26.00, y: 26.00 }),
                PathEl::LineTo(Point { x: 34.00, y: 26.00 }),
                PathEl::LineTo(Point { x: 34.00, y: 22.00 }),
                PathEl::LineTo(Point { x: 26.00, y: 22.00 }),
                PathEl::LineTo(Point { x: 26.00, y: 14.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 24.00, y: 4.00 }),
                PathEl::CurveTo(
                    Point { x: 12.97, y: 4.00 },
                    Point { x: 4.00, y: 12.97 },
                    Point { x: 4.00, y: 24.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 4.00, y: 35.03 },
                    Point { x: 12.97, y: 44.00 },
                    Point { x: 24.00, y: 44.00 },
                ),
                PathEl::LineTo(Point { x: 40.00, y: 44.00 }),
                PathEl::CurveTo(
                    Point { x: 42.21, y: 44.00 },
                    Point { x: 44.00, y: 42.21 },
                    Point { x: 44.00, y: 40.00 },
                ),
                PathEl::LineTo(Point { x: 44.00, y: 24.00 }),
                PathEl::CurveTo(
                    Point { x: 44.00, y: 12.97 },
                    Point { x: 35.03, y: 4.00 },
                    Point { x: 24.00, y: 4.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 24.00, y: 40.00 }),
                PathEl::CurveTo(
                    Point { x: 15.18, y: 40.00 },
                    Point { x: 8.00, y: 32.82 },
                    Point { x: 8.00, y: 24.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 8.00, y: 15.18 },
                    Point { x: 15.18, y: 8.00 },
                    Point { x: 24.00, y: 8.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 32.82, y: 8.00 },
                    Point { x: 40.00, y: 15.18 },
                    Point { x: 40.00, y: 24.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 40.00, y: 32.82 },
                    Point { x: 32.82, y: 40.00 },
                    Point { x: 24.00, y: 40.00 },
                ),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct LocalTaxi {
    size: f64,
    color: Color,
}

impl LocalTaxi {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for LocalTaxi {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 37.84, y: 12.02 }),
                PathEl::CurveTo(
                    Point { x: 37.43, y: 10.84 },
                    Point { x: 36.31, y: 10.00 },
                    Point { x: 35.00, y: 10.00 },
                ),
                PathEl::LineTo(Point { x: 30.00, y: 10.00 }),
                PathEl::LineTo(Point { x: 30.00, y: 6.00 }),
                PathEl::LineTo(Point { x: 18.00, y: 6.00 }),
                PathEl::LineTo(Point { x: 18.00, y: 10.00 }),
                PathEl::LineTo(Point { x: 13.00, y: 10.00 }),
                PathEl::CurveTo(
                    Point { x: 11.69, y: 10.00 },
                    Point { x: 10.57, y: 10.84 },
                    Point { x: 10.16, y: 12.02 },
                ),
                PathEl::LineTo(Point { x: 6.00, y: 24.00 }),
                PathEl::LineTo(Point { x: 6.00, y: 40.00 }),
                PathEl::CurveTo(
                    Point { x: 6.00, y: 41.10 },
                    Point { x: 6.90, y: 42.00 },
                    Point { x: 8.00, y: 42.00 },
                ),
                PathEl::LineTo(Point { x: 10.00, y: 42.00 }),
                PathEl::CurveTo(
                    Point { x: 11.11, y: 42.00 },
                    Point { x: 12.00, y: 41.10 },
                    Point { x: 12.00, y: 40.00 },
                ),
                PathEl::LineTo(Point { x: 12.00, y: 38.00 }),
                PathEl::LineTo(Point { x: 36.00, y: 38.00 }),
                PathEl::LineTo(Point { x: 36.00, y: 40.00 }),
                PathEl::CurveTo(
                    Point { x: 36.00, y: 41.10 },
                    Point { x: 36.90, y: 42.00 },
                    Point { x: 38.00, y: 42.00 },
                ),
                PathEl::LineTo(Point { x: 40.00, y: 42.00 }),
                PathEl::CurveTo(
                    Point { x: 41.11, y: 42.00 },
                    Point { x: 42.00, y: 41.10 },
                    Point { x: 42.00, y: 40.00 },
                ),
                PathEl::LineTo(Point { x: 42.00, y: 24.00 }),
                PathEl::LineTo(Point { x: 37.84, y: 12.02 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 13.00, y: 32.00 }),
                PathEl::CurveTo(
                    Point { x: 11.34, y: 32.00 },
                    Point { x: 10.00, y: 30.66 },
                    Point { x: 10.00, y: 29.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 10.00, y: 27.34 },
                    Point { x: 11.34, y: 26.00 },
                    Point { x: 13.00, y: 26.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 14.66, y: 26.00 },
                    Point { x: 16.00, y: 27.34 },
                    Point { x: 16.00, y: 29.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 16.00, y: 30.66 },
                    Point { x: 14.66, y: 32.00 },
                    Point { x: 13.00, y: 32.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 35.00, y: 32.00 }),
                PathEl::CurveTo(
                    Point { x: 33.34, y: 32.00 },
                    Point { x: 32.00, y: 30.66 },
                    Point { x: 32.00, y: 29.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 32.00, y: 27.34 },
                    Point { x: 33.34, y: 26.00 },
                    Point { x: 35.00, y: 26.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 36.66, y: 26.00 },
                    Point { x: 38.00, y: 27.34 },
                    Point { x: 38.00, y: 29.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 38.00, y: 30.66 },
                    Point { x: 36.66, y: 32.00 },
                    Point { x: 35.00, y: 32.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 10.00, y: 22.00 }),
                PathEl::LineTo(Point { x: 13.00, y: 13.00 }),
                PathEl::LineTo(Point { x: 35.00, y: 13.00 }),
                PathEl::LineTo(Point { x: 38.00, y: 22.00 }),
                PathEl::LineTo(Point { x: 10.00, y: 22.00 }),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct AllOut {
    size: f64,
    color: Color,
}

impl AllOut {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for AllOut {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 32.00, y: 8.00 }),
                PathEl::LineTo(Point { x: 40.00, y: 16.00 }),
                PathEl::LineTo(Point { x: 40.00, y: 8.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 40.00, y: 32.00 }),
                PathEl::LineTo(Point { x: 32.00, y: 40.00 }),
                PathEl::LineTo(Point { x: 40.00, y: 40.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 16.00, y: 40.00 }),
                PathEl::LineTo(Point { x: 8.00, y: 32.00 }),
                PathEl::LineTo(Point { x: 8.00, y: 40.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 8.00, y: 16.00 }),
                PathEl::LineTo(Point { x: 16.00, y: 8.00 }),
                PathEl::LineTo(Point { x: 8.00, y: 8.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 33.90, y: 14.10 }),
                PathEl::CurveTo(
                    Point { x: 28.43, y: 8.63 },
                    Point { x: 19.57, y: 8.63 },
                    Point { x: 14.10, y: 14.10 },
                ),
                PathEl::CurveTo(
                    Point { x: 8.63, y: 19.57 },
                    Point { x: 8.63, y: 28.43 },
                    Point { x: 14.10, y: 33.90 },
                ),
                PathEl::CurveTo(
                    Point { x: 19.57, y: 39.37 },
                    Point { x: 28.43, y: 39.37 },
                    Point { x: 33.90, y: 33.90 },
                ),
                PathEl::CurveTo(
                    Point { x: 39.37, y: 28.43 },
                    Point { x: 39.37, y: 19.57 },
                    Point { x: 33.90, y: 14.10 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 31.70, y: 31.70 }),
                PathEl::CurveTo(
                    Point { x: 27.45, y: 35.95 },
                    Point { x: 20.55, y: 35.95 },
                    Point { x: 16.30, y: 31.70 },
                ),
                PathEl::CurveTo(
                    Point { x: 12.05, y: 27.45 },
                    Point { x: 12.05, y: 20.55 },
                    Point { x: 16.30, y: 16.30 },
                ),
                PathEl::CurveTo(
                    Point { x: 20.55, y: 12.05 },
                    Point { x: 27.45, y: 12.05 },
                    Point { x: 31.70, y: 16.30 },
                ),
                PathEl::CurveTo(
                    Point { x: 35.95, y: 20.55 },
                    Point { x: 35.95, y: 27.45 },
                    Point { x: 31.70, y: 31.70 },
                ),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct EventAvailable {
    size: f64,
    color: Color,
}

impl EventAvailable {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for EventAvailable {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 33.06, y: 22.12 }),
                PathEl::LineTo(Point { x: 30.94, y: 20.00 }),
                PathEl::LineTo(Point { x: 21.18, y: 29.76 }),
                PathEl::LineTo(Point { x: 16.94, y: 25.52 }),
                PathEl::LineTo(Point { x: 14.82, y: 27.64 }),
                PathEl::LineTo(Point { x: 21.18, y: 34.00 }),
                PathEl::LineTo(Point { x: 33.06, y: 22.12 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 38.00, y: 6.00 }),
                PathEl::LineTo(Point { x: 36.00, y: 6.00 }),
                PathEl::LineTo(Point { x: 36.00, y: 2.00 }),
                PathEl::LineTo(Point { x: 32.00, y: 2.00 }),
                PathEl::LineTo(Point { x: 32.00, y: 6.00 }),
                PathEl::LineTo(Point { x: 16.00, y: 6.00 }),
                PathEl::LineTo(Point { x: 16.00, y: 2.00 }),
                PathEl::LineTo(Point { x: 12.00, y: 2.00 }),
                PathEl::LineTo(Point { x: 12.00, y: 6.00 }),
                PathEl::LineTo(Point { x: 10.00, y: 6.00 }),
                PathEl::CurveTo(
                    Point { x: 7.79, y: 6.00 },
                    Point { x: 6.02, y: 7.79 },
                    Point { x: 6.02, y: 10.00 },
                ),
                PathEl::LineTo(Point { x: 6.00, y: 38.00 }),
                PathEl::CurveTo(
                    Point { x: 6.00, y: 40.21 },
                    Point { x: 7.79, y: 42.00 },
                    Point { x: 10.00, y: 42.00 },
                ),
                PathEl::LineTo(Point { x: 38.00, y: 42.00 }),
                PathEl::CurveTo(
                    Point { x: 40.21, y: 42.00 },
                    Point { x: 42.00, y: 40.21 },
                    Point { x: 42.00, y: 38.00 },
                ),
                PathEl::LineTo(Point { x: 42.00, y: 10.00 }),
                PathEl::CurveTo(
                    Point { x: 42.00, y: 7.79 },
                    Point { x: 40.21, y: 6.00 },
                    Point { x: 38.00, y: 6.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 38.00, y: 38.00 }),
                PathEl::LineTo(Point { x: 10.00, y: 38.00 }),
                PathEl::LineTo(Point { x: 10.00, y: 16.00 }),
                PathEl::LineTo(Point { x: 38.00, y: 16.00 }),
                PathEl::LineTo(Point { x: 38.00, y: 38.00 }),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct ConfirmationNumber {
    size: f64,
    color: Color,
}

impl ConfirmationNumber {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for ConfirmationNumber {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 44.00, y: 20.00 }),
                PathEl::LineTo(Point { x: 44.00, y: 12.00 }),
                PathEl::CurveTo(
                    Point { x: 44.00, y: 9.79 },
                    Point { x: 42.21, y: 8.00 },
                    Point { x: 40.00, y: 8.00 },
                ),
                PathEl::LineTo(Point { x: 8.00, y: 8.00 }),
                PathEl::CurveTo(
                    Point { x: 5.79, y: 8.00 },
                    Point { x: 4.02, y: 9.79 },
                    Point { x: 4.02, y: 12.00 },
                ),
                PathEl::LineTo(Point { x: 4.02, y: 20.00 }),
                PathEl::CurveTo(
                    Point { x: 6.22, y: 20.01 },
                    Point { x: 8.00, y: 21.80 },
                    Point { x: 8.00, y: 24.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 8.00, y: 26.21 },
                    Point { x: 6.21, y: 28.00 },
                    Point { x: 4.01, y: 28.00 },
                ),
                PathEl::LineTo(Point { x: 4.00, y: 36.00 }),
                PathEl::CurveTo(
                    Point { x: 4.00, y: 38.21 },
                    Point { x: 5.79, y: 40.00 },
                    Point { x: 8.00, y: 40.00 },
                ),
                PathEl::LineTo(Point { x: 40.00, y: 40.00 }),
                PathEl::CurveTo(
                    Point { x: 42.21, y: 40.00 },
                    Point { x: 44.00, y: 38.21 },
                    Point { x: 44.00, y: 36.00 },
                ),
                PathEl::LineTo(Point { x: 44.00, y: 28.00 }),
                PathEl::CurveTo(
                    Point { x: 41.79, y: 28.00 },
                    Point { x: 40.00, y: 26.21 },
                    Point { x: 40.00, y: 24.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 40.00, y: 21.79 },
                    Point { x: 41.79, y: 20.00 },
                    Point { x: 44.00, y: 20.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 26.00, y: 35.00 }),
                PathEl::LineTo(Point { x: 22.00, y: 35.00 }),
                PathEl::LineTo(Point { x: 22.00, y: 31.00 }),
                PathEl::LineTo(Point { x: 26.00, y: 31.00 }),
                PathEl::LineTo(Point { x: 26.00, y: 35.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 26.00, y: 26.00 }),
                PathEl::LineTo(Point { x: 22.00, y: 26.00 }),
                PathEl::LineTo(Point { x: 22.00, y: 22.00 }),
                PathEl::LineTo(Point { x: 26.00, y: 22.00 }),
                PathEl::LineTo(Point { x: 26.00, y: 26.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 26.00, y: 17.00 }),
                PathEl::LineTo(Point { x: 22.00, y: 17.00 }),
                PathEl::LineTo(Point { x: 22.00, y: 13.00 }),
                PathEl::LineTo(Point { x: 26.00, y: 13.00 }),
                PathEl::LineTo(Point { x: 26.00, y: 17.00 }),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct Forward10 {
    size: f64,
    color: Color,
}

impl Forward10 {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for Forward10 {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 8.00, y: 26.00 }),
                PathEl::CurveTo(
                    Point { x: 8.00, y: 34.80 },
                    Point { x: 15.20, y: 42.00 },
                    Point { x: 24.00, y: 42.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 32.80, y: 42.00 },
                    Point { x: 40.00, y: 34.80 },
                    Point { x: 40.00, y: 26.00 },
                ),
                PathEl::LineTo(Point { x: 36.00, y: 26.00 }),
                PathEl::CurveTo(
                    Point { x: 36.00, y: 32.60 },
                    Point { x: 30.60, y: 38.00 },
                    Point { x: 24.00, y: 38.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 17.40, y: 38.00 },
                    Point { x: 12.00, y: 32.60 },
                    Point { x: 12.00, y: 26.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 12.00, y: 19.40 },
                    Point { x: 17.40, y: 14.00 },
                    Point { x: 24.00, y: 14.00 },
                ),
                PathEl::LineTo(Point { x: 24.00, y: 22.00 }),
                PathEl::LineTo(Point { x: 34.00, y: 12.00 }),
                PathEl::LineTo(Point { x: 24.00, y: 2.00 }),
                PathEl::LineTo(Point { x: 24.00, y: 10.00 }),
                PathEl::CurveTo(
                    Point { x: 15.20, y: 10.00 },
                    Point { x: 8.00, y: 17.20 },
                    Point { x: 8.00, y: 26.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 21.70, y: 32.00 }),
                PathEl::LineTo(Point { x: 20.00, y: 32.00 }),
                PathEl::LineTo(Point { x: 20.00, y: 25.50 }),
                PathEl::LineTo(Point { x: 18.00, y: 26.10 }),
                PathEl::LineTo(Point { x: 18.00, y: 24.70 }),
                PathEl::LineTo(Point { x: 21.50, y: 23.40 }),
                PathEl::LineTo(Point { x: 21.70, y: 23.40 }),
                PathEl::LineTo(Point { x: 21.70, y: 32.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 30.20, y: 28.50 }),
                PathEl::CurveTo(
                    Point { x: 30.20, y: 29.10 },
                    Point { x: 30.10, y: 29.70 },
                    Point { x: 30.00, y: 30.10 },
                ),
                PathEl::CurveTo(
                    Point { x: 29.90, y: 30.50 },
                    Point { x: 29.70, y: 30.90 },
                    Point { x: 29.40, y: 31.20 },
                ),
                PathEl::CurveTo(
                    Point { x: 29.10, y: 31.50 },
                    Point { x: 28.80, y: 31.70 },
                    Point { x: 28.50, y: 31.90 },
                ),
                PathEl::CurveTo(
                    Point { x: 28.20, y: 32.10 },
                    Point { x: 27.80, y: 32.10 },
                    Point { x: 27.30, y: 32.10 },
                ),
                PathEl::CurveTo(
                    Point { x: 26.80, y: 32.10 },
                    Point { x: 26.50, y: 32.00 },
                    Point { x: 26.10, y: 31.90 },
                ),
                PathEl::CurveTo(
                    Point { x: 25.70, y: 31.80 },
                    Point { x: 25.40, y: 31.50 },
                    Point { x: 25.20, y: 31.20 },
                ),
                PathEl::CurveTo(
                    Point { x: 25.00, y: 30.90 },
                    Point { x: 24.70, y: 30.50 },
                    Point { x: 24.60, y: 30.10 },
                ),
                PathEl::CurveTo(
                    Point { x: 24.50, y: 29.70 },
                    Point { x: 24.40, y: 29.10 },
                    Point { x: 24.40, y: 28.50 },
                ),
                PathEl::LineTo(Point { x: 24.40, y: 27.00 }),
                PathEl::CurveTo(
                    Point { x: 24.40, y: 26.40 },
                    Point { x: 24.50, y: 25.80 },
                    Point { x: 24.60, y: 25.40 },
                ),
                PathEl::CurveTo(
                    Point { x: 24.70, y: 25.00 },
                    Point { x: 24.90, y: 24.60 },
                    Point { x: 25.20, y: 24.30 },
                ),
                PathEl::CurveTo(
                    Point { x: 25.50, y: 24.00 },
                    Point { x: 25.80, y: 23.80 },
                    Point { x: 26.10, y: 23.60 },
                ),
                PathEl::CurveTo(
                    Point { x: 26.40, y: 23.40 },
                    Point { x: 26.80, y: 23.40 },
                    Point { x: 27.30, y: 23.40 },
                ),
                PathEl::CurveTo(
                    Point { x: 27.80, y: 23.40 },
                    Point { x: 28.10, y: 23.50 },
                    Point { x: 28.50, y: 23.60 },
                ),
                PathEl::CurveTo(
                    Point { x: 28.90, y: 23.70 },
                    Point { x: 29.20, y: 24.00 },
                    Point { x: 29.40, y: 24.30 },
                ),
                PathEl::CurveTo(
                    Point { x: 29.60, y: 24.60 },
                    Point { x: 29.90, y: 25.00 },
                    Point { x: 30.00, y: 25.40 },
                ),
                PathEl::CurveTo(
                    Point { x: 30.10, y: 25.80 },
                    Point { x: 30.20, y: 26.40 },
                    Point { x: 30.20, y: 27.00 },
                ),
                PathEl::LineTo(Point { x: 30.20, y: 28.50 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 28.50, y: 26.80 }),
                PathEl::CurveTo(
                    Point { x: 28.50, y: 26.40 },
                    Point { x: 28.50, y: 26.10 },
                    Point { x: 28.40, y: 25.80 },
                ),
                PathEl::CurveTo(
                    Point { x: 28.30, y: 25.50 },
                    Point { x: 28.30, y: 25.30 },
                    Point { x: 28.20, y: 25.20 },
                ),
                PathEl::CurveTo(
                    Point { x: 28.10, y: 25.10 },
                    Point { x: 28.00, y: 24.90 },
                    Point { x: 27.80, y: 24.90 },
                ),
                PathEl::CurveTo(
                    Point { x: 27.60, y: 24.90 },
                    Point { x: 27.50, y: 24.80 },
                    Point { x: 27.30, y: 24.80 },
                ),
                PathEl::CurveTo(
                    Point { x: 27.10, y: 24.80 },
                    Point { x: 26.90, y: 24.80 },
                    Point { x: 26.80, y: 24.90 },
                ),
                PathEl::CurveTo(
                    Point { x: 26.70, y: 25.00 },
                    Point { x: 26.50, y: 25.10 },
                    Point { x: 26.40, y: 25.20 },
                ),
                PathEl::CurveTo(
                    Point { x: 26.30, y: 25.30 },
                    Point { x: 26.20, y: 25.60 },
                    Point { x: 26.20, y: 25.80 },
                ),
                PathEl::CurveTo(
                    Point { x: 26.20, y: 26.00 },
                    Point { x: 26.10, y: 26.40 },
                    Point { x: 26.10, y: 26.80 },
                ),
                PathEl::LineTo(Point { x: 26.10, y: 28.70 }),
                PathEl::CurveTo(
                    Point { x: 26.10, y: 29.10 },
                    Point { x: 26.10, y: 29.40 },
                    Point { x: 26.20, y: 29.70 },
                ),
                PathEl::CurveTo(
                    Point { x: 26.30, y: 30.00 },
                    Point { x: 26.30, y: 30.20 },
                    Point { x: 26.40, y: 30.30 },
                ),
                PathEl::CurveTo(
                    Point { x: 26.50, y: 30.40 },
                    Point { x: 26.60, y: 30.60 },
                    Point { x: 26.80, y: 30.60 },
                ),
                PathEl::CurveTo(
                    Point { x: 27.00, y: 30.60 },
                    Point { x: 27.10, y: 30.70 },
                    Point { x: 27.30, y: 30.70 },
                ),
                PathEl::CurveTo(
                    Point { x: 27.50, y: 30.70 },
                    Point { x: 27.70, y: 30.70 },
                    Point { x: 27.80, y: 30.60 },
                ),
                PathEl::CurveTo(
                    Point { x: 27.90, y: 30.50 },
                    Point { x: 28.10, y: 30.40 },
                    Point { x: 28.20, y: 30.30 },
                ),
                PathEl::CurveTo(
                    Point { x: 28.30, y: 30.20 },
                    Point { x: 28.40, y: 29.90 },
                    Point { x: 28.40, y: 29.70 },
                ),
                PathEl::CurveTo(
                    Point { x: 28.40, y: 29.50 },
                    Point { x: 28.50, y: 29.10 },
                    Point { x: 28.50, y: 28.70 },
                ),
                PathEl::LineTo(Point { x: 28.50, y: 26.80 }),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct Whatshot {
    size: f64,
    color: Color,
}

impl Whatshot {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for Whatshot {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 27.00, y: 1.34 }),
                PathEl::CurveTo(
                    Point { x: 27.00, y: 1.34 },
                    Point { x: 28.48, y: 6.64 },
                    Point { x: 28.48, y: 10.94 },
                ),
                PathEl::CurveTo(
                    Point { x: 28.48, y: 15.06 },
                    Point { x: 25.78, y: 18.41 },
                    Point { x: 21.65, y: 18.41 },
                ),
                PathEl::CurveTo(
                    Point { x: 17.52, y: 18.41 },
                    Point { x: 14.40, y: 15.07 },
                    Point { x: 14.40, y: 10.94 },
                ),
                PathEl::LineTo(Point { x: 14.45, y: 10.22 }),
                PathEl::CurveTo(
                    Point { x: 10.43, y: 15.03 },
                    Point { x: 8.00, y: 21.23 },
                    Point { x: 8.00, y: 28.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 8.00, y: 36.84 },
                    Point { x: 15.16, y: 44.00 },
                    Point { x: 24.00, y: 44.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 32.84, y: 44.00 },
                    Point { x: 40.00, y: 36.84 },
                    Point { x: 40.00, y: 28.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 40.00, y: 17.21 },
                    Point { x: 34.81, y: 7.59 },
                    Point { x: 27.00, y: 1.34 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 23.42, y: 38.00 }),
                PathEl::CurveTo(
                    Point { x: 19.86, y: 38.00 },
                    Point { x: 16.97, y: 35.19 },
                    Point { x: 16.97, y: 31.72 },
                ),
                PathEl::CurveTo(
                    Point { x: 16.97, y: 28.47 },
                    Point { x: 19.06, y: 26.19 },
                    Point { x: 22.60, y: 25.48 },
                ),
                PathEl::CurveTo(
                    Point { x: 26.14, y: 24.77 },
                    Point { x: 29.80, y: 23.07 },
                    Point { x: 31.83, y: 20.33 },
                ),
                PathEl::CurveTo(
                    Point { x: 32.61, y: 22.91 },
                    Point { x: 33.02, y: 25.63 },
                    Point { x: 33.02, y: 28.40 },
                ),
                PathEl::CurveTo(
                    Point { x: 33.02, y: 33.69 },
                    Point { x: 28.72, y: 38.00 },
                    Point { x: 23.42, y: 38.00 },
                ),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct Texture {
    size: f64,
    color: Color,
}

impl Texture {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for Texture {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 39.02, y: 6.15 }),
                PathEl::LineTo(Point { x: 6.15, y: 39.02 }),
                PathEl::CurveTo(
                    Point { x: 6.33, y: 39.71 },
                    Point { x: 6.68, y: 40.33 },
                    Point { x: 7.17, y: 40.82 },
                ),
                PathEl::LineTo(Point { x: 7.18, y: 40.83 }),
                PathEl::CurveTo(
                    Point { x: 7.67, y: 41.32 },
                    Point { x: 8.29, y: 41.67 },
                    Point { x: 8.98, y: 41.85 },
                ),
                PathEl::LineTo(Point { x: 41.85, y: 8.98 }),
                PathEl::CurveTo(
                    Point { x: 41.48, y: 7.60 },
                    Point { x: 40.40, y: 6.52 },
                    Point { x: 39.02, y: 6.15 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 23.76, y: 6.00 }),
                PathEl::LineTo(Point { x: 6.00, y: 23.76 }),
                PathEl::LineTo(Point { x: 6.00, y: 29.42 }),
                PathEl::LineTo(Point { x: 29.42, y: 6.00 }),
                PathEl::LineTo(Point { x: 23.76, y: 6.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 10.00, y: 6.00 }),
                PathEl::CurveTo(
                    Point { x: 7.80, y: 6.00 },
                    Point { x: 6.00, y: 7.80 },
                    Point { x: 6.00, y: 10.00 },
                ),
                PathEl::LineTo(Point { x: 6.00, y: 14.01 }),
                PathEl::LineTo(Point { x: 14.01, y: 6.00 }),
                PathEl::LineTo(Point { x: 10.00, y: 6.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 38.00, y: 42.00 }),
                PathEl::CurveTo(
                    Point { x: 39.10, y: 42.00 },
                    Point { x: 40.10, y: 41.55 },
                    Point { x: 40.82, y: 40.83 },
                ),
                PathEl::CurveTo(
                    Point { x: 41.55, y: 40.10 },
                    Point { x: 42.00, y: 39.10 },
                    Point { x: 42.00, y: 38.00 },
                ),
                PathEl::LineTo(Point { x: 42.00, y: 33.99 }),
                PathEl::LineTo(Point { x: 33.99, y: 42.00 }),
                PathEl::LineTo(Point { x: 38.00, y: 42.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 18.58, y: 42.00 }),
                PathEl::LineTo(Point { x: 24.24, y: 42.00 }),
                PathEl::LineTo(Point { x: 42.00, y: 24.24 }),
                PathEl::LineTo(Point { x: 42.00, y: 18.58 }),
                PathEl::LineTo(Point { x: 18.58, y: 42.00 }),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct BatteryUnknown {
    size: f64,
    color: Color,
}

impl BatteryUnknown {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for BatteryUnknown {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 31.33, y: 8.00 }),
                PathEl::LineTo(Point { x: 28.00, y: 8.00 }),
                PathEl::LineTo(Point { x: 28.00, y: 4.00 }),
                PathEl::LineTo(Point { x: 20.00, y: 4.00 }),
                PathEl::LineTo(Point { x: 20.00, y: 8.00 }),
                PathEl::LineTo(Point { x: 16.67, y: 8.00 }),
                PathEl::CurveTo(
                    Point { x: 15.19, y: 8.00 },
                    Point { x: 14.00, y: 9.19 },
                    Point { x: 14.00, y: 10.67 },
                ),
                PathEl::LineTo(Point { x: 14.00, y: 41.34 }),
                PathEl::CurveTo(
                    Point { x: 14.00, y: 42.81 },
                    Point { x: 15.19, y: 44.01 },
                    Point { x: 16.67, y: 44.01 },
                ),
                PathEl::LineTo(Point { x: 31.34, y: 44.01 }),
                PathEl::CurveTo(
                    Point { x: 32.81, y: 44.01 },
                    Point { x: 34.01, y: 42.82 },
                    Point { x: 34.01, y: 41.34 },
                ),
                PathEl::LineTo(Point { x: 34.01, y: 10.67 }),
                PathEl::CurveTo(
                    Point { x: 34.00, y: 9.19 },
                    Point { x: 32.81, y: 8.00 },
                    Point { x: 31.33, y: 8.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 25.90, y: 35.90 }),
                PathEl::LineTo(Point { x: 22.10, y: 35.90 }),
                PathEl::LineTo(Point { x: 22.10, y: 32.10 }),
                PathEl::LineTo(Point { x: 25.90, y: 32.10 }),
                PathEl::LineTo(Point { x: 25.90, y: 35.90 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 28.60, y: 25.38 }),
                PathEl::CurveTo(
                    Point { x: 28.60, y: 25.38 },
                    Point { x: 27.84, y: 26.22 },
                    Point { x: 27.26, y: 26.80 },
                ),
                PathEl::CurveTo(
                    Point { x: 26.29, y: 27.77 },
                    Point { x: 25.60, y: 29.09 },
                    Point { x: 25.60, y: 30.00 },
                ),
                PathEl::LineTo(Point { x: 22.40, y: 30.00 }),
                PathEl::CurveTo(
                    Point { x: 22.40, y: 28.34 },
                    Point { x: 23.32, y: 26.95 },
                    Point { x: 24.26, y: 26.01 },
                ),
                PathEl::LineTo(Point { x: 26.12, y: 24.12 }),
                PathEl::CurveTo(
                    Point { x: 26.66, y: 23.58 },
                    Point { x: 27.00, y: 22.83 },
                    Point { x: 27.00, y: 22.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 27.00, y: 20.34 },
                    Point { x: 25.66, y: 19.00 },
                    Point { x: 24.00, y: 19.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 22.34, y: 19.00 },
                    Point { x: 21.00, y: 20.34 },
                    Point { x: 21.00, y: 22.00 },
                ),
                PathEl::LineTo(Point { x: 18.00, y: 22.00 }),
                PathEl::CurveTo(
                    Point { x: 18.00, y: 18.69 },
                    Point { x: 20.69, y: 16.00 },
                    Point { x: 24.00, y: 16.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 27.31, y: 16.00 },
                    Point { x: 30.00, y: 18.69 },
                    Point { x: 30.00, y: 22.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 30.00, y: 23.32 },
                    Point { x: 29.47, y: 24.52 },
                    Point { x: 28.60, y: 25.38 },
                ),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct Cloud {
    size: f64,
    color: Color,
}

impl Cloud {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for Cloud {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 38.71, y: 20.07 }),
                PathEl::CurveTo(
                    Point { x: 37.35, y: 13.19 },
                    Point { x: 31.28, y: 8.00 },
                    Point { x: 24.00, y: 8.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 18.22, y: 8.00 },
                    Point { x: 13.21, y: 11.28 },
                    Point { x: 10.70, y: 16.07 },
                ),
                PathEl::CurveTo(
                    Point { x: 4.69, y: 16.72 },
                    Point { x: 0.00, y: 21.81 },
                    Point { x: 0.00, y: 28.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 0.00, y: 34.63 },
                    Point { x: 5.37, y: 40.00 },
                    Point { x: 12.00, y: 40.00 },
                ),
                PathEl::LineTo(Point { x: 38.00, y: 40.00 }),
                PathEl::CurveTo(
                    Point { x: 43.52, y: 40.00 },
                    Point { x: 48.00, y: 35.52 },
                    Point { x: 48.00, y: 30.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 48.00, y: 24.72 },
                    Point { x: 43.89, y: 20.44 },
                    Point { x: 38.71, y: 20.07 },
                ),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct Movie {
    size: f64,
    color: Color,
}

impl Movie {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for Movie {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 36.00, y: 8.00 }),
                PathEl::LineTo(Point { x: 40.00, y: 16.00 }),
                PathEl::LineTo(Point { x: 34.00, y: 16.00 }),
                PathEl::LineTo(Point { x: 30.00, y: 8.00 }),
                PathEl::LineTo(Point { x: 26.00, y: 8.00 }),
                PathEl::LineTo(Point { x: 30.00, y: 16.00 }),
                PathEl::LineTo(Point { x: 24.00, y: 16.00 }),
                PathEl::LineTo(Point { x: 20.00, y: 8.00 }),
                PathEl::LineTo(Point { x: 16.00, y: 8.00 }),
                PathEl::LineTo(Point { x: 20.00, y: 16.00 }),
                PathEl::LineTo(Point { x: 14.00, y: 16.00 }),
                PathEl::LineTo(Point { x: 10.00, y: 8.00 }),
                PathEl::LineTo(Point { x: 8.00, y: 8.00 }),
                PathEl::CurveTo(
                    Point { x: 5.79, y: 8.00 },
                    Point { x: 4.02, y: 9.79 },
                    Point { x: 4.02, y: 12.00 },
                ),
                PathEl::LineTo(Point { x: 4.00, y: 36.00 }),
                PathEl::CurveTo(
                    Point { x: 4.00, y: 38.21 },
                    Point { x: 5.79, y: 40.00 },
                    Point { x: 8.00, y: 40.00 },
                ),
                PathEl::LineTo(Point { x: 40.00, y: 40.00 }),
                PathEl::CurveTo(
                    Point { x: 42.21, y: 40.00 },
                    Point { x: 44.00, y: 38.21 },
                    Point { x: 44.00, y: 36.00 },
                ),
                PathEl::LineTo(Point { x: 44.00, y: 8.00 }),
                PathEl::LineTo(Point { x: 36.00, y: 8.00 }),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct HighQuality {
    size: f64,
    color: Color,
}

impl HighQuality {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for HighQuality {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 38.00, y: 8.00 }),
                PathEl::LineTo(Point { x: 10.00, y: 8.00 }),
                PathEl::CurveTo(
                    Point { x: 7.79, y: 8.00 },
                    Point { x: 6.00, y: 9.79 },
                    Point { x: 6.00, y: 12.00 },
                ),
                PathEl::LineTo(Point { x: 6.00, y: 36.00 }),
                PathEl::CurveTo(
                    Point { x: 6.00, y: 38.21 },
                    Point { x: 7.79, y: 40.00 },
                    Point { x: 10.00, y: 40.00 },
                ),
                PathEl::LineTo(Point { x: 38.00, y: 40.00 }),
                PathEl::CurveTo(
                    Point { x: 40.21, y: 40.00 },
                    Point { x: 42.00, y: 38.21 },
                    Point { x: 42.00, y: 36.00 },
                ),
                PathEl::LineTo(Point { x: 42.00, y: 12.00 }),
                PathEl::CurveTo(
                    Point { x: 42.00, y: 9.79 },
                    Point { x: 40.21, y: 8.00 },
                    Point { x: 38.00, y: 8.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 22.00, y: 30.00 }),
                PathEl::LineTo(Point { x: 19.00, y: 30.00 }),
                PathEl::LineTo(Point { x: 19.00, y: 26.00 }),
                PathEl::LineTo(Point { x: 15.00, y: 26.00 }),
                PathEl::LineTo(Point { x: 15.00, y: 30.00 }),
                PathEl::LineTo(Point { x: 12.00, y: 30.00 }),
                PathEl::LineTo(Point { x: 12.00, y: 18.00 }),
                PathEl::LineTo(Point { x: 15.00, y: 18.00 }),
                PathEl::LineTo(Point { x: 15.00, y: 23.00 }),
                PathEl::LineTo(Point { x: 19.00, y: 23.00 }),
                PathEl::LineTo(Point { x: 19.00, y: 18.00 }),
                PathEl::LineTo(Point { x: 22.00, y: 18.00 }),
                PathEl::LineTo(Point { x: 22.00, y: 30.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 36.00, y: 28.00 }),
                PathEl::CurveTo(
                    Point { x: 36.00, y: 29.10 },
                    Point { x: 35.11, y: 30.00 },
                    Point { x: 34.00, y: 30.00 },
                ),
                PathEl::LineTo(Point { x: 32.50, y: 30.00 }),
                PathEl::LineTo(Point { x: 32.50, y: 33.00 }),
                PathEl::LineTo(Point { x: 29.50, y: 33.00 }),
                PathEl::LineTo(Point { x: 29.50, y: 30.00 }),
                PathEl::LineTo(Point { x: 28.00, y: 30.00 }),
                PathEl::CurveTo(
                    Point { x: 26.89, y: 30.00 },
                    Point { x: 26.00, y: 29.10 },
                    Point { x: 26.00, y: 28.00 },
                ),
                PathEl::LineTo(Point { x: 26.00, y: 20.00 }),
                PathEl::CurveTo(
                    Point { x: 26.00, y: 18.90 },
                    Point { x: 26.89, y: 18.00 },
                    Point { x: 28.00, y: 18.00 },
                ),
                PathEl::LineTo(Point { x: 34.00, y: 18.00 }),
                PathEl::CurveTo(
                    Point { x: 35.11, y: 18.00 },
                    Point { x: 36.00, y: 18.90 },
                    Point { x: 36.00, y: 20.00 },
                ),
                PathEl::LineTo(Point { x: 36.00, y: 28.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 29.00, y: 27.00 }),
                PathEl::LineTo(Point { x: 33.00, y: 27.00 }),
                PathEl::LineTo(Point { x: 33.00, y: 21.00 }),
                PathEl::LineTo(Point { x: 29.00, y: 21.00 }),
                PathEl::LineTo(Point { x: 29.00, y: 27.00 }),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct Mic {
    size: f64,
    color: Color,
}

impl Mic {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for Mic {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 24.00, y: 28.00 }),
                PathEl::CurveTo(
                    Point { x: 27.31, y: 28.00 },
                    Point { x: 29.98, y: 25.31 },
                    Point { x: 29.98, y: 22.00 },
                ),
                PathEl::LineTo(Point { x: 30.00, y: 10.00 }),
                PathEl::CurveTo(
                    Point { x: 30.00, y: 6.68 },
                    Point { x: 27.32, y: 4.00 },
                    Point { x: 24.00, y: 4.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 20.69, y: 4.00 },
                    Point { x: 18.00, y: 6.68 },
                    Point { x: 18.00, y: 10.00 },
                ),
                PathEl::LineTo(Point { x: 18.00, y: 22.00 }),
                PathEl::CurveTo(
                    Point { x: 18.00, y: 25.31 },
                    Point { x: 20.69, y: 28.00 },
                    Point { x: 24.00, y: 28.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 34.60, y: 22.00 }),
                PathEl::CurveTo(
                    Point { x: 34.60, y: 28.00 },
                    Point { x: 29.53, y: 32.20 },
                    Point { x: 24.00, y: 32.20 },
                ),
                PathEl::CurveTo(
                    Point { x: 18.48, y: 32.20 },
                    Point { x: 13.40, y: 28.00 },
                    Point { x: 13.40, y: 22.00 },
                ),
                PathEl::LineTo(Point { x: 10.00, y: 22.00 }),
                PathEl::CurveTo(
                    Point { x: 10.00, y: 28.83 },
                    Point { x: 15.44, y: 34.47 },
                    Point { x: 22.00, y: 35.44 },
                ),
                PathEl::LineTo(Point { x: 22.00, y: 42.00 }),
                PathEl::LineTo(Point { x: 26.00, y: 42.00 }),
                PathEl::LineTo(Point { x: 26.00, y: 35.44 }),
                PathEl::CurveTo(
                    Point { x: 32.56, y: 34.47 },
                    Point { x: 38.00, y: 28.83 },
                    Point { x: 38.00, y: 22.00 },
                ),
                PathEl::LineTo(Point { x: 34.60, y: 22.00 }),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct Shuffle {
    size: f64,
    color: Color,
}

impl Shuffle {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for Shuffle {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 21.17, y: 18.34 }),
                PathEl::LineTo(Point { x: 10.83, y: 8.00 }),
                PathEl::LineTo(Point { x: 8.00, y: 10.83 }),
                PathEl::LineTo(Point { x: 18.34, y: 21.17 }),
                PathEl::LineTo(Point { x: 21.17, y: 18.34 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 29.00, y: 8.00 }),
                PathEl::LineTo(Point { x: 33.09, y: 12.09 }),
                PathEl::LineTo(Point { x: 8.00, y: 37.17 }),
                PathEl::LineTo(Point { x: 10.83, y: 40.00 }),
                PathEl::LineTo(Point { x: 35.92, y: 14.91 }),
                PathEl::LineTo(Point { x: 40.00, y: 19.00 }),
                PathEl::LineTo(Point { x: 40.00, y: 8.00 }),
                PathEl::LineTo(Point { x: 29.00, y: 8.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 29.66, y: 26.83 }),
                PathEl::LineTo(Point { x: 26.83, y: 29.66 }),
                PathEl::LineTo(Point { x: 33.09, y: 35.92 }),
                PathEl::LineTo(Point { x: 29.00, y: 40.00 }),
                PathEl::LineTo(Point { x: 40.00, y: 40.00 }),
                PathEl::LineTo(Point { x: 40.00, y: 29.00 }),
                PathEl::LineTo(Point { x: 35.91, y: 33.09 }),
                PathEl::LineTo(Point { x: 29.66, y: 26.83 }),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct Layers {
    size: f64,
    color: Color,
}

impl Layers {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for Layers {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 23.99, y: 37.08 }),
                PathEl::LineTo(Point { x: 9.24, y: 25.61 }),
                PathEl::LineTo(Point { x: 6.00, y: 28.13 }),
                PathEl::LineTo(Point { x: 24.00, y: 42.13 }),
                PathEl::LineTo(Point { x: 42.00, y: 28.13 }),
                PathEl::LineTo(Point { x: 38.74, y: 25.60 }),
                PathEl::LineTo(Point { x: 23.99, y: 37.08 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 24.00, y: 32.00 }),
                PathEl::LineTo(Point { x: 38.73, y: 20.55 }),
                PathEl::LineTo(Point { x: 42.00, y: 18.00 }),
                PathEl::LineTo(Point { x: 24.00, y: 4.00 }),
                PathEl::LineTo(Point { x: 6.00, y: 18.00 }),
                PathEl::LineTo(Point { x: 9.26, y: 20.53 }),
                PathEl::LineTo(Point { x: 24.00, y: 32.00 }),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct Receipt {
    size: f64,
    color: Color,
}

impl Receipt {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for Receipt {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 36.00, y: 34.00 }),
                PathEl::LineTo(Point { x: 12.00, y: 34.00 }),
                PathEl::LineTo(Point { x: 12.00, y: 30.00 }),
                PathEl::LineTo(Point { x: 36.00, y: 30.00 }),
                PathEl::LineTo(Point { x: 36.00, y: 34.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 36.00, y: 26.00 }),
                PathEl::LineTo(Point { x: 12.00, y: 26.00 }),
                PathEl::LineTo(Point { x: 12.00, y: 22.00 }),
                PathEl::LineTo(Point { x: 36.00, y: 22.00 }),
                PathEl::LineTo(Point { x: 36.00, y: 26.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 36.00, y: 18.00 }),
                PathEl::LineTo(Point { x: 12.00, y: 18.00 }),
                PathEl::LineTo(Point { x: 12.00, y: 14.00 }),
                PathEl::LineTo(Point { x: 36.00, y: 14.00 }),
                PathEl::LineTo(Point { x: 36.00, y: 18.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 6.00, y: 44.00 }),
                PathEl::LineTo(Point { x: 9.00, y: 41.00 }),
                PathEl::LineTo(Point { x: 12.00, y: 44.00 }),
                PathEl::LineTo(Point { x: 15.00, y: 41.00 }),
                PathEl::LineTo(Point { x: 18.00, y: 44.00 }),
                PathEl::LineTo(Point { x: 21.00, y: 41.00 }),
                PathEl::LineTo(Point { x: 24.00, y: 44.00 }),
                PathEl::LineTo(Point { x: 27.00, y: 41.00 }),
                PathEl::LineTo(Point { x: 30.00, y: 44.00 }),
                PathEl::LineTo(Point { x: 33.00, y: 41.00 }),
                PathEl::LineTo(Point { x: 36.00, y: 44.00 }),
                PathEl::LineTo(Point { x: 39.00, y: 41.00 }),
                PathEl::LineTo(Point { x: 42.00, y: 44.00 }),
                PathEl::LineTo(Point { x: 42.00, y: 4.00 }),
                PathEl::LineTo(Point { x: 39.00, y: 7.00 }),
                PathEl::LineTo(Point { x: 36.00, y: 4.00 }),
                PathEl::LineTo(Point { x: 33.00, y: 7.00 }),
                PathEl::LineTo(Point { x: 30.00, y: 4.00 }),
                PathEl::LineTo(Point { x: 27.00, y: 7.00 }),
                PathEl::LineTo(Point { x: 24.00, y: 4.00 }),
                PathEl::LineTo(Point { x: 21.00, y: 7.00 }),
                PathEl::LineTo(Point { x: 18.00, y: 4.00 }),
                PathEl::LineTo(Point { x: 15.00, y: 7.00 }),
                PathEl::LineTo(Point { x: 12.00, y: 4.00 }),
                PathEl::LineTo(Point { x: 9.00, y: 7.00 }),
                PathEl::LineTo(Point { x: 6.00, y: 4.00 }),
                PathEl::LineTo(Point { x: 6.00, y: 44.00 }),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct DirectionsCar {
    size: f64,
    color: Color,
}

impl DirectionsCar {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for DirectionsCar {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 37.84, y: 12.02 }),
                PathEl::CurveTo(
                    Point { x: 37.43, y: 10.84 },
                    Point { x: 36.31, y: 10.00 },
                    Point { x: 35.00, y: 10.00 },
                ),
                PathEl::LineTo(Point { x: 13.00, y: 10.00 }),
                PathEl::CurveTo(
                    Point { x: 11.69, y: 10.00 },
                    Point { x: 10.57, y: 10.84 },
                    Point { x: 10.16, y: 12.02 },
                ),
                PathEl::LineTo(Point { x: 6.00, y: 24.00 }),
                PathEl::LineTo(Point { x: 6.00, y: 40.00 }),
                PathEl::CurveTo(
                    Point { x: 6.00, y: 41.10 },
                    Point { x: 6.90, y: 42.00 },
                    Point { x: 8.00, y: 42.00 },
                ),
                PathEl::LineTo(Point { x: 10.00, y: 42.00 }),
                PathEl::CurveTo(
                    Point { x: 11.11, y: 42.00 },
                    Point { x: 12.00, y: 41.10 },
                    Point { x: 12.00, y: 40.00 },
                ),
                PathEl::LineTo(Point { x: 12.00, y: 38.00 }),
                PathEl::LineTo(Point { x: 36.00, y: 38.00 }),
                PathEl::LineTo(Point { x: 36.00, y: 40.00 }),
                PathEl::CurveTo(
                    Point { x: 36.00, y: 41.10 },
                    Point { x: 36.90, y: 42.00 },
                    Point { x: 38.00, y: 42.00 },
                ),
                PathEl::LineTo(Point { x: 40.00, y: 42.00 }),
                PathEl::CurveTo(
                    Point { x: 41.11, y: 42.00 },
                    Point { x: 42.00, y: 41.10 },
                    Point { x: 42.00, y: 40.00 },
                ),
                PathEl::LineTo(Point { x: 42.00, y: 24.00 }),
                PathEl::LineTo(Point { x: 37.84, y: 12.02 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 13.00, y: 32.00 }),
                PathEl::CurveTo(
                    Point { x: 11.34, y: 32.00 },
                    Point { x: 10.00, y: 30.66 },
                    Point { x: 10.00, y: 29.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 10.00, y: 27.34 },
                    Point { x: 11.34, y: 26.00 },
                    Point { x: 13.00, y: 26.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 14.66, y: 26.00 },
                    Point { x: 16.00, y: 27.34 },
                    Point { x: 16.00, y: 29.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 16.00, y: 30.66 },
                    Point { x: 14.66, y: 32.00 },
                    Point { x: 13.00, y: 32.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 35.00, y: 32.00 }),
                PathEl::CurveTo(
                    Point { x: 33.34, y: 32.00 },
                    Point { x: 32.00, y: 30.66 },
                    Point { x: 32.00, y: 29.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 32.00, y: 27.34 },
                    Point { x: 33.34, y: 26.00 },
                    Point { x: 35.00, y: 26.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 36.66, y: 26.00 },
                    Point { x: 38.00, y: 27.34 },
                    Point { x: 38.00, y: 29.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 38.00, y: 30.66 },
                    Point { x: 36.66, y: 32.00 },
                    Point { x: 35.00, y: 32.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 10.00, y: 22.00 }),
                PathEl::LineTo(Point { x: 13.00, y: 13.00 }),
                PathEl::LineTo(Point { x: 35.00, y: 13.00 }),
                PathEl::LineTo(Point { x: 38.00, y: 22.00 }),
                PathEl::LineTo(Point { x: 10.00, y: 22.00 }),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct Delete {
    size: f64,
    color: Color,
}

impl Delete {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for Delete {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 12.00, y: 38.00 }),
                PathEl::CurveTo(
                    Point { x: 12.00, y: 40.21 },
                    Point { x: 13.79, y: 42.00 },
                    Point { x: 16.00, y: 42.00 },
                ),
                PathEl::LineTo(Point { x: 32.00, y: 42.00 }),
                PathEl::CurveTo(
                    Point { x: 34.21, y: 42.00 },
                    Point { x: 36.00, y: 40.21 },
                    Point { x: 36.00, y: 38.00 },
                ),
                PathEl::LineTo(Point { x: 36.00, y: 14.00 }),
                PathEl::LineTo(Point { x: 12.00, y: 14.00 }),
                PathEl::LineTo(Point { x: 12.00, y: 38.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 38.00, y: 8.00 }),
                PathEl::LineTo(Point { x: 31.00, y: 8.00 }),
                PathEl::LineTo(Point { x: 29.00, y: 6.00 }),
                PathEl::LineTo(Point { x: 19.00, y: 6.00 }),
                PathEl::LineTo(Point { x: 17.00, y: 8.00 }),
                PathEl::LineTo(Point { x: 10.00, y: 8.00 }),
                PathEl::LineTo(Point { x: 10.00, y: 12.00 }),
                PathEl::LineTo(Point { x: 38.00, y: 12.00 }),
                PathEl::LineTo(Point { x: 38.00, y: 8.00 }),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct Battery30 {
    size: f64,
    color: Color,
}

impl Battery30 {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for Battery30 {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 34.00, y: 10.67 }),
                PathEl::CurveTo(
                    Point { x: 34.00, y: 9.19 },
                    Point { x: 32.81, y: 8.00 },
                    Point { x: 31.33, y: 8.00 },
                ),
                PathEl::LineTo(Point { x: 28.00, y: 8.00 }),
                PathEl::LineTo(Point { x: 28.00, y: 4.00 }),
                PathEl::LineTo(Point { x: 20.00, y: 4.00 }),
                PathEl::LineTo(Point { x: 20.00, y: 8.00 }),
                PathEl::LineTo(Point { x: 16.67, y: 8.00 }),
                PathEl::CurveTo(
                    Point { x: 15.19, y: 8.00 },
                    Point { x: 14.00, y: 9.19 },
                    Point { x: 14.00, y: 10.67 },
                ),
                PathEl::LineTo(Point { x: 14.00, y: 30.00 }),
                PathEl::LineTo(Point { x: 34.00, y: 30.00 }),
                PathEl::LineTo(Point { x: 34.00, y: 10.67 }),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 14.00, y: 30.00 }),
                PathEl::LineTo(Point { x: 14.00, y: 41.33 }),
                PathEl::CurveTo(
                    Point { x: 14.00, y: 42.80 },
                    Point { x: 15.19, y: 44.00 },
                    Point { x: 16.67, y: 44.00 },
                ),
                PathEl::LineTo(Point { x: 31.34, y: 44.00 }),
                PathEl::CurveTo(
                    Point { x: 32.81, y: 44.00 },
                    Point { x: 34.01, y: 42.81 },
                    Point { x: 34.01, y: 41.33 },
                ),
                PathEl::LineTo(Point { x: 34.01, y: 30.00 }),
                PathEl::LineTo(Point { x: 14.00, y: 30.00 }),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct ViewComfy {
    size: f64,
    color: Color,
}

impl ViewComfy {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for ViewComfy {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 6.00, y: 18.00 }),
                PathEl::LineTo(Point { x: 14.00, y: 18.00 }),
                PathEl::LineTo(Point { x: 14.00, y: 10.00 }),
                PathEl::LineTo(Point { x: 6.00, y: 10.00 }),
                PathEl::LineTo(Point { x: 6.00, y: 18.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 6.00, y: 28.00 }),
                PathEl::LineTo(Point { x: 14.00, y: 28.00 }),
                PathEl::LineTo(Point { x: 14.00, y: 20.00 }),
                PathEl::LineTo(Point { x: 6.00, y: 20.00 }),
                PathEl::LineTo(Point { x: 6.00, y: 28.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 16.00, y: 28.00 }),
                PathEl::LineTo(Point { x: 24.00, y: 28.00 }),
                PathEl::LineTo(Point { x: 24.00, y: 20.00 }),
                PathEl::LineTo(Point { x: 16.00, y: 20.00 }),
                PathEl::LineTo(Point { x: 16.00, y: 28.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 26.00, y: 28.00 }),
                PathEl::LineTo(Point { x: 34.00, y: 28.00 }),
                PathEl::LineTo(Point { x: 34.00, y: 20.00 }),
                PathEl::LineTo(Point { x: 26.00, y: 20.00 }),
                PathEl::LineTo(Point { x: 26.00, y: 28.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 16.00, y: 18.00 }),
                PathEl::LineTo(Point { x: 24.00, y: 18.00 }),
                PathEl::LineTo(Point { x: 24.00, y: 10.00 }),
                PathEl::LineTo(Point { x: 16.00, y: 10.00 }),
                PathEl::LineTo(Point { x: 16.00, y: 18.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 26.00, y: 10.00 }),
                PathEl::LineTo(Point { x: 26.00, y: 18.00 }),
                PathEl::LineTo(Point { x: 34.00, y: 18.00 }),
                PathEl::LineTo(Point { x: 34.00, y: 10.00 }),
                PathEl::LineTo(Point { x: 26.00, y: 10.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 36.00, y: 28.00 }),
                PathEl::LineTo(Point { x: 44.00, y: 28.00 }),
                PathEl::LineTo(Point { x: 44.00, y: 20.00 }),
                PathEl::LineTo(Point { x: 36.00, y: 20.00 }),
                PathEl::LineTo(Point { x: 36.00, y: 28.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 6.00, y: 38.00 }),
                PathEl::LineTo(Point { x: 14.00, y: 38.00 }),
                PathEl::LineTo(Point { x: 14.00, y: 30.00 }),
                PathEl::LineTo(Point { x: 6.00, y: 30.00 }),
                PathEl::LineTo(Point { x: 6.00, y: 38.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 16.00, y: 38.00 }),
                PathEl::LineTo(Point { x: 24.00, y: 38.00 }),
                PathEl::LineTo(Point { x: 24.00, y: 30.00 }),
                PathEl::LineTo(Point { x: 16.00, y: 30.00 }),
                PathEl::LineTo(Point { x: 16.00, y: 38.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 26.00, y: 38.00 }),
                PathEl::LineTo(Point { x: 34.00, y: 38.00 }),
                PathEl::LineTo(Point { x: 34.00, y: 30.00 }),
                PathEl::LineTo(Point { x: 26.00, y: 30.00 }),
                PathEl::LineTo(Point { x: 26.00, y: 38.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 36.00, y: 38.00 }),
                PathEl::LineTo(Point { x: 44.00, y: 38.00 }),
                PathEl::LineTo(Point { x: 44.00, y: 30.00 }),
                PathEl::LineTo(Point { x: 36.00, y: 30.00 }),
                PathEl::LineTo(Point { x: 36.00, y: 38.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 36.00, y: 10.00 }),
                PathEl::LineTo(Point { x: 36.00, y: 18.00 }),
                PathEl::LineTo(Point { x: 44.00, y: 18.00 }),
                PathEl::LineTo(Point { x: 44.00, y: 10.00 }),
                PathEl::LineTo(Point { x: 36.00, y: 10.00 }),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct BluetoothAudio {
    size: f64,
    color: Color,
}

impl BluetoothAudio {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for BluetoothAudio {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 28.48, y: 24.02 }),
                PathEl::LineTo(Point { x: 33.12, y: 28.66 }),
                PathEl::CurveTo(
                    Point { x: 33.68, y: 27.21 },
                    Point { x: 34.00, y: 25.64 },
                    Point { x: 34.00, y: 24.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 34.00, y: 22.37 },
                    Point { x: 33.69, y: 20.81 },
                    Point { x: 33.14, y: 19.37 },
                ),
                PathEl::LineTo(Point { x: 28.48, y: 24.02 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 39.06, y: 13.43 }),
                PathEl::LineTo(Point { x: 36.53, y: 15.96 }),
                PathEl::CurveTo(
                    Point { x: 37.78, y: 18.37 },
                    Point { x: 38.50, y: 21.10 },
                    Point { x: 38.50, y: 24.01 },
                ),
                PathEl::CurveTo(
                    Point { x: 38.50, y: 26.92 },
                    Point { x: 37.78, y: 29.64 },
                    Point { x: 36.53, y: 32.06 },
                ),
                PathEl::LineTo(Point { x: 38.93, y: 34.46 }),
                PathEl::CurveTo(
                    Point { x: 40.86, y: 31.36 },
                    Point { x: 42.00, y: 27.73 },
                    Point { x: 42.00, y: 23.83 },
                ),
                PathEl::CurveTo(
                    Point { x: 42.00, y: 20.01 },
                    Point { x: 40.91, y: 16.46 },
                    Point { x: 39.06, y: 13.43 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 31.41, y: 15.41 }),
                PathEl::LineTo(Point { x: 20.00, y: 4.00 }),
                PathEl::LineTo(Point { x: 18.00, y: 4.00 }),
                PathEl::LineTo(Point { x: 18.00, y: 19.17 }),
                PathEl::LineTo(Point { x: 8.83, y: 10.00 }),
                PathEl::LineTo(Point { x: 6.00, y: 12.83 }),
                PathEl::LineTo(Point { x: 17.17, y: 24.00 }),
                PathEl::LineTo(Point { x: 6.00, y: 35.17 }),
                PathEl::LineTo(Point { x: 8.83, y: 38.00 }),
                PathEl::LineTo(Point { x: 18.00, y: 28.83 }),
                PathEl::LineTo(Point { x: 18.00, y: 44.00 }),
                PathEl::LineTo(Point { x: 20.00, y: 44.00 }),
                PathEl::LineTo(Point { x: 31.41, y: 32.59 }),
                PathEl::LineTo(Point { x: 22.83, y: 24.00 }),
                PathEl::LineTo(Point { x: 31.41, y: 15.41 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 22.00, y: 11.66 }),
                PathEl::LineTo(Point { x: 25.76, y: 15.42 }),
                PathEl::LineTo(Point { x: 22.00, y: 19.17 }),
                PathEl::LineTo(Point { x: 22.00, y: 11.66 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 25.76, y: 32.59 }),
                PathEl::LineTo(Point { x: 22.00, y: 36.34 }),
                PathEl::LineTo(Point { x: 22.00, y: 28.82 }),
                PathEl::LineTo(Point { x: 25.76, y: 32.59 }),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct Navigation {
    size: f64,
    color: Color,
}

impl Navigation {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for Navigation {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 24.00, y: 4.00 }),
                PathEl::LineTo(Point { x: 9.00, y: 40.59 }),
                PathEl::LineTo(Point { x: 10.41, y: 42.00 }),
                PathEl::LineTo(Point { x: 24.00, y: 36.00 }),
                PathEl::LineTo(Point { x: 37.59, y: 42.00 }),
                PathEl::LineTo(Point { x: 39.00, y: 40.59 }),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct ZoomOut {
    size: f64,
    color: Color,
}

impl ZoomOut {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for ZoomOut {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 24.0, height / 24.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 15.50, y: 14.00 }),
                PathEl::LineTo(Point { x: 14.71, y: 14.00 }),
                PathEl::LineTo(Point { x: 14.43, y: 13.73 }),
                PathEl::CurveTo(
                    Point { x: 15.41, y: 12.59 },
                    Point { x: 16.00, y: 11.11 },
                    Point { x: 16.00, y: 9.50 },
                ),
                PathEl::CurveTo(
                    Point { x: 16.00, y: 5.91 },
                    Point { x: 13.09, y: 3.00 },
                    Point { x: 9.50, y: 3.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 5.91, y: 3.00 },
                    Point { x: 3.00, y: 5.91 },
                    Point { x: 3.00, y: 9.50 },
                ),
                PathEl::CurveTo(
                    Point { x: 3.00, y: 13.09 },
                    Point { x: 5.91, y: 16.00 },
                    Point { x: 9.50, y: 16.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 11.11, y: 16.00 },
                    Point { x: 12.59, y: 15.41 },
                    Point { x: 13.73, y: 14.43 },
                ),
                PathEl::LineTo(Point { x: 14.00, y: 14.71 }),
                PathEl::LineTo(Point { x: 14.00, y: 15.50 }),
                PathEl::LineTo(Point { x: 19.00, y: 20.49 }),
                PathEl::LineTo(Point { x: 20.49, y: 19.00 }),
                PathEl::LineTo(Point { x: 15.50, y: 14.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 9.50, y: 14.00 }),
                PathEl::CurveTo(
                    Point { x: 7.01, y: 14.00 },
                    Point { x: 5.00, y: 11.99 },
                    Point { x: 5.00, y: 9.50 },
                ),
                PathEl::CurveTo(
                    Point { x: 5.00, y: 7.01 },
                    Point { x: 7.01, y: 5.00 },
                    Point { x: 9.50, y: 5.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 11.99, y: 5.00 },
                    Point { x: 14.00, y: 7.01 },
                    Point { x: 14.00, y: 9.50 },
                ),
                PathEl::CurveTo(
                    Point { x: 14.00, y: 11.99 },
                    Point { x: 11.99, y: 14.00 },
                    Point { x: 9.50, y: 14.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 7.00, y: 9.00 }),
                PathEl::LineTo(Point { x: 12.00, y: 9.00 }),
                PathEl::LineTo(Point { x: 12.00, y: 10.00 }),
                PathEl::LineTo(Point { x: 7.00, y: 10.00 }),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct Redo {
    size: f64,
    color: Color,
}

impl Redo {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for Redo {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 36.79, y: 21.20 }),
                PathEl::CurveTo(
                    Point { x: 33.11, y: 17.97 },
                    Point { x: 28.29, y: 16.00 },
                    Point { x: 23.00, y: 16.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 13.70, y: 16.00 },
                    Point { x: 5.83, y: 22.06 },
                    Point { x: 3.08, y: 30.44 },
                ),
                PathEl::LineTo(Point { x: 7.81, y: 32.00 }),
                PathEl::CurveTo(
                    Point { x: 9.91, y: 25.61 },
                    Point { x: 15.91, y: 21.00 },
                    Point { x: 23.00, y: 21.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 26.91, y: 21.00 },
                    Point { x: 30.46, y: 22.44 },
                    Point { x: 33.23, y: 24.77 },
                ),
                PathEl::LineTo(Point { x: 26.00, y: 32.00 }),
                PathEl::LineTo(Point { x: 44.00, y: 32.00 }),
                PathEl::LineTo(Point { x: 44.00, y: 14.00 }),
                PathEl::LineTo(Point { x: 36.79, y: 21.20 }),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct ChevronLeft {
    size: f64,
    color: Color,
}

impl ChevronLeft {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for ChevronLeft {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 30.83, y: 14.83 }),
                PathEl::LineTo(Point { x: 28.00, y: 12.00 }),
                PathEl::LineTo(Point { x: 16.00, y: 24.00 }),
                PathEl::LineTo(Point { x: 28.00, y: 36.00 }),
                PathEl::LineTo(Point { x: 30.83, y: 33.17 }),
                PathEl::LineTo(Point { x: 21.66, y: 24.00 }),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct Videocam {
    size: f64,
    color: Color,
}

impl Videocam {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for Videocam {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 34.00, y: 21.00 }),
                PathEl::LineTo(Point { x: 34.00, y: 14.00 }),
                PathEl::CurveTo(
                    Point { x: 34.00, y: 12.90 },
                    Point { x: 33.10, y: 12.00 },
                    Point { x: 32.00, y: 12.00 },
                ),
                PathEl::LineTo(Point { x: 8.00, y: 12.00 }),
                PathEl::CurveTo(
                    Point { x: 6.90, y: 12.00 },
                    Point { x: 6.00, y: 12.90 },
                    Point { x: 6.00, y: 14.00 },
                ),
                PathEl::LineTo(Point { x: 6.00, y: 34.00 }),
                PathEl::CurveTo(
                    Point { x: 6.00, y: 35.10 },
                    Point { x: 6.90, y: 36.00 },
                    Point { x: 8.00, y: 36.00 },
                ),
                PathEl::LineTo(Point { x: 32.00, y: 36.00 }),
                PathEl::CurveTo(
                    Point { x: 33.10, y: 36.00 },
                    Point { x: 34.00, y: 35.10 },
                    Point { x: 34.00, y: 34.00 },
                ),
                PathEl::LineTo(Point { x: 34.00, y: 27.00 }),
                PathEl::LineTo(Point { x: 42.00, y: 35.00 }),
                PathEl::LineTo(Point { x: 42.00, y: 13.00 }),
                PathEl::LineTo(Point { x: 34.00, y: 21.00 }),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct KeyboardArrowUp {
    size: f64,
    color: Color,
}

impl KeyboardArrowUp {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for KeyboardArrowUp {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 14.83, y: 30.83 }),
                PathEl::LineTo(Point { x: 24.00, y: 21.66 }),
                PathEl::LineTo(Point { x: 33.17, y: 30.83 }),
                PathEl::LineTo(Point { x: 36.00, y: 28.00 }),
                PathEl::LineTo(Point { x: 24.00, y: 16.00 }),
                PathEl::LineTo(Point { x: 12.00, y: 28.00 }),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct ChevronRight {
    size: f64,
    color: Color,
}

impl ChevronRight {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for ChevronRight {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 20.00, y: 12.00 }),
                PathEl::LineTo(Point { x: 17.17, y: 14.83 }),
                PathEl::LineTo(Point { x: 26.34, y: 24.00 }),
                PathEl::LineTo(Point { x: 17.17, y: 33.17 }),
                PathEl::LineTo(Point { x: 20.00, y: 36.00 }),
                PathEl::LineTo(Point { x: 32.00, y: 24.00 }),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct PhoneBluetoothSpeaker {
    size: f64,
    color: Color,
}

impl PhoneBluetoothSpeaker {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for PhoneBluetoothSpeaker {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 29.41, y: 19.00 }),
                PathEl::LineTo(Point { x: 34.00, y: 14.41 }),
                PathEl::LineTo(Point { x: 34.00, y: 22.00 }),
                PathEl::LineTo(Point { x: 35.00, y: 22.00 }),
                PathEl::LineTo(Point { x: 40.71, y: 16.29 }),
                PathEl::LineTo(Point { x: 36.41, y: 12.00 }),
                PathEl::LineTo(Point { x: 40.70, y: 7.71 }),
                PathEl::LineTo(Point { x: 35.00, y: 2.00 }),
                PathEl::LineTo(Point { x: 34.00, y: 2.00 }),
                PathEl::LineTo(Point { x: 34.00, y: 9.59 }),
                PathEl::LineTo(Point { x: 29.41, y: 5.00 }),
                PathEl::LineTo(Point { x: 28.00, y: 6.41 }),
                PathEl::LineTo(Point { x: 33.59, y: 12.00 }),
                PathEl::LineTo(Point { x: 28.00, y: 17.59 }),
                PathEl::LineTo(Point { x: 29.41, y: 19.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 36.00, y: 5.83 }),
                PathEl::LineTo(Point { x: 37.88, y: 7.71 }),
                PathEl::LineTo(Point { x: 36.00, y: 9.59 }),
                PathEl::LineTo(Point { x: 36.00, y: 5.83 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 36.00, y: 14.41 }),
                PathEl::LineTo(Point { x: 37.88, y: 16.29 }),
                PathEl::LineTo(Point { x: 36.00, y: 18.17 }),
                PathEl::LineTo(Point { x: 36.00, y: 14.41 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 40.00, y: 31.00 }),
                PathEl::CurveTo(
                    Point { x: 37.51, y: 31.00 },
                    Point { x: 35.11, y: 30.60 },
                    Point { x: 32.86, y: 29.86 },
                ),
                PathEl::CurveTo(
                    Point { x: 32.17, y: 29.64 },
                    Point { x: 31.38, y: 29.80 },
                    Point { x: 30.83, y: 30.35 },
                ),
                PathEl::LineTo(Point { x: 26.43, y: 34.76 }),
                PathEl::CurveTo(
                    Point { x: 20.76, y: 31.88 },
                    Point { x: 16.14, y: 27.25 },
                    Point { x: 13.25, y: 21.59 },
                ),
                PathEl::LineTo(Point { x: 17.65, y: 17.18 }),
                PathEl::CurveTo(
                    Point { x: 18.20, y: 16.63 },
                    Point { x: 18.36, y: 15.84 },
                    Point { x: 18.14, y: 15.15 },
                ),
                PathEl::CurveTo(
                    Point { x: 17.40, y: 12.90 },
                    Point { x: 17.00, y: 10.49 },
                    Point { x: 17.00, y: 8.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 17.00, y: 6.89 },
                    Point { x: 16.11, y: 6.00 },
                    Point { x: 15.00, y: 6.00 },
                ),
                PathEl::LineTo(Point { x: 8.00, y: 6.00 }),
                PathEl::CurveTo(
                    Point { x: 6.89, y: 6.00 },
                    Point { x: 6.00, y: 6.89 },
                    Point { x: 6.00, y: 8.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 6.00, y: 26.78 },
                    Point { x: 21.22, y: 42.00 },
                    Point { x: 40.00, y: 42.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 41.11, y: 42.00 },
                    Point { x: 42.00, y: 41.11 },
                    Point { x: 42.00, y: 40.00 },
                ),
                PathEl::LineTo(Point { x: 42.00, y: 33.00 }),
                PathEl::CurveTo(
                    Point { x: 42.00, y: 31.89 },
                    Point { x: 41.11, y: 31.00 },
                    Point { x: 40.00, y: 31.00 },
                ),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct PhotoCamera {
    size: f64,
    color: Color,
}

impl PhotoCamera {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for PhotoCamera {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            Circle {
                center: Point { x: 24.00, y: 24.00 },
                radius: 6.40,
            },
            &brush,
        );
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 18.00, y: 4.00 }),
                PathEl::LineTo(Point { x: 14.34, y: 8.00 }),
                PathEl::LineTo(Point { x: 8.00, y: 8.00 }),
                PathEl::CurveTo(
                    Point { x: 5.79, y: 8.00 },
                    Point { x: 4.00, y: 9.79 },
                    Point { x: 4.00, y: 12.00 },
                ),
                PathEl::LineTo(Point { x: 4.00, y: 36.00 }),
                PathEl::CurveTo(
                    Point { x: 4.00, y: 38.21 },
                    Point { x: 5.79, y: 40.00 },
                    Point { x: 8.00, y: 40.00 },
                ),
                PathEl::LineTo(Point { x: 40.00, y: 40.00 }),
                PathEl::CurveTo(
                    Point { x: 42.21, y: 40.00 },
                    Point { x: 44.00, y: 38.21 },
                    Point { x: 44.00, y: 36.00 },
                ),
                PathEl::LineTo(Point { x: 44.00, y: 12.00 }),
                PathEl::CurveTo(
                    Point { x: 44.00, y: 9.79 },
                    Point { x: 42.21, y: 8.00 },
                    Point { x: 40.00, y: 8.00 },
                ),
                PathEl::LineTo(Point { x: 33.66, y: 8.00 }),
                PathEl::LineTo(Point { x: 30.00, y: 4.00 }),
                PathEl::LineTo(Point { x: 18.00, y: 4.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 24.00, y: 34.00 }),
                PathEl::CurveTo(
                    Point { x: 18.48, y: 34.00 },
                    Point { x: 14.00, y: 29.52 },
                    Point { x: 14.00, y: 24.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 14.00, y: 18.48 },
                    Point { x: 18.48, y: 14.00 },
                    Point { x: 24.00, y: 14.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 29.52, y: 14.00 },
                    Point { x: 34.00, y: 18.48 },
                    Point { x: 34.00, y: 24.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 34.00, y: 29.52 },
                    Point { x: 29.52, y: 34.00 },
                    Point { x: 24.00, y: 34.00 },
                ),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct ViewAgenda {
    size: f64,
    color: Color,
}

impl ViewAgenda {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for ViewAgenda {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 40.00, y: 26.00 }),
                PathEl::LineTo(Point { x: 6.00, y: 26.00 }),
                PathEl::CurveTo(
                    Point { x: 4.90, y: 26.00 },
                    Point { x: 4.00, y: 26.90 },
                    Point { x: 4.00, y: 28.00 },
                ),
                PathEl::LineTo(Point { x: 4.00, y: 40.00 }),
                PathEl::CurveTo(
                    Point { x: 4.00, y: 41.10 },
                    Point { x: 4.90, y: 42.00 },
                    Point { x: 6.00, y: 42.00 },
                ),
                PathEl::LineTo(Point { x: 40.00, y: 42.00 }),
                PathEl::CurveTo(
                    Point { x: 41.10, y: 42.00 },
                    Point { x: 42.00, y: 41.10 },
                    Point { x: 42.00, y: 40.00 },
                ),
                PathEl::LineTo(Point { x: 42.00, y: 28.00 }),
                PathEl::CurveTo(
                    Point { x: 42.00, y: 26.90 },
                    Point { x: 41.10, y: 26.00 },
                    Point { x: 40.00, y: 26.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 40.00, y: 6.00 }),
                PathEl::LineTo(Point { x: 6.00, y: 6.00 }),
                PathEl::CurveTo(
                    Point { x: 4.90, y: 6.00 },
                    Point { x: 4.00, y: 6.90 },
                    Point { x: 4.00, y: 8.00 },
                ),
                PathEl::LineTo(Point { x: 4.00, y: 20.00 }),
                PathEl::CurveTo(
                    Point { x: 4.00, y: 21.10 },
                    Point { x: 4.90, y: 22.00 },
                    Point { x: 6.00, y: 22.00 },
                ),
                PathEl::LineTo(Point { x: 40.00, y: 22.00 }),
                PathEl::CurveTo(
                    Point { x: 41.10, y: 22.00 },
                    Point { x: 42.00, y: 21.10 },
                    Point { x: 42.00, y: 20.00 },
                ),
                PathEl::LineTo(Point { x: 42.00, y: 8.00 }),
                PathEl::CurveTo(
                    Point { x: 42.00, y: 6.90 },
                    Point { x: 41.10, y: 6.00 },
                    Point { x: 40.00, y: 6.00 },
                ),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct LastPage {
    size: f64,
    color: Color,
}

impl LastPage {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for LastPage {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 11.18, y: 14.82 }),
                PathEl::LineTo(Point { x: 20.36, y: 24.00 }),
                PathEl::LineTo(Point { x: 11.18, y: 33.18 }),
                PathEl::LineTo(Point { x: 14.00, y: 36.00 }),
                PathEl::LineTo(Point { x: 26.00, y: 24.00 }),
                PathEl::LineTo(Point { x: 14.00, y: 12.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 32.00, y: 12.00 }),
                PathEl::LineTo(Point { x: 36.00, y: 12.00 }),
                PathEl::LineTo(Point { x: 36.00, y: 36.00 }),
                PathEl::LineTo(Point { x: 32.00, y: 36.00 }),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct Hd {
    size: f64,
    color: Color,
}

impl Hd {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for Hd {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 24.0, height / 24.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 19.00, y: 3.00 }),
                PathEl::LineTo(Point { x: 5.00, y: 3.00 }),
                PathEl::CurveTo(
                    Point { x: 3.89, y: 3.00 },
                    Point { x: 3.00, y: 3.90 },
                    Point { x: 3.00, y: 5.00 },
                ),
                PathEl::LineTo(Point { x: 3.00, y: 19.00 }),
                PathEl::CurveTo(
                    Point { x: 3.00, y: 20.10 },
                    Point { x: 3.89, y: 21.00 },
                    Point { x: 5.00, y: 21.00 },
                ),
                PathEl::LineTo(Point { x: 19.00, y: 21.00 }),
                PathEl::CurveTo(
                    Point { x: 20.10, y: 21.00 },
                    Point { x: 21.00, y: 20.10 },
                    Point { x: 21.00, y: 19.00 },
                ),
                PathEl::LineTo(Point { x: 21.00, y: 5.00 }),
                PathEl::CurveTo(
                    Point { x: 21.00, y: 3.90 },
                    Point { x: 20.10, y: 3.00 },
                    Point { x: 19.00, y: 3.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 11.00, y: 15.00 }),
                PathEl::LineTo(Point { x: 9.50, y: 15.00 }),
                PathEl::LineTo(Point { x: 9.50, y: 13.00 }),
                PathEl::LineTo(Point { x: 7.50, y: 13.00 }),
                PathEl::LineTo(Point { x: 7.50, y: 15.00 }),
                PathEl::LineTo(Point { x: 6.00, y: 15.00 }),
                PathEl::LineTo(Point { x: 6.00, y: 9.00 }),
                PathEl::LineTo(Point { x: 7.50, y: 9.00 }),
                PathEl::LineTo(Point { x: 7.50, y: 11.50 }),
                PathEl::LineTo(Point { x: 9.50, y: 11.50 }),
                PathEl::LineTo(Point { x: 9.50, y: 9.00 }),
                PathEl::LineTo(Point { x: 11.00, y: 9.00 }),
                PathEl::LineTo(Point { x: 11.00, y: 15.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 13.00, y: 9.00 }),
                PathEl::LineTo(Point { x: 17.00, y: 9.00 }),
                PathEl::CurveTo(
                    Point { x: 17.55, y: 9.00 },
                    Point { x: 18.00, y: 9.45 },
                    Point { x: 18.00, y: 10.00 },
                ),
                PathEl::LineTo(Point { x: 18.00, y: 14.00 }),
                PathEl::CurveTo(
                    Point { x: 18.00, y: 14.55 },
                    Point { x: 17.55, y: 15.00 },
                    Point { x: 17.00, y: 15.00 },
                ),
                PathEl::LineTo(Point { x: 13.00, y: 15.00 }),
                PathEl::LineTo(Point { x: 13.00, y: 9.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 14.50, y: 13.50 }),
                PathEl::LineTo(Point { x: 16.50, y: 13.50 }),
                PathEl::LineTo(Point { x: 16.50, y: 10.50 }),
                PathEl::LineTo(Point { x: 14.50, y: 10.50 }),
                PathEl::LineTo(Point { x: 14.50, y: 13.50 }),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct BluetoothSearching {
    size: f64,
    color: Color,
}

impl BluetoothSearching {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for BluetoothSearching {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 28.48, y: 24.02 }),
                PathEl::LineTo(Point { x: 33.12, y: 28.66 }),
                PathEl::CurveTo(
                    Point { x: 33.68, y: 27.21 },
                    Point { x: 34.00, y: 25.64 },
                    Point { x: 34.00, y: 24.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 34.00, y: 22.37 },
                    Point { x: 33.69, y: 20.81 },
                    Point { x: 33.14, y: 19.37 },
                ),
                PathEl::LineTo(Point { x: 28.48, y: 24.02 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 39.06, y: 13.43 }),
                PathEl::LineTo(Point { x: 36.53, y: 15.96 }),
                PathEl::CurveTo(
                    Point { x: 37.78, y: 18.37 },
                    Point { x: 38.50, y: 21.10 },
                    Point { x: 38.50, y: 24.01 },
                ),
                PathEl::CurveTo(
                    Point { x: 38.50, y: 26.92 },
                    Point { x: 37.78, y: 29.64 },
                    Point { x: 36.53, y: 32.06 },
                ),
                PathEl::LineTo(Point { x: 38.93, y: 34.46 }),
                PathEl::CurveTo(
                    Point { x: 40.86, y: 31.36 },
                    Point { x: 42.00, y: 27.73 },
                    Point { x: 42.00, y: 23.83 },
                ),
                PathEl::CurveTo(
                    Point { x: 42.00, y: 20.01 },
                    Point { x: 40.91, y: 16.46 },
                    Point { x: 39.06, y: 13.43 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 31.41, y: 15.41 }),
                PathEl::LineTo(Point { x: 20.00, y: 4.00 }),
                PathEl::LineTo(Point { x: 18.00, y: 4.00 }),
                PathEl::LineTo(Point { x: 18.00, y: 19.17 }),
                PathEl::LineTo(Point { x: 8.83, y: 10.00 }),
                PathEl::LineTo(Point { x: 6.00, y: 12.83 }),
                PathEl::LineTo(Point { x: 17.17, y: 24.00 }),
                PathEl::LineTo(Point { x: 6.00, y: 35.17 }),
                PathEl::LineTo(Point { x: 8.83, y: 38.00 }),
                PathEl::LineTo(Point { x: 18.00, y: 28.83 }),
                PathEl::LineTo(Point { x: 18.00, y: 44.00 }),
                PathEl::LineTo(Point { x: 20.00, y: 44.00 }),
                PathEl::LineTo(Point { x: 31.41, y: 32.59 }),
                PathEl::LineTo(Point { x: 22.83, y: 24.00 }),
                PathEl::LineTo(Point { x: 31.41, y: 15.41 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 22.00, y: 11.66 }),
                PathEl::LineTo(Point { x: 25.76, y: 15.42 }),
                PathEl::LineTo(Point { x: 22.00, y: 19.17 }),
                PathEl::LineTo(Point { x: 22.00, y: 11.66 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 25.76, y: 32.59 }),
                PathEl::LineTo(Point { x: 22.00, y: 36.34 }),
                PathEl::LineTo(Point { x: 22.00, y: 28.82 }),
                PathEl::LineTo(Point { x: 25.76, y: 32.59 }),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct Assignment {
    size: f64,
    color: Color,
}

impl Assignment {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for Assignment {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 38.00, y: 6.00 }),
                PathEl::LineTo(Point { x: 29.63, y: 6.00 }),
                PathEl::CurveTo(
                    Point { x: 28.81, y: 3.68 },
                    Point { x: 26.61, y: 2.00 },
                    Point { x: 24.00, y: 2.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 21.39, y: 2.00 },
                    Point { x: 19.19, y: 3.68 },
                    Point { x: 18.37, y: 6.00 },
                ),
                PathEl::LineTo(Point { x: 10.00, y: 6.00 }),
                PathEl::CurveTo(
                    Point { x: 7.79, y: 6.00 },
                    Point { x: 6.00, y: 7.79 },
                    Point { x: 6.00, y: 10.00 },
                ),
                PathEl::LineTo(Point { x: 6.00, y: 38.00 }),
                PathEl::CurveTo(
                    Point { x: 6.00, y: 40.21 },
                    Point { x: 7.79, y: 42.00 },
                    Point { x: 10.00, y: 42.00 },
                ),
                PathEl::LineTo(Point { x: 38.00, y: 42.00 }),
                PathEl::CurveTo(
                    Point { x: 40.21, y: 42.00 },
                    Point { x: 42.00, y: 40.21 },
                    Point { x: 42.00, y: 38.00 },
                ),
                PathEl::LineTo(Point { x: 42.00, y: 10.00 }),
                PathEl::CurveTo(
                    Point { x: 42.00, y: 7.79 },
                    Point { x: 40.21, y: 6.00 },
                    Point { x: 38.00, y: 6.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 24.00, y: 6.00 }),
                PathEl::CurveTo(
                    Point { x: 25.10, y: 6.00 },
                    Point { x: 26.00, y: 6.89 },
                    Point { x: 26.00, y: 8.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 26.00, y: 9.11 },
                    Point { x: 25.10, y: 10.00 },
                    Point { x: 24.00, y: 10.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 22.90, y: 10.00 },
                    Point { x: 22.00, y: 9.11 },
                    Point { x: 22.00, y: 8.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 22.00, y: 6.89 },
                    Point { x: 22.90, y: 6.00 },
                    Point { x: 24.00, y: 6.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 28.00, y: 34.00 }),
                PathEl::LineTo(Point { x: 14.00, y: 34.00 }),
                PathEl::LineTo(Point { x: 14.00, y: 30.00 }),
                PathEl::LineTo(Point { x: 28.00, y: 30.00 }),
                PathEl::LineTo(Point { x: 28.00, y: 34.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 34.00, y: 26.00 }),
                PathEl::LineTo(Point { x: 14.00, y: 26.00 }),
                PathEl::LineTo(Point { x: 14.00, y: 22.00 }),
                PathEl::LineTo(Point { x: 34.00, y: 22.00 }),
                PathEl::LineTo(Point { x: 34.00, y: 26.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 34.00, y: 18.00 }),
                PathEl::LineTo(Point { x: 14.00, y: 18.00 }),
                PathEl::LineTo(Point { x: 14.00, y: 14.00 }),
                PathEl::LineTo(Point { x: 34.00, y: 14.00 }),
                PathEl::LineTo(Point { x: 34.00, y: 18.00 }),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct DoNotDisturbOff {
    size: f64,
    color: Color,
}

impl DoNotDisturbOff {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for DoNotDisturbOff {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 34.00, y: 22.00 }),
                PathEl::LineTo(Point { x: 34.00, y: 26.00 }),
                PathEl::LineTo(Point { x: 31.08, y: 26.00 }),
                PathEl::LineTo(Point { x: 40.44, y: 35.36 }),
                PathEl::CurveTo(
                    Point { x: 42.68, y: 32.14 },
                    Point { x: 44.00, y: 28.22 },
                    Point { x: 44.00, y: 24.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 44.00, y: 12.96 },
                    Point { x: 35.04, y: 4.00 },
                    Point { x: 24.00, y: 4.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 19.78, y: 4.00 },
                    Point { x: 15.86, y: 5.32 },
                    Point { x: 12.64, y: 7.56 },
                ),
                PathEl::LineTo(Point { x: 27.08, y: 22.00 }),
                PathEl::LineTo(Point { x: 34.00, y: 22.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 4.54, y: 4.54 }),
                PathEl::LineTo(Point { x: 2.00, y: 7.08 }),
                PathEl::LineTo(Point { x: 7.56, y: 12.64 }),
                PathEl::CurveTo(
                    Point { x: 5.32, y: 15.86 },
                    Point { x: 4.00, y: 19.78 },
                    Point { x: 4.00, y: 24.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 4.00, y: 35.04 },
                    Point { x: 12.96, y: 44.00 },
                    Point { x: 24.00, y: 44.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 28.22, y: 44.00 },
                    Point { x: 32.14, y: 42.68 },
                    Point { x: 35.36, y: 40.44 },
                ),
                PathEl::LineTo(Point { x: 40.92, y: 46.00 }),
                PathEl::LineTo(Point { x: 43.46, y: 43.46 }),
                PathEl::LineTo(Point { x: 22.00, y: 22.00 }),
                PathEl::LineTo(Point { x: 4.54, y: 4.54 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 14.00, y: 26.00 }),
                PathEl::LineTo(Point { x: 14.00, y: 22.00 }),
                PathEl::LineTo(Point { x: 16.92, y: 22.00 }),
                PathEl::LineTo(Point { x: 20.92, y: 26.00 }),
                PathEl::LineTo(Point { x: 14.00, y: 26.00 }),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct Casino {
    size: f64,
    color: Color,
}

impl Casino {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for Casino {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 38.00, y: 6.00 }),
                PathEl::LineTo(Point { x: 10.00, y: 6.00 }),
                PathEl::CurveTo(
                    Point { x: 7.79, y: 6.00 },
                    Point { x: 6.00, y: 7.79 },
                    Point { x: 6.00, y: 10.00 },
                ),
                PathEl::LineTo(Point { x: 6.00, y: 38.00 }),
                PathEl::CurveTo(
                    Point { x: 6.00, y: 40.21 },
                    Point { x: 7.79, y: 42.00 },
                    Point { x: 10.00, y: 42.00 },
                ),
                PathEl::LineTo(Point { x: 38.00, y: 42.00 }),
                PathEl::CurveTo(
                    Point { x: 40.21, y: 42.00 },
                    Point { x: 42.00, y: 40.21 },
                    Point { x: 42.00, y: 38.00 },
                ),
                PathEl::LineTo(Point { x: 42.00, y: 10.00 }),
                PathEl::CurveTo(
                    Point { x: 42.00, y: 7.79 },
                    Point { x: 40.21, y: 6.00 },
                    Point { x: 38.00, y: 6.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 15.00, y: 36.00 }),
                PathEl::CurveTo(
                    Point { x: 13.34, y: 36.00 },
                    Point { x: 12.00, y: 34.66 },
                    Point { x: 12.00, y: 33.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 12.00, y: 31.34 },
                    Point { x: 13.34, y: 30.00 },
                    Point { x: 15.00, y: 30.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 16.66, y: 30.00 },
                    Point { x: 18.00, y: 31.34 },
                    Point { x: 18.00, y: 33.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 18.00, y: 34.66 },
                    Point { x: 16.66, y: 36.00 },
                    Point { x: 15.00, y: 36.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 15.00, y: 18.00 }),
                PathEl::CurveTo(
                    Point { x: 13.34, y: 18.00 },
                    Point { x: 12.00, y: 16.66 },
                    Point { x: 12.00, y: 15.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 12.00, y: 13.34 },
                    Point { x: 13.34, y: 12.00 },
                    Point { x: 15.00, y: 12.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 16.66, y: 12.00 },
                    Point { x: 18.00, y: 13.34 },
                    Point { x: 18.00, y: 15.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 18.00, y: 16.66 },
                    Point { x: 16.66, y: 18.00 },
                    Point { x: 15.00, y: 18.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 24.00, y: 27.00 }),
                PathEl::CurveTo(
                    Point { x: 22.34, y: 27.00 },
                    Point { x: 21.00, y: 25.66 },
                    Point { x: 21.00, y: 24.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 21.00, y: 22.34 },
                    Point { x: 22.34, y: 21.00 },
                    Point { x: 24.00, y: 21.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 25.66, y: 21.00 },
                    Point { x: 27.00, y: 22.34 },
                    Point { x: 27.00, y: 24.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 27.00, y: 25.66 },
                    Point { x: 25.66, y: 27.00 },
                    Point { x: 24.00, y: 27.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 33.00, y: 36.00 }),
                PathEl::CurveTo(
                    Point { x: 31.34, y: 36.00 },
                    Point { x: 30.00, y: 34.66 },
                    Point { x: 30.00, y: 33.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 30.00, y: 31.34 },
                    Point { x: 31.34, y: 30.00 },
                    Point { x: 33.00, y: 30.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 34.66, y: 30.00 },
                    Point { x: 36.00, y: 31.34 },
                    Point { x: 36.00, y: 33.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 36.00, y: 34.66 },
                    Point { x: 34.66, y: 36.00 },
                    Point { x: 33.00, y: 36.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 33.00, y: 18.00 }),
                PathEl::CurveTo(
                    Point { x: 31.34, y: 18.00 },
                    Point { x: 30.00, y: 16.66 },
                    Point { x: 30.00, y: 15.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 30.00, y: 13.34 },
                    Point { x: 31.34, y: 12.00 },
                    Point { x: 33.00, y: 12.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 34.66, y: 12.00 },
                    Point { x: 36.00, y: 13.34 },
                    Point { x: 36.00, y: 15.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 36.00, y: 16.66 },
                    Point { x: 34.66, y: 18.00 },
                    Point { x: 33.00, y: 18.00 },
                ),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct Timer3 {
    size: f64,
    color: Color,
}

impl Timer3 {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for Timer3 {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 23.22, y: 25.95 }),
                PathEl::CurveTo(
                    Point { x: 22.90, y: 25.47 },
                    Point { x: 22.49, y: 25.03 },
                    Point { x: 21.99, y: 24.64 },
                ),
                PathEl::CurveTo(
                    Point { x: 21.48, y: 24.25 },
                    Point { x: 20.87, y: 23.94 },
                    Point { x: 20.14, y: 23.69 },
                ),
                PathEl::CurveTo(
                    Point { x: 20.75, y: 23.42 },
                    Point { x: 21.28, y: 23.08 },
                    Point { x: 21.74, y: 22.69 },
                ),
                PathEl::CurveTo(
                    Point { x: 22.20, y: 22.29 },
                    Point { x: 22.58, y: 21.87 },
                    Point { x: 22.88, y: 21.42 },
                ),
                PathEl::CurveTo(
                    Point { x: 23.18, y: 20.97 },
                    Point { x: 23.41, y: 20.50 },
                    Point { x: 23.57, y: 20.01 },
                ),
                PathEl::CurveTo(
                    Point { x: 23.72, y: 19.52 },
                    Point { x: 23.80, y: 19.04 },
                    Point { x: 23.80, y: 18.56 },
                ),
                PathEl::CurveTo(
                    Point { x: 23.80, y: 17.45 },
                    Point { x: 23.61, y: 16.48 },
                    Point { x: 23.25, y: 15.63 },
                ),
                PathEl::CurveTo(
                    Point { x: 22.88, y: 14.79 },
                    Point { x: 22.36, y: 14.08 },
                    Point { x: 21.69, y: 13.52 },
                ),
                PathEl::CurveTo(
                    Point { x: 21.02, y: 12.96 },
                    Point { x: 20.22, y: 12.53 },
                    Point { x: 19.28, y: 12.24 },
                ),
                PathEl::CurveTo(
                    Point { x: 18.34, y: 11.95 },
                    Point { x: 17.31, y: 11.81 },
                    Point { x: 16.18, y: 11.81 },
                ),
                PathEl::CurveTo(
                    Point { x: 15.08, y: 11.81 },
                    Point { x: 14.07, y: 11.97 },
                    Point { x: 13.14, y: 12.30 },
                ),
                PathEl::CurveTo(
                    Point { x: 12.21, y: 12.63 },
                    Point { x: 11.41, y: 13.08 },
                    Point { x: 10.74, y: 13.66 },
                ),
                PathEl::CurveTo(
                    Point { x: 10.07, y: 14.24 },
                    Point { x: 9.55, y: 14.93 },
                    Point { x: 9.17, y: 15.72 },
                ),
                PathEl::CurveTo(
                    Point { x: 8.79, y: 16.51 },
                    Point { x: 8.61, y: 17.38 },
                    Point { x: 8.61, y: 18.31 },
                ),
                PathEl::LineTo(Point { x: 12.57, y: 18.31 }),
                PathEl::CurveTo(
                    Point { x: 12.57, y: 17.80 },
                    Point { x: 12.66, y: 17.34 },
                    Point { x: 12.85, y: 16.93 },
                ),
                PathEl::CurveTo(
                    Point { x: 13.04, y: 16.52 },
                    Point { x: 13.29, y: 16.17 },
                    Point { x: 13.62, y: 15.89 },
                ),
                PathEl::CurveTo(
                    Point { x: 13.95, y: 15.60 },
                    Point { x: 14.33, y: 15.38 },
                    Point { x: 14.78, y: 15.22 },
                ),
                PathEl::CurveTo(
                    Point { x: 15.23, y: 15.06 },
                    Point { x: 15.71, y: 14.98 },
                    Point { x: 16.23, y: 14.98 },
                ),
                PathEl::CurveTo(
                    Point { x: 17.45, y: 14.98 },
                    Point { x: 18.35, y: 15.29 },
                    Point { x: 18.95, y: 15.92 },
                ),
                PathEl::CurveTo(
                    Point { x: 19.54, y: 16.55 },
                    Point { x: 19.84, y: 17.42 },
                    Point { x: 19.84, y: 18.55 },
                ),
                PathEl::CurveTo(
                    Point { x: 19.84, y: 19.09 },
                    Point { x: 19.76, y: 19.59 },
                    Point { x: 19.60, y: 20.03 },
                ),
                PathEl::CurveTo(
                    Point { x: 19.44, y: 20.48 },
                    Point { x: 19.19, y: 20.86 },
                    Point { x: 18.85, y: 21.17 },
                ),
                PathEl::CurveTo(
                    Point { x: 18.51, y: 21.49 },
                    Point { x: 18.09, y: 21.73 },
                    Point { x: 17.59, y: 21.91 },
                ),
                PathEl::CurveTo(
                    Point { x: 17.09, y: 22.09 },
                    Point { x: 16.50, y: 22.18 },
                    Point { x: 15.81, y: 22.18 },
                ),
                PathEl::LineTo(Point { x: 13.46, y: 22.18 }),
                PathEl::LineTo(Point { x: 13.46, y: 25.31 }),
                PathEl::LineTo(Point { x: 15.81, y: 25.31 }),
                PathEl::CurveTo(
                    Point { x: 16.48, y: 25.31 },
                    Point { x: 17.09, y: 25.39 },
                    Point { x: 17.63, y: 25.54 },
                ),
                PathEl::CurveTo(
                    Point { x: 18.17, y: 25.69 },
                    Point { x: 18.63, y: 25.93 },
                    Point { x: 19.01, y: 26.25 },
                ),
                PathEl::CurveTo(
                    Point { x: 19.39, y: 26.57 },
                    Point { x: 19.68, y: 26.98 },
                    Point { x: 19.89, y: 27.47 },
                ),
                PathEl::CurveTo(
                    Point { x: 20.10, y: 27.96 },
                    Point { x: 20.20, y: 28.54 },
                    Point { x: 20.20, y: 29.22 },
                ),
                PathEl::CurveTo(
                    Point { x: 20.20, y: 30.46 },
                    Point { x: 19.85, y: 31.41 },
                    Point { x: 19.14, y: 32.06 },
                ),
                PathEl::CurveTo(
                    Point { x: 18.43, y: 32.71 },
                    Point { x: 17.47, y: 33.04 },
                    Point { x: 16.24, y: 33.04 },
                ),
                PathEl::CurveTo(
                    Point { x: 15.65, y: 33.04 },
                    Point { x: 15.12, y: 32.96 },
                    Point { x: 14.64, y: 32.79 },
                ),
                PathEl::CurveTo(
                    Point { x: 14.16, y: 32.62 },
                    Point { x: 13.75, y: 32.38 },
                    Point { x: 13.42, y: 32.07 },
                ),
                PathEl::CurveTo(
                    Point { x: 13.08, y: 31.76 },
                    Point { x: 12.82, y: 31.39 },
                    Point { x: 12.64, y: 30.95 },
                ),
                PathEl::CurveTo(
                    Point { x: 12.45, y: 30.52 },
                    Point { x: 12.36, y: 30.04 },
                    Point { x: 12.36, y: 29.51 },
                ),
                PathEl::LineTo(Point { x: 8.37, y: 29.51 }),
                PathEl::CurveTo(
                    Point { x: 8.37, y: 30.61 },
                    Point { x: 8.58, y: 31.58 },
                    Point { x: 9.01, y: 32.41 },
                ),
                PathEl::CurveTo(
                    Point { x: 9.43, y: 33.25 },
                    Point { x: 10.00, y: 33.95 },
                    Point { x: 10.72, y: 34.51 },
                ),
                PathEl::CurveTo(
                    Point { x: 11.44, y: 35.07 },
                    Point { x: 12.27, y: 35.49 },
                    Point { x: 13.21, y: 35.77 },
                ),
                PathEl::CurveTo(
                    Point { x: 14.15, y: 36.05 },
                    Point { x: 15.14, y: 36.19 },
                    Point { x: 16.17, y: 36.19 },
                ),
                PathEl::CurveTo(
                    Point { x: 17.30, y: 36.19 },
                    Point { x: 18.35, y: 36.03 },
                    Point { x: 19.33, y: 35.73 },
                ),
                PathEl::CurveTo(
                    Point { x: 20.30, y: 35.42 },
                    Point { x: 21.15, y: 34.97 },
                    Point { x: 21.86, y: 34.38 },
                ),
                PathEl::CurveTo(
                    Point { x: 22.57, y: 33.79 },
                    Point { x: 23.13, y: 33.06 },
                    Point { x: 23.53, y: 32.19 },
                ),
                PathEl::CurveTo(
                    Point { x: 23.93, y: 31.32 },
                    Point { x: 24.13, y: 30.33 },
                    Point { x: 24.13, y: 29.22 },
                ),
                PathEl::CurveTo(
                    Point { x: 24.13, y: 28.63 },
                    Point { x: 24.06, y: 28.06 },
                    Point { x: 23.91, y: 27.51 },
                ),
                PathEl::CurveTo(
                    Point { x: 23.76, y: 26.95 },
                    Point { x: 23.53, y: 26.43 },
                    Point { x: 23.22, y: 25.95 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 41.75, y: 28.73 }),
                PathEl::CurveTo(
                    Point { x: 41.46, y: 28.16 },
                    Point { x: 41.04, y: 27.67 },
                    Point { x: 40.49, y: 27.25 },
                ),
                PathEl::CurveTo(
                    Point { x: 39.94, y: 26.83 },
                    Point { x: 39.26, y: 26.48 },
                    Point { x: 38.47, y: 26.19 },
                ),
                PathEl::CurveTo(
                    Point { x: 37.67, y: 25.90 },
                    Point { x: 36.77, y: 25.65 },
                    Point { x: 35.77, y: 25.44 },
                ),
                PathEl::CurveTo(
                    Point { x: 35.07, y: 25.29 },
                    Point { x: 34.50, y: 25.14 },
                    Point { x: 34.04, y: 24.98 },
                ),
                PathEl::CurveTo(
                    Point { x: 33.58, y: 24.83 },
                    Point { x: 33.21, y: 24.66 },
                    Point { x: 32.94, y: 24.48 },
                ),
                PathEl::CurveTo(
                    Point { x: 32.67, y: 24.30 },
                    Point { x: 32.48, y: 24.09 },
                    Point { x: 32.37, y: 23.87 },
                ),
                PathEl::CurveTo(
                    Point { x: 32.26, y: 23.65 },
                    Point { x: 32.21, y: 23.39 },
                    Point { x: 32.21, y: 23.10 },
                ),
                PathEl::CurveTo(
                    Point { x: 32.21, y: 22.81 },
                    Point { x: 32.27, y: 22.54 },
                    Point { x: 32.39, y: 22.27 },
                ),
                PathEl::CurveTo(
                    Point { x: 32.51, y: 22.01 },
                    Point { x: 32.69, y: 21.78 },
                    Point { x: 32.93, y: 21.58 },
                ),
                PathEl::CurveTo(
                    Point { x: 33.17, y: 21.38 },
                    Point { x: 33.47, y: 21.22 },
                    Point { x: 33.84, y: 21.10 },
                ),
                PathEl::CurveTo(
                    Point { x: 34.20, y: 20.98 },
                    Point { x: 34.63, y: 20.92 },
                    Point { x: 35.12, y: 20.92 },
                ),
                PathEl::CurveTo(
                    Point { x: 35.62, y: 20.92 },
                    Point { x: 36.06, y: 20.99 },
                    Point { x: 36.44, y: 21.14 },
                ),
                PathEl::CurveTo(
                    Point { x: 36.82, y: 21.28 },
                    Point { x: 37.14, y: 21.48 },
                    Point { x: 37.39, y: 21.73 },
                ),
                PathEl::CurveTo(
                    Point { x: 37.65, y: 21.98 },
                    Point { x: 37.84, y: 22.26 },
                    Point { x: 37.97, y: 22.57 },
                ),
                PathEl::CurveTo(
                    Point { x: 38.10, y: 22.89 },
                    Point { x: 38.16, y: 23.21 },
                    Point { x: 38.16, y: 23.54 },
                ),
                PathEl::LineTo(Point { x: 42.06, y: 23.54 }),
                PathEl::CurveTo(
                    Point { x: 42.06, y: 22.76 },
                    Point { x: 41.90, y: 22.03 },
                    Point { x: 41.59, y: 21.36 },
                ),
                PathEl::CurveTo(
                    Point { x: 41.27, y: 20.69 },
                    Point { x: 40.82, y: 20.10 },
                    Point { x: 40.22, y: 19.60 },
                ),
                PathEl::CurveTo(
                    Point { x: 39.62, y: 19.10 },
                    Point { x: 38.89, y: 18.71 },
                    Point { x: 38.03, y: 18.43 },
                ),
                PathEl::CurveTo(
                    Point { x: 37.16, y: 18.14 },
                    Point { x: 36.19, y: 18.00 },
                    Point { x: 35.10, y: 18.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 34.07, y: 18.00 },
                    Point { x: 33.14, y: 18.14 },
                    Point { x: 32.32, y: 18.42 },
                ),
                PathEl::CurveTo(
                    Point { x: 31.49, y: 18.70 },
                    Point { x: 30.79, y: 19.09 },
                    Point { x: 30.20, y: 19.57 },
                ),
                PathEl::CurveTo(
                    Point { x: 29.62, y: 20.05 },
                    Point { x: 29.17, y: 20.61 },
                    Point { x: 28.86, y: 21.25 },
                ),
                PathEl::CurveTo(
                    Point { x: 28.55, y: 21.89 },
                    Point { x: 28.39, y: 22.56 },
                    Point { x: 28.39, y: 23.26 },
                ),
                PathEl::CurveTo(
                    Point { x: 28.39, y: 23.99 },
                    Point { x: 28.54, y: 24.63 },
                    Point { x: 28.85, y: 25.19 },
                ),
                PathEl::CurveTo(
                    Point { x: 29.15, y: 25.75 },
                    Point { x: 29.58, y: 26.23 },
                    Point { x: 30.13, y: 26.64 },
                ),
                PathEl::CurveTo(
                    Point { x: 30.68, y: 27.05 },
                    Point { x: 31.33, y: 27.40 },
                    Point { x: 32.10, y: 27.69 },
                ),
                PathEl::CurveTo(
                    Point { x: 32.86, y: 27.98 },
                    Point { x: 33.71, y: 28.22 },
                    Point { x: 34.64, y: 28.41 },
                ),
                PathEl::CurveTo(
                    Point { x: 35.42, y: 28.57 },
                    Point { x: 36.05, y: 28.74 },
                    Point { x: 36.54, y: 28.92 },
                ),
                PathEl::CurveTo(
                    Point { x: 37.03, y: 29.10 },
                    Point { x: 37.40, y: 29.30 },
                    Point { x: 37.67, y: 29.51 },
                ),
                PathEl::CurveTo(
                    Point { x: 37.94, y: 29.72 },
                    Point { x: 38.12, y: 29.94 },
                    Point { x: 38.21, y: 30.18 },
                ),
                PathEl::CurveTo(
                    Point { x: 38.30, y: 30.42 },
                    Point { x: 38.35, y: 30.68 },
                    Point { x: 38.35, y: 30.96 },
                ),
                PathEl::CurveTo(
                    Point { x: 38.35, y: 31.59 },
                    Point { x: 38.08, y: 32.10 },
                    Point { x: 37.55, y: 32.49 },
                ),
                PathEl::CurveTo(
                    Point { x: 37.01, y: 32.88 },
                    Point { x: 36.23, y: 33.08 },
                    Point { x: 35.21, y: 33.08 },
                ),
                PathEl::CurveTo(
                    Point { x: 34.77, y: 33.08 },
                    Point { x: 34.34, y: 33.03 },
                    Point { x: 33.93, y: 32.93 },
                ),
                PathEl::CurveTo(
                    Point { x: 33.51, y: 32.83 },
                    Point { x: 33.14, y: 32.67 },
                    Point { x: 32.81, y: 32.44 },
                ),
                PathEl::CurveTo(
                    Point { x: 32.48, y: 32.22 },
                    Point { x: 32.21, y: 31.92 },
                    Point { x: 31.99, y: 31.56 },
                ),
                PathEl::CurveTo(
                    Point { x: 31.78, y: 31.20 },
                    Point { x: 31.65, y: 30.75 },
                    Point { x: 31.62, y: 30.21 },
                ),
                PathEl::LineTo(Point { x: 27.83, y: 30.21 }),
                PathEl::CurveTo(
                    Point { x: 27.83, y: 30.93 },
                    Point { x: 27.99, y: 31.63 },
                    Point { x: 28.30, y: 32.32 },
                ),
                PathEl::CurveTo(
                    Point { x: 28.61, y: 33.01 },
                    Point { x: 29.08, y: 33.63 },
                    Point { x: 29.70, y: 34.17 },
                ),
                PathEl::CurveTo(
                    Point { x: 30.32, y: 34.72 },
                    Point { x: 31.09, y: 35.16 },
                    Point { x: 32.00, y: 35.49 },
                ),
                PathEl::CurveTo(
                    Point { x: 32.91, y: 35.83 },
                    Point { x: 33.97, y: 36.00 },
                    Point { x: 35.15, y: 36.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 36.21, y: 36.00 },
                    Point { x: 37.17, y: 35.87 },
                    Point { x: 38.04, y: 35.62 },
                ),
                PathEl::CurveTo(
                    Point { x: 38.91, y: 35.36 },
                    Point { x: 39.65, y: 35.00 },
                    Point { x: 40.26, y: 34.54 },
                ),
                PathEl::CurveTo(
                    Point { x: 40.88, y: 34.07 },
                    Point { x: 41.35, y: 33.52 },
                    Point { x: 41.68, y: 32.88 },
                ),
                PathEl::CurveTo(
                    Point { x: 42.01, y: 32.24 },
                    Point { x: 42.18, y: 31.53 },
                    Point { x: 42.18, y: 30.76 },
                ),
                PathEl::CurveTo(
                    Point { x: 42.18, y: 29.97 },
                    Point { x: 42.03, y: 29.30 },
                    Point { x: 41.75, y: 28.73 },
                ),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct Battery50 {
    size: f64,
    color: Color,
}

impl Battery50 {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for Battery50 {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 34.00, y: 10.67 }),
                PathEl::CurveTo(
                    Point { x: 34.00, y: 9.19 },
                    Point { x: 32.81, y: 8.00 },
                    Point { x: 31.33, y: 8.00 },
                ),
                PathEl::LineTo(Point { x: 28.00, y: 8.00 }),
                PathEl::LineTo(Point { x: 28.00, y: 4.00 }),
                PathEl::LineTo(Point { x: 20.00, y: 4.00 }),
                PathEl::LineTo(Point { x: 20.00, y: 8.00 }),
                PathEl::LineTo(Point { x: 16.67, y: 8.00 }),
                PathEl::CurveTo(
                    Point { x: 15.19, y: 8.00 },
                    Point { x: 14.00, y: 9.19 },
                    Point { x: 14.00, y: 10.67 },
                ),
                PathEl::LineTo(Point { x: 14.00, y: 26.00 }),
                PathEl::LineTo(Point { x: 34.00, y: 26.00 }),
                PathEl::LineTo(Point { x: 34.00, y: 10.67 }),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 14.00, y: 26.00 }),
                PathEl::LineTo(Point { x: 14.00, y: 41.33 }),
                PathEl::CurveTo(
                    Point { x: 14.00, y: 42.80 },
                    Point { x: 15.19, y: 44.00 },
                    Point { x: 16.67, y: 44.00 },
                ),
                PathEl::LineTo(Point { x: 31.34, y: 44.00 }),
                PathEl::CurveTo(
                    Point { x: 32.81, y: 44.00 },
                    Point { x: 34.01, y: 42.81 },
                    Point { x: 34.01, y: 41.33 },
                ),
                PathEl::LineTo(Point { x: 34.01, y: 26.00 }),
                PathEl::LineTo(Point { x: 14.00, y: 26.00 }),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct MoodBad {
    size: f64,
    color: Color,
}

impl MoodBad {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for MoodBad {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 23.99, y: 4.00 }),
                PathEl::CurveTo(
                    Point { x: 12.94, y: 4.00 },
                    Point { x: 4.00, y: 12.95 },
                    Point { x: 4.00, y: 24.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 4.00, y: 35.05 },
                    Point { x: 12.94, y: 44.00 },
                    Point { x: 23.99, y: 44.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 35.04, y: 44.00 },
                    Point { x: 44.00, y: 35.05 },
                    Point { x: 44.00, y: 24.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 44.00, y: 12.95 },
                    Point { x: 35.04, y: 4.00 },
                    Point { x: 23.99, y: 4.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 24.00, y: 40.00 }),
                PathEl::CurveTo(
                    Point { x: 15.16, y: 40.00 },
                    Point { x: 8.00, y: 32.84 },
                    Point { x: 8.00, y: 24.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 8.00, y: 15.16 },
                    Point { x: 15.16, y: 8.00 },
                    Point { x: 24.00, y: 8.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 32.84, y: 8.00 },
                    Point { x: 40.00, y: 15.16 },
                    Point { x: 40.00, y: 24.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 40.00, y: 32.84 },
                    Point { x: 32.84, y: 40.00 },
                    Point { x: 24.00, y: 40.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 31.00, y: 22.00 }),
                PathEl::CurveTo(
                    Point { x: 32.66, y: 22.00 },
                    Point { x: 34.00, y: 20.66 },
                    Point { x: 34.00, y: 19.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 34.00, y: 17.34 },
                    Point { x: 32.66, y: 16.00 },
                    Point { x: 31.00, y: 16.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 29.34, y: 16.00 },
                    Point { x: 28.00, y: 17.34 },
                    Point { x: 28.00, y: 19.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 28.00, y: 20.66 },
                    Point { x: 29.34, y: 22.00 },
                    Point { x: 31.00, y: 22.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 17.00, y: 22.00 }),
                PathEl::CurveTo(
                    Point { x: 18.66, y: 22.00 },
                    Point { x: 20.00, y: 20.66 },
                    Point { x: 20.00, y: 19.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 20.00, y: 17.34 },
                    Point { x: 18.66, y: 16.00 },
                    Point { x: 17.00, y: 16.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 15.34, y: 16.00 },
                    Point { x: 14.00, y: 17.34 },
                    Point { x: 14.00, y: 19.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 14.00, y: 20.66 },
                    Point { x: 15.34, y: 22.00 },
                    Point { x: 17.00, y: 22.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 34.21, y: 35.00 }),
                PathEl::CurveTo(
                    Point { x: 32.61, y: 30.91 },
                    Point { x: 28.66, y: 28.00 },
                    Point { x: 24.00, y: 28.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 19.34, y: 28.00 },
                    Point { x: 15.39, y: 30.91 },
                    Point { x: 13.79, y: 35.00 },
                ),
            ][..],
            &brush,
        );
    }
}

pub struct InsertPhoto {
    size: f64,
    color: Color,
}

impl InsertPhoto {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for InsertPhoto {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 42.00, y: 38.00 }),
                PathEl::LineTo(Point { x: 42.00, y: 10.00 }),
                PathEl::CurveTo(
                    Point { x: 42.00, y: 7.79 },
                    Point { x: 40.21, y: 6.00 },
                    Point { x: 38.00, y: 6.00 },
                ),
                PathEl::LineTo(Point { x: 10.00, y: 6.00 }),
                PathEl::CurveTo(
                    Point { x: 7.79, y: 6.00 },
                    Point { x: 6.00, y: 7.79 },
                    Point { x: 6.00, y: 10.00 },
                ),
                PathEl::LineTo(Point { x: 6.00, y: 38.00 }),
                PathEl::CurveTo(
                    Point { x: 6.00, y: 40.21 },
                    Point { x: 7.79, y: 42.00 },
                    Point { x: 10.00, y: 42.00 },
                ),
                PathEl::LineTo(Point { x: 38.00, y: 42.00 }),
                PathEl::CurveTo(
                    Point { x: 40.21, y: 42.00 },
                    Point { x: 42.00, y: 40.21 },
                    Point { x: 42.00, y: 38.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 17.00, y: 27.00 }),
                PathEl::LineTo(Point { x: 22.00, y: 33.01 }),
                PathEl::LineTo(Point { x: 29.00, y: 24.00 }),
                PathEl::LineTo(Point { x: 38.00, y: 36.00 }),
                PathEl::LineTo(Point { x: 10.00, y: 36.00 }),
                PathEl::LineTo(Point { x: 17.00, y: 27.00 }),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct PanTool {
    size: f64,
    color: Color,
}

impl PanTool {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for PanTool {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 46.00, y: 11.00 }),
                PathEl::LineTo(Point { x: 46.00, y: 40.00 }),
                PathEl::CurveTo(
                    Point { x: 46.00, y: 44.40 },
                    Point { x: 42.40, y: 48.00 },
                    Point { x: 38.00, y: 48.00 },
                ),
                PathEl::LineTo(Point { x: 23.40, y: 48.00 }),
                PathEl::CurveTo(
                    Point { x: 21.24, y: 48.00 },
                    Point { x: 19.20, y: 47.14 },
                    Point { x: 17.70, y: 45.62 },
                ),
                PathEl::LineTo(Point { x: 2.00, y: 29.66 }),
                PathEl::CurveTo(
                    Point { x: 2.00, y: 29.66 },
                    Point { x: 4.52, y: 27.20 },
                    Point { x: 4.60, y: 27.16 },
                ),
                PathEl::CurveTo(
                    Point { x: 5.04, y: 26.78 },
                    Point { x: 5.58, y: 26.58 },
                    Point { x: 6.18, y: 26.58 },
                ),
                PathEl::CurveTo(
                    Point { x: 6.62, y: 26.58 },
                    Point { x: 7.02, y: 26.70 },
                    Point { x: 7.38, y: 26.90 },
                ),
                PathEl::CurveTo(
                    Point { x: 7.46, y: 26.92 },
                    Point { x: 16.00, y: 31.82 },
                    Point { x: 16.00, y: 31.82 },
                ),
                PathEl::LineTo(Point { x: 16.00, y: 8.00 }),
                PathEl::CurveTo(
                    Point { x: 16.00, y: 6.34 },
                    Point { x: 17.34, y: 5.00 },
                    Point { x: 19.00, y: 5.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 20.66, y: 5.00 },
                    Point { x: 22.00, y: 6.34 },
                    Point { x: 22.00, y: 8.00 },
                ),
                PathEl::LineTo(Point { x: 22.00, y: 22.00 }),
                PathEl::LineTo(Point { x: 24.00, y: 22.00 }),
                PathEl::LineTo(Point { x: 24.00, y: 3.00 }),
                PathEl::CurveTo(
                    Point { x: 24.00, y: 1.34 },
                    Point { x: 25.34, y: 0.00 },
                    Point { x: 27.00, y: 0.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 28.66, y: 0.00 },
                    Point { x: 30.00, y: 1.34 },
                    Point { x: 30.00, y: 3.00 },
                ),
                PathEl::LineTo(Point { x: 30.00, y: 22.00 }),
                PathEl::LineTo(Point { x: 32.00, y: 22.00 }),
                PathEl::LineTo(Point { x: 32.00, y: 5.00 }),
                PathEl::CurveTo(
                    Point { x: 32.00, y: 3.34 },
                    Point { x: 33.34, y: 2.00 },
                    Point { x: 35.00, y: 2.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 36.66, y: 2.00 },
                    Point { x: 38.00, y: 3.34 },
                    Point { x: 38.00, y: 5.00 },
                ),
                PathEl::LineTo(Point { x: 38.00, y: 22.00 }),
                PathEl::LineTo(Point { x: 40.00, y: 22.00 }),
                PathEl::LineTo(Point { x: 40.00, y: 11.00 }),
                PathEl::CurveTo(
                    Point { x: 40.00, y: 9.34 },
                    Point { x: 41.34, y: 8.00 },
                    Point { x: 43.00, y: 8.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 44.66, y: 8.00 },
                    Point { x: 46.00, y: 9.34 },
                    Point { x: 46.00, y: 11.00 },
                ),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct TextFields {
    size: f64,
    color: Color,
}

impl TextFields {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for TextFields {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 5.00, y: 8.00 }),
                PathEl::LineTo(Point { x: 5.00, y: 14.00 }),
                PathEl::LineTo(Point { x: 15.00, y: 14.00 }),
                PathEl::LineTo(Point { x: 15.00, y: 38.00 }),
                PathEl::LineTo(Point { x: 21.00, y: 38.00 }),
                PathEl::LineTo(Point { x: 21.00, y: 14.00 }),
                PathEl::LineTo(Point { x: 31.00, y: 14.00 }),
                PathEl::LineTo(Point { x: 31.00, y: 8.00 }),
                PathEl::LineTo(Point { x: 5.00, y: 8.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 43.00, y: 18.00 }),
                PathEl::LineTo(Point { x: 25.00, y: 18.00 }),
                PathEl::LineTo(Point { x: 25.00, y: 24.00 }),
                PathEl::LineTo(Point { x: 31.00, y: 24.00 }),
                PathEl::LineTo(Point { x: 31.00, y: 38.00 }),
                PathEl::LineTo(Point { x: 37.00, y: 38.00 }),
                PathEl::LineTo(Point { x: 37.00, y: 24.00 }),
                PathEl::LineTo(Point { x: 43.00, y: 24.00 }),
                PathEl::LineTo(Point { x: 43.00, y: 18.00 }),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct CloudDownload {
    size: f64,
    color: Color,
}

impl CloudDownload {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for CloudDownload {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 38.71, y: 20.07 }),
                PathEl::CurveTo(
                    Point { x: 37.35, y: 13.19 },
                    Point { x: 31.28, y: 8.00 },
                    Point { x: 24.00, y: 8.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 18.22, y: 8.00 },
                    Point { x: 13.21, y: 11.28 },
                    Point { x: 10.70, y: 16.07 },
                ),
                PathEl::CurveTo(
                    Point { x: 4.69, y: 16.72 },
                    Point { x: 0.00, y: 21.81 },
                    Point { x: 0.00, y: 28.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 0.00, y: 34.63 },
                    Point { x: 5.37, y: 40.00 },
                    Point { x: 12.00, y: 40.00 },
                ),
                PathEl::LineTo(Point { x: 38.00, y: 40.00 }),
                PathEl::CurveTo(
                    Point { x: 43.52, y: 40.00 },
                    Point { x: 48.00, y: 35.52 },
                    Point { x: 48.00, y: 30.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 48.00, y: 24.72 },
                    Point { x: 43.89, y: 20.44 },
                    Point { x: 38.71, y: 20.07 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 34.00, y: 26.00 }),
                PathEl::LineTo(Point { x: 24.00, y: 36.00 }),
                PathEl::LineTo(Point { x: 14.00, y: 26.00 }),
                PathEl::LineTo(Point { x: 20.00, y: 26.00 }),
                PathEl::LineTo(Point { x: 20.00, y: 18.00 }),
                PathEl::LineTo(Point { x: 28.00, y: 18.00 }),
                PathEl::LineTo(Point { x: 28.00, y: 26.00 }),
                PathEl::LineTo(Point { x: 34.00, y: 26.00 }),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct Alarm {
    size: f64,
    color: Color,
}

impl Alarm {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for Alarm {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 44.00, y: 11.44 }),
                PathEl::LineTo(Point { x: 34.81, y: 3.73 }),
                PathEl::LineTo(Point { x: 32.24, y: 6.79 }),
                PathEl::LineTo(Point { x: 41.43, y: 14.50 }),
                PathEl::LineTo(Point { x: 44.00, y: 11.44 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 15.76, y: 6.78 }),
                PathEl::LineTo(Point { x: 13.19, y: 3.72 }),
                PathEl::LineTo(Point { x: 4.00, y: 11.43 }),
                PathEl::LineTo(Point { x: 6.57, y: 14.49 }),
                PathEl::LineTo(Point { x: 15.76, y: 6.78 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 25.00, y: 16.00 }),
                PathEl::LineTo(Point { x: 22.00, y: 16.00 }),
                PathEl::LineTo(Point { x: 22.00, y: 28.00 }),
                PathEl::LineTo(Point { x: 31.49, y: 33.71 }),
                PathEl::LineTo(Point { x: 33.00, y: 31.24 }),
                PathEl::LineTo(Point { x: 25.00, y: 26.50 }),
                PathEl::LineTo(Point { x: 25.00, y: 16.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 23.99, y: 8.00 }),
                PathEl::CurveTo(
                    Point { x: 14.04, y: 8.00 },
                    Point { x: 6.00, y: 16.06 },
                    Point { x: 6.00, y: 26.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 6.00, y: 35.94 },
                    Point { x: 14.04, y: 44.00 },
                    Point { x: 23.99, y: 44.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 33.94, y: 44.00 },
                    Point { x: 42.00, y: 35.94 },
                    Point { x: 42.00, y: 26.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 42.00, y: 16.06 },
                    Point { x: 33.94, y: 8.00 },
                    Point { x: 23.99, y: 8.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 24.00, y: 40.00 }),
                PathEl::CurveTo(
                    Point { x: 16.27, y: 40.00 },
                    Point { x: 10.00, y: 33.73 },
                    Point { x: 10.00, y: 26.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 10.00, y: 18.27 },
                    Point { x: 16.27, y: 12.00 },
                    Point { x: 24.00, y: 12.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 31.73, y: 12.00 },
                    Point { x: 38.00, y: 18.27 },
                    Point { x: 38.00, y: 26.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 38.00, y: 33.73 },
                    Point { x: 31.74, y: 40.00 },
                    Point { x: 24.00, y: 40.00 },
                ),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct LibraryBooks {
    size: f64,
    color: Color,
}

impl LibraryBooks {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for LibraryBooks {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 8.00, y: 12.00 }),
                PathEl::LineTo(Point { x: 4.00, y: 12.00 }),
                PathEl::LineTo(Point { x: 4.00, y: 40.00 }),
                PathEl::CurveTo(
                    Point { x: 4.00, y: 42.21 },
                    Point { x: 5.79, y: 44.00 },
                    Point { x: 8.00, y: 44.00 },
                ),
                PathEl::LineTo(Point { x: 36.00, y: 44.00 }),
                PathEl::LineTo(Point { x: 36.00, y: 40.00 }),
                PathEl::LineTo(Point { x: 8.00, y: 40.00 }),
                PathEl::LineTo(Point { x: 8.00, y: 12.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 40.00, y: 4.00 }),
                PathEl::LineTo(Point { x: 16.00, y: 4.00 }),
                PathEl::CurveTo(
                    Point { x: 13.79, y: 4.00 },
                    Point { x: 12.00, y: 5.79 },
                    Point { x: 12.00, y: 8.00 },
                ),
                PathEl::LineTo(Point { x: 12.00, y: 32.00 }),
                PathEl::CurveTo(
                    Point { x: 12.00, y: 34.21 },
                    Point { x: 13.79, y: 36.00 },
                    Point { x: 16.00, y: 36.00 },
                ),
                PathEl::LineTo(Point { x: 40.00, y: 36.00 }),
                PathEl::CurveTo(
                    Point { x: 42.21, y: 36.00 },
                    Point { x: 44.00, y: 34.21 },
                    Point { x: 44.00, y: 32.00 },
                ),
                PathEl::LineTo(Point { x: 44.00, y: 8.00 }),
                PathEl::CurveTo(
                    Point { x: 44.00, y: 5.79 },
                    Point { x: 42.21, y: 4.00 },
                    Point { x: 40.00, y: 4.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 38.00, y: 22.00 }),
                PathEl::LineTo(Point { x: 18.00, y: 22.00 }),
                PathEl::LineTo(Point { x: 18.00, y: 18.00 }),
                PathEl::LineTo(Point { x: 38.00, y: 18.00 }),
                PathEl::LineTo(Point { x: 38.00, y: 22.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 30.00, y: 30.00 }),
                PathEl::LineTo(Point { x: 18.00, y: 30.00 }),
                PathEl::LineTo(Point { x: 18.00, y: 26.00 }),
                PathEl::LineTo(Point { x: 30.00, y: 26.00 }),
                PathEl::LineTo(Point { x: 30.00, y: 30.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 38.00, y: 14.00 }),
                PathEl::LineTo(Point { x: 18.00, y: 14.00 }),
                PathEl::LineTo(Point { x: 18.00, y: 10.00 }),
                PathEl::LineTo(Point { x: 38.00, y: 10.00 }),
                PathEl::LineTo(Point { x: 38.00, y: 14.00 }),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct RemoveFromQueue {
    size: f64,
    color: Color,
}

impl RemoveFromQueue {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for RemoveFromQueue {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 42.00, y: 6.00 }),
                PathEl::LineTo(Point { x: 6.00, y: 6.00 }),
                PathEl::CurveTo(
                    Point { x: 3.79, y: 6.00 },
                    Point { x: 2.00, y: 7.79 },
                    Point { x: 2.00, y: 10.00 },
                ),
                PathEl::LineTo(Point { x: 2.00, y: 34.00 }),
                PathEl::CurveTo(
                    Point { x: 2.00, y: 36.21 },
                    Point { x: 3.79, y: 38.00 },
                    Point { x: 6.00, y: 38.00 },
                ),
                PathEl::LineTo(Point { x: 16.00, y: 38.00 }),
                PathEl::LineTo(Point { x: 16.00, y: 42.00 }),
                PathEl::LineTo(Point { x: 32.00, y: 42.00 }),
                PathEl::LineTo(Point { x: 32.00, y: 38.00 }),
                PathEl::LineTo(Point { x: 42.00, y: 38.00 }),
                PathEl::CurveTo(
                    Point { x: 44.21, y: 38.00 },
                    Point { x: 45.98, y: 36.21 },
                    Point { x: 45.98, y: 34.00 },
                ),
                PathEl::LineTo(Point { x: 46.00, y: 10.00 }),
                PathEl::CurveTo(
                    Point { x: 46.00, y: 7.79 },
                    Point { x: 44.21, y: 6.00 },
                    Point { x: 42.00, y: 6.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 42.00, y: 34.00 }),
                PathEl::LineTo(Point { x: 6.00, y: 34.00 }),
                PathEl::LineTo(Point { x: 6.00, y: 10.00 }),
                PathEl::LineTo(Point { x: 42.00, y: 10.00 }),
                PathEl::LineTo(Point { x: 42.00, y: 34.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 32.00, y: 20.00 }),
                PathEl::LineTo(Point { x: 32.00, y: 24.00 }),
                PathEl::LineTo(Point { x: 16.00, y: 24.00 }),
                PathEl::LineTo(Point { x: 16.00, y: 20.00 }),
                PathEl::LineTo(Point { x: 32.00, y: 20.00 }),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct Reply {
    size: f64,
    color: Color,
}

impl Reply {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for Reply {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 20.00, y: 18.00 }),
                PathEl::LineTo(Point { x: 20.00, y: 10.00 }),
                PathEl::LineTo(Point { x: 6.00, y: 24.00 }),
                PathEl::LineTo(Point { x: 20.00, y: 38.00 }),
                PathEl::LineTo(Point { x: 20.00, y: 29.80 }),
                PathEl::CurveTo(
                    Point { x: 30.00, y: 29.80 },
                    Point { x: 37.00, y: 33.00 },
                    Point { x: 42.00, y: 40.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 40.00, y: 30.00 },
                    Point { x: 34.00, y: 20.00 },
                    Point { x: 20.00, y: 18.00 },
                ),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct Security {
    size: f64,
    color: Color,
}

impl Security {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for Security {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 24.00, y: 2.00 }),
                PathEl::LineTo(Point { x: 6.00, y: 10.00 }),
                PathEl::LineTo(Point { x: 6.00, y: 22.00 }),
                PathEl::CurveTo(
                    Point { x: 6.00, y: 33.11 },
                    Point { x: 13.67, y: 43.47 },
                    Point { x: 24.00, y: 46.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 34.33, y: 43.47 },
                    Point { x: 42.00, y: 33.11 },
                    Point { x: 42.00, y: 22.00 },
                ),
                PathEl::LineTo(Point { x: 42.00, y: 10.00 }),
                PathEl::LineTo(Point { x: 24.00, y: 2.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 24.00, y: 23.98 }),
                PathEl::LineTo(Point { x: 38.00, y: 23.98 }),
                PathEl::CurveTo(
                    Point { x: 36.94, y: 32.22 },
                    Point { x: 31.45, y: 39.56 },
                    Point { x: 24.00, y: 41.85 },
                ),
                PathEl::LineTo(Point { x: 24.00, y: 24.00 }),
                PathEl::LineTo(Point { x: 10.00, y: 24.00 }),
                PathEl::LineTo(Point { x: 10.00, y: 12.60 }),
                PathEl::LineTo(Point { x: 24.00, y: 6.38 }),
                PathEl::LineTo(Point { x: 24.00, y: 23.98 }),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct PowerInput {
    size: f64,
    color: Color,
}

impl PowerInput {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for PowerInput {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 5.00, y: 18.00 }),
                PathEl::LineTo(Point { x: 5.00, y: 22.00 }),
                PathEl::LineTo(Point { x: 43.00, y: 22.00 }),
                PathEl::LineTo(Point { x: 43.00, y: 18.00 }),
                PathEl::LineTo(Point { x: 5.00, y: 18.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 5.00, y: 30.00 }),
                PathEl::LineTo(Point { x: 15.00, y: 30.00 }),
                PathEl::LineTo(Point { x: 15.00, y: 26.00 }),
                PathEl::LineTo(Point { x: 5.00, y: 26.00 }),
                PathEl::LineTo(Point { x: 5.00, y: 30.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 19.00, y: 30.00 }),
                PathEl::LineTo(Point { x: 29.00, y: 30.00 }),
                PathEl::LineTo(Point { x: 29.00, y: 26.00 }),
                PathEl::LineTo(Point { x: 19.00, y: 26.00 }),
                PathEl::LineTo(Point { x: 19.00, y: 30.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 33.00, y: 30.00 }),
                PathEl::LineTo(Point { x: 43.00, y: 30.00 }),
                PathEl::LineTo(Point { x: 43.00, y: 26.00 }),
                PathEl::LineTo(Point { x: 33.00, y: 26.00 }),
                PathEl::LineTo(Point { x: 33.00, y: 30.00 }),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct CropDin {
    size: f64,
    color: Color,
}

impl CropDin {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for CropDin {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 38.00, y: 6.00 }),
                PathEl::LineTo(Point { x: 10.00, y: 6.00 }),
                PathEl::CurveTo(
                    Point { x: 7.79, y: 6.00 },
                    Point { x: 6.00, y: 7.79 },
                    Point { x: 6.00, y: 10.00 },
                ),
                PathEl::LineTo(Point { x: 6.00, y: 38.00 }),
                PathEl::CurveTo(
                    Point { x: 6.00, y: 40.21 },
                    Point { x: 7.79, y: 42.00 },
                    Point { x: 10.00, y: 42.00 },
                ),
                PathEl::LineTo(Point { x: 38.00, y: 42.00 }),
                PathEl::CurveTo(
                    Point { x: 40.21, y: 42.00 },
                    Point { x: 42.00, y: 40.21 },
                    Point { x: 42.00, y: 38.00 },
                ),
                PathEl::LineTo(Point { x: 42.00, y: 10.00 }),
                PathEl::CurveTo(
                    Point { x: 42.00, y: 7.79 },
                    Point { x: 40.21, y: 6.00 },
                    Point { x: 38.00, y: 6.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 38.00, y: 38.00 }),
                PathEl::LineTo(Point { x: 10.00, y: 38.00 }),
                PathEl::LineTo(Point { x: 10.00, y: 10.00 }),
                PathEl::LineTo(Point { x: 38.00, y: 10.00 }),
                PathEl::LineTo(Point { x: 38.00, y: 38.00 }),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct Notifications {
    size: f64,
    color: Color,
}

impl Notifications {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for Notifications {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 24.00, y: 44.00 }),
                PathEl::CurveTo(
                    Point { x: 26.21, y: 44.00 },
                    Point { x: 28.00, y: 42.21 },
                    Point { x: 28.00, y: 40.00 },
                ),
                PathEl::LineTo(Point { x: 20.00, y: 40.00 }),
                PathEl::CurveTo(
                    Point { x: 20.00, y: 42.21 },
                    Point { x: 21.79, y: 44.00 },
                    Point { x: 24.00, y: 44.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 36.00, y: 32.00 }),
                PathEl::LineTo(Point { x: 36.00, y: 22.00 }),
                PathEl::CurveTo(
                    Point { x: 36.00, y: 15.85 },
                    Point { x: 32.73, y: 10.72 },
                    Point { x: 27.00, y: 9.36 },
                ),
                PathEl::LineTo(Point { x: 27.00, y: 8.00 }),
                PathEl::CurveTo(
                    Point { x: 27.00, y: 6.34 },
                    Point { x: 25.66, y: 5.00 },
                    Point { x: 24.00, y: 5.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 22.34, y: 5.00 },
                    Point { x: 21.00, y: 6.34 },
                    Point { x: 21.00, y: 8.00 },
                ),
                PathEl::LineTo(Point { x: 21.00, y: 9.36 }),
                PathEl::CurveTo(
                    Point { x: 15.27, y: 10.72 },
                    Point { x: 12.00, y: 15.85 },
                    Point { x: 12.00, y: 22.00 },
                ),
                PathEl::LineTo(Point { x: 12.00, y: 32.00 }),
                PathEl::LineTo(Point { x: 8.00, y: 36.00 }),
                PathEl::LineTo(Point { x: 8.00, y: 38.00 }),
                PathEl::LineTo(Point { x: 40.00, y: 38.00 }),
                PathEl::LineTo(Point { x: 40.00, y: 36.00 }),
                PathEl::LineTo(Point { x: 36.00, y: 32.00 }),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct StarHalf {
    size: f64,
    color: Color,
}

impl StarHalf {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for StarHalf {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 44.00, y: 18.48 }),
                PathEl::LineTo(Point { x: 29.62, y: 17.24 }),
                PathEl::LineTo(Point { x: 24.00, y: 4.00 }),
                PathEl::LineTo(Point { x: 18.38, y: 17.26 }),
                PathEl::LineTo(Point { x: 4.00, y: 18.48 }),
                PathEl::LineTo(Point { x: 14.92, y: 27.94 }),
                PathEl::LineTo(Point { x: 11.64, y: 42.00 }),
                PathEl::LineTo(Point { x: 24.00, y: 34.54 }),
                PathEl::LineTo(Point { x: 36.36, y: 42.00 }),
                PathEl::LineTo(Point { x: 33.10, y: 27.94 }),
                PathEl::LineTo(Point { x: 44.00, y: 18.48 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 24.00, y: 30.80 }),
                PathEl::LineTo(Point { x: 24.00, y: 12.20 }),
                PathEl::LineTo(Point { x: 27.42, y: 20.28 }),
                PathEl::LineTo(Point { x: 36.18, y: 21.04 }),
                PathEl::LineTo(Point { x: 29.54, y: 26.80 }),
                PathEl::LineTo(Point { x: 31.54, y: 35.36 }),
                PathEl::LineTo(Point { x: 24.00, y: 30.80 }),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct PlayForWork {
    size: f64,
    color: Color,
}

impl PlayForWork {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for PlayForWork {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 22.00, y: 10.00 }),
                PathEl::LineTo(Point { x: 22.00, y: 21.17 }),
                PathEl::LineTo(Point { x: 15.00, y: 21.17 }),
                PathEl::LineTo(Point { x: 24.00, y: 30.17 }),
                PathEl::LineTo(Point { x: 33.00, y: 21.17 }),
                PathEl::LineTo(Point { x: 26.00, y: 21.17 }),
                PathEl::LineTo(Point { x: 26.00, y: 10.00 }),
                PathEl::LineTo(Point { x: 22.00, y: 10.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 12.00, y: 28.00 }),
                PathEl::CurveTo(
                    Point { x: 12.00, y: 34.62 },
                    Point { x: 17.38, y: 40.00 },
                    Point { x: 24.00, y: 40.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 30.62, y: 40.00 },
                    Point { x: 36.00, y: 34.62 },
                    Point { x: 36.00, y: 28.00 },
                ),
                PathEl::LineTo(Point { x: 32.00, y: 28.00 }),
                PathEl::CurveTo(
                    Point { x: 32.00, y: 32.42 },
                    Point { x: 28.42, y: 36.00 },
                    Point { x: 24.00, y: 36.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 19.58, y: 36.00 },
                    Point { x: 16.00, y: 32.42 },
                    Point { x: 16.00, y: 28.00 },
                ),
                PathEl::LineTo(Point { x: 12.00, y: 28.00 }),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct SentimentNeutral {
    size: f64,
    color: Color,
}

impl SentimentNeutral {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for SentimentNeutral {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 18.00, y: 28.00 }),
                PathEl::LineTo(Point { x: 30.00, y: 28.00 }),
                PathEl::LineTo(Point { x: 30.00, y: 31.00 }),
                PathEl::LineTo(Point { x: 18.00, y: 31.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 31.00, y: 16.00 }),
                PathEl::CurveTo(
                    Point { x: 29.34, y: 16.00 },
                    Point { x: 28.00, y: 17.34 },
                    Point { x: 28.00, y: 19.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 28.00, y: 20.66 },
                    Point { x: 29.34, y: 22.00 },
                    Point { x: 31.00, y: 22.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 32.66, y: 22.00 },
                    Point { x: 34.00, y: 20.66 },
                    Point { x: 34.00, y: 19.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 34.00, y: 17.34 },
                    Point { x: 32.66, y: 16.00 },
                    Point { x: 31.00, y: 16.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 20.00, y: 19.00 }),
                PathEl::CurveTo(
                    Point { x: 20.00, y: 17.34 },
                    Point { x: 18.66, y: 16.00 },
                    Point { x: 17.00, y: 16.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 15.34, y: 16.00 },
                    Point { x: 14.00, y: 17.34 },
                    Point { x: 14.00, y: 19.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 14.00, y: 20.66 },
                    Point { x: 15.34, y: 22.00 },
                    Point { x: 17.00, y: 22.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 18.66, y: 22.00 },
                    Point { x: 20.00, y: 20.66 },
                    Point { x: 20.00, y: 19.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 23.98, y: 4.00 }),
                PathEl::CurveTo(
                    Point { x: 12.94, y: 4.00 },
                    Point { x: 4.00, y: 12.96 },
                    Point { x: 4.00, y: 24.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 4.00, y: 35.04 },
                    Point { x: 12.94, y: 44.00 },
                    Point { x: 23.98, y: 44.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 35.04, y: 44.00 },
                    Point { x: 44.00, y: 35.04 },
                    Point { x: 44.00, y: 24.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 44.00, y: 12.96 },
                    Point { x: 35.04, y: 4.00 },
                    Point { x: 23.98, y: 4.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 24.00, y: 40.00 }),
                PathEl::CurveTo(
                    Point { x: 15.16, y: 40.00 },
                    Point { x: 8.00, y: 32.84 },
                    Point { x: 8.00, y: 24.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 8.00, y: 15.16 },
                    Point { x: 15.16, y: 8.00 },
                    Point { x: 24.00, y: 8.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 32.84, y: 8.00 },
                    Point { x: 40.00, y: 15.16 },
                    Point { x: 40.00, y: 24.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 40.00, y: 32.84 },
                    Point { x: 32.84, y: 40.00 },
                    Point { x: 24.00, y: 40.00 },
                ),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct ImportContacts {
    size: f64,
    color: Color,
}

impl ImportContacts {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for ImportContacts {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 42.00, y: 10.00 }),
                PathEl::CurveTo(
                    Point { x: 39.79, y: 9.30 },
                    Point { x: 37.34, y: 9.00 },
                    Point { x: 35.00, y: 9.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 31.10, y: 9.00 },
                    Point { x: 26.90, y: 9.80 },
                    Point { x: 24.00, y: 12.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 21.10, y: 9.80 },
                    Point { x: 16.90, y: 9.00 },
                    Point { x: 13.00, y: 9.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 9.10, y: 9.00 },
                    Point { x: 4.90, y: 9.80 },
                    Point { x: 2.00, y: 12.00 },
                ),
                PathEl::LineTo(Point { x: 2.00, y: 41.30 }),
                PathEl::CurveTo(
                    Point { x: 2.00, y: 41.80 },
                    Point { x: 2.50, y: 42.30 },
                    Point { x: 3.00, y: 42.30 },
                ),
                PathEl::CurveTo(
                    Point { x: 3.20, y: 42.30 },
                    Point { x: 3.30, y: 42.20 },
                    Point { x: 3.50, y: 42.20 },
                ),
                PathEl::CurveTo(
                    Point { x: 6.20, y: 40.90 },
                    Point { x: 10.10, y: 40.00 },
                    Point { x: 13.00, y: 40.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 16.90, y: 40.00 },
                    Point { x: 21.10, y: 40.80 },
                    Point { x: 24.00, y: 43.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 26.70, y: 41.30 },
                    Point { x: 31.60, y: 40.00 },
                    Point { x: 35.00, y: 40.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 38.30, y: 40.00 },
                    Point { x: 41.70, y: 40.60 },
                    Point { x: 44.50, y: 42.10 },
                ),
                PathEl::CurveTo(
                    Point { x: 44.70, y: 42.20 },
                    Point { x: 44.80, y: 42.20 },
                    Point { x: 45.00, y: 42.20 },
                ),
                PathEl::CurveTo(
                    Point { x: 45.50, y: 42.20 },
                    Point { x: 46.00, y: 41.70 },
                    Point { x: 46.00, y: 41.20 },
                ),
                PathEl::LineTo(Point { x: 46.00, y: 12.00 }),
                PathEl::CurveTo(
                    Point { x: 44.80, y: 11.10 },
                    Point { x: 43.50, y: 10.50 },
                    Point { x: 42.00, y: 10.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 42.00, y: 37.00 }),
                PathEl::CurveTo(
                    Point { x: 39.80, y: 36.30 },
                    Point { x: 37.40, y: 36.00 },
                    Point { x: 35.00, y: 36.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 31.60, y: 36.00 },
                    Point { x: 26.70, y: 37.30 },
                    Point { x: 24.00, y: 39.00 },
                ),
                PathEl::LineTo(Point { x: 24.00, y: 16.00 }),
                PathEl::CurveTo(
                    Point { x: 26.70, y: 14.30 },
                    Point { x: 31.60, y: 13.00 },
                    Point { x: 35.00, y: 13.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 37.40, y: 13.00 },
                    Point { x: 39.80, y: 13.30 },
                    Point { x: 42.00, y: 14.00 },
                ),
                PathEl::LineTo(Point { x: 42.00, y: 37.00 }),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct FilterVintage {
    size: f64,
    color: Color,
}

impl FilterVintage {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for FilterVintage {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 37.39, y: 24.80 }),
                PathEl::CurveTo(
                    Point { x: 36.83, y: 24.48 },
                    Point { x: 36.25, y: 24.22 },
                    Point { x: 35.67, y: 24.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 36.25, y: 23.78 },
                    Point { x: 36.83, y: 23.52 },
                    Point { x: 37.39, y: 23.20 },
                ),
                PathEl::CurveTo(
                    Point { x: 41.23, y: 20.98 },
                    Point { x: 43.37, y: 16.95 },
                    Point { x: 43.38, y: 12.81 },
                ),
                PathEl::CurveTo(
                    Point { x: 39.79, y: 10.75 },
                    Point { x: 35.23, y: 10.59 },
                    Point { x: 31.39, y: 12.81 },
                ),
                PathEl::CurveTo(
                    Point { x: 30.83, y: 13.13 },
                    Point { x: 30.32, y: 13.50 },
                    Point { x: 29.83, y: 13.90 },
                ),
                PathEl::CurveTo(
                    Point { x: 29.93, y: 13.27 },
                    Point { x: 30.00, y: 12.65 },
                    Point { x: 30.00, y: 12.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 30.00, y: 7.56 },
                    Point { x: 27.58, y: 3.69 },
                    Point { x: 24.00, y: 1.62 },
                ),
                PathEl::CurveTo(
                    Point { x: 20.42, y: 3.69 },
                    Point { x: 18.00, y: 7.56 },
                    Point { x: 18.00, y: 12.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 18.00, y: 12.65 },
                    Point { x: 18.06, y: 13.27 },
                    Point { x: 18.16, y: 13.89 },
                ),
                PathEl::CurveTo(
                    Point { x: 17.67, y: 13.50 },
                    Point { x: 17.16, y: 13.13 },
                    Point { x: 16.60, y: 12.80 },
                ),
                PathEl::CurveTo(
                    Point { x: 12.76, y: 10.58 },
                    Point { x: 8.20, y: 10.74 },
                    Point { x: 4.61, y: 12.80 },
                ),
                PathEl::CurveTo(
                    Point { x: 4.62, y: 16.94 },
                    Point { x: 6.76, y: 20.97 },
                    Point { x: 10.60, y: 23.19 },
                ),
                PathEl::CurveTo(
                    Point { x: 11.16, y: 23.51 },
                    Point { x: 11.74, y: 23.77 },
                    Point { x: 12.32, y: 23.99 },
                ),
                PathEl::CurveTo(
                    Point { x: 11.74, y: 24.21 },
                    Point { x: 11.16, y: 24.47 },
                    Point { x: 10.60, y: 24.79 },
                ),
                PathEl::CurveTo(
                    Point { x: 6.76, y: 27.01 },
                    Point { x: 4.62, y: 31.04 },
                    Point { x: 4.61, y: 35.18 },
                ),
                PathEl::CurveTo(
                    Point { x: 8.20, y: 37.24 },
                    Point { x: 12.76, y: 37.40 },
                    Point { x: 16.60, y: 35.18 },
                ),
                PathEl::CurveTo(
                    Point { x: 17.16, y: 34.86 },
                    Point { x: 17.67, y: 34.49 },
                    Point { x: 18.16, y: 34.09 },
                ),
                PathEl::CurveTo(
                    Point { x: 18.07, y: 34.73 },
                    Point { x: 18.00, y: 35.35 },
                    Point { x: 18.00, y: 36.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 18.00, y: 40.44 },
                    Point { x: 20.42, y: 44.31 },
                    Point { x: 24.00, y: 46.38 },
                ),
                PathEl::CurveTo(
                    Point { x: 27.58, y: 44.30 },
                    Point { x: 30.00, y: 40.44 },
                    Point { x: 30.00, y: 36.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 30.00, y: 35.35 },
                    Point { x: 29.93, y: 34.73 },
                    Point { x: 29.84, y: 34.11 },
                ),
                PathEl::CurveTo(
                    Point { x: 30.33, y: 34.50 },
                    Point { x: 30.84, y: 34.87 },
                    Point { x: 31.40, y: 35.20 },
                ),
                PathEl::CurveTo(
                    Point { x: 35.24, y: 37.42 },
                    Point { x: 39.80, y: 37.26 },
                    Point { x: 43.39, y: 35.20 },
                ),
                PathEl::CurveTo(
                    Point { x: 43.38, y: 31.05 },
                    Point { x: 41.24, y: 27.02 },
                    Point { x: 37.39, y: 24.80 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 24.00, y: 32.00 }),
                PathEl::CurveTo(
                    Point { x: 19.58, y: 32.00 },
                    Point { x: 16.00, y: 28.42 },
                    Point { x: 16.00, y: 24.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 16.00, y: 19.58 },
                    Point { x: 19.58, y: 16.00 },
                    Point { x: 24.00, y: 16.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 28.42, y: 16.00 },
                    Point { x: 32.00, y: 19.58 },
                    Point { x: 32.00, y: 24.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 32.00, y: 28.42 },
                    Point { x: 28.42, y: 32.00 },
                    Point { x: 24.00, y: 32.00 },
                ),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct LocalAirport {
    size: f64,
    color: Color,
}

impl LocalAirport {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for LocalAirport {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 42.00, y: 32.00 }),
                PathEl::LineTo(Point { x: 42.00, y: 28.00 }),
                PathEl::LineTo(Point { x: 26.00, y: 18.00 }),
                PathEl::LineTo(Point { x: 26.00, y: 7.00 }),
                PathEl::CurveTo(
                    Point { x: 26.00, y: 5.34 },
                    Point { x: 24.66, y: 4.00 },
                    Point { x: 23.00, y: 4.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 21.34, y: 4.00 },
                    Point { x: 20.00, y: 5.34 },
                    Point { x: 20.00, y: 7.00 },
                ),
                PathEl::LineTo(Point { x: 20.00, y: 18.00 }),
                PathEl::LineTo(Point { x: 4.00, y: 28.00 }),
                PathEl::LineTo(Point { x: 4.00, y: 32.00 }),
                PathEl::LineTo(Point { x: 20.00, y: 27.00 }),
                PathEl::LineTo(Point { x: 20.00, y: 38.00 }),
                PathEl::LineTo(Point { x: 16.00, y: 41.00 }),
                PathEl::LineTo(Point { x: 16.00, y: 44.00 }),
                PathEl::LineTo(Point { x: 23.00, y: 42.00 }),
                PathEl::LineTo(Point { x: 30.00, y: 44.00 }),
                PathEl::LineTo(Point { x: 30.00, y: 41.00 }),
                PathEl::LineTo(Point { x: 26.00, y: 38.00 }),
                PathEl::LineTo(Point { x: 26.00, y: 27.00 }),
                PathEl::LineTo(Point { x: 42.00, y: 32.00 }),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct CloudOff {
    size: f64,
    color: Color,
}

impl CloudOff {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for CloudOff {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 38.71, y: 20.07 }),
                PathEl::CurveTo(
                    Point { x: 37.35, y: 13.19 },
                    Point { x: 31.28, y: 8.00 },
                    Point { x: 24.00, y: 8.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 21.05, y: 8.00 },
                    Point { x: 18.30, y: 8.87 },
                    Point { x: 15.98, y: 10.34 },
                ),
                PathEl::LineTo(Point { x: 18.90, y: 13.26 }),
                PathEl::CurveTo(
                    Point { x: 20.43, y: 12.47 },
                    Point { x: 22.16, y: 12.00 },
                    Point { x: 24.00, y: 12.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 30.08, y: 12.00 },
                    Point { x: 35.00, y: 16.92 },
                    Point { x: 35.00, y: 23.00 },
                ),
                PathEl::LineTo(Point { x: 35.00, y: 24.00 }),
                PathEl::LineTo(Point { x: 38.00, y: 24.00 }),
                PathEl::CurveTo(
                    Point { x: 41.31, y: 24.00 },
                    Point { x: 44.00, y: 26.69 },
                    Point { x: 44.00, y: 30.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 44.00, y: 32.27 },
                    Point { x: 42.73, y: 34.22 },
                    Point { x: 40.87, y: 35.24 },
                ),
                PathEl::LineTo(Point { x: 43.77, y: 38.14 }),
                PathEl::CurveTo(
                    Point { x: 46.32, y: 36.33 },
                    Point { x: 48.00, y: 33.37 },
                    Point { x: 48.00, y: 30.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 48.00, y: 24.72 },
                    Point { x: 43.89, y: 20.44 },
                    Point { x: 38.71, y: 20.07 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 6.00, y: 10.55 }),
                PathEl::LineTo(Point { x: 11.50, y: 16.03 }),
                PathEl::CurveTo(
                    Point { x: 5.12, y: 16.30 },
                    Point { x: 0.00, y: 21.55 },
                    Point { x: 0.00, y: 28.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 0.00, y: 34.63 },
                    Point { x: 5.37, y: 40.00 },
                    Point { x: 12.00, y: 40.00 },
                ),
                PathEl::LineTo(Point { x: 35.45, y: 40.00 }),
                PathEl::LineTo(Point { x: 39.45, y: 44.00 }),
                PathEl::LineTo(Point { x: 42.00, y: 41.46 }),
                PathEl::LineTo(Point { x: 8.55, y: 8.00 }),
                PathEl::LineTo(Point { x: 6.00, y: 10.55 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 15.45, y: 20.00 }),
                PathEl::LineTo(Point { x: 31.45, y: 36.00 }),
                PathEl::LineTo(Point { x: 12.00, y: 36.00 }),
                PathEl::CurveTo(
                    Point { x: 7.58, y: 36.00 },
                    Point { x: 4.00, y: 32.42 },
                    Point { x: 4.00, y: 28.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 4.00, y: 23.58 },
                    Point { x: 7.58, y: 20.00 },
                    Point { x: 12.00, y: 20.00 },
                ),
                PathEl::LineTo(Point { x: 15.45, y: 20.00 }),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct PhonePaused {
    size: f64,
    color: Color,
}

impl PhonePaused {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for PhonePaused {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 34.00, y: 6.00 }),
                PathEl::LineTo(Point { x: 30.00, y: 6.00 }),
                PathEl::LineTo(Point { x: 30.00, y: 20.00 }),
                PathEl::LineTo(Point { x: 34.00, y: 20.00 }),
                PathEl::LineTo(Point { x: 34.00, y: 6.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 40.00, y: 31.00 }),
                PathEl::CurveTo(
                    Point { x: 37.51, y: 31.00 },
                    Point { x: 35.11, y: 30.60 },
                    Point { x: 32.86, y: 29.86 },
                ),
                PathEl::CurveTo(
                    Point { x: 32.17, y: 29.64 },
                    Point { x: 31.38, y: 29.80 },
                    Point { x: 30.83, y: 30.35 },
                ),
                PathEl::LineTo(Point { x: 26.43, y: 34.76 }),
                PathEl::CurveTo(
                    Point { x: 20.76, y: 31.88 },
                    Point { x: 16.14, y: 27.25 },
                    Point { x: 13.25, y: 21.59 },
                ),
                PathEl::LineTo(Point { x: 17.65, y: 17.18 }),
                PathEl::CurveTo(
                    Point { x: 18.20, y: 16.63 },
                    Point { x: 18.36, y: 15.84 },
                    Point { x: 18.14, y: 15.15 },
                ),
                PathEl::CurveTo(
                    Point { x: 17.40, y: 12.90 },
                    Point { x: 17.00, y: 10.49 },
                    Point { x: 17.00, y: 8.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 17.00, y: 6.89 },
                    Point { x: 16.11, y: 6.00 },
                    Point { x: 15.00, y: 6.00 },
                ),
                PathEl::LineTo(Point { x: 8.00, y: 6.00 }),
                PathEl::CurveTo(
                    Point { x: 6.89, y: 6.00 },
                    Point { x: 6.00, y: 6.89 },
                    Point { x: 6.00, y: 8.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 6.00, y: 26.78 },
                    Point { x: 21.22, y: 42.00 },
                    Point { x: 40.00, y: 42.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 41.11, y: 42.00 },
                    Point { x: 42.00, y: 41.11 },
                    Point { x: 42.00, y: 40.00 },
                ),
                PathEl::LineTo(Point { x: 42.00, y: 33.00 }),
                PathEl::CurveTo(
                    Point { x: 42.00, y: 31.89 },
                    Point { x: 41.11, y: 31.00 },
                    Point { x: 40.00, y: 31.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 38.00, y: 6.00 }),
                PathEl::LineTo(Point { x: 38.00, y: 20.00 }),
                PathEl::LineTo(Point { x: 42.00, y: 20.00 }),
                PathEl::LineTo(Point { x: 42.00, y: 6.00 }),
                PathEl::LineTo(Point { x: 38.00, y: 6.00 }),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct AirlineSeatFlatAngled {
    size: f64,
    color: Color,
}

impl AirlineSeatFlatAngled {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for AirlineSeatFlatAngled {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 44.51, y: 28.57 }),
                PathEl::LineTo(Point { x: 43.13, y: 32.34 }),
                PathEl::LineTo(Point { x: 18.40, y: 23.42 }),
                PathEl::LineTo(Point { x: 22.55, y: 12.11 }),
                PathEl::LineTo(Point { x: 39.67, y: 18.29 }),
                PathEl::CurveTo(
                    Point { x: 43.87, y: 19.80 },
                    Point { x: 46.04, y: 24.41 },
                    Point { x: 44.51, y: 28.57 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 3.00, y: 24.27 }),
                PathEl::LineTo(Point { x: 16.00, y: 28.96 }),
                PathEl::LineTo(Point { x: 16.00, y: 38.00 }),
                PathEl::LineTo(Point { x: 32.00, y: 38.00 }),
                PathEl::LineTo(Point { x: 32.00, y: 34.74 }),
                PathEl::LineTo(Point { x: 41.05, y: 38.00 }),
                PathEl::LineTo(Point { x: 42.43, y: 34.23 }),
                PathEl::LineTo(Point { x: 4.38, y: 20.50 }),
                PathEl::LineTo(Point { x: 3.00, y: 24.27 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 14.59, y: 20.41 }),
                PathEl::CurveTo(
                    Point { x: 17.58, y: 18.98 },
                    Point { x: 18.84, y: 15.40 },
                    Point { x: 17.41, y: 12.41 },
                ),
                PathEl::CurveTo(
                    Point { x: 15.98, y: 9.42 },
                    Point { x: 12.40, y: 8.16 },
                    Point { x: 9.41, y: 9.59 },
                ),
                PathEl::CurveTo(
                    Point { x: 6.42, y: 11.02 },
                    Point { x: 5.16, y: 14.60 },
                    Point { x: 6.59, y: 17.59 },
                ),
                PathEl::CurveTo(
                    Point { x: 8.02, y: 20.58 },
                    Point { x: 11.60, y: 21.84 },
                    Point { x: 14.59, y: 20.41 },
                ),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct TurnedInNot {
    size: f64,
    color: Color,
}

impl TurnedInNot {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for TurnedInNot {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 34.00, y: 6.00 }),
                PathEl::LineTo(Point { x: 14.00, y: 6.00 }),
                PathEl::CurveTo(
                    Point { x: 11.79, y: 6.00 },
                    Point { x: 10.02, y: 7.79 },
                    Point { x: 10.02, y: 10.00 },
                ),
                PathEl::LineTo(Point { x: 10.00, y: 42.00 }),
                PathEl::LineTo(Point { x: 24.00, y: 36.00 }),
                PathEl::LineTo(Point { x: 38.00, y: 42.00 }),
                PathEl::LineTo(Point { x: 38.00, y: 10.00 }),
                PathEl::CurveTo(
                    Point { x: 38.00, y: 7.79 },
                    Point { x: 36.21, y: 6.00 },
                    Point { x: 34.00, y: 6.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 34.00, y: 36.00 }),
                PathEl::LineTo(Point { x: 24.00, y: 31.65 }),
                PathEl::LineTo(Point { x: 14.00, y: 36.00 }),
                PathEl::LineTo(Point { x: 14.00, y: 10.00 }),
                PathEl::LineTo(Point { x: 34.00, y: 10.00 }),
                PathEl::LineTo(Point { x: 34.00, y: 36.00 }),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct SettingsCell {
    size: f64,
    color: Color,
}

impl SettingsCell {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for SettingsCell {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 14.00, y: 48.00 }),
                PathEl::LineTo(Point { x: 18.00, y: 48.00 }),
                PathEl::LineTo(Point { x: 18.00, y: 44.00 }),
                PathEl::LineTo(Point { x: 14.00, y: 44.00 }),
                PathEl::LineTo(Point { x: 14.00, y: 48.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 22.00, y: 48.00 }),
                PathEl::LineTo(Point { x: 26.00, y: 48.00 }),
                PathEl::LineTo(Point { x: 26.00, y: 44.00 }),
                PathEl::LineTo(Point { x: 22.00, y: 44.00 }),
                PathEl::LineTo(Point { x: 22.00, y: 48.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 30.00, y: 48.00 }),
                PathEl::LineTo(Point { x: 34.00, y: 48.00 }),
                PathEl::LineTo(Point { x: 34.00, y: 44.00 }),
                PathEl::LineTo(Point { x: 30.00, y: 44.00 }),
                PathEl::LineTo(Point { x: 30.00, y: 48.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 32.00, y: 0.02 }),
                PathEl::LineTo(Point { x: 16.00, y: 0.00 }),
                PathEl::CurveTo(
                    Point { x: 13.79, y: 0.00 },
                    Point { x: 12.00, y: 1.79 },
                    Point { x: 12.00, y: 4.00 },
                ),
                PathEl::LineTo(Point { x: 12.00, y: 36.00 }),
                PathEl::CurveTo(
                    Point { x: 12.00, y: 38.21 },
                    Point { x: 13.79, y: 40.00 },
                    Point { x: 16.00, y: 40.00 },
                ),
                PathEl::LineTo(Point { x: 32.00, y: 40.00 }),
                PathEl::CurveTo(
                    Point { x: 34.21, y: 40.00 },
                    Point { x: 36.00, y: 38.21 },
                    Point { x: 36.00, y: 36.00 },
                ),
                PathEl::LineTo(Point { x: 36.00, y: 4.00 }),
                PathEl::CurveTo(
                    Point { x: 36.00, y: 1.79 },
                    Point { x: 34.21, y: 0.02 },
                    Point { x: 32.00, y: 0.02 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 32.00, y: 32.00 }),
                PathEl::LineTo(Point { x: 16.00, y: 32.00 }),
                PathEl::LineTo(Point { x: 16.00, y: 8.00 }),
                PathEl::LineTo(Point { x: 32.00, y: 8.00 }),
                PathEl::LineTo(Point { x: 32.00, y: 32.00 }),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct EventNote {
    size: f64,
    color: Color,
}

impl EventNote {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for EventNote {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 34.00, y: 20.00 }),
                PathEl::LineTo(Point { x: 14.00, y: 20.00 }),
                PathEl::LineTo(Point { x: 14.00, y: 24.00 }),
                PathEl::LineTo(Point { x: 34.00, y: 24.00 }),
                PathEl::LineTo(Point { x: 34.00, y: 20.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 38.00, y: 6.00 }),
                PathEl::LineTo(Point { x: 36.00, y: 6.00 }),
                PathEl::LineTo(Point { x: 36.00, y: 2.00 }),
                PathEl::LineTo(Point { x: 32.00, y: 2.00 }),
                PathEl::LineTo(Point { x: 32.00, y: 6.00 }),
                PathEl::LineTo(Point { x: 16.00, y: 6.00 }),
                PathEl::LineTo(Point { x: 16.00, y: 2.00 }),
                PathEl::LineTo(Point { x: 12.00, y: 2.00 }),
                PathEl::LineTo(Point { x: 12.00, y: 6.00 }),
                PathEl::LineTo(Point { x: 10.00, y: 6.00 }),
                PathEl::CurveTo(
                    Point { x: 7.79, y: 6.00 },
                    Point { x: 6.02, y: 7.79 },
                    Point { x: 6.02, y: 10.00 },
                ),
                PathEl::LineTo(Point { x: 6.00, y: 38.00 }),
                PathEl::CurveTo(
                    Point { x: 6.00, y: 40.21 },
                    Point { x: 7.79, y: 42.00 },
                    Point { x: 10.00, y: 42.00 },
                ),
                PathEl::LineTo(Point { x: 38.00, y: 42.00 }),
                PathEl::CurveTo(
                    Point { x: 40.21, y: 42.00 },
                    Point { x: 42.00, y: 40.21 },
                    Point { x: 42.00, y: 38.00 },
                ),
                PathEl::LineTo(Point { x: 42.00, y: 10.00 }),
                PathEl::CurveTo(
                    Point { x: 42.00, y: 7.79 },
                    Point { x: 40.21, y: 6.00 },
                    Point { x: 38.00, y: 6.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 38.00, y: 38.00 }),
                PathEl::LineTo(Point { x: 10.00, y: 38.00 }),
                PathEl::LineTo(Point { x: 10.00, y: 16.00 }),
                PathEl::LineTo(Point { x: 38.00, y: 16.00 }),
                PathEl::LineTo(Point { x: 38.00, y: 38.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 28.00, y: 28.00 }),
                PathEl::LineTo(Point { x: 14.00, y: 28.00 }),
                PathEl::LineTo(Point { x: 14.00, y: 32.00 }),
                PathEl::LineTo(Point { x: 28.00, y: 32.00 }),
                PathEl::LineTo(Point { x: 28.00, y: 28.00 }),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct StrikethroughS {
    size: f64,
    color: Color,
}

impl StrikethroughS {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for StrikethroughS {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 14.47, y: 17.49 }),
                PathEl::CurveTo(
                    Point { x: 13.96, y: 16.54 },
                    Point { x: 13.70, y: 15.43 },
                    Point { x: 13.70, y: 14.16 },
                ),
                PathEl::CurveTo(
                    Point { x: 13.70, y: 12.94 },
                    Point { x: 13.96, y: 11.83 },
                    Point { x: 14.49, y: 10.82 },
                ),
                PathEl::CurveTo(
                    Point { x: 15.02, y: 9.81 },
                    Point { x: 15.76, y: 8.95 },
                    Point { x: 16.72, y: 8.24 },
                ),
                PathEl::CurveTo(
                    Point { x: 17.68, y: 7.53 },
                    Point { x: 18.81, y: 6.98 },
                    Point { x: 20.13, y: 6.59 },
                ),
                PathEl::CurveTo(
                    Point { x: 21.45, y: 6.20 },
                    Point { x: 22.89, y: 6.00 },
                    Point { x: 24.47, y: 6.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 26.09, y: 6.00 },
                    Point { x: 27.56, y: 6.22 },
                    Point { x: 28.88, y: 6.67 },
                ),
                PathEl::CurveTo(
                    Point { x: 30.20, y: 7.12 },
                    Point { x: 31.33, y: 7.74 },
                    Point { x: 32.27, y: 8.55 },
                ),
                PathEl::CurveTo(
                    Point { x: 33.21, y: 9.35 },
                    Point { x: 33.93, y: 10.30 },
                    Point { x: 34.44, y: 11.41 },
                ),
                PathEl::CurveTo(
                    Point { x: 34.95, y: 12.51 },
                    Point { x: 35.20, y: 13.72 },
                    Point { x: 35.20, y: 15.03 },
                ),
                PathEl::LineTo(Point { x: 29.18, y: 15.03 }),
                PathEl::CurveTo(
                    Point { x: 29.18, y: 14.42 },
                    Point { x: 29.08, y: 13.85 },
                    Point { x: 28.89, y: 13.33 },
                ),
                PathEl::CurveTo(
                    Point { x: 28.70, y: 12.80 },
                    Point { x: 28.40, y: 12.35 },
                    Point { x: 28.00, y: 11.98 },
                ),
                PathEl::CurveTo(
                    Point { x: 27.60, y: 11.61 },
                    Point { x: 27.10, y: 11.31 },
                    Point { x: 26.50, y: 11.11 },
                ),
                PathEl::CurveTo(
                    Point { x: 25.90, y: 10.90 },
                    Point { x: 25.19, y: 10.80 },
                    Point { x: 24.37, y: 10.80 },
                ),
                PathEl::CurveTo(
                    Point { x: 23.58, y: 10.80 },
                    Point { x: 22.90, y: 10.89 },
                    Point { x: 22.31, y: 11.06 },
                ),
                PathEl::CurveTo(
                    Point { x: 21.73, y: 11.23 },
                    Point { x: 21.25, y: 11.47 },
                    Point { x: 20.87, y: 11.78 },
                ),
                PathEl::CurveTo(
                    Point { x: 20.49, y: 12.09 },
                    Point { x: 20.20, y: 12.45 },
                    Point { x: 20.01, y: 12.86 },
                ),
                PathEl::CurveTo(
                    Point { x: 19.82, y: 13.27 },
                    Point { x: 19.72, y: 13.72 },
                    Point { x: 19.72, y: 14.18 },
                ),
                PathEl::CurveTo(
                    Point { x: 19.72, y: 15.14 },
                    Point { x: 20.21, y: 15.95 },
                    Point { x: 21.19, y: 16.60 },
                ),
                PathEl::CurveTo(
                    Point { x: 21.94, y: 17.09 },
                    Point { x: 22.72, y: 17.56 },
                    Point { x: 24.00, y: 18.00 },
                ),
                PathEl::LineTo(Point { x: 14.78, y: 18.00 }),
                PathEl::CurveTo(
                    Point { x: 14.68, y: 17.83 },
                    Point { x: 14.57, y: 17.67 },
                    Point { x: 14.47, y: 17.49 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 42.00, y: 24.00 }),
                PathEl::LineTo(Point { x: 42.00, y: 20.00 }),
                PathEl::LineTo(Point { x: 6.00, y: 20.00 }),
                PathEl::LineTo(Point { x: 6.00, y: 24.00 }),
                PathEl::LineTo(Point { x: 25.25, y: 24.00 }),
                PathEl::CurveTo(
                    Point { x: 25.61, y: 24.14 },
                    Point { x: 26.05, y: 24.28 },
                    Point { x: 26.35, y: 24.41 },
                ),
                PathEl::CurveTo(
                    Point { x: 27.09, y: 24.74 },
                    Point { x: 27.67, y: 25.09 },
                    Point { x: 28.09, y: 25.43 },
                ),
                PathEl::CurveTo(
                    Point { x: 28.51, y: 25.78 },
                    Point { x: 28.79, y: 26.16 },
                    Point { x: 28.94, y: 26.56 },
                ),
                PathEl::CurveTo(
                    Point { x: 29.09, y: 26.97 },
                    Point { x: 29.16, y: 27.43 },
                    Point { x: 29.16, y: 27.93 },
                ),
                PathEl::CurveTo(
                    Point { x: 29.16, y: 28.40 },
                    Point { x: 29.07, y: 28.84 },
                    Point { x: 28.89, y: 29.24 },
                ),
                PathEl::CurveTo(
                    Point { x: 28.71, y: 29.65 },
                    Point { x: 28.43, y: 30.00 },
                    Point { x: 28.06, y: 30.29 },
                ),
                PathEl::CurveTo(
                    Point { x: 27.69, y: 30.58 },
                    Point { x: 27.21, y: 30.81 },
                    Point { x: 26.64, y: 30.98 },
                ),
                PathEl::CurveTo(
                    Point { x: 26.06, y: 31.15 },
                    Point { x: 25.39, y: 31.23 },
                    Point { x: 24.61, y: 31.23 },
                ),
                PathEl::CurveTo(
                    Point { x: 23.74, y: 31.23 },
                    Point { x: 22.95, y: 31.14 },
                    Point { x: 22.24, y: 30.97 },
                ),
                PathEl::CurveTo(
                    Point { x: 21.53, y: 30.80 },
                    Point { x: 20.93, y: 30.52 },
                    Point { x: 20.43, y: 30.14 },
                ),
                PathEl::CurveTo(
                    Point { x: 19.93, y: 29.76 },
                    Point { x: 19.54, y: 29.26 },
                    Point { x: 19.26, y: 28.65 },
                ),
                PathEl::CurveTo(
                    Point { x: 18.98, y: 28.04 },
                    Point { x: 18.75, y: 27.12 },
                    Point { x: 18.75, y: 26.24 },
                ),
                PathEl::LineTo(Point { x: 12.80, y: 26.24 }),
                PathEl::CurveTo(
                    Point { x: 12.80, y: 27.34 },
                    Point { x: 12.96, y: 28.50 },
                    Point { x: 13.27, y: 29.40 },
                ),
                PathEl::CurveTo(
                    Point { x: 13.58, y: 30.30 },
                    Point { x: 14.02, y: 31.11 },
                    Point { x: 14.57, y: 31.82 },
                ),
                PathEl::CurveTo(
                    Point { x: 15.12, y: 32.53 },
                    Point { x: 15.78, y: 33.14 },
                    Point { x: 16.53, y: 33.66 },
                ),
                PathEl::CurveTo(
                    Point { x: 17.28, y: 34.18 },
                    Point { x: 18.09, y: 34.62 },
                    Point { x: 18.97, y: 34.96 },
                ),
                PathEl::CurveTo(
                    Point { x: 19.85, y: 35.31 },
                    Point { x: 20.76, y: 35.57 },
                    Point { x: 21.73, y: 35.73 },
                ),
                PathEl::CurveTo(
                    Point { x: 22.69, y: 35.90 },
                    Point { x: 23.66, y: 35.98 },
                    Point { x: 24.62, y: 35.98 },
                ),
                PathEl::CurveTo(
                    Point { x: 26.22, y: 35.98 },
                    Point { x: 27.68, y: 35.80 },
                    Point { x: 28.98, y: 35.43 },
                ),
                PathEl::CurveTo(
                    Point { x: 30.28, y: 35.06 },
                    Point { x: 31.40, y: 34.53 },
                    Point { x: 32.32, y: 33.85 },
                ),
                PathEl::CurveTo(
                    Point { x: 33.24, y: 33.16 },
                    Point { x: 33.95, y: 32.32 },
                    Point { x: 34.46, y: 31.31 },
                ),
                PathEl::CurveTo(
                    Point { x: 34.97, y: 30.30 },
                    Point { x: 35.21, y: 29.16 },
                    Point { x: 35.21, y: 27.88 },
                ),
                PathEl::CurveTo(
                    Point { x: 35.21, y: 26.68 },
                    Point { x: 35.00, y: 25.60 },
                    Point { x: 34.59, y: 24.65 },
                ),
                PathEl::CurveTo(
                    Point { x: 34.49, y: 24.42 },
                    Point { x: 34.38, y: 24.20 },
                    Point { x: 34.25, y: 23.98 },
                ),
                PathEl::LineTo(Point { x: 42.00, y: 23.98 }),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct Accessibility {
    size: f64,
    color: Color,
}

impl Accessibility {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for Accessibility {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 24.00, y: 4.00 }),
                PathEl::CurveTo(
                    Point { x: 26.21, y: 4.00 },
                    Point { x: 28.00, y: 5.79 },
                    Point { x: 28.00, y: 8.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 28.00, y: 10.21 },
                    Point { x: 26.21, y: 12.00 },
                    Point { x: 24.00, y: 12.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 21.79, y: 12.00 },
                    Point { x: 20.00, y: 10.21 },
                    Point { x: 20.00, y: 8.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 20.00, y: 5.79 },
                    Point { x: 21.79, y: 4.00 },
                    Point { x: 24.00, y: 4.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 42.00, y: 18.00 }),
                PathEl::LineTo(Point { x: 30.00, y: 18.00 }),
                PathEl::LineTo(Point { x: 30.00, y: 44.00 }),
                PathEl::LineTo(Point { x: 26.00, y: 44.00 }),
                PathEl::LineTo(Point { x: 26.00, y: 32.00 }),
                PathEl::LineTo(Point { x: 22.00, y: 32.00 }),
                PathEl::LineTo(Point { x: 22.00, y: 44.00 }),
                PathEl::LineTo(Point { x: 18.00, y: 44.00 }),
                PathEl::LineTo(Point { x: 18.00, y: 18.00 }),
                PathEl::LineTo(Point { x: 6.00, y: 18.00 }),
                PathEl::LineTo(Point { x: 6.00, y: 14.00 }),
                PathEl::LineTo(Point { x: 42.00, y: 14.00 }),
                PathEl::LineTo(Point { x: 42.00, y: 18.00 }),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct WebAsset {
    size: f64,
    color: Color,
}

impl WebAsset {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for WebAsset {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 38.00, y: 8.00 }),
                PathEl::LineTo(Point { x: 10.00, y: 8.00 }),
                PathEl::CurveTo(
                    Point { x: 7.78, y: 8.00 },
                    Point { x: 6.00, y: 9.80 },
                    Point { x: 6.00, y: 12.00 },
                ),
                PathEl::LineTo(Point { x: 6.00, y: 36.00 }),
                PathEl::CurveTo(
                    Point { x: 6.00, y: 38.20 },
                    Point { x: 7.78, y: 40.00 },
                    Point { x: 10.00, y: 40.00 },
                ),
                PathEl::LineTo(Point { x: 38.00, y: 40.00 }),
                PathEl::CurveTo(
                    Point { x: 40.20, y: 40.00 },
                    Point { x: 42.00, y: 38.20 },
                    Point { x: 42.00, y: 36.00 },
                ),
                PathEl::LineTo(Point { x: 42.00, y: 12.00 }),
                PathEl::CurveTo(
                    Point { x: 42.00, y: 9.80 },
                    Point { x: 40.22, y: 8.00 },
                    Point { x: 38.00, y: 8.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 38.00, y: 36.00 }),
                PathEl::LineTo(Point { x: 10.00, y: 36.00 }),
                PathEl::LineTo(Point { x: 10.00, y: 16.00 }),
                PathEl::LineTo(Point { x: 38.00, y: 16.00 }),
                PathEl::LineTo(Point { x: 38.00, y: 36.00 }),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct Extension {
    size: f64,
    color: Color,
}

impl Extension {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for Extension {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 41.00, y: 22.00 }),
                PathEl::LineTo(Point { x: 38.00, y: 22.00 }),
                PathEl::LineTo(Point { x: 38.00, y: 14.00 }),
                PathEl::CurveTo(
                    Point { x: 38.00, y: 11.79 },
                    Point { x: 36.21, y: 10.00 },
                    Point { x: 34.00, y: 10.00 },
                ),
                PathEl::LineTo(Point { x: 26.00, y: 10.00 }),
                PathEl::LineTo(Point { x: 26.00, y: 7.00 }),
                PathEl::CurveTo(
                    Point { x: 26.00, y: 4.24 },
                    Point { x: 23.76, y: 2.00 },
                    Point { x: 21.00, y: 2.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 18.24, y: 2.00 },
                    Point { x: 16.00, y: 4.24 },
                    Point { x: 16.00, y: 7.00 },
                ),
                PathEl::LineTo(Point { x: 16.00, y: 10.00 }),
                PathEl::LineTo(Point { x: 8.00, y: 10.00 }),
                PathEl::CurveTo(
                    Point { x: 5.79, y: 10.00 },
                    Point { x: 4.02, y: 11.79 },
                    Point { x: 4.02, y: 14.00 },
                ),
                PathEl::LineTo(Point { x: 4.01, y: 21.60 }),
                PathEl::LineTo(Point { x: 7.00, y: 21.60 }),
                PathEl::CurveTo(
                    Point { x: 9.98, y: 21.60 },
                    Point { x: 12.40, y: 24.02 },
                    Point { x: 12.40, y: 27.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 12.40, y: 29.98 },
                    Point { x: 9.98, y: 32.40 },
                    Point { x: 7.00, y: 32.40 },
                ),
                PathEl::LineTo(Point { x: 4.01, y: 32.40 }),
                PathEl::LineTo(Point { x: 4.00, y: 40.00 }),
                PathEl::CurveTo(
                    Point { x: 4.00, y: 42.21 },
                    Point { x: 5.79, y: 44.00 },
                    Point { x: 8.00, y: 44.00 },
                ),
                PathEl::LineTo(Point { x: 15.60, y: 44.00 }),
                PathEl::LineTo(Point { x: 15.60, y: 41.00 }),
                PathEl::CurveTo(
                    Point { x: 15.60, y: 38.02 },
                    Point { x: 18.02, y: 35.60 },
                    Point { x: 21.00, y: 35.60 },
                ),
                PathEl::CurveTo(
                    Point { x: 23.98, y: 35.60 },
                    Point { x: 26.40, y: 38.02 },
                    Point { x: 26.40, y: 41.00 },
                ),
                PathEl::LineTo(Point { x: 26.40, y: 44.00 }),
                PathEl::LineTo(Point { x: 34.00, y: 44.00 }),
                PathEl::CurveTo(
                    Point { x: 36.21, y: 44.00 },
                    Point { x: 38.00, y: 42.21 },
                    Point { x: 38.00, y: 40.00 },
                ),
                PathEl::LineTo(Point { x: 38.00, y: 32.00 }),
                PathEl::LineTo(Point { x: 41.00, y: 32.00 }),
                PathEl::CurveTo(
                    Point { x: 43.76, y: 32.00 },
                    Point { x: 46.00, y: 29.76 },
                    Point { x: 46.00, y: 27.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 46.00, y: 24.24 },
                    Point { x: 43.76, y: 22.00 },
                    Point { x: 41.00, y: 22.00 },
                ),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct Drafts {
    size: f64,
    color: Color,
}

impl Drafts {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for Drafts {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 43.98, y: 16.00 }),
                PathEl::CurveTo(
                    Point { x: 43.98, y: 14.56 },
                    Point { x: 43.23, y: 13.31 },
                    Point { x: 42.10, y: 12.60 },
                ),
                PathEl::LineTo(Point { x: 24.00, y: 2.00 }),
                PathEl::LineTo(Point { x: 5.90, y: 12.60 }),
                PathEl::CurveTo(
                    Point { x: 4.77, y: 13.31 },
                    Point { x: 4.00, y: 14.56 },
                    Point { x: 4.00, y: 16.00 },
                ),
                PathEl::LineTo(Point { x: 4.00, y: 36.00 }),
                PathEl::CurveTo(
                    Point { x: 4.00, y: 38.21 },
                    Point { x: 5.79, y: 40.00 },
                    Point { x: 8.00, y: 40.00 },
                ),
                PathEl::LineTo(Point { x: 40.00, y: 40.00 }),
                PathEl::CurveTo(
                    Point { x: 42.21, y: 40.00 },
                    Point { x: 44.00, y: 38.21 },
                    Point { x: 44.00, y: 36.00 },
                ),
                PathEl::LineTo(Point { x: 43.98, y: 16.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 24.00, y: 26.00 }),
                PathEl::LineTo(Point { x: 7.48, y: 15.67 }),
                PathEl::LineTo(Point { x: 24.00, y: 6.00 }),
                PathEl::LineTo(Point { x: 40.52, y: 15.67 }),
                PathEl::LineTo(Point { x: 24.00, y: 26.00 }),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct PhotoSizeSelectLarge {
    size: f64,
    color: Color,
}

impl PhotoSizeSelectLarge {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for PhotoSizeSelectLarge {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 24.0, height / 24.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 21.00, y: 15.00 }),
                PathEl::LineTo(Point { x: 23.00, y: 15.00 }),
                PathEl::LineTo(Point { x: 23.00, y: 17.00 }),
                PathEl::LineTo(Point { x: 21.00, y: 17.00 }),
                PathEl::LineTo(Point { x: 21.00, y: 15.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 21.00, y: 11.00 }),
                PathEl::LineTo(Point { x: 23.00, y: 11.00 }),
                PathEl::LineTo(Point { x: 23.00, y: 13.00 }),
                PathEl::LineTo(Point { x: 21.00, y: 13.00 }),
                PathEl::LineTo(Point { x: 21.00, y: 11.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 23.00, y: 19.00 }),
                PathEl::LineTo(Point { x: 21.00, y: 19.00 }),
                PathEl::LineTo(Point { x: 21.00, y: 21.00 }),
                PathEl::CurveTo(
                    Point { x: 22.00, y: 21.00 },
                    Point { x: 23.00, y: 20.00 },
                    Point { x: 23.00, y: 19.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 13.00, y: 3.00 }),
                PathEl::LineTo(Point { x: 15.00, y: 3.00 }),
                PathEl::LineTo(Point { x: 15.00, y: 5.00 }),
                PathEl::LineTo(Point { x: 13.00, y: 5.00 }),
                PathEl::LineTo(Point { x: 13.00, y: 3.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 21.00, y: 7.00 }),
                PathEl::LineTo(Point { x: 23.00, y: 7.00 }),
                PathEl::LineTo(Point { x: 23.00, y: 9.00 }),
                PathEl::LineTo(Point { x: 21.00, y: 9.00 }),
                PathEl::LineTo(Point { x: 21.00, y: 7.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 21.00, y: 3.00 }),
                PathEl::LineTo(Point { x: 21.00, y: 5.00 }),
                PathEl::LineTo(Point { x: 23.00, y: 5.00 }),
                PathEl::CurveTo(
                    Point { x: 23.00, y: 4.00 },
                    Point { x: 22.00, y: 3.00 },
                    Point { x: 21.00, y: 3.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 1.00, y: 7.00 }),
                PathEl::LineTo(Point { x: 3.00, y: 7.00 }),
                PathEl::LineTo(Point { x: 3.00, y: 9.00 }),
                PathEl::LineTo(Point { x: 1.00, y: 9.00 }),
                PathEl::LineTo(Point { x: 1.00, y: 7.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 17.00, y: 3.00 }),
                PathEl::LineTo(Point { x: 19.00, y: 3.00 }),
                PathEl::LineTo(Point { x: 19.00, y: 5.00 }),
                PathEl::LineTo(Point { x: 17.00, y: 5.00 }),
                PathEl::LineTo(Point { x: 17.00, y: 3.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 17.00, y: 19.00 }),
                PathEl::LineTo(Point { x: 19.00, y: 19.00 }),
                PathEl::LineTo(Point { x: 19.00, y: 21.00 }),
                PathEl::LineTo(Point { x: 17.00, y: 21.00 }),
                PathEl::LineTo(Point { x: 17.00, y: 19.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 3.00, y: 3.00 }),
                PathEl::CurveTo(
                    Point { x: 2.00, y: 3.00 },
                    Point { x: 1.00, y: 4.00 },
                    Point { x: 1.00, y: 5.00 },
                ),
                PathEl::LineTo(Point { x: 3.00, y: 5.00 }),
                PathEl::LineTo(Point { x: 3.00, y: 3.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 9.00, y: 3.00 }),
                PathEl::LineTo(Point { x: 11.00, y: 3.00 }),
                PathEl::LineTo(Point { x: 11.00, y: 5.00 }),
                PathEl::LineTo(Point { x: 9.00, y: 5.00 }),
                PathEl::LineTo(Point { x: 9.00, y: 3.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 5.00, y: 3.00 }),
                PathEl::LineTo(Point { x: 7.00, y: 3.00 }),
                PathEl::LineTo(Point { x: 7.00, y: 5.00 }),
                PathEl::LineTo(Point { x: 5.00, y: 5.00 }),
                PathEl::LineTo(Point { x: 5.00, y: 3.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 1.00, y: 11.00 }),
                PathEl::LineTo(Point { x: 1.00, y: 19.00 }),
                PathEl::CurveTo(
                    Point { x: 1.00, y: 20.10 },
                    Point { x: 1.90, y: 21.00 },
                    Point { x: 3.00, y: 21.00 },
                ),
                PathEl::LineTo(Point { x: 15.00, y: 21.00 }),
                PathEl::LineTo(Point { x: 15.00, y: 11.00 }),
                PathEl::LineTo(Point { x: 1.00, y: 11.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 3.00, y: 19.00 }),
                PathEl::LineTo(Point { x: 5.50, y: 15.79 }),
                PathEl::LineTo(Point { x: 7.29, y: 17.94 }),
                PathEl::LineTo(Point { x: 9.79, y: 14.72 }),
                PathEl::LineTo(Point { x: 13.00, y: 19.00 }),
                PathEl::LineTo(Point { x: 3.00, y: 19.00 }),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct CloudQueue {
    size: f64,
    color: Color,
}

impl CloudQueue {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for CloudQueue {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 38.71, y: 20.07 }),
                PathEl::CurveTo(
                    Point { x: 37.35, y: 13.19 },
                    Point { x: 31.28, y: 8.00 },
                    Point { x: 24.00, y: 8.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 18.22, y: 8.00 },
                    Point { x: 13.21, y: 11.28 },
                    Point { x: 10.70, y: 16.07 },
                ),
                PathEl::CurveTo(
                    Point { x: 4.69, y: 16.72 },
                    Point { x: 0.00, y: 21.81 },
                    Point { x: 0.00, y: 28.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 0.00, y: 34.63 },
                    Point { x: 5.37, y: 40.00 },
                    Point { x: 12.00, y: 40.00 },
                ),
                PathEl::LineTo(Point { x: 38.00, y: 40.00 }),
                PathEl::CurveTo(
                    Point { x: 43.52, y: 40.00 },
                    Point { x: 48.00, y: 35.52 },
                    Point { x: 48.00, y: 30.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 48.00, y: 24.72 },
                    Point { x: 43.89, y: 20.44 },
                    Point { x: 38.71, y: 20.07 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 38.00, y: 36.00 }),
                PathEl::LineTo(Point { x: 12.00, y: 36.00 }),
                PathEl::CurveTo(
                    Point { x: 7.58, y: 36.00 },
                    Point { x: 4.00, y: 32.42 },
                    Point { x: 4.00, y: 28.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 4.00, y: 23.58 },
                    Point { x: 7.58, y: 20.00 },
                    Point { x: 12.00, y: 20.00 },
                ),
                PathEl::LineTo(Point { x: 13.42, y: 20.00 }),
                PathEl::CurveTo(
                    Point { x: 14.73, y: 15.39 },
                    Point { x: 18.96, y: 12.00 },
                    Point { x: 24.00, y: 12.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 30.08, y: 12.00 },
                    Point { x: 35.00, y: 16.92 },
                    Point { x: 35.00, y: 23.00 },
                ),
                PathEl::LineTo(Point { x: 35.00, y: 24.00 }),
                PathEl::LineTo(Point { x: 38.00, y: 24.00 }),
                PathEl::CurveTo(
                    Point { x: 41.31, y: 24.00 },
                    Point { x: 44.00, y: 26.69 },
                    Point { x: 44.00, y: 30.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 44.00, y: 33.31 },
                    Point { x: 41.31, y: 36.00 },
                    Point { x: 38.00, y: 36.00 },
                ),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct TabUnselected {
    size: f64,
    color: Color,
}

impl TabUnselected {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for TabUnselected {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 2.00, y: 18.00 }),
                PathEl::LineTo(Point { x: 6.00, y: 18.00 }),
                PathEl::LineTo(Point { x: 6.00, y: 14.00 }),
                PathEl::LineTo(Point { x: 2.00, y: 14.00 }),
                PathEl::LineTo(Point { x: 2.00, y: 18.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 2.00, y: 26.00 }),
                PathEl::LineTo(Point { x: 6.00, y: 26.00 }),
                PathEl::LineTo(Point { x: 6.00, y: 22.00 }),
                PathEl::LineTo(Point { x: 2.00, y: 22.00 }),
                PathEl::LineTo(Point { x: 2.00, y: 26.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 2.00, y: 10.00 }),
                PathEl::LineTo(Point { x: 6.00, y: 10.00 }),
                PathEl::LineTo(Point { x: 6.00, y: 6.00 }),
                PathEl::CurveTo(
                    Point { x: 3.79, y: 6.00 },
                    Point { x: 2.00, y: 7.79 },
                    Point { x: 2.00, y: 10.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 18.00, y: 42.00 }),
                PathEl::LineTo(Point { x: 22.00, y: 42.00 }),
                PathEl::LineTo(Point { x: 22.00, y: 38.00 }),
                PathEl::LineTo(Point { x: 18.00, y: 38.00 }),
                PathEl::LineTo(Point { x: 18.00, y: 42.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 2.00, y: 34.00 }),
                PathEl::LineTo(Point { x: 6.00, y: 34.00 }),
                PathEl::LineTo(Point { x: 6.00, y: 30.00 }),
                PathEl::LineTo(Point { x: 2.00, y: 30.00 }),
                PathEl::LineTo(Point { x: 2.00, y: 34.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 6.00, y: 42.00 }),
                PathEl::LineTo(Point { x: 6.00, y: 38.00 }),
                PathEl::LineTo(Point { x: 2.00, y: 38.00 }),
                PathEl::CurveTo(
                    Point { x: 2.00, y: 40.21 },
                    Point { x: 3.79, y: 42.00 },
                    Point { x: 6.00, y: 42.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 42.00, y: 6.00 }),
                PathEl::LineTo(Point { x: 26.00, y: 6.00 }),
                PathEl::LineTo(Point { x: 26.00, y: 18.00 }),
                PathEl::LineTo(Point { x: 46.00, y: 18.00 }),
                PathEl::LineTo(Point { x: 46.00, y: 10.00 }),
                PathEl::CurveTo(
                    Point { x: 46.00, y: 7.79 },
                    Point { x: 44.21, y: 6.00 },
                    Point { x: 42.00, y: 6.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 42.00, y: 34.00 }),
                PathEl::LineTo(Point { x: 46.00, y: 34.00 }),
                PathEl::LineTo(Point { x: 46.00, y: 30.00 }),
                PathEl::LineTo(Point { x: 42.00, y: 30.00 }),
                PathEl::LineTo(Point { x: 42.00, y: 34.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 18.00, y: 10.00 }),
                PathEl::LineTo(Point { x: 22.00, y: 10.00 }),
                PathEl::LineTo(Point { x: 22.00, y: 6.00 }),
                PathEl::LineTo(Point { x: 18.00, y: 6.00 }),
                PathEl::LineTo(Point { x: 18.00, y: 10.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 10.00, y: 42.00 }),
                PathEl::LineTo(Point { x: 14.00, y: 42.00 }),
                PathEl::LineTo(Point { x: 14.00, y: 38.00 }),
                PathEl::LineTo(Point { x: 10.00, y: 38.00 }),
                PathEl::LineTo(Point { x: 10.00, y: 42.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 10.00, y: 10.00 }),
                PathEl::LineTo(Point { x: 14.00, y: 10.00 }),
                PathEl::LineTo(Point { x: 14.00, y: 6.00 }),
                PathEl::LineTo(Point { x: 10.00, y: 6.00 }),
                PathEl::LineTo(Point { x: 10.00, y: 10.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 42.00, y: 42.00 }),
                PathEl::CurveTo(
                    Point { x: 44.21, y: 42.00 },
                    Point { x: 46.00, y: 40.21 },
                    Point { x: 46.00, y: 38.00 },
                ),
                PathEl::LineTo(Point { x: 42.00, y: 38.00 }),
                PathEl::LineTo(Point { x: 42.00, y: 42.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 42.00, y: 26.00 }),
                PathEl::LineTo(Point { x: 46.00, y: 26.00 }),
                PathEl::LineTo(Point { x: 46.00, y: 22.00 }),
                PathEl::LineTo(Point { x: 42.00, y: 22.00 }),
                PathEl::LineTo(Point { x: 42.00, y: 26.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 26.00, y: 42.00 }),
                PathEl::LineTo(Point { x: 30.00, y: 42.00 }),
                PathEl::LineTo(Point { x: 30.00, y: 38.00 }),
                PathEl::LineTo(Point { x: 26.00, y: 38.00 }),
                PathEl::LineTo(Point { x: 26.00, y: 42.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 34.00, y: 42.00 }),
                PathEl::LineTo(Point { x: 38.00, y: 42.00 }),
                PathEl::LineTo(Point { x: 38.00, y: 38.00 }),
                PathEl::LineTo(Point { x: 34.00, y: 38.00 }),
                PathEl::LineTo(Point { x: 34.00, y: 42.00 }),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct PhoneLocked {
    size: f64,
    color: Color,
}

impl PhoneLocked {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for PhoneLocked {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 40.00, y: 31.00 }),
                PathEl::CurveTo(
                    Point { x: 37.51, y: 31.00 },
                    Point { x: 35.10, y: 30.60 },
                    Point { x: 32.86, y: 29.86 },
                ),
                PathEl::CurveTo(
                    Point { x: 32.17, y: 29.64 },
                    Point { x: 31.38, y: 29.80 },
                    Point { x: 30.83, y: 30.35 },
                ),
                PathEl::LineTo(Point { x: 26.43, y: 34.76 }),
                PathEl::CurveTo(
                    Point { x: 20.76, y: 31.88 },
                    Point { x: 16.14, y: 27.25 },
                    Point { x: 13.25, y: 21.59 },
                ),
                PathEl::LineTo(Point { x: 17.65, y: 17.18 }),
                PathEl::CurveTo(
                    Point { x: 18.20, y: 16.63 },
                    Point { x: 18.36, y: 15.84 },
                    Point { x: 18.14, y: 15.15 },
                ),
                PathEl::CurveTo(
                    Point { x: 17.40, y: 12.90 },
                    Point { x: 17.00, y: 10.49 },
                    Point { x: 17.00, y: 8.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 17.00, y: 6.89 },
                    Point { x: 16.11, y: 6.00 },
                    Point { x: 15.00, y: 6.00 },
                ),
                PathEl::LineTo(Point { x: 8.00, y: 6.00 }),
                PathEl::CurveTo(
                    Point { x: 6.90, y: 6.00 },
                    Point { x: 6.00, y: 6.89 },
                    Point { x: 6.00, y: 8.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 6.00, y: 26.78 },
                    Point { x: 21.22, y: 42.00 },
                    Point { x: 40.00, y: 42.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 41.11, y: 42.00 },
                    Point { x: 42.00, y: 41.11 },
                    Point { x: 42.00, y: 40.00 },
                ),
                PathEl::LineTo(Point { x: 42.00, y: 33.00 }),
                PathEl::CurveTo(
                    Point { x: 42.00, y: 31.89 },
                    Point { x: 41.11, y: 31.00 },
                    Point { x: 40.00, y: 31.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 40.00, y: 8.00 }),
                PathEl::LineTo(Point { x: 40.00, y: 7.00 }),
                PathEl::CurveTo(
                    Point { x: 40.00, y: 4.24 },
                    Point { x: 37.76, y: 2.00 },
                    Point { x: 35.00, y: 2.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 32.24, y: 2.00 },
                    Point { x: 30.00, y: 4.24 },
                    Point { x: 30.00, y: 7.00 },
                ),
                PathEl::LineTo(Point { x: 30.00, y: 8.00 }),
                PathEl::CurveTo(
                    Point { x: 28.89, y: 8.00 },
                    Point { x: 28.00, y: 8.90 },
                    Point { x: 28.00, y: 10.00 },
                ),
                PathEl::LineTo(Point { x: 28.00, y: 18.00 }),
                PathEl::CurveTo(
                    Point { x: 28.00, y: 19.10 },
                    Point { x: 28.89, y: 20.00 },
                    Point { x: 30.00, y: 20.00 },
                ),
                PathEl::LineTo(Point { x: 40.00, y: 20.00 }),
                PathEl::CurveTo(
                    Point { x: 41.11, y: 20.00 },
                    Point { x: 42.00, y: 19.10 },
                    Point { x: 42.00, y: 18.00 },
                ),
                PathEl::LineTo(Point { x: 42.00, y: 10.00 }),
                PathEl::CurveTo(
                    Point { x: 42.00, y: 8.90 },
                    Point { x: 41.11, y: 8.00 },
                    Point { x: 40.00, y: 8.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 38.40, y: 8.00 }),
                PathEl::LineTo(Point { x: 31.60, y: 8.00 }),
                PathEl::LineTo(Point { x: 31.60, y: 7.00 }),
                PathEl::CurveTo(
                    Point { x: 31.60, y: 5.12 },
                    Point { x: 33.12, y: 3.60 },
                    Point { x: 35.00, y: 3.60 },
                ),
                PathEl::CurveTo(
                    Point { x: 36.88, y: 3.60 },
                    Point { x: 38.40, y: 5.12 },
                    Point { x: 38.40, y: 7.00 },
                ),
                PathEl::LineTo(Point { x: 38.40, y: 8.00 }),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct ScreenShare {
    size: f64,
    color: Color,
}

impl ScreenShare {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for ScreenShare {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 40.00, y: 36.00 }),
                PathEl::CurveTo(
                    Point { x: 42.20, y: 36.00 },
                    Point { x: 43.98, y: 34.20 },
                    Point { x: 43.98, y: 32.00 },
                ),
                PathEl::LineTo(Point { x: 44.00, y: 12.00 }),
                PathEl::CurveTo(
                    Point { x: 44.00, y: 9.78 },
                    Point { x: 42.20, y: 8.00 },
                    Point { x: 40.00, y: 8.00 },
                ),
                PathEl::LineTo(Point { x: 8.00, y: 8.00 }),
                PathEl::CurveTo(
                    Point { x: 5.78, y: 8.00 },
                    Point { x: 4.00, y: 9.78 },
                    Point { x: 4.00, y: 12.00 },
                ),
                PathEl::LineTo(Point { x: 4.00, y: 32.00 }),
                PathEl::CurveTo(
                    Point { x: 4.00, y: 34.20 },
                    Point { x: 5.78, y: 36.00 },
                    Point { x: 8.00, y: 36.00 },
                ),
                PathEl::LineTo(Point { x: 0.00, y: 36.00 }),
                PathEl::LineTo(Point { x: 0.00, y: 40.00 }),
                PathEl::LineTo(Point { x: 48.00, y: 40.00 }),
                PathEl::LineTo(Point { x: 48.00, y: 36.00 }),
                PathEl::LineTo(Point { x: 40.00, y: 36.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 26.00, y: 28.94 }),
                PathEl::LineTo(Point { x: 26.00, y: 24.56 }),
                PathEl::CurveTo(
                    Point { x: 20.44, y: 24.56 },
                    Point { x: 16.78, y: 26.26 },
                    Point { x: 14.00, y: 30.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 15.12, y: 24.66 },
                    Point { x: 18.22, y: 19.34 },
                    Point { x: 26.00, y: 18.26 },
                ),
                PathEl::LineTo(Point { x: 26.00, y: 14.00 }),
                PathEl::LineTo(Point { x: 34.00, y: 21.46 }),
                PathEl::LineTo(Point { x: 26.00, y: 28.94 }),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct KeyboardArrowLeft {
    size: f64,
    color: Color,
}

impl KeyboardArrowLeft {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for KeyboardArrowLeft {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 30.83, y: 32.67 }),
                PathEl::LineTo(Point { x: 21.66, y: 23.50 }),
                PathEl::LineTo(Point { x: 30.83, y: 14.33 }),
                PathEl::LineTo(Point { x: 28.00, y: 11.50 }),
                PathEl::LineTo(Point { x: 16.00, y: 23.50 }),
                PathEl::LineTo(Point { x: 28.00, y: 35.50 }),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct KeyboardArrowRight {
    size: f64,
    color: Color,
}

impl KeyboardArrowRight {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for KeyboardArrowRight {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 17.17, y: 32.92 }),
                PathEl::LineTo(Point { x: 26.34, y: 23.75 }),
                PathEl::LineTo(Point { x: 17.17, y: 14.58 }),
                PathEl::LineTo(Point { x: 20.00, y: 11.75 }),
                PathEl::LineTo(Point { x: 32.00, y: 23.75 }),
                PathEl::LineTo(Point { x: 20.00, y: 35.75 }),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct Mms {
    size: f64,
    color: Color,
}

impl Mms {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for Mms {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 40.00, y: 4.00 }),
                PathEl::LineTo(Point { x: 8.00, y: 4.00 }),
                PathEl::CurveTo(
                    Point { x: 5.79, y: 4.00 },
                    Point { x: 4.02, y: 5.79 },
                    Point { x: 4.02, y: 8.00 },
                ),
                PathEl::LineTo(Point { x: 4.00, y: 44.00 }),
                PathEl::LineTo(Point { x: 12.00, y: 36.00 }),
                PathEl::LineTo(Point { x: 40.00, y: 36.00 }),
                PathEl::CurveTo(
                    Point { x: 42.21, y: 36.00 },
                    Point { x: 44.00, y: 34.21 },
                    Point { x: 44.00, y: 32.00 },
                ),
                PathEl::LineTo(Point { x: 44.00, y: 8.00 }),
                PathEl::CurveTo(
                    Point { x: 44.00, y: 5.79 },
                    Point { x: 42.21, y: 4.00 },
                    Point { x: 40.00, y: 4.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 10.00, y: 28.00 }),
                PathEl::LineTo(Point { x: 17.00, y: 19.00 }),
                PathEl::LineTo(Point { x: 22.00, y: 25.01 }),
                PathEl::LineTo(Point { x: 29.00, y: 16.00 }),
                PathEl::LineTo(Point { x: 38.00, y: 28.00 }),
                PathEl::LineTo(Point { x: 10.00, y: 28.00 }),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct FilterList {
    size: f64,
    color: Color,
}

impl FilterList {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for FilterList {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 20.00, y: 36.00 }),
                PathEl::LineTo(Point { x: 28.00, y: 36.00 }),
                PathEl::LineTo(Point { x: 28.00, y: 32.00 }),
                PathEl::LineTo(Point { x: 20.00, y: 32.00 }),
                PathEl::LineTo(Point { x: 20.00, y: 36.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 6.00, y: 12.00 }),
                PathEl::LineTo(Point { x: 6.00, y: 16.00 }),
                PathEl::LineTo(Point { x: 42.00, y: 16.00 }),
                PathEl::LineTo(Point { x: 42.00, y: 12.00 }),
                PathEl::LineTo(Point { x: 6.00, y: 12.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 12.00, y: 26.00 }),
                PathEl::LineTo(Point { x: 36.00, y: 26.00 }),
                PathEl::LineTo(Point { x: 36.00, y: 22.00 }),
                PathEl::LineTo(Point { x: 12.00, y: 22.00 }),
                PathEl::LineTo(Point { x: 12.00, y: 26.00 }),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct LooksOne {
    size: f64,
    color: Color,
}

impl LooksOne {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for LooksOne {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 38.00, y: 6.00 }),
                PathEl::LineTo(Point { x: 10.00, y: 6.00 }),
                PathEl::CurveTo(
                    Point { x: 7.79, y: 6.00 },
                    Point { x: 6.00, y: 7.79 },
                    Point { x: 6.00, y: 10.00 },
                ),
                PathEl::LineTo(Point { x: 6.00, y: 38.00 }),
                PathEl::CurveTo(
                    Point { x: 6.00, y: 40.21 },
                    Point { x: 7.79, y: 42.00 },
                    Point { x: 10.00, y: 42.00 },
                ),
                PathEl::LineTo(Point { x: 38.00, y: 42.00 }),
                PathEl::CurveTo(
                    Point { x: 40.21, y: 42.00 },
                    Point { x: 42.00, y: 40.21 },
                    Point { x: 42.00, y: 38.00 },
                ),
                PathEl::LineTo(Point { x: 42.00, y: 10.00 }),
                PathEl::CurveTo(
                    Point { x: 42.00, y: 7.79 },
                    Point { x: 40.21, y: 6.00 },
                    Point { x: 38.00, y: 6.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 28.00, y: 34.00 }),
                PathEl::LineTo(Point { x: 24.00, y: 34.00 }),
                PathEl::LineTo(Point { x: 24.00, y: 18.00 }),
                PathEl::LineTo(Point { x: 20.00, y: 18.00 }),
                PathEl::LineTo(Point { x: 20.00, y: 14.00 }),
                PathEl::LineTo(Point { x: 28.00, y: 14.00 }),
                PathEl::LineTo(Point { x: 28.00, y: 34.00 }),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct GetApp {
    size: f64,
    color: Color,
}

impl GetApp {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for GetApp {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 38.00, y: 18.00 }),
                PathEl::LineTo(Point { x: 30.00, y: 18.00 }),
                PathEl::LineTo(Point { x: 30.00, y: 6.00 }),
                PathEl::LineTo(Point { x: 18.00, y: 6.00 }),
                PathEl::LineTo(Point { x: 18.00, y: 18.00 }),
                PathEl::LineTo(Point { x: 10.00, y: 18.00 }),
                PathEl::LineTo(Point { x: 24.00, y: 32.00 }),
                PathEl::LineTo(Point { x: 38.00, y: 18.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 10.00, y: 36.00 }),
                PathEl::LineTo(Point { x: 10.00, y: 40.00 }),
                PathEl::LineTo(Point { x: 38.00, y: 40.00 }),
                PathEl::LineTo(Point { x: 38.00, y: 36.00 }),
                PathEl::LineTo(Point { x: 10.00, y: 36.00 }),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct Assistant {
    size: f64,
    color: Color,
}

impl Assistant {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for Assistant {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 38.00, y: 4.00 }),
                PathEl::LineTo(Point { x: 10.00, y: 4.00 }),
                PathEl::CurveTo(
                    Point { x: 7.79, y: 4.00 },
                    Point { x: 6.00, y: 5.79 },
                    Point { x: 6.00, y: 8.00 },
                ),
                PathEl::LineTo(Point { x: 6.00, y: 36.00 }),
                PathEl::CurveTo(
                    Point { x: 6.00, y: 38.21 },
                    Point { x: 7.79, y: 40.00 },
                    Point { x: 10.00, y: 40.00 },
                ),
                PathEl::LineTo(Point { x: 18.00, y: 40.00 }),
                PathEl::LineTo(Point { x: 24.00, y: 46.00 }),
                PathEl::LineTo(Point { x: 30.00, y: 40.00 }),
                PathEl::LineTo(Point { x: 38.00, y: 40.00 }),
                PathEl::CurveTo(
                    Point { x: 40.21, y: 40.00 },
                    Point { x: 42.00, y: 38.21 },
                    Point { x: 42.00, y: 36.00 },
                ),
                PathEl::LineTo(Point { x: 42.00, y: 8.00 }),
                PathEl::CurveTo(
                    Point { x: 42.00, y: 5.79 },
                    Point { x: 40.21, y: 4.00 },
                    Point { x: 38.00, y: 4.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 27.75, y: 25.75 }),
                PathEl::LineTo(Point { x: 24.00, y: 34.00 }),
                PathEl::LineTo(Point { x: 20.25, y: 25.75 }),
                PathEl::LineTo(Point { x: 12.00, y: 22.00 }),
                PathEl::LineTo(Point { x: 20.25, y: 18.25 }),
                PathEl::LineTo(Point { x: 24.00, y: 10.00 }),
                PathEl::LineTo(Point { x: 27.75, y: 18.25 }),
                PathEl::LineTo(Point { x: 36.00, y: 22.00 }),
                PathEl::LineTo(Point { x: 27.75, y: 25.75 }),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct SpaceBar {
    size: f64,
    color: Color,
}

impl SpaceBar {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for SpaceBar {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 36.00, y: 18.00 }),
                PathEl::LineTo(Point { x: 36.00, y: 26.00 }),
                PathEl::LineTo(Point { x: 12.00, y: 26.00 }),
                PathEl::LineTo(Point { x: 12.00, y: 18.00 }),
                PathEl::LineTo(Point { x: 8.00, y: 18.00 }),
                PathEl::LineTo(Point { x: 8.00, y: 30.00 }),
                PathEl::LineTo(Point { x: 40.00, y: 30.00 }),
                PathEl::LineTo(Point { x: 40.00, y: 18.00 }),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct PlayCircleFilled {
    size: f64,
    color: Color,
}

impl PlayCircleFilled {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for PlayCircleFilled {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 24.00, y: 4.00 }),
                PathEl::CurveTo(
                    Point { x: 12.95, y: 4.00 },
                    Point { x: 4.00, y: 12.95 },
                    Point { x: 4.00, y: 24.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 4.00, y: 35.05 },
                    Point { x: 12.95, y: 44.00 },
                    Point { x: 24.00, y: 44.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 35.05, y: 44.00 },
                    Point { x: 44.00, y: 35.05 },
                    Point { x: 44.00, y: 24.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 44.00, y: 12.95 },
                    Point { x: 35.05, y: 4.00 },
                    Point { x: 24.00, y: 4.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 20.00, y: 33.00 }),
                PathEl::LineTo(Point { x: 20.00, y: 15.00 }),
                PathEl::LineTo(Point { x: 32.00, y: 24.00 }),
                PathEl::LineTo(Point { x: 20.00, y: 33.00 }),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct ViewHeadline {
    size: f64,
    color: Color,
}

impl ViewHeadline {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for ViewHeadline {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 8.00, y: 30.00 }),
                PathEl::LineTo(Point { x: 42.00, y: 30.00 }),
                PathEl::LineTo(Point { x: 42.00, y: 26.00 }),
                PathEl::LineTo(Point { x: 8.00, y: 26.00 }),
                PathEl::LineTo(Point { x: 8.00, y: 30.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 8.00, y: 38.00 }),
                PathEl::LineTo(Point { x: 42.00, y: 38.00 }),
                PathEl::LineTo(Point { x: 42.00, y: 34.00 }),
                PathEl::LineTo(Point { x: 8.00, y: 34.00 }),
                PathEl::LineTo(Point { x: 8.00, y: 38.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 8.00, y: 22.00 }),
                PathEl::LineTo(Point { x: 42.00, y: 22.00 }),
                PathEl::LineTo(Point { x: 42.00, y: 18.00 }),
                PathEl::LineTo(Point { x: 8.00, y: 18.00 }),
                PathEl::LineTo(Point { x: 8.00, y: 22.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 8.00, y: 10.00 }),
                PathEl::LineTo(Point { x: 8.00, y: 14.00 }),
                PathEl::LineTo(Point { x: 42.00, y: 14.00 }),
                PathEl::LineTo(Point { x: 42.00, y: 10.00 }),
                PathEl::LineTo(Point { x: 8.00, y: 10.00 }),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct SubdirectoryArrowLeft {
    size: f64,
    color: Color,
}

impl SubdirectoryArrowLeft {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for SubdirectoryArrowLeft {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 20.00, y: 18.00 }),
                PathEl::LineTo(Point { x: 22.83, y: 20.83 }),
                PathEl::LineTo(Point { x: 15.66, y: 28.00 }),
                PathEl::LineTo(Point { x: 36.00, y: 28.00 }),
                PathEl::LineTo(Point { x: 36.00, y: 6.00 }),
                PathEl::LineTo(Point { x: 40.00, y: 6.00 }),
                PathEl::LineTo(Point { x: 40.00, y: 32.00 }),
                PathEl::LineTo(Point { x: 15.66, y: 32.00 }),
                PathEl::LineTo(Point { x: 22.83, y: 39.17 }),
                PathEl::LineTo(Point { x: 20.00, y: 42.00 }),
                PathEl::LineTo(Point { x: 8.00, y: 30.00 }),
                PathEl::LineTo(Point { x: 20.00, y: 18.00 }),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct ArrowUpward {
    size: f64,
    color: Color,
}

impl ArrowUpward {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for ArrowUpward {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 8.00, y: 24.00 }),
                PathEl::LineTo(Point { x: 10.83, y: 26.83 }),
                PathEl::LineTo(Point { x: 22.00, y: 15.66 }),
                PathEl::LineTo(Point { x: 22.00, y: 40.00 }),
                PathEl::LineTo(Point { x: 26.00, y: 40.00 }),
                PathEl::LineTo(Point { x: 26.00, y: 15.66 }),
                PathEl::LineTo(Point { x: 37.17, y: 26.83 }),
                PathEl::LineTo(Point { x: 40.00, y: 24.00 }),
                PathEl::LineTo(Point { x: 24.00, y: 8.00 }),
                PathEl::LineTo(Point { x: 8.00, y: 24.00 }),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct FilterHdr {
    size: f64,
    color: Color,
}

impl FilterHdr {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for FilterHdr {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 28.00, y: 12.00 }),
                PathEl::LineTo(Point { x: 20.50, y: 22.00 }),
                PathEl::LineTo(Point { x: 26.20, y: 29.60 }),
                PathEl::LineTo(Point { x: 23.00, y: 32.00 }),
                PathEl::CurveTo(
                    Point { x: 19.62, y: 27.50 },
                    Point { x: 14.00, y: 20.00 },
                    Point { x: 14.00, y: 20.00 },
                ),
                PathEl::LineTo(Point { x: 2.00, y: 36.00 }),
                PathEl::LineTo(Point { x: 46.00, y: 36.00 }),
                PathEl::LineTo(Point { x: 28.00, y: 12.00 }),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct Feedback {
    size: f64,
    color: Color,
}

impl Feedback {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for Feedback {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 40.00, y: 4.00 }),
                PathEl::LineTo(Point { x: 8.00, y: 4.00 }),
                PathEl::CurveTo(
                    Point { x: 5.79, y: 4.00 },
                    Point { x: 4.02, y: 5.79 },
                    Point { x: 4.02, y: 8.00 },
                ),
                PathEl::LineTo(Point { x: 4.00, y: 44.00 }),
                PathEl::LineTo(Point { x: 12.00, y: 36.00 }),
                PathEl::LineTo(Point { x: 40.00, y: 36.00 }),
                PathEl::CurveTo(
                    Point { x: 42.21, y: 36.00 },
                    Point { x: 44.00, y: 34.21 },
                    Point { x: 44.00, y: 32.00 },
                ),
                PathEl::LineTo(Point { x: 44.00, y: 8.00 }),
                PathEl::CurveTo(
                    Point { x: 44.00, y: 5.79 },
                    Point { x: 42.21, y: 4.00 },
                    Point { x: 40.00, y: 4.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 26.00, y: 28.00 }),
                PathEl::LineTo(Point { x: 22.00, y: 28.00 }),
                PathEl::LineTo(Point { x: 22.00, y: 24.00 }),
                PathEl::LineTo(Point { x: 26.00, y: 24.00 }),
                PathEl::LineTo(Point { x: 26.00, y: 28.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 26.00, y: 20.00 }),
                PathEl::LineTo(Point { x: 22.00, y: 20.00 }),
                PathEl::LineTo(Point { x: 22.00, y: 12.00 }),
                PathEl::LineTo(Point { x: 26.00, y: 12.00 }),
                PathEl::LineTo(Point { x: 26.00, y: 20.00 }),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct Watch {
    size: f64,
    color: Color,
}

impl Watch {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for Watch {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 40.00, y: 24.00 }),
                PathEl::CurveTo(
                    Point { x: 40.00, y: 18.91 },
                    Point { x: 37.62, y: 14.38 },
                    Point { x: 33.91, y: 11.45 },
                ),
                PathEl::LineTo(Point { x: 32.00, y: 0.00 }),
                PathEl::LineTo(Point { x: 16.00, y: 0.00 }),
                PathEl::LineTo(Point { x: 14.09, y: 11.45 }),
                PathEl::CurveTo(
                    Point { x: 10.38, y: 14.38 },
                    Point { x: 8.00, y: 18.91 },
                    Point { x: 8.00, y: 24.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 8.00, y: 29.09 },
                    Point { x: 10.38, y: 33.62 },
                    Point { x: 14.09, y: 36.55 },
                ),
                PathEl::LineTo(Point { x: 16.00, y: 48.00 }),
                PathEl::LineTo(Point { x: 32.00, y: 48.00 }),
                PathEl::LineTo(Point { x: 33.91, y: 36.55 }),
                PathEl::CurveTo(
                    Point { x: 37.62, y: 33.62 },
                    Point { x: 40.00, y: 29.09 },
                    Point { x: 40.00, y: 24.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 12.00, y: 24.00 }),
                PathEl::CurveTo(
                    Point { x: 12.00, y: 17.37 },
                    Point { x: 17.37, y: 12.00 },
                    Point { x: 24.00, y: 12.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 30.63, y: 12.00 },
                    Point { x: 36.00, y: 17.37 },
                    Point { x: 36.00, y: 24.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 36.00, y: 30.63 },
                    Point { x: 30.63, y: 36.00 },
                    Point { x: 24.00, y: 36.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 17.37, y: 36.00 },
                    Point { x: 12.00, y: 30.63 },
                    Point { x: 12.00, y: 24.00 },
                ),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct InsertLink {
    size: f64,
    color: Color,
}

impl InsertLink {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for InsertLink {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 7.80, y: 24.00 }),
                PathEl::CurveTo(
                    Point { x: 7.80, y: 20.58 },
                    Point { x: 10.58, y: 17.80 },
                    Point { x: 14.00, y: 17.80 },
                ),
                PathEl::LineTo(Point { x: 22.00, y: 17.80 }),
                PathEl::LineTo(Point { x: 22.00, y: 14.00 }),
                PathEl::LineTo(Point { x: 14.00, y: 14.00 }),
                PathEl::CurveTo(
                    Point { x: 8.48, y: 14.00 },
                    Point { x: 4.00, y: 18.48 },
                    Point { x: 4.00, y: 24.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 4.00, y: 29.52 },
                    Point { x: 8.48, y: 34.00 },
                    Point { x: 14.00, y: 34.00 },
                ),
                PathEl::LineTo(Point { x: 22.00, y: 34.00 }),
                PathEl::LineTo(Point { x: 22.00, y: 30.20 }),
                PathEl::LineTo(Point { x: 14.00, y: 30.20 }),
                PathEl::CurveTo(
                    Point { x: 10.58, y: 30.20 },
                    Point { x: 7.80, y: 27.42 },
                    Point { x: 7.80, y: 24.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 16.00, y: 26.00 }),
                PathEl::LineTo(Point { x: 32.00, y: 26.00 }),
                PathEl::LineTo(Point { x: 32.00, y: 22.00 }),
                PathEl::LineTo(Point { x: 16.00, y: 22.00 }),
                PathEl::LineTo(Point { x: 16.00, y: 26.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 34.00, y: 14.00 }),
                PathEl::LineTo(Point { x: 26.00, y: 14.00 }),
                PathEl::LineTo(Point { x: 26.00, y: 17.80 }),
                PathEl::LineTo(Point { x: 34.00, y: 17.80 }),
                PathEl::CurveTo(
                    Point { x: 37.42, y: 17.80 },
                    Point { x: 40.20, y: 20.58 },
                    Point { x: 40.20, y: 24.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 40.20, y: 27.42 },
                    Point { x: 37.42, y: 30.20 },
                    Point { x: 34.00, y: 30.20 },
                ),
                PathEl::LineTo(Point { x: 26.00, y: 30.20 }),
                PathEl::LineTo(Point { x: 26.00, y: 34.00 }),
                PathEl::LineTo(Point { x: 34.00, y: 34.00 }),
                PathEl::CurveTo(
                    Point { x: 39.52, y: 34.00 },
                    Point { x: 44.00, y: 29.52 },
                    Point { x: 44.00, y: 24.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 44.00, y: 18.48 },
                    Point { x: 39.52, y: 14.00 },
                    Point { x: 34.00, y: 14.00 },
                ),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct Smartphone {
    size: f64,
    color: Color,
}

impl Smartphone {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for Smartphone {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 34.00, y: 2.02 }),
                PathEl::LineTo(Point { x: 14.00, y: 2.00 }),
                PathEl::CurveTo(
                    Point { x: 11.79, y: 2.00 },
                    Point { x: 10.00, y: 3.79 },
                    Point { x: 10.00, y: 6.00 },
                ),
                PathEl::LineTo(Point { x: 10.00, y: 42.00 }),
                PathEl::CurveTo(
                    Point { x: 10.00, y: 44.21 },
                    Point { x: 11.79, y: 46.00 },
                    Point { x: 14.00, y: 46.00 },
                ),
                PathEl::LineTo(Point { x: 34.00, y: 46.00 }),
                PathEl::CurveTo(
                    Point { x: 36.21, y: 46.00 },
                    Point { x: 38.00, y: 44.21 },
                    Point { x: 38.00, y: 42.00 },
                ),
                PathEl::LineTo(Point { x: 38.00, y: 6.00 }),
                PathEl::CurveTo(
                    Point { x: 38.00, y: 3.79 },
                    Point { x: 36.21, y: 2.02 },
                    Point { x: 34.00, y: 2.02 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 34.00, y: 38.00 }),
                PathEl::LineTo(Point { x: 14.00, y: 38.00 }),
                PathEl::LineTo(Point { x: 14.00, y: 10.00 }),
                PathEl::LineTo(Point { x: 34.00, y: 10.00 }),
                PathEl::LineTo(Point { x: 34.00, y: 38.00 }),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct NetworkCheck {
    size: f64,
    color: Color,
}

impl NetworkCheck {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for NetworkCheck {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point {
                    x: 25.80,
                    y: -20.00,
                }),
                PathEl::CurveTo(
                    Point {
                        x: 25.45,
                        y: -20.00,
                    },
                    Point {
                        x: 25.16,
                        y: -19.81,
                    },
                    Point {
                        x: 24.98,
                        y: -19.54,
                    },
                ),
                PathEl::LineTo(Point {
                    x: 24.85,
                    y: -19.25,
                }),
                PathEl::LineTo(Point { x: 14.48, y: 4.06 }),
                PathEl::CurveTo(
                    Point { x: 14.16, y: 4.63 },
                    Point { x: 13.97, y: 5.28 },
                    Point { x: 13.97, y: 5.99 },
                ),
                PathEl::CurveTo(
                    Point { x: 13.97, y: 8.20 },
                    Point { x: 15.77, y: 10.00 },
                    Point { x: 17.98, y: 10.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 19.91, y: 10.00 },
                    Point { x: 21.51, y: 8.64 },
                    Point { x: 21.90, y: 6.83 },
                ),
                PathEl::LineTo(Point { x: 21.91, y: 6.76 }),
                PathEl::LineTo(Point {
                    x: 26.80,
                    y: -19.00,
                }),
                PathEl::CurveTo(
                    Point {
                        x: 26.80,
                        y: -19.55,
                    },
                    Point {
                        x: 26.35,
                        y: -20.00,
                    },
                    Point {
                        x: 25.80,
                        y: -20.00,
                    },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point {
                    x: -4.00,
                    y: -12.00,
                }),
                PathEl::LineTo(Point { x: 0.00, y: -8.00 }),
                PathEl::CurveTo(
                    Point { x: 5.75, y: -13.75 },
                    Point {
                        x: 13.57,
                        y: -16.15,
                    },
                    Point {
                        x: 21.07,
                        y: -15.25,
                    },
                ),
                PathEl::LineTo(Point {
                    x: 23.45,
                    y: -20.61,
                }),
                PathEl::CurveTo(
                    Point {
                        x: 13.79,
                        y: -22.32,
                    },
                    Point { x: 3.47, y: -19.46 },
                    Point {
                        x: -4.00,
                        y: -12.00,
                    },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 36.00, y: -8.00 }),
                PathEl::LineTo(Point {
                    x: 40.00,
                    y: -12.00,
                }),
                PathEl::CurveTo(
                    Point {
                        x: 36.73,
                        y: -15.27,
                    },
                    Point {
                        x: 32.90,
                        y: -17.63,
                    },
                    Point {
                        x: 28.83,
                        y: -19.14,
                    },
                ),
                PathEl::LineTo(Point {
                    x: 27.76,
                    y: -13.51,
                }),
                PathEl::CurveTo(
                    Point {
                        x: 30.75,
                        y: -12.27,
                    },
                    Point {
                        x: 33.56,
                        y: -10.44,
                    },
                    Point { x: 36.00, y: -8.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 28.00, y: 0.00 }),
                PathEl::LineTo(Point { x: 32.00, y: -4.00 }),
                PathEl::CurveTo(
                    Point { x: 30.40, y: -5.60 },
                    Point { x: 28.59, y: -6.84 },
                    Point { x: 26.67, y: -7.78 },
                ),
                PathEl::LineTo(Point { x: 25.56, y: -1.94 }),
                PathEl::CurveTo(
                    Point { x: 26.43, y: -1.39 },
                    Point { x: 27.25, y: -0.75 },
                    Point { x: 28.00, y: 0.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 4.00, y: -4.00 }),
                PathEl::LineTo(Point { x: 8.00, y: 0.00 }),
                PathEl::CurveTo(
                    Point { x: 10.27, y: -2.27 },
                    Point { x: 13.11, y: -3.59 },
                    Point { x: 16.06, y: -3.99 },
                ),
                PathEl::LineTo(Point { x: 18.63, y: -9.76 }),
                PathEl::CurveTo(
                    Point { x: 13.35, y: -9.92 },
                    Point { x: 8.03, y: -8.02 },
                    Point { x: 4.00, y: -4.00 },
                ),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct Gif {
    size: f64,
    color: Color,
}

impl Gif {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for Gif {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 24.0, height / 24.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 11.50, y: 9.00 }),
                PathEl::LineTo(Point { x: 13.00, y: 9.00 }),
                PathEl::LineTo(Point { x: 13.00, y: 15.00 }),
                PathEl::LineTo(Point { x: 11.50, y: 15.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 9.00, y: 9.00 }),
                PathEl::LineTo(Point { x: 6.00, y: 9.00 }),
                PathEl::CurveTo(
                    Point { x: 5.40, y: 9.00 },
                    Point { x: 5.00, y: 9.50 },
                    Point { x: 5.00, y: 10.00 },
                ),
                PathEl::LineTo(Point { x: 5.00, y: 14.00 }),
                PathEl::CurveTo(
                    Point { x: 5.00, y: 14.50 },
                    Point { x: 5.40, y: 15.00 },
                    Point { x: 6.00, y: 15.00 },
                ),
                PathEl::LineTo(Point { x: 9.00, y: 15.00 }),
                PathEl::CurveTo(
                    Point { x: 9.60, y: 15.00 },
                    Point { x: 10.00, y: 14.50 },
                    Point { x: 10.00, y: 14.00 },
                ),
                PathEl::LineTo(Point { x: 10.00, y: 12.00 }),
                PathEl::LineTo(Point { x: 8.50, y: 12.00 }),
                PathEl::LineTo(Point { x: 8.50, y: 13.50 }),
                PathEl::LineTo(Point { x: 6.50, y: 13.50 }),
                PathEl::LineTo(Point { x: 6.50, y: 10.50 }),
                PathEl::LineTo(Point { x: 10.00, y: 10.50 }),
                PathEl::LineTo(Point { x: 10.00, y: 10.00 }),
                PathEl::CurveTo(
                    Point { x: 10.00, y: 9.50 },
                    Point { x: 9.60, y: 9.00 },
                    Point { x: 9.00, y: 9.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 19.00, y: 10.50 }),
                PathEl::LineTo(Point { x: 19.00, y: 9.00 }),
                PathEl::LineTo(Point { x: 14.50, y: 9.00 }),
                PathEl::LineTo(Point { x: 14.50, y: 15.00 }),
                PathEl::LineTo(Point { x: 16.00, y: 15.00 }),
                PathEl::LineTo(Point { x: 16.00, y: 13.00 }),
                PathEl::LineTo(Point { x: 18.00, y: 13.00 }),
                PathEl::LineTo(Point { x: 18.00, y: 11.50 }),
                PathEl::LineTo(Point { x: 16.00, y: 11.50 }),
                PathEl::LineTo(Point { x: 16.00, y: 10.50 }),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct BorderHorizontal {
    size: f64,
    color: Color,
}

impl BorderHorizontal {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for BorderHorizontal {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 6.00, y: 42.00 }),
                PathEl::LineTo(Point { x: 10.00, y: 42.00 }),
                PathEl::LineTo(Point { x: 10.00, y: 38.00 }),
                PathEl::LineTo(Point { x: 6.00, y: 38.00 }),
                PathEl::LineTo(Point { x: 6.00, y: 42.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 10.00, y: 14.00 }),
                PathEl::LineTo(Point { x: 6.00, y: 14.00 }),
                PathEl::LineTo(Point { x: 6.00, y: 18.00 }),
                PathEl::LineTo(Point { x: 10.00, y: 18.00 }),
                PathEl::LineTo(Point { x: 10.00, y: 14.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 6.00, y: 34.00 }),
                PathEl::LineTo(Point { x: 10.00, y: 34.00 }),
                PathEl::LineTo(Point { x: 10.00, y: 30.00 }),
                PathEl::LineTo(Point { x: 6.00, y: 30.00 }),
                PathEl::LineTo(Point { x: 6.00, y: 34.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 14.00, y: 42.00 }),
                PathEl::LineTo(Point { x: 18.00, y: 42.00 }),
                PathEl::LineTo(Point { x: 18.00, y: 38.00 }),
                PathEl::LineTo(Point { x: 14.00, y: 38.00 }),
                PathEl::LineTo(Point { x: 14.00, y: 42.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 10.00, y: 6.00 }),
                PathEl::LineTo(Point { x: 6.00, y: 6.00 }),
                PathEl::LineTo(Point { x: 6.00, y: 10.00 }),
                PathEl::LineTo(Point { x: 10.00, y: 10.00 }),
                PathEl::LineTo(Point { x: 10.00, y: 6.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 18.00, y: 6.00 }),
                PathEl::LineTo(Point { x: 14.00, y: 6.00 }),
                PathEl::LineTo(Point { x: 14.00, y: 10.00 }),
                PathEl::LineTo(Point { x: 18.00, y: 10.00 }),
                PathEl::LineTo(Point { x: 18.00, y: 6.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 34.00, y: 6.00 }),
                PathEl::LineTo(Point { x: 30.00, y: 6.00 }),
                PathEl::LineTo(Point { x: 30.00, y: 10.00 }),
                PathEl::LineTo(Point { x: 34.00, y: 10.00 }),
                PathEl::LineTo(Point { x: 34.00, y: 6.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 26.00, y: 14.00 }),
                PathEl::LineTo(Point { x: 22.00, y: 14.00 }),
                PathEl::LineTo(Point { x: 22.00, y: 18.00 }),
                PathEl::LineTo(Point { x: 26.00, y: 18.00 }),
                PathEl::LineTo(Point { x: 26.00, y: 14.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 26.00, y: 6.00 }),
                PathEl::LineTo(Point { x: 22.00, y: 6.00 }),
                PathEl::LineTo(Point { x: 22.00, y: 10.00 }),
                PathEl::LineTo(Point { x: 26.00, y: 10.00 }),
                PathEl::LineTo(Point { x: 26.00, y: 6.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 38.00, y: 34.00 }),
                PathEl::LineTo(Point { x: 42.00, y: 34.00 }),
                PathEl::LineTo(Point { x: 42.00, y: 30.00 }),
                PathEl::LineTo(Point { x: 38.00, y: 30.00 }),
                PathEl::LineTo(Point { x: 38.00, y: 34.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 22.00, y: 42.00 }),
                PathEl::LineTo(Point { x: 26.00, y: 42.00 }),
                PathEl::LineTo(Point { x: 26.00, y: 38.00 }),
                PathEl::LineTo(Point { x: 22.00, y: 38.00 }),
                PathEl::LineTo(Point { x: 22.00, y: 42.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 6.00, y: 26.00 }),
                PathEl::LineTo(Point { x: 42.00, y: 26.00 }),
                PathEl::LineTo(Point { x: 42.00, y: 22.00 }),
                PathEl::LineTo(Point { x: 6.00, y: 22.00 }),
                PathEl::LineTo(Point { x: 6.00, y: 26.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 38.00, y: 6.00 }),
                PathEl::LineTo(Point { x: 38.00, y: 10.00 }),
                PathEl::LineTo(Point { x: 42.00, y: 10.00 }),
                PathEl::LineTo(Point { x: 42.00, y: 6.00 }),
                PathEl::LineTo(Point { x: 38.00, y: 6.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 38.00, y: 18.00 }),
                PathEl::LineTo(Point { x: 42.00, y: 18.00 }),
                PathEl::LineTo(Point { x: 42.00, y: 14.00 }),
                PathEl::LineTo(Point { x: 38.00, y: 14.00 }),
                PathEl::LineTo(Point { x: 38.00, y: 18.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 22.00, y: 34.00 }),
                PathEl::LineTo(Point { x: 26.00, y: 34.00 }),
                PathEl::LineTo(Point { x: 26.00, y: 30.00 }),
                PathEl::LineTo(Point { x: 22.00, y: 30.00 }),
                PathEl::LineTo(Point { x: 22.00, y: 34.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 30.00, y: 42.00 }),
                PathEl::LineTo(Point { x: 34.00, y: 42.00 }),
                PathEl::LineTo(Point { x: 34.00, y: 38.00 }),
                PathEl::LineTo(Point { x: 30.00, y: 38.00 }),
                PathEl::LineTo(Point { x: 30.00, y: 42.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 38.00, y: 42.00 }),
                PathEl::LineTo(Point { x: 42.00, y: 42.00 }),
                PathEl::LineTo(Point { x: 42.00, y: 38.00 }),
                PathEl::LineTo(Point { x: 38.00, y: 38.00 }),
                PathEl::LineTo(Point { x: 38.00, y: 42.00 }),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct MoreVert {
    size: f64,
    color: Color,
}

impl MoreVert {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for MoreVert {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 24.00, y: 16.00 }),
                PathEl::CurveTo(
                    Point { x: 26.21, y: 16.00 },
                    Point { x: 28.00, y: 14.21 },
                    Point { x: 28.00, y: 12.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 28.00, y: 9.79 },
                    Point { x: 26.21, y: 8.00 },
                    Point { x: 24.00, y: 8.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 21.79, y: 8.00 },
                    Point { x: 20.00, y: 9.79 },
                    Point { x: 20.00, y: 12.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 20.00, y: 14.21 },
                    Point { x: 21.79, y: 16.00 },
                    Point { x: 24.00, y: 16.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 24.00, y: 20.00 }),
                PathEl::CurveTo(
                    Point { x: 21.79, y: 20.00 },
                    Point { x: 20.00, y: 21.79 },
                    Point { x: 20.00, y: 24.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 20.00, y: 26.21 },
                    Point { x: 21.79, y: 28.00 },
                    Point { x: 24.00, y: 28.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 26.21, y: 28.00 },
                    Point { x: 28.00, y: 26.21 },
                    Point { x: 28.00, y: 24.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 28.00, y: 21.79 },
                    Point { x: 26.21, y: 20.00 },
                    Point { x: 24.00, y: 20.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 24.00, y: 32.00 }),
                PathEl::CurveTo(
                    Point { x: 21.79, y: 32.00 },
                    Point { x: 20.00, y: 33.79 },
                    Point { x: 20.00, y: 36.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 20.00, y: 38.21 },
                    Point { x: 21.79, y: 40.00 },
                    Point { x: 24.00, y: 40.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 26.21, y: 40.00 },
                    Point { x: 28.00, y: 38.21 },
                    Point { x: 28.00, y: 36.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 28.00, y: 33.79 },
                    Point { x: 26.21, y: 32.00 },
                    Point { x: 24.00, y: 32.00 },
                ),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct Iso {
    size: f64,
    color: Color,
}

impl Iso {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for Iso {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 38.00, y: 6.00 }),
                PathEl::LineTo(Point { x: 10.00, y: 6.00 }),
                PathEl::CurveTo(
                    Point { x: 7.79, y: 6.00 },
                    Point { x: 6.00, y: 7.79 },
                    Point { x: 6.00, y: 10.00 },
                ),
                PathEl::LineTo(Point { x: 6.00, y: 38.00 }),
                PathEl::CurveTo(
                    Point { x: 6.00, y: 40.21 },
                    Point { x: 7.79, y: 42.00 },
                    Point { x: 10.00, y: 42.00 },
                ),
                PathEl::LineTo(Point { x: 38.00, y: 42.00 }),
                PathEl::CurveTo(
                    Point { x: 40.21, y: 42.00 },
                    Point { x: 42.00, y: 40.21 },
                    Point { x: 42.00, y: 38.00 },
                ),
                PathEl::LineTo(Point { x: 42.00, y: 10.00 }),
                PathEl::CurveTo(
                    Point { x: 42.00, y: 7.79 },
                    Point { x: 40.21, y: 6.00 },
                    Point { x: 38.00, y: 6.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 11.00, y: 15.00 }),
                PathEl::LineTo(Point { x: 15.00, y: 15.00 }),
                PathEl::LineTo(Point { x: 15.00, y: 11.00 }),
                PathEl::LineTo(Point { x: 18.00, y: 11.00 }),
                PathEl::LineTo(Point { x: 18.00, y: 15.00 }),
                PathEl::LineTo(Point { x: 22.00, y: 15.00 }),
                PathEl::LineTo(Point { x: 22.00, y: 18.00 }),
                PathEl::LineTo(Point { x: 18.00, y: 18.00 }),
                PathEl::LineTo(Point { x: 18.00, y: 22.00 }),
                PathEl::LineTo(Point { x: 15.00, y: 22.00 }),
                PathEl::LineTo(Point { x: 15.00, y: 18.00 }),
                PathEl::LineTo(Point { x: 11.00, y: 18.00 }),
                PathEl::LineTo(Point { x: 11.00, y: 15.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 38.00, y: 38.00 }),
                PathEl::LineTo(Point { x: 10.00, y: 38.00 }),
                PathEl::LineTo(Point { x: 38.00, y: 10.00 }),
                PathEl::LineTo(Point { x: 38.00, y: 38.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 34.00, y: 34.00 }),
                PathEl::LineTo(Point { x: 34.00, y: 31.00 }),
                PathEl::LineTo(Point { x: 24.00, y: 31.00 }),
                PathEl::LineTo(Point { x: 24.00, y: 34.00 }),
                PathEl::LineTo(Point { x: 34.00, y: 34.00 }),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct SignalWifi4Bar {
    size: f64,
    color: Color,
}

impl SignalWifi4Bar {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for SignalWifi4Bar {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 24.02, y: 42.98 }),
                PathEl::LineTo(Point { x: 47.28, y: 14.00 }),
                PathEl::CurveTo(
                    Point { x: 46.38, y: 13.32 },
                    Point { x: 37.43, y: 6.00 },
                    Point { x: 24.00, y: 6.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 10.57, y: 6.00 },
                    Point { x: 1.62, y: 13.32 },
                    Point { x: 0.72, y: 14.00 },
                ),
                PathEl::LineTo(Point { x: 23.98, y: 42.98 }),
                PathEl::LineTo(Point { x: 24.00, y: 43.00 }),
                PathEl::LineTo(Point { x: 24.02, y: 42.98 }),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct LineStyle {
    size: f64,
    color: Color,
}

impl LineStyle {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for LineStyle {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 6.00, y: 32.00 }),
                PathEl::LineTo(Point { x: 16.00, y: 32.00 }),
                PathEl::LineTo(Point { x: 16.00, y: 28.00 }),
                PathEl::LineTo(Point { x: 6.00, y: 28.00 }),
                PathEl::LineTo(Point { x: 6.00, y: 32.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 19.00, y: 32.00 }),
                PathEl::LineTo(Point { x: 29.00, y: 32.00 }),
                PathEl::LineTo(Point { x: 29.00, y: 28.00 }),
                PathEl::LineTo(Point { x: 19.00, y: 28.00 }),
                PathEl::LineTo(Point { x: 19.00, y: 32.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 32.00, y: 32.00 }),
                PathEl::LineTo(Point { x: 42.00, y: 32.00 }),
                PathEl::LineTo(Point { x: 42.00, y: 28.00 }),
                PathEl::LineTo(Point { x: 32.00, y: 28.00 }),
                PathEl::LineTo(Point { x: 32.00, y: 32.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 6.00, y: 40.00 }),
                PathEl::LineTo(Point { x: 10.00, y: 40.00 }),
                PathEl::LineTo(Point { x: 10.00, y: 36.00 }),
                PathEl::LineTo(Point { x: 6.00, y: 36.00 }),
                PathEl::LineTo(Point { x: 6.00, y: 40.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 14.00, y: 40.00 }),
                PathEl::LineTo(Point { x: 18.00, y: 40.00 }),
                PathEl::LineTo(Point { x: 18.00, y: 36.00 }),
                PathEl::LineTo(Point { x: 14.00, y: 36.00 }),
                PathEl::LineTo(Point { x: 14.00, y: 40.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 22.00, y: 40.00 }),
                PathEl::LineTo(Point { x: 26.00, y: 40.00 }),
                PathEl::LineTo(Point { x: 26.00, y: 36.00 }),
                PathEl::LineTo(Point { x: 22.00, y: 36.00 }),
                PathEl::LineTo(Point { x: 22.00, y: 40.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 30.00, y: 40.00 }),
                PathEl::LineTo(Point { x: 34.00, y: 40.00 }),
                PathEl::LineTo(Point { x: 34.00, y: 36.00 }),
                PathEl::LineTo(Point { x: 30.00, y: 36.00 }),
                PathEl::LineTo(Point { x: 30.00, y: 40.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 38.00, y: 40.00 }),
                PathEl::LineTo(Point { x: 42.00, y: 40.00 }),
                PathEl::LineTo(Point { x: 42.00, y: 36.00 }),
                PathEl::LineTo(Point { x: 38.00, y: 36.00 }),
                PathEl::LineTo(Point { x: 38.00, y: 40.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 6.00, y: 24.00 }),
                PathEl::LineTo(Point { x: 22.00, y: 24.00 }),
                PathEl::LineTo(Point { x: 22.00, y: 20.00 }),
                PathEl::LineTo(Point { x: 6.00, y: 20.00 }),
                PathEl::LineTo(Point { x: 6.00, y: 24.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 26.00, y: 24.00 }),
                PathEl::LineTo(Point { x: 42.00, y: 24.00 }),
                PathEl::LineTo(Point { x: 42.00, y: 20.00 }),
                PathEl::LineTo(Point { x: 26.00, y: 20.00 }),
                PathEl::LineTo(Point { x: 26.00, y: 24.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 6.00, y: 8.00 }),
                PathEl::LineTo(Point { x: 6.00, y: 16.00 }),
                PathEl::LineTo(Point { x: 42.00, y: 16.00 }),
                PathEl::LineTo(Point { x: 42.00, y: 8.00 }),
                PathEl::LineTo(Point { x: 6.00, y: 8.00 }),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct HdrStrong {
    size: f64,
    color: Color,
}

impl HdrStrong {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for HdrStrong {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 34.00, y: 12.00 }),
                PathEl::CurveTo(
                    Point { x: 27.37, y: 12.00 },
                    Point { x: 22.00, y: 17.37 },
                    Point { x: 22.00, y: 24.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 22.00, y: 30.63 },
                    Point { x: 27.37, y: 36.00 },
                    Point { x: 34.00, y: 36.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 40.63, y: 36.00 },
                    Point { x: 46.00, y: 30.63 },
                    Point { x: 46.00, y: 24.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 46.00, y: 17.37 },
                    Point { x: 40.63, y: 12.00 },
                    Point { x: 34.00, y: 12.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 10.00, y: 16.00 }),
                PathEl::CurveTo(
                    Point { x: 5.58, y: 16.00 },
                    Point { x: 2.00, y: 19.58 },
                    Point { x: 2.00, y: 24.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 2.00, y: 28.42 },
                    Point { x: 5.58, y: 32.00 },
                    Point { x: 10.00, y: 32.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 14.42, y: 32.00 },
                    Point { x: 18.00, y: 28.42 },
                    Point { x: 18.00, y: 24.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 18.00, y: 19.58 },
                    Point { x: 14.42, y: 16.00 },
                    Point { x: 10.00, y: 16.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 10.00, y: 28.00 }),
                PathEl::CurveTo(
                    Point { x: 7.79, y: 28.00 },
                    Point { x: 6.00, y: 26.21 },
                    Point { x: 6.00, y: 24.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 6.00, y: 21.79 },
                    Point { x: 7.79, y: 20.00 },
                    Point { x: 10.00, y: 20.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 12.21, y: 20.00 },
                    Point { x: 14.00, y: 21.79 },
                    Point { x: 14.00, y: 24.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 14.00, y: 26.21 },
                    Point { x: 12.21, y: 28.00 },
                    Point { x: 10.00, y: 28.00 },
                ),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct RateReview {
    size: f64,
    color: Color,
}

impl RateReview {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for RateReview {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 40.00, y: 4.00 }),
                PathEl::LineTo(Point { x: 8.00, y: 4.00 }),
                PathEl::CurveTo(
                    Point { x: 5.79, y: 4.00 },
                    Point { x: 4.02, y: 5.79 },
                    Point { x: 4.02, y: 8.00 },
                ),
                PathEl::LineTo(Point { x: 4.00, y: 44.00 }),
                PathEl::LineTo(Point { x: 12.00, y: 36.00 }),
                PathEl::LineTo(Point { x: 40.00, y: 36.00 }),
                PathEl::CurveTo(
                    Point { x: 42.21, y: 36.00 },
                    Point { x: 44.00, y: 34.21 },
                    Point { x: 44.00, y: 32.00 },
                ),
                PathEl::LineTo(Point { x: 44.00, y: 8.00 }),
                PathEl::CurveTo(
                    Point { x: 44.00, y: 5.79 },
                    Point { x: 42.21, y: 4.00 },
                    Point { x: 40.00, y: 4.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 12.00, y: 28.00 }),
                PathEl::LineTo(Point { x: 12.00, y: 23.05 }),
                PathEl::LineTo(Point { x: 25.76, y: 9.29 }),
                PathEl::CurveTo(
                    Point { x: 26.15, y: 8.90 },
                    Point { x: 26.78, y: 8.90 },
                    Point { x: 27.17, y: 9.29 },
                ),
                PathEl::LineTo(Point { x: 30.71, y: 12.83 }),
                PathEl::CurveTo(
                    Point { x: 31.10, y: 13.22 },
                    Point { x: 31.10, y: 13.85 },
                    Point { x: 30.71, y: 14.24 },
                ),
                PathEl::LineTo(Point { x: 16.95, y: 28.00 }),
                PathEl::LineTo(Point { x: 12.00, y: 28.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 36.00, y: 28.00 }),
                PathEl::LineTo(Point { x: 21.00, y: 28.00 }),
                PathEl::LineTo(Point { x: 25.00, y: 24.00 }),
                PathEl::LineTo(Point { x: 36.00, y: 24.00 }),
                PathEl::LineTo(Point { x: 36.00, y: 28.00 }),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct Tram {
    size: f64,
    color: Color,
}

impl Tram {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for Tram {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 38.00, y: 33.88 }),
                PathEl::LineTo(Point { x: 38.00, y: 17.00 }),
                PathEl::CurveTo(
                    Point { x: 38.00, y: 11.41 },
                    Point { x: 32.78, y: 10.20 },
                    Point { x: 25.99, y: 10.03 },
                ),
                PathEl::LineTo(Point { x: 27.50, y: 7.00 }),
                PathEl::LineTo(Point { x: 34.00, y: 7.00 }),
                PathEl::LineTo(Point { x: 34.00, y: 4.00 }),
                PathEl::LineTo(Point { x: 14.00, y: 4.00 }),
                PathEl::LineTo(Point { x: 14.00, y: 7.00 }),
                PathEl::LineTo(Point { x: 23.50, y: 7.00 }),
                PathEl::LineTo(Point { x: 21.98, y: 10.03 }),
                PathEl::CurveTo(
                    Point { x: 15.72, y: 10.22 },
                    Point { x: 10.00, y: 11.47 },
                    Point { x: 10.00, y: 17.00 },
                ),
                PathEl::LineTo(Point { x: 10.00, y: 33.88 }),
                PathEl::CurveTo(
                    Point { x: 10.00, y: 36.77 },
                    Point { x: 12.37, y: 39.19 },
                    Point { x: 15.18, y: 39.83 },
                ),
                PathEl::LineTo(Point { x: 12.00, y: 43.00 }),
                PathEl::LineTo(Point { x: 12.00, y: 44.00 }),
                PathEl::LineTo(Point { x: 16.46, y: 44.00 }),
                PathEl::LineTo(Point { x: 20.46, y: 40.00 }),
                PathEl::LineTo(Point { x: 28.00, y: 40.00 }),
                PathEl::LineTo(Point { x: 32.00, y: 44.00 }),
                PathEl::LineTo(Point { x: 36.00, y: 44.00 }),
                PathEl::LineTo(Point { x: 36.00, y: 43.00 }),
                PathEl::LineTo(Point { x: 33.00, y: 40.00 }),
                PathEl::LineTo(Point { x: 32.84, y: 40.00 }),
                PathEl::CurveTo(
                    Point { x: 36.22, y: 40.00 },
                    Point { x: 38.00, y: 37.25 },
                    Point { x: 38.00, y: 33.88 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 24.00, y: 37.00 }),
                PathEl::CurveTo(
                    Point { x: 22.34, y: 37.00 },
                    Point { x: 21.00, y: 35.66 },
                    Point { x: 21.00, y: 34.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 21.00, y: 32.34 },
                    Point { x: 22.34, y: 31.00 },
                    Point { x: 24.00, y: 31.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 25.66, y: 31.00 },
                    Point { x: 27.00, y: 32.34 },
                    Point { x: 27.00, y: 34.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 27.00, y: 35.66 },
                    Point { x: 25.66, y: 37.00 },
                    Point { x: 24.00, y: 37.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 34.00, y: 28.00 }),
                PathEl::LineTo(Point { x: 14.00, y: 28.00 }),
                PathEl::LineTo(Point { x: 14.00, y: 18.00 }),
                PathEl::LineTo(Point { x: 34.00, y: 18.00 }),
                PathEl::LineTo(Point { x: 34.00, y: 28.00 }),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct RssFeed {
    size: f64,
    color: Color,
}

impl RssFeed {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for RssFeed {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            Circle {
                center: Point { x: 12.36, y: 35.64 },
                radius: 4.36,
            },
            &brush,
        );
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 8.00, y: 8.89 }),
                PathEl::LineTo(Point { x: 8.00, y: 14.55 }),
                PathEl::CurveTo(
                    Point { x: 22.06, y: 14.55 },
                    Point { x: 33.46, y: 25.95 },
                    Point { x: 33.46, y: 40.01 },
                ),
                PathEl::LineTo(Point { x: 39.12, y: 40.01 }),
                PathEl::CurveTo(
                    Point { x: 39.11, y: 22.82 },
                    Point { x: 25.18, y: 8.89 },
                    Point { x: 8.00, y: 8.89 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 8.00, y: 20.20 }),
                PathEl::LineTo(Point { x: 8.00, y: 25.86 }),
                PathEl::CurveTo(
                    Point { x: 15.81, y: 25.86 },
                    Point { x: 22.14, y: 32.20 },
                    Point { x: 22.14, y: 40.00 },
                ),
                PathEl::LineTo(Point { x: 27.80, y: 40.00 }),
                PathEl::CurveTo(
                    Point { x: 27.80, y: 29.07 },
                    Point { x: 18.93, y: 20.20 },
                    Point { x: 8.00, y: 20.20 },
                ),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct Kitchen {
    size: f64,
    color: Color,
}

impl Kitchen {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for Kitchen {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 36.00, y: 4.02 }),
                PathEl::LineTo(Point { x: 12.00, y: 4.00 }),
                PathEl::CurveTo(
                    Point { x: 9.79, y: 4.00 },
                    Point { x: 8.00, y: 5.79 },
                    Point { x: 8.00, y: 8.00 },
                ),
                PathEl::LineTo(Point { x: 8.00, y: 40.00 }),
                PathEl::CurveTo(
                    Point { x: 8.00, y: 42.21 },
                    Point { x: 9.79, y: 44.00 },
                    Point { x: 12.00, y: 44.00 },
                ),
                PathEl::LineTo(Point { x: 36.00, y: 44.00 }),
                PathEl::CurveTo(
                    Point { x: 38.21, y: 44.00 },
                    Point { x: 40.00, y: 42.21 },
                    Point { x: 40.00, y: 40.00 },
                ),
                PathEl::LineTo(Point { x: 40.00, y: 8.00 }),
                PathEl::CurveTo(
                    Point { x: 40.00, y: 5.79 },
                    Point { x: 38.21, y: 4.02 },
                    Point { x: 36.00, y: 4.02 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 36.00, y: 40.00 }),
                PathEl::LineTo(Point { x: 12.00, y: 40.00 }),
                PathEl::LineTo(Point { x: 12.00, y: 21.95 }),
                PathEl::LineTo(Point { x: 36.00, y: 21.95 }),
                PathEl::LineTo(Point { x: 36.00, y: 40.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 36.00, y: 18.00 }),
                PathEl::LineTo(Point { x: 12.00, y: 18.00 }),
                PathEl::LineTo(Point { x: 12.00, y: 8.00 }),
                PathEl::LineTo(Point { x: 36.00, y: 8.00 }),
                PathEl::LineTo(Point { x: 36.00, y: 18.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 16.00, y: 10.00 }),
                PathEl::LineTo(Point { x: 20.00, y: 10.00 }),
                PathEl::LineTo(Point { x: 20.00, y: 16.00 }),
                PathEl::LineTo(Point { x: 16.00, y: 16.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 16.00, y: 24.00 }),
                PathEl::LineTo(Point { x: 20.00, y: 24.00 }),
                PathEl::LineTo(Point { x: 20.00, y: 34.00 }),
                PathEl::LineTo(Point { x: 16.00, y: 34.00 }),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct AccessTime {
    size: f64,
    color: Color,
}

impl AccessTime {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for AccessTime {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 23.99, y: 4.00 }),
                PathEl::CurveTo(
                    Point { x: 12.94, y: 4.00 },
                    Point { x: 4.00, y: 12.95 },
                    Point { x: 4.00, y: 24.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 4.00, y: 35.05 },
                    Point { x: 12.94, y: 44.00 },
                    Point { x: 23.99, y: 44.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 35.04, y: 44.00 },
                    Point { x: 44.00, y: 35.05 },
                    Point { x: 44.00, y: 24.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 44.00, y: 12.95 },
                    Point { x: 35.04, y: 4.00 },
                    Point { x: 23.99, y: 4.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 24.00, y: 40.00 }),
                PathEl::CurveTo(
                    Point { x: 15.16, y: 40.00 },
                    Point { x: 8.00, y: 32.84 },
                    Point { x: 8.00, y: 24.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 8.00, y: 15.16 },
                    Point { x: 15.16, y: 8.00 },
                    Point { x: 24.00, y: 8.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 32.84, y: 8.00 },
                    Point { x: 40.00, y: 15.16 },
                    Point { x: 40.00, y: 24.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 40.00, y: 32.84 },
                    Point { x: 32.84, y: 40.00 },
                    Point { x: 24.00, y: 40.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 25.00, y: 14.00 }),
                PathEl::LineTo(Point { x: 22.00, y: 14.00 }),
                PathEl::LineTo(Point { x: 22.00, y: 26.00 }),
                PathEl::LineTo(Point { x: 32.49, y: 32.30 }),
                PathEl::LineTo(Point { x: 34.00, y: 29.84 }),
                PathEl::LineTo(Point { x: 25.00, y: 24.50 }),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct StayCurrentLandscape {
    size: f64,
    color: Color,
}

impl StayCurrentLandscape {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for StayCurrentLandscape {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 2.02, y: 14.00 }),
                PathEl::LineTo(Point { x: 2.00, y: 34.00 }),
                PathEl::CurveTo(
                    Point { x: 2.00, y: 36.21 },
                    Point { x: 3.79, y: 38.00 },
                    Point { x: 6.00, y: 38.00 },
                ),
                PathEl::LineTo(Point { x: 42.00, y: 38.00 }),
                PathEl::CurveTo(
                    Point { x: 44.21, y: 38.00 },
                    Point { x: 46.00, y: 36.21 },
                    Point { x: 46.00, y: 34.00 },
                ),
                PathEl::LineTo(Point { x: 46.00, y: 14.00 }),
                PathEl::CurveTo(
                    Point { x: 46.00, y: 11.79 },
                    Point { x: 44.21, y: 10.00 },
                    Point { x: 42.00, y: 10.00 },
                ),
                PathEl::LineTo(Point { x: 6.00, y: 10.00 }),
                PathEl::CurveTo(
                    Point { x: 3.79, y: 10.00 },
                    Point { x: 2.02, y: 11.79 },
                    Point { x: 2.02, y: 14.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 38.00, y: 14.00 }),
                PathEl::LineTo(Point { x: 38.00, y: 34.00 }),
                PathEl::LineTo(Point { x: 10.00, y: 34.00 }),
                PathEl::LineTo(Point { x: 10.00, y: 14.00 }),
                PathEl::LineTo(Point { x: 38.00, y: 14.00 }),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct SmokingRooms {
    size: f64,
    color: Color,
}

impl SmokingRooms {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for SmokingRooms {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 4.00, y: 32.00 }),
                PathEl::LineTo(Point { x: 34.00, y: 32.00 }),
                PathEl::LineTo(Point { x: 34.00, y: 38.00 }),
                PathEl::LineTo(Point { x: 4.00, y: 38.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 41.00, y: 32.00 }),
                PathEl::LineTo(Point { x: 44.00, y: 32.00 }),
                PathEl::LineTo(Point { x: 44.00, y: 38.00 }),
                PathEl::LineTo(Point { x: 41.00, y: 38.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 36.00, y: 32.00 }),
                PathEl::LineTo(Point { x: 39.00, y: 32.00 }),
                PathEl::LineTo(Point { x: 39.00, y: 38.00 }),
                PathEl::LineTo(Point { x: 36.00, y: 38.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 37.70, y: 15.46 }),
                PathEl::CurveTo(
                    Point { x: 38.93, y: 14.25 },
                    Point { x: 39.70, y: 12.56 },
                    Point { x: 39.70, y: 10.70 },
                ),
                PathEl::CurveTo(
                    Point { x: 39.70, y: 7.00 },
                    Point { x: 36.69, y: 4.00 },
                    Point { x: 33.00, y: 4.00 },
                ),
                PathEl::LineTo(Point { x: 33.00, y: 7.00 }),
                PathEl::CurveTo(
                    Point { x: 35.04, y: 7.00 },
                    Point { x: 36.70, y: 8.66 },
                    Point { x: 36.70, y: 10.70 },
                ),
                PathEl::CurveTo(
                    Point { x: 36.70, y: 12.74 },
                    Point { x: 35.04, y: 14.40 },
                    Point { x: 33.00, y: 14.40 },
                ),
                PathEl::LineTo(Point { x: 33.00, y: 17.40 }),
                PathEl::CurveTo(
                    Point { x: 37.49, y: 17.40 },
                    Point { x: 41.00, y: 21.05 },
                    Point { x: 41.00, y: 25.54 },
                ),
                PathEl::LineTo(Point { x: 41.00, y: 30.00 }),
                PathEl::LineTo(Point { x: 44.00, y: 30.00 }),
                PathEl::LineTo(Point { x: 44.00, y: 25.53 }),
                PathEl::CurveTo(
                    Point { x: 44.00, y: 21.08 },
                    Point { x: 41.44, y: 17.24 },
                    Point { x: 37.70, y: 15.46 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 32.06, y: 20.39 }),
                PathEl::LineTo(Point { x: 29.00, y: 20.39 }),
                PathEl::LineTo(Point { x: 29.00, y: 20.40 }),
                PathEl::CurveTo(
                    Point { x: 26.96, y: 20.40 },
                    Point { x: 25.30, y: 18.44 },
                    Point { x: 25.30, y: 16.40 },
                ),
                PathEl::CurveTo(
                    Point { x: 25.30, y: 14.36 },
                    Point { x: 26.96, y: 12.90 },
                    Point { x: 29.00, y: 12.90 },
                ),
                PathEl::LineTo(Point { x: 29.00, y: 9.90 }),
                PathEl::CurveTo(
                    Point { x: 25.31, y: 9.90 },
                    Point { x: 22.30, y: 12.90 },
                    Point { x: 22.30, y: 16.60 },
                ),
                PathEl::CurveTo(
                    Point { x: 22.30, y: 20.30 },
                    Point { x: 25.30, y: 23.30 },
                    Point { x: 29.00, y: 23.30 },
                ),
                PathEl::LineTo(Point { x: 29.00, y: 23.29 }),
                PathEl::LineTo(Point { x: 32.06, y: 23.29 }),
                PathEl::CurveTo(
                    Point { x: 34.15, y: 23.29 },
                    Point { x: 36.00, y: 24.77 },
                    Point { x: 36.00, y: 27.40 },
                ),
                PathEl::LineTo(Point { x: 36.00, y: 30.00 }),
                PathEl::LineTo(Point { x: 39.00, y: 30.00 }),
                PathEl::LineTo(Point { x: 39.00, y: 26.71 }),
                PathEl::CurveTo(
                    Point { x: 39.00, y: 23.11 },
                    Point { x: 35.80, y: 20.39 },
                    Point { x: 32.06, y: 20.39 },
                ),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct FeaturedVideo {
    size: f64,
    color: Color,
}

impl FeaturedVideo {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for FeaturedVideo {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 42.00, y: 6.00 }),
                PathEl::LineTo(Point { x: 6.00, y: 6.00 }),
                PathEl::CurveTo(
                    Point { x: 3.80, y: 6.00 },
                    Point { x: 2.00, y: 7.80 },
                    Point { x: 2.00, y: 10.00 },
                ),
                PathEl::LineTo(Point { x: 2.00, y: 38.00 }),
                PathEl::CurveTo(
                    Point { x: 2.00, y: 40.20 },
                    Point { x: 3.80, y: 42.00 },
                    Point { x: 6.00, y: 42.00 },
                ),
                PathEl::LineTo(Point { x: 42.00, y: 42.00 }),
                PathEl::CurveTo(
                    Point { x: 44.20, y: 42.00 },
                    Point { x: 46.00, y: 40.20 },
                    Point { x: 46.00, y: 38.00 },
                ),
                PathEl::LineTo(Point { x: 46.00, y: 10.00 }),
                PathEl::CurveTo(
                    Point { x: 46.00, y: 7.80 },
                    Point { x: 44.20, y: 6.00 },
                    Point { x: 42.00, y: 6.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 24.00, y: 24.00 }),
                PathEl::LineTo(Point { x: 6.00, y: 24.00 }),
                PathEl::LineTo(Point { x: 6.00, y: 10.00 }),
                PathEl::LineTo(Point { x: 24.00, y: 10.00 }),
                PathEl::LineTo(Point { x: 24.00, y: 24.00 }),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct BorderColor {
    size: f64,
    color: Color,
}

impl BorderColor {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for BorderColor {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 35.50, y: 14.00 }),
                PathEl::LineTo(Point { x: 28.00, y: 6.50 }),
                PathEl::LineTo(Point { x: 8.00, y: 26.50 }),
                PathEl::LineTo(Point { x: 8.00, y: 34.00 }),
                PathEl::LineTo(Point { x: 15.50, y: 34.00 }),
                PathEl::LineTo(Point { x: 35.50, y: 14.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 41.41, y: 8.09 }),
                PathEl::CurveTo(
                    Point { x: 42.19, y: 7.31 },
                    Point { x: 42.19, y: 6.04 },
                    Point { x: 41.41, y: 5.26 },
                ),
                PathEl::LineTo(Point { x: 36.74, y: 0.59 }),
                PathEl::CurveTo(
                    Point { x: 35.96, y: -0.19 },
                    Point { x: 34.69, y: -0.19 },
                    Point { x: 33.91, y: 0.59 },
                ),
                PathEl::LineTo(Point { x: 30.00, y: 4.50 }),
                PathEl::LineTo(Point { x: 37.50, y: 12.00 }),
                PathEl::LineTo(Point { x: 41.41, y: 8.09 }),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 0.00, y: 40.00 }),
                PathEl::LineTo(Point { x: 48.00, y: 40.00 }),
                PathEl::LineTo(Point { x: 48.00, y: 48.00 }),
                PathEl::LineTo(Point { x: 0.00, y: 48.00 }),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct RemoveCircle {
    size: f64,
    color: Color,
}

impl RemoveCircle {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for RemoveCircle {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 24.00, y: 4.00 }),
                PathEl::CurveTo(
                    Point { x: 12.95, y: 4.00 },
                    Point { x: 4.00, y: 12.95 },
                    Point { x: 4.00, y: 24.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 4.00, y: 35.05 },
                    Point { x: 12.95, y: 44.00 },
                    Point { x: 24.00, y: 44.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 35.05, y: 44.00 },
                    Point { x: 44.00, y: 35.05 },
                    Point { x: 44.00, y: 24.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 44.00, y: 12.95 },
                    Point { x: 35.05, y: 4.00 },
                    Point { x: 24.00, y: 4.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 34.00, y: 26.00 }),
                PathEl::LineTo(Point { x: 14.00, y: 26.00 }),
                PathEl::LineTo(Point { x: 14.00, y: 22.00 }),
                PathEl::LineTo(Point { x: 34.00, y: 22.00 }),
                PathEl::LineTo(Point { x: 34.00, y: 26.00 }),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct GridOn {
    size: f64,
    color: Color,
}

impl GridOn {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for GridOn {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 40.00, y: 4.00 }),
                PathEl::LineTo(Point { x: 8.00, y: 4.00 }),
                PathEl::CurveTo(
                    Point { x: 5.79, y: 4.00 },
                    Point { x: 4.00, y: 5.79 },
                    Point { x: 4.00, y: 8.00 },
                ),
                PathEl::LineTo(Point { x: 4.00, y: 40.00 }),
                PathEl::CurveTo(
                    Point { x: 4.00, y: 42.21 },
                    Point { x: 5.79, y: 44.00 },
                    Point { x: 8.00, y: 44.00 },
                ),
                PathEl::LineTo(Point { x: 40.00, y: 44.00 }),
                PathEl::CurveTo(
                    Point { x: 42.21, y: 44.00 },
                    Point { x: 44.00, y: 42.21 },
                    Point { x: 44.00, y: 40.00 },
                ),
                PathEl::LineTo(Point { x: 44.00, y: 8.00 }),
                PathEl::CurveTo(
                    Point { x: 44.00, y: 5.79 },
                    Point { x: 42.21, y: 4.00 },
                    Point { x: 40.00, y: 4.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 16.00, y: 40.00 }),
                PathEl::LineTo(Point { x: 8.00, y: 40.00 }),
                PathEl::LineTo(Point { x: 8.00, y: 32.00 }),
                PathEl::LineTo(Point { x: 16.00, y: 32.00 }),
                PathEl::LineTo(Point { x: 16.00, y: 40.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 16.00, y: 28.00 }),
                PathEl::LineTo(Point { x: 8.00, y: 28.00 }),
                PathEl::LineTo(Point { x: 8.00, y: 20.00 }),
                PathEl::LineTo(Point { x: 16.00, y: 20.00 }),
                PathEl::LineTo(Point { x: 16.00, y: 28.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 16.00, y: 16.00 }),
                PathEl::LineTo(Point { x: 8.00, y: 16.00 }),
                PathEl::LineTo(Point { x: 8.00, y: 8.00 }),
                PathEl::LineTo(Point { x: 16.00, y: 8.00 }),
                PathEl::LineTo(Point { x: 16.00, y: 16.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 28.00, y: 40.00 }),
                PathEl::LineTo(Point { x: 20.00, y: 40.00 }),
                PathEl::LineTo(Point { x: 20.00, y: 32.00 }),
                PathEl::LineTo(Point { x: 28.00, y: 32.00 }),
                PathEl::LineTo(Point { x: 28.00, y: 40.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 28.00, y: 28.00 }),
                PathEl::LineTo(Point { x: 20.00, y: 28.00 }),
                PathEl::LineTo(Point { x: 20.00, y: 20.00 }),
                PathEl::LineTo(Point { x: 28.00, y: 20.00 }),
                PathEl::LineTo(Point { x: 28.00, y: 28.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 28.00, y: 16.00 }),
                PathEl::LineTo(Point { x: 20.00, y: 16.00 }),
                PathEl::LineTo(Point { x: 20.00, y: 8.00 }),
                PathEl::LineTo(Point { x: 28.00, y: 8.00 }),
                PathEl::LineTo(Point { x: 28.00, y: 16.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 40.00, y: 40.00 }),
                PathEl::LineTo(Point { x: 32.00, y: 40.00 }),
                PathEl::LineTo(Point { x: 32.00, y: 32.00 }),
                PathEl::LineTo(Point { x: 40.00, y: 32.00 }),
                PathEl::LineTo(Point { x: 40.00, y: 40.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 40.00, y: 28.00 }),
                PathEl::LineTo(Point { x: 32.00, y: 28.00 }),
                PathEl::LineTo(Point { x: 32.00, y: 20.00 }),
                PathEl::LineTo(Point { x: 40.00, y: 20.00 }),
                PathEl::LineTo(Point { x: 40.00, y: 28.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 40.00, y: 16.00 }),
                PathEl::LineTo(Point { x: 32.00, y: 16.00 }),
                PathEl::LineTo(Point { x: 32.00, y: 8.00 }),
                PathEl::LineTo(Point { x: 40.00, y: 8.00 }),
                PathEl::LineTo(Point { x: 40.00, y: 16.00 }),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct Train {
    size: f64,
    color: Color,
}

impl Train {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for Train {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 24.00, y: 4.00 }),
                PathEl::CurveTo(
                    Point { x: 16.00, y: 4.00 },
                    Point { x: 8.00, y: 5.00 },
                    Point { x: 8.00, y: 12.00 },
                ),
                PathEl::LineTo(Point { x: 8.00, y: 31.00 }),
                PathEl::CurveTo(
                    Point { x: 8.00, y: 34.86 },
                    Point { x: 11.14, y: 38.00 },
                    Point { x: 15.00, y: 38.00 },
                ),
                PathEl::LineTo(Point { x: 12.00, y: 41.00 }),
                PathEl::LineTo(Point { x: 12.00, y: 42.00 }),
                PathEl::LineTo(Point { x: 16.46, y: 42.00 }),
                PathEl::LineTo(Point { x: 20.46, y: 38.00 }),
                PathEl::LineTo(Point { x: 28.00, y: 38.00 }),
                PathEl::LineTo(Point { x: 32.00, y: 42.00 }),
                PathEl::LineTo(Point { x: 36.00, y: 42.00 }),
                PathEl::LineTo(Point { x: 36.00, y: 41.00 }),
                PathEl::LineTo(Point { x: 33.00, y: 38.00 }),
                PathEl::CurveTo(
                    Point { x: 36.86, y: 38.00 },
                    Point { x: 40.00, y: 34.86 },
                    Point { x: 40.00, y: 31.00 },
                ),
                PathEl::LineTo(Point { x: 40.00, y: 12.00 }),
                PathEl::CurveTo(
                    Point { x: 40.00, y: 5.00 },
                    Point { x: 32.84, y: 4.00 },
                    Point { x: 24.00, y: 4.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 15.00, y: 34.00 }),
                PathEl::CurveTo(
                    Point { x: 13.34, y: 34.00 },
                    Point { x: 12.00, y: 32.66 },
                    Point { x: 12.00, y: 31.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 12.00, y: 29.34 },
                    Point { x: 13.34, y: 28.00 },
                    Point { x: 15.00, y: 28.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 16.66, y: 28.00 },
                    Point { x: 18.00, y: 29.34 },
                    Point { x: 18.00, y: 31.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 18.00, y: 32.66 },
                    Point { x: 16.66, y: 34.00 },
                    Point { x: 15.00, y: 34.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 22.00, y: 20.00 }),
                PathEl::LineTo(Point { x: 12.00, y: 20.00 }),
                PathEl::LineTo(Point { x: 12.00, y: 12.00 }),
                PathEl::LineTo(Point { x: 22.00, y: 12.00 }),
                PathEl::LineTo(Point { x: 22.00, y: 20.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 26.00, y: 20.00 }),
                PathEl::LineTo(Point { x: 26.00, y: 12.00 }),
                PathEl::LineTo(Point { x: 36.00, y: 12.00 }),
                PathEl::LineTo(Point { x: 36.00, y: 20.00 }),
                PathEl::LineTo(Point { x: 26.00, y: 20.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 33.00, y: 34.00 }),
                PathEl::CurveTo(
                    Point { x: 31.34, y: 34.00 },
                    Point { x: 30.00, y: 32.66 },
                    Point { x: 30.00, y: 31.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 30.00, y: 29.34 },
                    Point { x: 31.34, y: 28.00 },
                    Point { x: 33.00, y: 28.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 34.66, y: 28.00 },
                    Point { x: 36.00, y: 29.34 },
                    Point { x: 36.00, y: 31.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 36.00, y: 32.66 },
                    Point { x: 34.66, y: 34.00 },
                    Point { x: 33.00, y: 34.00 },
                ),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct Compare {
    size: f64,
    color: Color,
}

impl Compare {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for Compare {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 20.00, y: 6.00 }),
                PathEl::LineTo(Point { x: 10.00, y: 6.00 }),
                PathEl::CurveTo(
                    Point { x: 7.79, y: 6.00 },
                    Point { x: 6.00, y: 7.79 },
                    Point { x: 6.00, y: 10.00 },
                ),
                PathEl::LineTo(Point { x: 6.00, y: 38.00 }),
                PathEl::CurveTo(
                    Point { x: 6.00, y: 40.21 },
                    Point { x: 7.79, y: 42.00 },
                    Point { x: 10.00, y: 42.00 },
                ),
                PathEl::LineTo(Point { x: 20.00, y: 42.00 }),
                PathEl::LineTo(Point { x: 20.00, y: 46.00 }),
                PathEl::LineTo(Point { x: 24.00, y: 46.00 }),
                PathEl::LineTo(Point { x: 24.00, y: 2.00 }),
                PathEl::LineTo(Point { x: 20.00, y: 2.00 }),
                PathEl::LineTo(Point { x: 20.00, y: 6.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 20.00, y: 36.00 }),
                PathEl::LineTo(Point { x: 10.00, y: 36.00 }),
                PathEl::LineTo(Point { x: 20.00, y: 24.00 }),
                PathEl::LineTo(Point { x: 20.00, y: 36.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 38.00, y: 6.00 }),
                PathEl::LineTo(Point { x: 28.00, y: 6.00 }),
                PathEl::LineTo(Point { x: 28.00, y: 10.00 }),
                PathEl::LineTo(Point { x: 38.00, y: 10.00 }),
                PathEl::LineTo(Point { x: 38.00, y: 36.00 }),
                PathEl::LineTo(Point { x: 28.00, y: 24.00 }),
                PathEl::LineTo(Point { x: 28.00, y: 42.00 }),
                PathEl::LineTo(Point { x: 38.00, y: 42.00 }),
                PathEl::CurveTo(
                    Point { x: 40.21, y: 42.00 },
                    Point { x: 42.00, y: 40.21 },
                    Point { x: 42.00, y: 38.00 },
                ),
                PathEl::LineTo(Point { x: 42.00, y: 10.00 }),
                PathEl::CurveTo(
                    Point { x: 42.00, y: 7.79 },
                    Point { x: 40.21, y: 6.00 },
                    Point { x: 38.00, y: 6.00 },
                ),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct Healing {
    size: f64,
    color: Color,
}

impl Healing {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for Healing {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 35.46, y: 24.04 }),
                PathEl::LineTo(Point { x: 43.42, y: 16.08 }),
                PathEl::CurveTo(
                    Point { x: 44.20, y: 15.30 },
                    Point { x: 44.20, y: 14.03 },
                    Point { x: 43.42, y: 13.25 },
                ),
                PathEl::LineTo(Point { x: 34.75, y: 4.58 }),
                PathEl::CurveTo(
                    Point { x: 33.97, y: 3.80 },
                    Point { x: 32.70, y: 3.80 },
                    Point { x: 31.92, y: 4.58 },
                ),
                PathEl::LineTo(Point { x: 23.96, y: 12.54 }),
                PathEl::LineTo(Point { x: 16.00, y: 4.59 }),
                PathEl::CurveTo(
                    Point { x: 15.61, y: 4.20 },
                    Point { x: 15.10, y: 4.00 },
                    Point { x: 14.59, y: 4.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 14.08, y: 4.00 },
                    Point { x: 13.57, y: 4.20 },
                    Point { x: 13.18, y: 4.59 },
                ),
                PathEl::LineTo(Point { x: 4.50, y: 13.26 }),
                PathEl::CurveTo(
                    Point { x: 3.72, y: 14.04 },
                    Point { x: 3.72, y: 15.31 },
                    Point { x: 4.50, y: 16.09 },
                ),
                PathEl::LineTo(Point { x: 12.46, y: 24.05 }),
                PathEl::LineTo(Point { x: 4.50, y: 32.00 }),
                PathEl::CurveTo(
                    Point { x: 3.72, y: 32.78 },
                    Point { x: 3.72, y: 34.05 },
                    Point { x: 4.50, y: 34.83 },
                ),
                PathEl::LineTo(Point { x: 13.17, y: 43.50 }),
                PathEl::CurveTo(
                    Point { x: 13.95, y: 44.28 },
                    Point { x: 15.22, y: 44.28 },
                    Point { x: 16.00, y: 43.50 },
                ),
                PathEl::LineTo(Point { x: 23.96, y: 35.54 }),
                PathEl::LineTo(Point { x: 31.92, y: 43.50 }),
                PathEl::CurveTo(
                    Point { x: 32.31, y: 43.89 },
                    Point { x: 32.82, y: 44.09 },
                    Point { x: 33.33, y: 44.09 },
                ),
                PathEl::CurveTo(
                    Point { x: 33.84, y: 44.09 },
                    Point { x: 34.35, y: 43.89 },
                    Point { x: 34.74, y: 43.50 },
                ),
                PathEl::LineTo(Point { x: 43.41, y: 34.83 }),
                PathEl::CurveTo(
                    Point { x: 44.19, y: 34.05 },
                    Point { x: 44.19, y: 32.78 },
                    Point { x: 43.41, y: 32.00 },
                ),
                PathEl::LineTo(Point { x: 35.46, y: 24.04 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 24.00, y: 18.00 }),
                PathEl::CurveTo(
                    Point { x: 25.10, y: 18.00 },
                    Point { x: 26.00, y: 18.90 },
                    Point { x: 26.00, y: 20.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 26.00, y: 21.10 },
                    Point { x: 25.10, y: 22.00 },
                    Point { x: 24.00, y: 22.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 22.90, y: 22.00 },
                    Point { x: 22.00, y: 21.10 },
                    Point { x: 22.00, y: 20.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 22.00, y: 18.90 },
                    Point { x: 22.90, y: 18.00 },
                    Point { x: 24.00, y: 18.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 14.58, y: 21.92 }),
                PathEl::LineTo(Point { x: 7.33, y: 14.67 }),
                PathEl::LineTo(Point { x: 14.59, y: 7.41 }),
                PathEl::LineTo(Point { x: 21.84, y: 14.66 }),
                PathEl::LineTo(Point { x: 14.58, y: 21.92 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 20.00, y: 26.00 }),
                PathEl::CurveTo(
                    Point { x: 18.90, y: 26.00 },
                    Point { x: 18.00, y: 25.10 },
                    Point { x: 18.00, y: 24.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 18.00, y: 22.90 },
                    Point { x: 18.90, y: 22.00 },
                    Point { x: 20.00, y: 22.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 21.10, y: 22.00 },
                    Point { x: 22.00, y: 22.90 },
                    Point { x: 22.00, y: 24.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 22.00, y: 25.10 },
                    Point { x: 21.10, y: 26.00 },
                    Point { x: 20.00, y: 26.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 24.00, y: 30.00 }),
                PathEl::CurveTo(
                    Point { x: 22.90, y: 30.00 },
                    Point { x: 22.00, y: 29.10 },
                    Point { x: 22.00, y: 28.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 22.00, y: 26.90 },
                    Point { x: 22.90, y: 26.00 },
                    Point { x: 24.00, y: 26.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 25.10, y: 26.00 },
                    Point { x: 26.00, y: 26.90 },
                    Point { x: 26.00, y: 28.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 26.00, y: 29.10 },
                    Point { x: 25.10, y: 30.00 },
                    Point { x: 24.00, y: 30.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 28.00, y: 22.00 }),
                PathEl::CurveTo(
                    Point { x: 29.10, y: 22.00 },
                    Point { x: 30.00, y: 22.90 },
                    Point { x: 30.00, y: 24.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 30.00, y: 25.10 },
                    Point { x: 29.10, y: 26.00 },
                    Point { x: 28.00, y: 26.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 26.90, y: 26.00 },
                    Point { x: 26.00, y: 25.10 },
                    Point { x: 26.00, y: 24.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 26.00, y: 22.90 },
                    Point { x: 26.90, y: 22.00 },
                    Point { x: 28.00, y: 22.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 33.33, y: 40.67 }),
                PathEl::LineTo(Point { x: 26.08, y: 33.42 }),
                PathEl::LineTo(Point { x: 33.34, y: 26.16 }),
                PathEl::LineTo(Point { x: 40.59, y: 33.41 }),
                PathEl::LineTo(Point { x: 33.33, y: 40.67 }),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct Speaker {
    size: f64,
    color: Color,
}

impl Speaker {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for Speaker {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 34.00, y: 4.00 }),
                PathEl::LineTo(Point { x: 14.00, y: 4.00 }),
                PathEl::CurveTo(
                    Point { x: 11.79, y: 4.00 },
                    Point { x: 10.00, y: 5.79 },
                    Point { x: 10.00, y: 8.00 },
                ),
                PathEl::LineTo(Point { x: 10.00, y: 40.00 }),
                PathEl::CurveTo(
                    Point { x: 10.00, y: 42.21 },
                    Point { x: 11.79, y: 43.98 },
                    Point { x: 14.00, y: 43.98 },
                ),
                PathEl::LineTo(Point { x: 34.00, y: 44.00 }),
                PathEl::CurveTo(
                    Point { x: 36.21, y: 44.00 },
                    Point { x: 38.00, y: 42.21 },
                    Point { x: 38.00, y: 40.00 },
                ),
                PathEl::LineTo(Point { x: 38.00, y: 8.00 }),
                PathEl::CurveTo(
                    Point { x: 38.00, y: 5.79 },
                    Point { x: 36.21, y: 4.00 },
                    Point { x: 34.00, y: 4.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 24.00, y: 8.00 }),
                PathEl::CurveTo(
                    Point { x: 26.21, y: 8.00 },
                    Point { x: 28.00, y: 9.79 },
                    Point { x: 28.00, y: 12.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 28.00, y: 14.21 },
                    Point { x: 26.21, y: 16.00 },
                    Point { x: 24.00, y: 16.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 21.79, y: 16.00 },
                    Point { x: 20.00, y: 14.21 },
                    Point { x: 20.00, y: 12.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 20.00, y: 9.79 },
                    Point { x: 21.79, y: 8.00 },
                    Point { x: 24.00, y: 8.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 24.00, y: 40.00 }),
                PathEl::CurveTo(
                    Point { x: 18.48, y: 40.00 },
                    Point { x: 14.00, y: 35.52 },
                    Point { x: 14.00, y: 30.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 14.00, y: 24.48 },
                    Point { x: 18.48, y: 20.00 },
                    Point { x: 24.00, y: 20.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 29.52, y: 20.00 },
                    Point { x: 34.00, y: 24.48 },
                    Point { x: 34.00, y: 30.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 34.00, y: 35.52 },
                    Point { x: 29.52, y: 40.00 },
                    Point { x: 24.00, y: 40.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 24.00, y: 24.00 }),
                PathEl::CurveTo(
                    Point { x: 20.69, y: 24.00 },
                    Point { x: 18.00, y: 26.69 },
                    Point { x: 18.00, y: 30.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 18.00, y: 33.31 },
                    Point { x: 20.69, y: 36.00 },
                    Point { x: 24.00, y: 36.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 27.31, y: 36.00 },
                    Point { x: 30.00, y: 33.31 },
                    Point { x: 30.00, y: 30.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 30.00, y: 26.69 },
                    Point { x: 27.31, y: 24.00 },
                    Point { x: 24.00, y: 24.00 },
                ),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct SignalCellular1Bar {
    size: f64,
    color: Color,
}

impl SignalCellular1Bar {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for SignalCellular1Bar {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 4.00, y: 44.00 }),
                PathEl::LineTo(Point { x: 44.00, y: 44.00 }),
                PathEl::LineTo(Point { x: 44.00, y: 4.00 }),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 24.00, y: 24.00 }),
                PathEl::LineTo(Point { x: 4.00, y: 44.00 }),
                PathEl::LineTo(Point { x: 24.00, y: 44.00 }),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct FlashOff {
    size: f64,
    color: Color,
}

impl FlashOff {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for FlashOff {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 6.55, y: 6.00 }),
                PathEl::LineTo(Point { x: 4.00, y: 8.55 }),
                PathEl::LineTo(Point { x: 14.00, y: 18.55 }),
                PathEl::LineTo(Point { x: 14.00, y: 26.00 }),
                PathEl::LineTo(Point { x: 20.00, y: 26.00 }),
                PathEl::LineTo(Point { x: 20.00, y: 44.00 }),
                PathEl::LineTo(Point { x: 27.17, y: 31.71 }),
                PathEl::LineTo(Point { x: 35.45, y: 40.00 }),
                PathEl::LineTo(Point { x: 38.00, y: 37.46 }),
                PathEl::LineTo(Point { x: 6.55, y: 6.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 34.00, y: 20.00 }),
                PathEl::LineTo(Point { x: 26.00, y: 20.00 }),
                PathEl::LineTo(Point { x: 34.00, y: 4.00 }),
                PathEl::LineTo(Point { x: 14.00, y: 4.00 }),
                PathEl::LineTo(Point { x: 14.00, y: 8.36 }),
                PathEl::LineTo(Point { x: 30.92, y: 25.28 }),
                PathEl::LineTo(Point { x: 34.00, y: 20.00 }),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct MarkunreadMailbox {
    size: f64,
    color: Color,
}

impl MarkunreadMailbox {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for MarkunreadMailbox {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 40.00, y: 12.00 }),
                PathEl::LineTo(Point { x: 20.00, y: 12.00 }),
                PathEl::LineTo(Point { x: 20.00, y: 24.00 }),
                PathEl::LineTo(Point { x: 16.00, y: 24.00 }),
                PathEl::LineTo(Point { x: 16.00, y: 8.00 }),
                PathEl::LineTo(Point { x: 28.00, y: 8.00 }),
                PathEl::LineTo(Point { x: 28.00, y: 0.00 }),
                PathEl::LineTo(Point { x: 12.00, y: 0.00 }),
                PathEl::LineTo(Point { x: 12.00, y: 12.00 }),
                PathEl::LineTo(Point { x: 8.00, y: 12.00 }),
                PathEl::CurveTo(
                    Point { x: 5.80, y: 12.00 },
                    Point { x: 4.00, y: 13.80 },
                    Point { x: 4.00, y: 16.00 },
                ),
                PathEl::LineTo(Point { x: 4.00, y: 40.00 }),
                PathEl::CurveTo(
                    Point { x: 4.00, y: 42.20 },
                    Point { x: 5.80, y: 44.00 },
                    Point { x: 8.00, y: 44.00 },
                ),
                PathEl::LineTo(Point { x: 40.00, y: 44.00 }),
                PathEl::CurveTo(
                    Point { x: 42.20, y: 44.00 },
                    Point { x: 44.00, y: 42.20 },
                    Point { x: 44.00, y: 40.00 },
                ),
                PathEl::LineTo(Point { x: 44.00, y: 16.00 }),
                PathEl::CurveTo(
                    Point { x: 44.00, y: 13.80 },
                    Point { x: 42.20, y: 12.00 },
                    Point { x: 40.00, y: 12.00 },
                ),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct InsertInvitation {
    size: f64,
    color: Color,
}

impl InsertInvitation {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for InsertInvitation {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 34.00, y: 24.00 }),
                PathEl::LineTo(Point { x: 24.00, y: 24.00 }),
                PathEl::LineTo(Point { x: 24.00, y: 34.00 }),
                PathEl::LineTo(Point { x: 34.00, y: 34.00 }),
                PathEl::LineTo(Point { x: 34.00, y: 24.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 32.00, y: 2.00 }),
                PathEl::LineTo(Point { x: 32.00, y: 6.00 }),
                PathEl::LineTo(Point { x: 16.00, y: 6.00 }),
                PathEl::LineTo(Point { x: 16.00, y: 2.00 }),
                PathEl::LineTo(Point { x: 12.00, y: 2.00 }),
                PathEl::LineTo(Point { x: 12.00, y: 6.00 }),
                PathEl::LineTo(Point { x: 10.00, y: 6.00 }),
                PathEl::CurveTo(
                    Point { x: 7.79, y: 6.00 },
                    Point { x: 6.02, y: 7.79 },
                    Point { x: 6.02, y: 10.00 },
                ),
                PathEl::LineTo(Point { x: 6.00, y: 38.00 }),
                PathEl::CurveTo(
                    Point { x: 6.00, y: 40.21 },
                    Point { x: 7.79, y: 42.00 },
                    Point { x: 10.00, y: 42.00 },
                ),
                PathEl::LineTo(Point { x: 38.00, y: 42.00 }),
                PathEl::CurveTo(
                    Point { x: 40.21, y: 42.00 },
                    Point { x: 42.00, y: 40.21 },
                    Point { x: 42.00, y: 38.00 },
                ),
                PathEl::LineTo(Point { x: 42.00, y: 10.00 }),
                PathEl::CurveTo(
                    Point { x: 42.00, y: 7.79 },
                    Point { x: 40.21, y: 6.00 },
                    Point { x: 38.00, y: 6.00 },
                ),
                PathEl::LineTo(Point { x: 36.00, y: 6.00 }),
                PathEl::LineTo(Point { x: 36.00, y: 2.00 }),
                PathEl::LineTo(Point { x: 32.00, y: 2.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 38.00, y: 38.00 }),
                PathEl::LineTo(Point { x: 10.00, y: 38.00 }),
                PathEl::LineTo(Point { x: 10.00, y: 16.00 }),
                PathEl::LineTo(Point { x: 38.00, y: 16.00 }),
                PathEl::LineTo(Point { x: 38.00, y: 38.00 }),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct Save {
    size: f64,
    color: Color,
}

impl Save {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for Save {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 34.00, y: 6.00 }),
                PathEl::LineTo(Point { x: 10.00, y: 6.00 }),
                PathEl::CurveTo(
                    Point { x: 7.79, y: 6.00 },
                    Point { x: 6.00, y: 7.79 },
                    Point { x: 6.00, y: 10.00 },
                ),
                PathEl::LineTo(Point { x: 6.00, y: 38.00 }),
                PathEl::CurveTo(
                    Point { x: 6.00, y: 40.21 },
                    Point { x: 7.79, y: 42.00 },
                    Point { x: 10.00, y: 42.00 },
                ),
                PathEl::LineTo(Point { x: 38.00, y: 42.00 }),
                PathEl::CurveTo(
                    Point { x: 40.21, y: 42.00 },
                    Point { x: 42.00, y: 40.21 },
                    Point { x: 42.00, y: 38.00 },
                ),
                PathEl::LineTo(Point { x: 42.00, y: 14.00 }),
                PathEl::LineTo(Point { x: 34.00, y: 6.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 24.00, y: 38.00 }),
                PathEl::CurveTo(
                    Point { x: 20.69, y: 38.00 },
                    Point { x: 18.00, y: 35.31 },
                    Point { x: 18.00, y: 32.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 18.00, y: 28.69 },
                    Point { x: 20.69, y: 26.00 },
                    Point { x: 24.00, y: 26.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 27.31, y: 26.00 },
                    Point { x: 30.00, y: 28.69 },
                    Point { x: 30.00, y: 32.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 30.00, y: 35.31 },
                    Point { x: 27.31, y: 38.00 },
                    Point { x: 24.00, y: 38.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 30.00, y: 18.00 }),
                PathEl::LineTo(Point { x: 10.00, y: 18.00 }),
                PathEl::LineTo(Point { x: 10.00, y: 10.00 }),
                PathEl::LineTo(Point { x: 30.00, y: 10.00 }),
                PathEl::LineTo(Point { x: 30.00, y: 18.00 }),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct Router {
    size: f64,
    color: Color,
}

impl Router {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for Router {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 40.33, y: 11.81 }),
                PathEl::LineTo(Point { x: 42.00, y: 10.13 }),
                PathEl::CurveTo(
                    Point { x: 39.24, y: 7.38 },
                    Point { x: 35.62, y: 6.00 },
                    Point { x: 32.00, y: 6.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 28.38, y: 6.00 },
                    Point { x: 24.76, y: 7.39 },
                    Point { x: 22.00, y: 10.13 },
                ),
                PathEl::LineTo(Point { x: 23.66, y: 11.79 }),
                PathEl::CurveTo(
                    Point { x: 25.97, y: 9.50 },
                    Point { x: 28.98, y: 8.35 },
                    Point { x: 32.00, y: 8.35 },
                ),
                PathEl::CurveTo(
                    Point { x: 35.02, y: 8.35 },
                    Point { x: 38.03, y: 9.51 },
                    Point { x: 40.33, y: 11.81 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 38.67, y: 13.33 }),
                PathEl::CurveTo(
                    Point { x: 36.83, y: 11.49 },
                    Point { x: 34.42, y: 10.57 },
                    Point { x: 32.00, y: 10.57 },
                ),
                PathEl::CurveTo(
                    Point { x: 29.58, y: 10.57 },
                    Point { x: 27.17, y: 11.49 },
                    Point { x: 25.33, y: 13.33 },
                ),
                PathEl::LineTo(Point { x: 26.99, y: 14.99 }),
                PathEl::CurveTo(
                    Point { x: 28.38, y: 13.62 },
                    Point { x: 30.18, y: 12.93 },
                    Point { x: 32.00, y: 12.93 },
                ),
                PathEl::CurveTo(
                    Point { x: 33.81, y: 12.93 },
                    Point { x: 35.62, y: 13.62 },
                    Point { x: 36.99, y: 15.00 },
                ),
                PathEl::LineTo(Point { x: 38.67, y: 13.33 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 38.00, y: 26.00 }),
                PathEl::LineTo(Point { x: 34.00, y: 26.00 }),
                PathEl::LineTo(Point { x: 34.00, y: 18.00 }),
                PathEl::LineTo(Point { x: 30.00, y: 18.00 }),
                PathEl::LineTo(Point { x: 30.00, y: 26.00 }),
                PathEl::LineTo(Point { x: 10.00, y: 26.00 }),
                PathEl::CurveTo(
                    Point { x: 7.79, y: 26.00 },
                    Point { x: 6.00, y: 27.79 },
                    Point { x: 6.00, y: 30.00 },
                ),
                PathEl::LineTo(Point { x: 6.00, y: 38.00 }),
                PathEl::CurveTo(
                    Point { x: 6.00, y: 40.21 },
                    Point { x: 7.79, y: 42.00 },
                    Point { x: 10.00, y: 42.00 },
                ),
                PathEl::LineTo(Point { x: 38.00, y: 42.00 }),
                PathEl::CurveTo(
                    Point { x: 40.21, y: 42.00 },
                    Point { x: 42.00, y: 40.21 },
                    Point { x: 42.00, y: 38.00 },
                ),
                PathEl::LineTo(Point { x: 42.00, y: 30.00 }),
                PathEl::CurveTo(
                    Point { x: 42.00, y: 27.79 },
                    Point { x: 40.21, y: 26.00 },
                    Point { x: 38.00, y: 26.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 16.00, y: 36.00 }),
                PathEl::LineTo(Point { x: 12.00, y: 36.00 }),
                PathEl::LineTo(Point { x: 12.00, y: 32.00 }),
                PathEl::LineTo(Point { x: 16.00, y: 32.00 }),
                PathEl::LineTo(Point { x: 16.00, y: 36.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 23.00, y: 36.00 }),
                PathEl::LineTo(Point { x: 19.00, y: 36.00 }),
                PathEl::LineTo(Point { x: 19.00, y: 32.00 }),
                PathEl::LineTo(Point { x: 23.00, y: 32.00 }),
                PathEl::LineTo(Point { x: 23.00, y: 36.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 30.00, y: 36.00 }),
                PathEl::LineTo(Point { x: 26.00, y: 36.00 }),
                PathEl::LineTo(Point { x: 26.00, y: 32.00 }),
                PathEl::LineTo(Point { x: 30.00, y: 32.00 }),
                PathEl::LineTo(Point { x: 30.00, y: 36.00 }),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct FormatAlignLeft {
    size: f64,
    color: Color,
}

impl FormatAlignLeft {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for FormatAlignLeft {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 30.00, y: 30.00 }),
                PathEl::LineTo(Point { x: 6.00, y: 30.00 }),
                PathEl::LineTo(Point { x: 6.00, y: 34.00 }),
                PathEl::LineTo(Point { x: 30.00, y: 34.00 }),
                PathEl::LineTo(Point { x: 30.00, y: 30.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 30.00, y: 14.00 }),
                PathEl::LineTo(Point { x: 6.00, y: 14.00 }),
                PathEl::LineTo(Point { x: 6.00, y: 18.00 }),
                PathEl::LineTo(Point { x: 30.00, y: 18.00 }),
                PathEl::LineTo(Point { x: 30.00, y: 14.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 6.00, y: 26.00 }),
                PathEl::LineTo(Point { x: 42.00, y: 26.00 }),
                PathEl::LineTo(Point { x: 42.00, y: 22.00 }),
                PathEl::LineTo(Point { x: 6.00, y: 22.00 }),
                PathEl::LineTo(Point { x: 6.00, y: 26.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 6.00, y: 42.00 }),
                PathEl::LineTo(Point { x: 42.00, y: 42.00 }),
                PathEl::LineTo(Point { x: 42.00, y: 38.00 }),
                PathEl::LineTo(Point { x: 6.00, y: 38.00 }),
                PathEl::LineTo(Point { x: 6.00, y: 42.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 6.00, y: 6.00 }),
                PathEl::LineTo(Point { x: 6.00, y: 10.00 }),
                PathEl::LineTo(Point { x: 42.00, y: 10.00 }),
                PathEl::LineTo(Point { x: 42.00, y: 6.00 }),
                PathEl::LineTo(Point { x: 6.00, y: 6.00 }),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct Spa {
    size: f64,
    color: Color,
}

impl Spa {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for Spa {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 17.09, y: 24.00 }),
                PathEl::CurveTo(
                    Point { x: 14.95, y: 22.57 },
                    Point { x: 12.59, y: 21.45 },
                    Point { x: 10.04, y: 20.78 },
                ),
                PathEl::CurveTo(
                    Point { x: 12.59, y: 21.45 },
                    Point { x: 14.95, y: 22.57 },
                    Point { x: 17.09, y: 24.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 37.96, y: 20.78 }),
                PathEl::CurveTo(
                    Point { x: 35.38, y: 21.46 },
                    Point { x: 32.99, y: 22.60 },
                    Point { x: 30.82, y: 24.05 },
                ),
                PathEl::CurveTo(
                    Point { x: 32.98, y: 22.60 },
                    Point { x: 35.37, y: 21.46 },
                    Point { x: 37.96, y: 20.78 },
                ),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 30.99, y: 19.27 }),
                PathEl::CurveTo(
                    Point { x: 30.62, y: 13.69 },
                    Point { x: 28.36, y: 8.24 },
                    Point { x: 24.12, y: 4.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 19.84, y: 8.28 },
                    Point { x: 17.48, y: 13.72 },
                    Point { x: 17.02, y: 19.27 },
                ),
                PathEl::CurveTo(
                    Point { x: 19.58, y: 20.64 },
                    Point { x: 21.95, y: 22.39 },
                    Point { x: 24.00, y: 24.52 },
                ),
                PathEl::CurveTo(
                    Point { x: 26.05, y: 22.39 },
                    Point { x: 28.42, y: 20.63 },
                    Point { x: 30.99, y: 19.27 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 17.99, y: 24.57 }),
                PathEl::CurveTo(
                    Point { x: 17.71, y: 24.36 },
                    Point { x: 17.39, y: 24.19 },
                    Point { x: 17.10, y: 24.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 17.39, y: 24.19 },
                    Point { x: 17.70, y: 24.36 },
                    Point { x: 17.99, y: 24.57 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 30.82, y: 24.05 }),
                PathEl::CurveTo(
                    Point { x: 30.56, y: 24.23 },
                    Point { x: 30.27, y: 24.38 },
                    Point { x: 30.02, y: 24.56 },
                ),
                PathEl::CurveTo(
                    Point { x: 30.27, y: 24.38 },
                    Point { x: 30.55, y: 24.23 },
                    Point { x: 30.82, y: 24.05 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 24.00, y: 30.91 }),
                PathEl::CurveTo(
                    Point { x: 19.70, y: 24.34 },
                    Point { x: 12.35, y: 20.00 },
                    Point { x: 4.00, y: 20.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 4.00, y: 30.63 },
                    Point { x: 10.72, y: 39.65 },
                    Point { x: 20.07, y: 42.97 },
                ),
                PathEl::CurveTo(
                    Point { x: 21.34, y: 43.42 },
                    Point { x: 22.65, y: 43.76 },
                    Point { x: 24.00, y: 44.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 25.35, y: 43.77 },
                    Point { x: 26.66, y: 43.43 },
                    Point { x: 27.93, y: 42.97 },
                ),
                PathEl::CurveTo(
                    Point { x: 37.28, y: 39.65 },
                    Point { x: 44.00, y: 30.63 },
                    Point { x: 44.00, y: 20.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 35.65, y: 20.00 },
                    Point { x: 28.30, y: 24.34 },
                    Point { x: 24.00, y: 30.91 },
                ),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct Menu {
    size: f64,
    color: Color,
}

impl Menu {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for Menu {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 6.00, y: 36.00 }),
                PathEl::LineTo(Point { x: 42.00, y: 36.00 }),
                PathEl::LineTo(Point { x: 42.00, y: 32.00 }),
                PathEl::LineTo(Point { x: 6.00, y: 32.00 }),
                PathEl::LineTo(Point { x: 6.00, y: 36.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 6.00, y: 26.00 }),
                PathEl::LineTo(Point { x: 42.00, y: 26.00 }),
                PathEl::LineTo(Point { x: 42.00, y: 22.00 }),
                PathEl::LineTo(Point { x: 6.00, y: 22.00 }),
                PathEl::LineTo(Point { x: 6.00, y: 26.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 6.00, y: 12.00 }),
                PathEl::LineTo(Point { x: 6.00, y: 16.00 }),
                PathEl::LineTo(Point { x: 42.00, y: 16.00 }),
                PathEl::LineTo(Point { x: 42.00, y: 12.00 }),
                PathEl::LineTo(Point { x: 6.00, y: 12.00 }),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct Add {
    size: f64,
    color: Color,
}

impl Add {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for Add {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 38.00, y: 26.00 }),
                PathEl::LineTo(Point { x: 26.00, y: 26.00 }),
                PathEl::LineTo(Point { x: 26.00, y: 38.00 }),
                PathEl::LineTo(Point { x: 22.00, y: 38.00 }),
                PathEl::LineTo(Point { x: 22.00, y: 26.00 }),
                PathEl::LineTo(Point { x: 10.00, y: 26.00 }),
                PathEl::LineTo(Point { x: 10.00, y: 22.00 }),
                PathEl::LineTo(Point { x: 22.00, y: 22.00 }),
                PathEl::LineTo(Point { x: 22.00, y: 10.00 }),
                PathEl::LineTo(Point { x: 26.00, y: 10.00 }),
                PathEl::LineTo(Point { x: 26.00, y: 22.00 }),
                PathEl::LineTo(Point { x: 38.00, y: 22.00 }),
                PathEl::LineTo(Point { x: 38.00, y: 26.00 }),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct FormatUnderlined {
    size: f64,
    color: Color,
}

impl FormatUnderlined {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for FormatUnderlined {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 24.00, y: 34.00 }),
                PathEl::CurveTo(
                    Point { x: 30.63, y: 34.00 },
                    Point { x: 36.00, y: 28.63 },
                    Point { x: 36.00, y: 22.00 },
                ),
                PathEl::LineTo(Point { x: 36.00, y: 6.00 }),
                PathEl::LineTo(Point { x: 31.00, y: 6.00 }),
                PathEl::LineTo(Point { x: 31.00, y: 22.00 }),
                PathEl::CurveTo(
                    Point { x: 31.00, y: 25.87 },
                    Point { x: 27.87, y: 29.00 },
                    Point { x: 24.00, y: 29.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 20.13, y: 29.00 },
                    Point { x: 17.00, y: 25.87 },
                    Point { x: 17.00, y: 22.00 },
                ),
                PathEl::LineTo(Point { x: 17.00, y: 6.00 }),
                PathEl::LineTo(Point { x: 12.00, y: 6.00 }),
                PathEl::LineTo(Point { x: 12.00, y: 22.00 }),
                PathEl::CurveTo(
                    Point { x: 12.00, y: 28.63 },
                    Point { x: 17.37, y: 34.00 },
                    Point { x: 24.00, y: 34.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 10.00, y: 38.00 }),
                PathEl::LineTo(Point { x: 10.00, y: 42.00 }),
                PathEl::LineTo(Point { x: 38.00, y: 42.00 }),
                PathEl::LineTo(Point { x: 38.00, y: 38.00 }),
                PathEl::LineTo(Point { x: 10.00, y: 38.00 }),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct ViewQuilt {
    size: f64,
    color: Color,
}

impl ViewQuilt {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for ViewQuilt {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 20.00, y: 36.00 }),
                PathEl::LineTo(Point { x: 30.00, y: 36.00 }),
                PathEl::LineTo(Point { x: 30.00, y: 24.00 }),
                PathEl::LineTo(Point { x: 20.00, y: 24.00 }),
                PathEl::LineTo(Point { x: 20.00, y: 36.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 8.00, y: 36.00 }),
                PathEl::LineTo(Point { x: 18.00, y: 36.00 }),
                PathEl::LineTo(Point { x: 18.00, y: 10.00 }),
                PathEl::LineTo(Point { x: 8.00, y: 10.00 }),
                PathEl::LineTo(Point { x: 8.00, y: 36.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 32.00, y: 36.00 }),
                PathEl::LineTo(Point { x: 42.00, y: 36.00 }),
                PathEl::LineTo(Point { x: 42.00, y: 24.00 }),
                PathEl::LineTo(Point { x: 32.00, y: 24.00 }),
                PathEl::LineTo(Point { x: 32.00, y: 36.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 20.00, y: 10.00 }),
                PathEl::LineTo(Point { x: 20.00, y: 22.00 }),
                PathEl::LineTo(Point { x: 42.00, y: 22.00 }),
                PathEl::LineTo(Point { x: 42.00, y: 10.00 }),
                PathEl::LineTo(Point { x: 20.00, y: 10.00 }),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct SignalCellular4Bar {
    size: f64,
    color: Color,
}

impl SignalCellular4Bar {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for SignalCellular4Bar {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 4.00, y: 44.00 }),
                PathEl::LineTo(Point { x: 44.00, y: 44.00 }),
                PathEl::LineTo(Point { x: 44.00, y: 4.00 }),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct AccessAlarms {
    size: f64,
    color: Color,
}

impl AccessAlarms {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for AccessAlarms {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 44.00, y: 11.50 }),
                PathEl::LineTo(Point { x: 34.80, y: 3.80 }),
                PathEl::LineTo(Point { x: 32.20, y: 6.90 }),
                PathEl::LineTo(Point { x: 41.40, y: 14.60 }),
                PathEl::LineTo(Point { x: 44.00, y: 11.50 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 15.70, y: 6.80 }),
                PathEl::LineTo(Point { x: 13.10, y: 3.70 }),
                PathEl::LineTo(Point { x: 4.00, y: 11.50 }),
                PathEl::LineTo(Point { x: 6.60, y: 14.60 }),
                PathEl::LineTo(Point { x: 15.70, y: 6.80 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 25.00, y: 16.00 }),
                PathEl::LineTo(Point { x: 22.00, y: 16.00 }),
                PathEl::LineTo(Point { x: 22.00, y: 28.00 }),
                PathEl::LineTo(Point { x: 31.50, y: 33.70 }),
                PathEl::LineTo(Point { x: 33.00, y: 31.20 }),
                PathEl::LineTo(Point { x: 25.00, y: 26.50 }),
                PathEl::LineTo(Point { x: 25.00, y: 16.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 24.00, y: 8.00 }),
                PathEl::CurveTo(
                    Point { x: 14.00, y: 8.00 },
                    Point { x: 6.00, y: 16.10 },
                    Point { x: 6.00, y: 26.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 6.00, y: 35.90 },
                    Point { x: 14.00, y: 44.00 },
                    Point { x: 24.00, y: 44.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 33.90, y: 44.00 },
                    Point { x: 42.00, y: 35.90 },
                    Point { x: 42.00, y: 26.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 42.00, y: 16.10 },
                    Point { x: 33.90, y: 8.00 },
                    Point { x: 24.00, y: 8.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 24.00, y: 40.00 }),
                PathEl::CurveTo(
                    Point { x: 16.30, y: 40.00 },
                    Point { x: 10.00, y: 33.70 },
                    Point { x: 10.00, y: 26.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 10.00, y: 18.30 },
                    Point { x: 16.30, y: 12.00 },
                    Point { x: 24.00, y: 12.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 31.70, y: 12.00 },
                    Point { x: 38.00, y: 18.30 },
                    Point { x: 38.00, y: 26.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 38.00, y: 33.80 },
                    Point { x: 31.70, y: 40.00 },
                    Point { x: 24.00, y: 40.00 },
                ),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct AddBox {
    size: f64,
    color: Color,
}

impl AddBox {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for AddBox {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 38.00, y: 6.00 }),
                PathEl::LineTo(Point { x: 10.00, y: 6.00 }),
                PathEl::CurveTo(
                    Point { x: 7.79, y: 6.00 },
                    Point { x: 6.00, y: 7.79 },
                    Point { x: 6.00, y: 10.00 },
                ),
                PathEl::LineTo(Point { x: 6.00, y: 38.00 }),
                PathEl::CurveTo(
                    Point { x: 6.00, y: 40.21 },
                    Point { x: 7.79, y: 42.00 },
                    Point { x: 10.00, y: 42.00 },
                ),
                PathEl::LineTo(Point { x: 38.00, y: 42.00 }),
                PathEl::CurveTo(
                    Point { x: 40.21, y: 42.00 },
                    Point { x: 42.00, y: 40.21 },
                    Point { x: 42.00, y: 38.00 },
                ),
                PathEl::LineTo(Point { x: 42.00, y: 10.00 }),
                PathEl::CurveTo(
                    Point { x: 42.00, y: 7.79 },
                    Point { x: 40.21, y: 6.00 },
                    Point { x: 38.00, y: 6.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 34.00, y: 26.00 }),
                PathEl::LineTo(Point { x: 26.00, y: 26.00 }),
                PathEl::LineTo(Point { x: 26.00, y: 34.00 }),
                PathEl::LineTo(Point { x: 22.00, y: 34.00 }),
                PathEl::LineTo(Point { x: 22.00, y: 26.00 }),
                PathEl::LineTo(Point { x: 14.00, y: 26.00 }),
                PathEl::LineTo(Point { x: 14.00, y: 22.00 }),
                PathEl::LineTo(Point { x: 22.00, y: 22.00 }),
                PathEl::LineTo(Point { x: 22.00, y: 14.00 }),
                PathEl::LineTo(Point { x: 26.00, y: 14.00 }),
                PathEl::LineTo(Point { x: 26.00, y: 22.00 }),
                PathEl::LineTo(Point { x: 34.00, y: 22.00 }),
                PathEl::LineTo(Point { x: 34.00, y: 26.00 }),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct Replay {
    size: f64,
    color: Color,
}

impl Replay {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for Replay {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 24.00, y: 10.00 }),
                PathEl::LineTo(Point { x: 24.00, y: 2.00 }),
                PathEl::LineTo(Point { x: 14.00, y: 12.00 }),
                PathEl::LineTo(Point { x: 24.00, y: 22.00 }),
                PathEl::LineTo(Point { x: 24.00, y: 14.00 }),
                PathEl::CurveTo(
                    Point { x: 30.63, y: 14.00 },
                    Point { x: 36.00, y: 19.37 },
                    Point { x: 36.00, y: 26.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 36.00, y: 32.63 },
                    Point { x: 30.63, y: 38.00 },
                    Point { x: 24.00, y: 38.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 17.37, y: 38.00 },
                    Point { x: 12.00, y: 32.63 },
                    Point { x: 12.00, y: 26.00 },
                ),
                PathEl::LineTo(Point { x: 8.00, y: 26.00 }),
                PathEl::CurveTo(
                    Point { x: 8.00, y: 34.84 },
                    Point { x: 15.16, y: 42.00 },
                    Point { x: 24.00, y: 42.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 32.84, y: 42.00 },
                    Point { x: 40.00, y: 34.84 },
                    Point { x: 40.00, y: 26.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 40.00, y: 17.16 },
                    Point { x: 32.84, y: 10.00 },
                    Point { x: 24.00, y: 10.00 },
                ),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct LineWeight {
    size: f64,
    color: Color,
}

impl LineWeight {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for LineWeight {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 6.00, y: 34.00 }),
                PathEl::LineTo(Point { x: 42.00, y: 34.00 }),
                PathEl::LineTo(Point { x: 42.00, y: 30.00 }),
                PathEl::LineTo(Point { x: 6.00, y: 30.00 }),
                PathEl::LineTo(Point { x: 6.00, y: 34.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 6.00, y: 40.00 }),
                PathEl::LineTo(Point { x: 42.00, y: 40.00 }),
                PathEl::LineTo(Point { x: 42.00, y: 38.00 }),
                PathEl::LineTo(Point { x: 6.00, y: 38.00 }),
                PathEl::LineTo(Point { x: 6.00, y: 40.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 6.00, y: 26.00 }),
                PathEl::LineTo(Point { x: 42.00, y: 26.00 }),
                PathEl::LineTo(Point { x: 42.00, y: 20.00 }),
                PathEl::LineTo(Point { x: 6.00, y: 20.00 }),
                PathEl::LineTo(Point { x: 6.00, y: 26.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 6.00, y: 8.00 }),
                PathEl::LineTo(Point { x: 6.00, y: 16.00 }),
                PathEl::LineTo(Point { x: 42.00, y: 16.00 }),
                PathEl::LineTo(Point { x: 42.00, y: 8.00 }),
                PathEl::LineTo(Point { x: 6.00, y: 8.00 }),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct Grade {
    size: f64,
    color: Color,
}

impl Grade {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for Grade {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 24.00, y: 34.54 }),
                PathEl::LineTo(Point { x: 36.36, y: 42.00 }),
                PathEl::LineTo(Point { x: 33.09, y: 27.94 }),
                PathEl::LineTo(Point { x: 44.00, y: 18.49 }),
                PathEl::LineTo(Point { x: 29.62, y: 17.25 }),
                PathEl::LineTo(Point { x: 24.00, y: 4.00 }),
                PathEl::LineTo(Point { x: 18.38, y: 17.25 }),
                PathEl::LineTo(Point { x: 4.00, y: 18.49 }),
                PathEl::LineTo(Point { x: 14.91, y: 27.94 }),
                PathEl::LineTo(Point { x: 11.64, y: 42.00 }),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct Phonelink {
    size: f64,
    color: Color,
}

impl Phonelink {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for Phonelink {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 8.00, y: 12.00 }),
                PathEl::LineTo(Point { x: 44.00, y: 12.00 }),
                PathEl::LineTo(Point { x: 44.00, y: 8.00 }),
                PathEl::LineTo(Point { x: 8.00, y: 8.00 }),
                PathEl::CurveTo(
                    Point { x: 5.79, y: 8.00 },
                    Point { x: 4.00, y: 9.79 },
                    Point { x: 4.00, y: 12.00 },
                ),
                PathEl::LineTo(Point { x: 4.00, y: 34.00 }),
                PathEl::LineTo(Point { x: 0.00, y: 34.00 }),
                PathEl::LineTo(Point { x: 0.00, y: 40.00 }),
                PathEl::LineTo(Point { x: 28.00, y: 40.00 }),
                PathEl::LineTo(Point { x: 28.00, y: 34.00 }),
                PathEl::LineTo(Point { x: 8.00, y: 34.00 }),
                PathEl::LineTo(Point { x: 8.00, y: 12.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 46.00, y: 16.00 }),
                PathEl::LineTo(Point { x: 34.00, y: 16.00 }),
                PathEl::CurveTo(
                    Point { x: 32.90, y: 16.00 },
                    Point { x: 32.00, y: 16.90 },
                    Point { x: 32.00, y: 18.00 },
                ),
                PathEl::LineTo(Point { x: 32.00, y: 38.00 }),
                PathEl::CurveTo(
                    Point { x: 32.00, y: 39.10 },
                    Point { x: 32.90, y: 40.00 },
                    Point { x: 34.00, y: 40.00 },
                ),
                PathEl::LineTo(Point { x: 46.00, y: 40.00 }),
                PathEl::CurveTo(
                    Point { x: 47.10, y: 40.00 },
                    Point { x: 48.00, y: 39.10 },
                    Point { x: 48.00, y: 38.00 },
                ),
                PathEl::LineTo(Point { x: 48.00, y: 18.00 }),
                PathEl::CurveTo(
                    Point { x: 48.00, y: 16.90 },
                    Point { x: 47.10, y: 16.00 },
                    Point { x: 46.00, y: 16.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 44.00, y: 34.00 }),
                PathEl::LineTo(Point { x: 36.00, y: 34.00 }),
                PathEl::LineTo(Point { x: 36.00, y: 20.00 }),
                PathEl::LineTo(Point { x: 44.00, y: 20.00 }),
                PathEl::LineTo(Point { x: 44.00, y: 34.00 }),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct Dialpad {
    size: f64,
    color: Color,
}

impl Dialpad {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for Dialpad {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 24.00, y: 38.00 }),
                PathEl::CurveTo(
                    Point { x: 21.79, y: 38.00 },
                    Point { x: 20.00, y: 39.79 },
                    Point { x: 20.00, y: 42.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 20.00, y: 44.21 },
                    Point { x: 21.79, y: 46.00 },
                    Point { x: 24.00, y: 46.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 26.21, y: 46.00 },
                    Point { x: 28.00, y: 44.21 },
                    Point { x: 28.00, y: 42.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 28.00, y: 39.79 },
                    Point { x: 26.21, y: 38.00 },
                    Point { x: 24.00, y: 38.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 12.00, y: 2.00 }),
                PathEl::CurveTo(
                    Point { x: 9.79, y: 2.00 },
                    Point { x: 8.00, y: 3.79 },
                    Point { x: 8.00, y: 6.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 8.00, y: 8.21 },
                    Point { x: 9.79, y: 10.00 },
                    Point { x: 12.00, y: 10.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 14.21, y: 10.00 },
                    Point { x: 16.00, y: 8.21 },
                    Point { x: 16.00, y: 6.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 16.00, y: 3.79 },
                    Point { x: 14.21, y: 2.00 },
                    Point { x: 12.00, y: 2.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 12.00, y: 14.00 }),
                PathEl::CurveTo(
                    Point { x: 9.79, y: 14.00 },
                    Point { x: 8.00, y: 15.79 },
                    Point { x: 8.00, y: 18.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 8.00, y: 20.21 },
                    Point { x: 9.79, y: 22.00 },
                    Point { x: 12.00, y: 22.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 14.21, y: 22.00 },
                    Point { x: 16.00, y: 20.21 },
                    Point { x: 16.00, y: 18.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 16.00, y: 15.79 },
                    Point { x: 14.21, y: 14.00 },
                    Point { x: 12.00, y: 14.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 12.00, y: 26.00 }),
                PathEl::CurveTo(
                    Point { x: 9.79, y: 26.00 },
                    Point { x: 8.00, y: 27.79 },
                    Point { x: 8.00, y: 30.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 8.00, y: 32.21 },
                    Point { x: 9.79, y: 34.00 },
                    Point { x: 12.00, y: 34.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 14.21, y: 34.00 },
                    Point { x: 16.00, y: 32.21 },
                    Point { x: 16.00, y: 30.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 16.00, y: 27.79 },
                    Point { x: 14.21, y: 26.00 },
                    Point { x: 12.00, y: 26.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 36.00, y: 10.00 }),
                PathEl::CurveTo(
                    Point { x: 38.21, y: 10.00 },
                    Point { x: 40.00, y: 8.21 },
                    Point { x: 40.00, y: 6.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 40.00, y: 3.79 },
                    Point { x: 38.21, y: 2.00 },
                    Point { x: 36.00, y: 2.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 33.79, y: 2.00 },
                    Point { x: 32.00, y: 3.79 },
                    Point { x: 32.00, y: 6.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 32.00, y: 8.21 },
                    Point { x: 33.79, y: 10.00 },
                    Point { x: 36.00, y: 10.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 24.00, y: 26.00 }),
                PathEl::CurveTo(
                    Point { x: 21.79, y: 26.00 },
                    Point { x: 20.00, y: 27.79 },
                    Point { x: 20.00, y: 30.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 20.00, y: 32.21 },
                    Point { x: 21.79, y: 34.00 },
                    Point { x: 24.00, y: 34.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 26.21, y: 34.00 },
                    Point { x: 28.00, y: 32.21 },
                    Point { x: 28.00, y: 30.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 28.00, y: 27.79 },
                    Point { x: 26.21, y: 26.00 },
                    Point { x: 24.00, y: 26.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 36.00, y: 26.00 }),
                PathEl::CurveTo(
                    Point { x: 33.79, y: 26.00 },
                    Point { x: 32.00, y: 27.79 },
                    Point { x: 32.00, y: 30.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 32.00, y: 32.21 },
                    Point { x: 33.79, y: 34.00 },
                    Point { x: 36.00, y: 34.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 38.21, y: 34.00 },
                    Point { x: 40.00, y: 32.21 },
                    Point { x: 40.00, y: 30.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 40.00, y: 27.79 },
                    Point { x: 38.21, y: 26.00 },
                    Point { x: 36.00, y: 26.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 36.00, y: 14.00 }),
                PathEl::CurveTo(
                    Point { x: 33.79, y: 14.00 },
                    Point { x: 32.00, y: 15.79 },
                    Point { x: 32.00, y: 18.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 32.00, y: 20.21 },
                    Point { x: 33.79, y: 22.00 },
                    Point { x: 36.00, y: 22.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 38.21, y: 22.00 },
                    Point { x: 40.00, y: 20.21 },
                    Point { x: 40.00, y: 18.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 40.00, y: 15.79 },
                    Point { x: 38.21, y: 14.00 },
                    Point { x: 36.00, y: 14.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 24.00, y: 14.00 }),
                PathEl::CurveTo(
                    Point { x: 21.79, y: 14.00 },
                    Point { x: 20.00, y: 15.79 },
                    Point { x: 20.00, y: 18.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 20.00, y: 20.21 },
                    Point { x: 21.79, y: 22.00 },
                    Point { x: 24.00, y: 22.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 26.21, y: 22.00 },
                    Point { x: 28.00, y: 20.21 },
                    Point { x: 28.00, y: 18.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 28.00, y: 15.79 },
                    Point { x: 26.21, y: 14.00 },
                    Point { x: 24.00, y: 14.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 24.00, y: 2.00 }),
                PathEl::CurveTo(
                    Point { x: 21.79, y: 2.00 },
                    Point { x: 20.00, y: 3.79 },
                    Point { x: 20.00, y: 6.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 20.00, y: 8.21 },
                    Point { x: 21.79, y: 10.00 },
                    Point { x: 24.00, y: 10.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 26.21, y: 10.00 },
                    Point { x: 28.00, y: 8.21 },
                    Point { x: 28.00, y: 6.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 28.00, y: 3.79 },
                    Point { x: 26.21, y: 2.00 },
                    Point { x: 24.00, y: 2.00 },
                ),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct OpenInNew {
    size: f64,
    color: Color,
}

impl OpenInNew {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for OpenInNew {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 38.00, y: 38.00 }),
                PathEl::LineTo(Point { x: 10.00, y: 38.00 }),
                PathEl::LineTo(Point { x: 10.00, y: 10.00 }),
                PathEl::LineTo(Point { x: 24.00, y: 10.00 }),
                PathEl::LineTo(Point { x: 24.00, y: 6.00 }),
                PathEl::LineTo(Point { x: 10.00, y: 6.00 }),
                PathEl::CurveTo(
                    Point { x: 7.79, y: 6.00 },
                    Point { x: 6.00, y: 7.79 },
                    Point { x: 6.00, y: 10.00 },
                ),
                PathEl::LineTo(Point { x: 6.00, y: 38.00 }),
                PathEl::CurveTo(
                    Point { x: 6.00, y: 40.21 },
                    Point { x: 7.79, y: 42.00 },
                    Point { x: 10.00, y: 42.00 },
                ),
                PathEl::LineTo(Point { x: 38.00, y: 42.00 }),
                PathEl::CurveTo(
                    Point { x: 40.21, y: 42.00 },
                    Point { x: 42.00, y: 40.21 },
                    Point { x: 42.00, y: 38.00 },
                ),
                PathEl::LineTo(Point { x: 42.00, y: 24.00 }),
                PathEl::LineTo(Point { x: 38.00, y: 24.00 }),
                PathEl::LineTo(Point { x: 38.00, y: 38.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 28.00, y: 6.00 }),
                PathEl::LineTo(Point { x: 28.00, y: 10.00 }),
                PathEl::LineTo(Point { x: 35.17, y: 10.00 }),
                PathEl::LineTo(Point { x: 15.51, y: 29.66 }),
                PathEl::LineTo(Point { x: 18.34, y: 32.49 }),
                PathEl::LineTo(Point { x: 38.00, y: 12.83 }),
                PathEl::LineTo(Point { x: 38.00, y: 20.00 }),
                PathEl::LineTo(Point { x: 42.00, y: 20.00 }),
                PathEl::LineTo(Point { x: 42.00, y: 6.00 }),
                PathEl::LineTo(Point { x: 28.00, y: 6.00 }),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct School {
    size: f64,
    color: Color,
}

impl School {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for School {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 10.00, y: 26.36 }),
                PathEl::LineTo(Point { x: 10.00, y: 34.36 }),
                PathEl::LineTo(Point { x: 24.00, y: 42.00 }),
                PathEl::LineTo(Point { x: 38.00, y: 34.36 }),
                PathEl::LineTo(Point { x: 38.00, y: 26.36 }),
                PathEl::LineTo(Point { x: 24.00, y: 34.00 }),
                PathEl::LineTo(Point { x: 10.00, y: 26.36 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 24.00, y: 6.00 }),
                PathEl::LineTo(Point { x: 2.00, y: 18.00 }),
                PathEl::LineTo(Point { x: 24.00, y: 30.00 }),
                PathEl::LineTo(Point { x: 42.00, y: 20.18 }),
                PathEl::LineTo(Point { x: 42.00, y: 34.00 }),
                PathEl::LineTo(Point { x: 46.00, y: 34.00 }),
                PathEl::LineTo(Point { x: 46.00, y: 18.00 }),
                PathEl::LineTo(Point { x: 24.00, y: 6.00 }),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct Flag {
    size: f64,
    color: Color,
}

impl Flag {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for Flag {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 28.80, y: 12.00 }),
                PathEl::LineTo(Point { x: 28.00, y: 8.00 }),
                PathEl::LineTo(Point { x: 10.00, y: 8.00 }),
                PathEl::LineTo(Point { x: 10.00, y: 42.00 }),
                PathEl::LineTo(Point { x: 14.00, y: 42.00 }),
                PathEl::LineTo(Point { x: 14.00, y: 28.00 }),
                PathEl::LineTo(Point { x: 25.20, y: 28.00 }),
                PathEl::LineTo(Point { x: 26.00, y: 32.00 }),
                PathEl::LineTo(Point { x: 40.00, y: 32.00 }),
                PathEl::LineTo(Point { x: 40.00, y: 12.00 }),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct SettingsInputAntenna {
    size: f64,
    color: Color,
}

impl SettingsInputAntenna {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for SettingsInputAntenna {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 24.00, y: 10.00 }),
                PathEl::CurveTo(
                    Point { x: 16.27, y: 10.00 },
                    Point { x: 10.00, y: 16.27 },
                    Point { x: 10.00, y: 24.00 },
                ),
                PathEl::LineTo(Point { x: 14.00, y: 24.00 }),
                PathEl::CurveTo(
                    Point { x: 14.00, y: 18.48 },
                    Point { x: 18.48, y: 14.00 },
                    Point { x: 24.00, y: 14.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 29.52, y: 14.00 },
                    Point { x: 34.00, y: 18.48 },
                    Point { x: 34.00, y: 24.00 },
                ),
                PathEl::LineTo(Point { x: 38.00, y: 24.00 }),
                PathEl::CurveTo(
                    Point { x: 38.00, y: 16.27 },
                    Point { x: 31.73, y: 10.00 },
                    Point { x: 24.00, y: 10.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 26.00, y: 28.58 }),
                PathEl::CurveTo(
                    Point { x: 27.76, y: 27.81 },
                    Point { x: 29.00, y: 26.05 },
                    Point { x: 29.00, y: 24.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 29.00, y: 21.24 },
                    Point { x: 26.76, y: 19.00 },
                    Point { x: 24.00, y: 19.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 21.24, y: 19.00 },
                    Point { x: 19.00, y: 21.24 },
                    Point { x: 19.00, y: 24.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 19.00, y: 26.05 },
                    Point { x: 20.24, y: 27.81 },
                    Point { x: 22.00, y: 28.58 },
                ),
                PathEl::LineTo(Point { x: 22.00, y: 35.17 }),
                PathEl::LineTo(Point { x: 15.17, y: 42.00 }),
                PathEl::LineTo(Point { x: 18.00, y: 44.83 }),
                PathEl::LineTo(Point { x: 24.00, y: 38.83 }),
                PathEl::LineTo(Point { x: 30.00, y: 44.83 }),
                PathEl::LineTo(Point { x: 32.83, y: 42.00 }),
                PathEl::LineTo(Point { x: 26.00, y: 35.17 }),
                PathEl::LineTo(Point { x: 26.00, y: 28.58 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 24.00, y: 2.00 }),
                PathEl::CurveTo(
                    Point { x: 11.85, y: 2.00 },
                    Point { x: 2.00, y: 11.85 },
                    Point { x: 2.00, y: 24.00 },
                ),
                PathEl::LineTo(Point { x: 6.00, y: 24.00 }),
                PathEl::CurveTo(
                    Point { x: 6.00, y: 14.06 },
                    Point { x: 14.06, y: 6.00 },
                    Point { x: 24.00, y: 6.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 33.94, y: 6.00 },
                    Point { x: 42.00, y: 14.06 },
                    Point { x: 42.00, y: 24.00 },
                ),
                PathEl::LineTo(Point { x: 46.00, y: 24.00 }),
                PathEl::CurveTo(
                    Point { x: 46.00, y: 11.85 },
                    Point { x: 36.15, y: 2.00 },
                    Point { x: 24.00, y: 2.00 },
                ),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct Map {
    size: f64,
    color: Color,
}

impl Map {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for Map {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 41.00, y: 6.00 }),
                PathEl::CurveTo(
                    Point { x: 40.89, y: 6.00 },
                    Point { x: 40.79, y: 6.01 },
                    Point { x: 40.69, y: 6.05 },
                ),
                PathEl::LineTo(Point { x: 30.00, y: 10.20 }),
                PathEl::LineTo(Point { x: 18.00, y: 6.00 }),
                PathEl::LineTo(Point { x: 6.73, y: 9.80 }),
                PathEl::CurveTo(
                    Point { x: 6.31, y: 9.94 },
                    Point { x: 6.00, y: 10.30 },
                    Point { x: 6.00, y: 10.76 },
                ),
                PathEl::LineTo(Point { x: 6.00, y: 41.00 }),
                PathEl::CurveTo(
                    Point { x: 6.00, y: 41.55 },
                    Point { x: 6.45, y: 42.00 },
                    Point { x: 7.00, y: 42.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 7.11, y: 42.00 },
                    Point { x: 7.21, y: 41.99 },
                    Point { x: 7.31, y: 41.95 },
                ),
                PathEl::LineTo(Point { x: 18.00, y: 37.80 }),
                PathEl::LineTo(Point { x: 30.00, y: 42.00 }),
                PathEl::LineTo(Point { x: 41.28, y: 38.21 }),
                PathEl::CurveTo(
                    Point { x: 41.70, y: 38.06 },
                    Point { x: 42.00, y: 37.70 },
                    Point { x: 42.00, y: 37.24 },
                ),
                PathEl::LineTo(Point { x: 42.00, y: 7.00 }),
                PathEl::CurveTo(
                    Point { x: 42.00, y: 6.45 },
                    Point { x: 41.55, y: 6.00 },
                    Point { x: 41.00, y: 6.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 30.00, y: 38.00 }),
                PathEl::LineTo(Point { x: 18.00, y: 33.79 }),
                PathEl::LineTo(Point { x: 18.00, y: 10.00 }),
                PathEl::LineTo(Point { x: 30.00, y: 14.21 }),
                PathEl::LineTo(Point { x: 30.00, y: 38.00 }),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct Business {
    size: f64,
    color: Color,
}

impl Business {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for Business {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 24.00, y: 14.00 }),
                PathEl::LineTo(Point { x: 24.00, y: 6.00 }),
                PathEl::LineTo(Point { x: 4.00, y: 6.00 }),
                PathEl::LineTo(Point { x: 4.00, y: 42.00 }),
                PathEl::LineTo(Point { x: 44.00, y: 42.00 }),
                PathEl::LineTo(Point { x: 44.00, y: 14.00 }),
                PathEl::LineTo(Point { x: 24.00, y: 14.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 12.00, y: 38.00 }),
                PathEl::LineTo(Point { x: 8.00, y: 38.00 }),
                PathEl::LineTo(Point { x: 8.00, y: 34.00 }),
                PathEl::LineTo(Point { x: 12.00, y: 34.00 }),
                PathEl::LineTo(Point { x: 12.00, y: 38.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 12.00, y: 30.00 }),
                PathEl::LineTo(Point { x: 8.00, y: 30.00 }),
                PathEl::LineTo(Point { x: 8.00, y: 26.00 }),
                PathEl::LineTo(Point { x: 12.00, y: 26.00 }),
                PathEl::LineTo(Point { x: 12.00, y: 30.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 12.00, y: 22.00 }),
                PathEl::LineTo(Point { x: 8.00, y: 22.00 }),
                PathEl::LineTo(Point { x: 8.00, y: 18.00 }),
                PathEl::LineTo(Point { x: 12.00, y: 18.00 }),
                PathEl::LineTo(Point { x: 12.00, y: 22.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 12.00, y: 14.00 }),
                PathEl::LineTo(Point { x: 8.00, y: 14.00 }),
                PathEl::LineTo(Point { x: 8.00, y: 10.00 }),
                PathEl::LineTo(Point { x: 12.00, y: 10.00 }),
                PathEl::LineTo(Point { x: 12.00, y: 14.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 20.00, y: 38.00 }),
                PathEl::LineTo(Point { x: 16.00, y: 38.00 }),
                PathEl::LineTo(Point { x: 16.00, y: 34.00 }),
                PathEl::LineTo(Point { x: 20.00, y: 34.00 }),
                PathEl::LineTo(Point { x: 20.00, y: 38.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 20.00, y: 30.00 }),
                PathEl::LineTo(Point { x: 16.00, y: 30.00 }),
                PathEl::LineTo(Point { x: 16.00, y: 26.00 }),
                PathEl::LineTo(Point { x: 20.00, y: 26.00 }),
                PathEl::LineTo(Point { x: 20.00, y: 30.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 20.00, y: 22.00 }),
                PathEl::LineTo(Point { x: 16.00, y: 22.00 }),
                PathEl::LineTo(Point { x: 16.00, y: 18.00 }),
                PathEl::LineTo(Point { x: 20.00, y: 18.00 }),
                PathEl::LineTo(Point { x: 20.00, y: 22.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 20.00, y: 14.00 }),
                PathEl::LineTo(Point { x: 16.00, y: 14.00 }),
                PathEl::LineTo(Point { x: 16.00, y: 10.00 }),
                PathEl::LineTo(Point { x: 20.00, y: 10.00 }),
                PathEl::LineTo(Point { x: 20.00, y: 14.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 40.00, y: 38.00 }),
                PathEl::LineTo(Point { x: 24.00, y: 38.00 }),
                PathEl::LineTo(Point { x: 24.00, y: 34.00 }),
                PathEl::LineTo(Point { x: 28.00, y: 34.00 }),
                PathEl::LineTo(Point { x: 28.00, y: 30.00 }),
                PathEl::LineTo(Point { x: 24.00, y: 30.00 }),
                PathEl::LineTo(Point { x: 24.00, y: 26.00 }),
                PathEl::LineTo(Point { x: 28.00, y: 26.00 }),
                PathEl::LineTo(Point { x: 28.00, y: 22.00 }),
                PathEl::LineTo(Point { x: 24.00, y: 22.00 }),
                PathEl::LineTo(Point { x: 24.00, y: 18.00 }),
                PathEl::LineTo(Point { x: 40.00, y: 18.00 }),
                PathEl::LineTo(Point { x: 40.00, y: 38.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 36.00, y: 22.00 }),
                PathEl::LineTo(Point { x: 32.00, y: 22.00 }),
                PathEl::LineTo(Point { x: 32.00, y: 26.00 }),
                PathEl::LineTo(Point { x: 36.00, y: 26.00 }),
                PathEl::LineTo(Point { x: 36.00, y: 22.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 36.00, y: 30.00 }),
                PathEl::LineTo(Point { x: 32.00, y: 30.00 }),
                PathEl::LineTo(Point { x: 32.00, y: 34.00 }),
                PathEl::LineTo(Point { x: 36.00, y: 34.00 }),
                PathEl::LineTo(Point { x: 36.00, y: 30.00 }),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct StayCurrentPortrait {
    size: f64,
    color: Color,
}

impl StayCurrentPortrait {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for StayCurrentPortrait {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 34.00, y: 2.02 }),
                PathEl::LineTo(Point { x: 14.00, y: 2.00 }),
                PathEl::CurveTo(
                    Point { x: 11.79, y: 2.00 },
                    Point { x: 10.02, y: 3.79 },
                    Point { x: 10.02, y: 6.00 },
                ),
                PathEl::LineTo(Point { x: 10.02, y: 42.00 }),
                PathEl::CurveTo(
                    Point { x: 10.02, y: 44.21 },
                    Point { x: 11.79, y: 46.00 },
                    Point { x: 14.00, y: 46.00 },
                ),
                PathEl::LineTo(Point { x: 34.00, y: 46.00 }),
                PathEl::CurveTo(
                    Point { x: 36.21, y: 46.00 },
                    Point { x: 38.00, y: 44.21 },
                    Point { x: 38.00, y: 42.00 },
                ),
                PathEl::LineTo(Point { x: 38.00, y: 6.00 }),
                PathEl::CurveTo(
                    Point { x: 38.00, y: 3.79 },
                    Point { x: 36.21, y: 2.02 },
                    Point { x: 34.00, y: 2.02 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 34.00, y: 38.00 }),
                PathEl::LineTo(Point { x: 14.00, y: 38.00 }),
                PathEl::LineTo(Point { x: 14.00, y: 10.00 }),
                PathEl::LineTo(Point { x: 34.00, y: 10.00 }),
                PathEl::LineTo(Point { x: 34.00, y: 38.00 }),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct CallEnd {
    size: f64,
    color: Color,
}

impl CallEnd {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for CallEnd {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 24.00, y: 18.00 }),
                PathEl::CurveTo(
                    Point { x: 20.79, y: 18.00 },
                    Point { x: 17.70, y: 18.50 },
                    Point { x: 14.80, y: 19.44 },
                ),
                PathEl::LineTo(Point { x: 14.80, y: 25.65 }),
                PathEl::CurveTo(
                    Point { x: 14.80, y: 26.44 },
                    Point { x: 14.34, y: 27.12 },
                    Point { x: 13.68, y: 27.45 },
                ),
                PathEl::CurveTo(
                    Point { x: 11.73, y: 28.43 },
                    Point { x: 9.94, y: 29.68 },
                    Point { x: 8.35, y: 31.15 },
                ),
                PathEl::CurveTo(
                    Point { x: 7.99, y: 31.50 },
                    Point { x: 7.50, y: 31.72 },
                    Point { x: 6.95, y: 31.72 },
                ),
                PathEl::CurveTo(
                    Point { x: 6.40, y: 31.72 },
                    Point { x: 5.90, y: 31.50 },
                    Point { x: 5.54, y: 31.13 },
                ),
                PathEl::LineTo(Point { x: 0.59, y: 26.18 }),
                PathEl::CurveTo(
                    Point { x: 0.22, y: 25.81 },
                    Point { x: 0.00, y: 25.31 },
                    Point { x: 0.00, y: 24.76 },
                ),
                PathEl::CurveTo(
                    Point { x: 0.00, y: 24.21 },
                    Point { x: 0.22, y: 23.71 },
                    Point { x: 0.59, y: 23.34 },
                ),
                PathEl::CurveTo(
                    Point { x: 6.68, y: 17.55 },
                    Point { x: 14.93, y: 14.00 },
                    Point { x: 24.00, y: 14.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 33.07, y: 14.00 },
                    Point { x: 41.32, y: 17.55 },
                    Point { x: 47.41, y: 23.34 },
                ),
                PathEl::CurveTo(
                    Point { x: 47.78, y: 23.70 },
                    Point { x: 48.00, y: 24.21 },
                    Point { x: 48.00, y: 24.76 },
                ),
                PathEl::CurveTo(
                    Point { x: 48.00, y: 25.31 },
                    Point { x: 47.78, y: 25.81 },
                    Point { x: 47.41, y: 26.17 },
                ),
                PathEl::LineTo(Point { x: 42.46, y: 31.12 }),
                PathEl::CurveTo(
                    Point { x: 42.10, y: 31.48 },
                    Point { x: 41.60, y: 31.71 },
                    Point { x: 41.05, y: 31.71 },
                ),
                PathEl::CurveTo(
                    Point { x: 40.51, y: 31.71 },
                    Point { x: 40.01, y: 31.49 },
                    Point { x: 39.65, y: 31.14 },
                ),
                PathEl::CurveTo(
                    Point { x: 38.06, y: 29.67 },
                    Point { x: 36.27, y: 28.42 },
                    Point { x: 34.32, y: 27.44 },
                ),
                PathEl::CurveTo(
                    Point { x: 33.66, y: 27.11 },
                    Point { x: 33.20, y: 26.43 },
                    Point { x: 33.20, y: 25.64 },
                ),
                PathEl::LineTo(Point { x: 33.20, y: 19.43 }),
                PathEl::CurveTo(
                    Point { x: 30.30, y: 18.50 },
                    Point { x: 27.21, y: 18.00 },
                    Point { x: 24.00, y: 18.00 },
                ),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct Eject {
    size: f64,
    color: Color,
}

impl Eject {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for Eject {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 24.0, height / 24.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 5.00, y: 17.00 }),
                PathEl::LineTo(Point { x: 19.00, y: 17.00 }),
                PathEl::LineTo(Point { x: 19.00, y: 19.00 }),
                PathEl::LineTo(Point { x: 5.00, y: 19.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 12.00, y: 5.00 }),
                PathEl::LineTo(Point { x: 5.33, y: 15.00 }),
                PathEl::LineTo(Point { x: 18.67, y: 15.00 }),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct LockOpen {
    size: f64,
    color: Color,
}

impl LockOpen {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for LockOpen {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 24.00, y: 34.00 }),
                PathEl::CurveTo(
                    Point { x: 26.21, y: 34.00 },
                    Point { x: 28.00, y: 32.21 },
                    Point { x: 28.00, y: 30.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 28.00, y: 27.79 },
                    Point { x: 26.21, y: 26.00 },
                    Point { x: 24.00, y: 26.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 21.79, y: 26.00 },
                    Point { x: 20.00, y: 27.79 },
                    Point { x: 20.00, y: 30.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 20.00, y: 32.21 },
                    Point { x: 21.79, y: 34.00 },
                    Point { x: 24.00, y: 34.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 36.00, y: 16.00 }),
                PathEl::LineTo(Point { x: 34.00, y: 16.00 }),
                PathEl::LineTo(Point { x: 34.00, y: 12.00 }),
                PathEl::CurveTo(
                    Point { x: 34.00, y: 6.48 },
                    Point { x: 29.52, y: 2.00 },
                    Point { x: 24.00, y: 2.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 18.48, y: 2.00 },
                    Point { x: 14.00, y: 6.48 },
                    Point { x: 14.00, y: 12.00 },
                ),
                PathEl::LineTo(Point { x: 17.80, y: 12.00 }),
                PathEl::CurveTo(
                    Point { x: 17.80, y: 8.58 },
                    Point { x: 20.58, y: 5.80 },
                    Point { x: 24.00, y: 5.80 },
                ),
                PathEl::CurveTo(
                    Point { x: 27.42, y: 5.80 },
                    Point { x: 30.20, y: 8.58 },
                    Point { x: 30.20, y: 12.00 },
                ),
                PathEl::LineTo(Point { x: 30.20, y: 16.00 }),
                PathEl::LineTo(Point { x: 12.00, y: 16.00 }),
                PathEl::CurveTo(
                    Point { x: 9.79, y: 16.00 },
                    Point { x: 8.00, y: 17.79 },
                    Point { x: 8.00, y: 20.00 },
                ),
                PathEl::LineTo(Point { x: 8.00, y: 40.00 }),
                PathEl::CurveTo(
                    Point { x: 8.00, y: 42.21 },
                    Point { x: 9.79, y: 44.00 },
                    Point { x: 12.00, y: 44.00 },
                ),
                PathEl::LineTo(Point { x: 36.00, y: 44.00 }),
                PathEl::CurveTo(
                    Point { x: 38.21, y: 44.00 },
                    Point { x: 40.00, y: 42.21 },
                    Point { x: 40.00, y: 40.00 },
                ),
                PathEl::LineTo(Point { x: 40.00, y: 20.00 }),
                PathEl::CurveTo(
                    Point { x: 40.00, y: 17.79 },
                    Point { x: 38.21, y: 16.00 },
                    Point { x: 36.00, y: 16.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 36.00, y: 40.00 }),
                PathEl::LineTo(Point { x: 12.00, y: 40.00 }),
                PathEl::LineTo(Point { x: 12.00, y: 20.00 }),
                PathEl::LineTo(Point { x: 36.00, y: 20.00 }),
                PathEl::LineTo(Point { x: 36.00, y: 40.00 }),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct Dashboard {
    size: f64,
    color: Color,
}

impl Dashboard {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for Dashboard {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 6.00, y: 26.00 }),
                PathEl::LineTo(Point { x: 22.00, y: 26.00 }),
                PathEl::LineTo(Point { x: 22.00, y: 6.00 }),
                PathEl::LineTo(Point { x: 6.00, y: 6.00 }),
                PathEl::LineTo(Point { x: 6.00, y: 26.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 6.00, y: 42.00 }),
                PathEl::LineTo(Point { x: 22.00, y: 42.00 }),
                PathEl::LineTo(Point { x: 22.00, y: 30.00 }),
                PathEl::LineTo(Point { x: 6.00, y: 30.00 }),
                PathEl::LineTo(Point { x: 6.00, y: 42.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 26.00, y: 42.00 }),
                PathEl::LineTo(Point { x: 42.00, y: 42.00 }),
                PathEl::LineTo(Point { x: 42.00, y: 22.00 }),
                PathEl::LineTo(Point { x: 26.00, y: 22.00 }),
                PathEl::LineTo(Point { x: 26.00, y: 42.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 26.00, y: 6.00 }),
                PathEl::LineTo(Point { x: 26.00, y: 18.00 }),
                PathEl::LineTo(Point { x: 42.00, y: 18.00 }),
                PathEl::LineTo(Point { x: 42.00, y: 6.00 }),
                PathEl::LineTo(Point { x: 26.00, y: 6.00 }),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct LocalGasStation {
    size: f64,
    color: Color,
}

impl LocalGasStation {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for LocalGasStation {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 39.54, y: 14.46 }),
                PathEl::LineTo(Point { x: 39.57, y: 14.43 }),
                PathEl::LineTo(Point { x: 32.12, y: 7.00 }),
                PathEl::LineTo(Point { x: 30.00, y: 9.12 }),
                PathEl::LineTo(Point { x: 34.22, y: 13.34 }),
                PathEl::CurveTo(
                    Point { x: 32.34, y: 14.06 },
                    Point { x: 31.00, y: 15.87 },
                    Point { x: 31.00, y: 18.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 31.00, y: 20.76 },
                    Point { x: 33.24, y: 23.00 },
                    Point { x: 36.00, y: 23.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 36.71, y: 23.00 },
                    Point { x: 37.39, y: 22.85 },
                    Point { x: 38.00, y: 22.58 },
                ),
                PathEl::LineTo(Point { x: 38.00, y: 37.00 }),
                PathEl::CurveTo(
                    Point { x: 38.00, y: 38.10 },
                    Point { x: 37.10, y: 39.00 },
                    Point { x: 36.00, y: 39.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 34.90, y: 39.00 },
                    Point { x: 34.00, y: 38.10 },
                    Point { x: 34.00, y: 37.00 },
                ),
                PathEl::LineTo(Point { x: 34.00, y: 28.00 }),
                PathEl::CurveTo(
                    Point { x: 34.00, y: 25.79 },
                    Point { x: 32.21, y: 24.00 },
                    Point { x: 30.00, y: 24.00 },
                ),
                PathEl::LineTo(Point { x: 28.00, y: 24.00 }),
                PathEl::LineTo(Point { x: 28.00, y: 10.00 }),
                PathEl::CurveTo(
                    Point { x: 28.00, y: 7.79 },
                    Point { x: 26.21, y: 6.00 },
                    Point { x: 24.00, y: 6.00 },
                ),
                PathEl::LineTo(Point { x: 12.00, y: 6.00 }),
                PathEl::CurveTo(
                    Point { x: 9.79, y: 6.00 },
                    Point { x: 8.00, y: 7.79 },
                    Point { x: 8.00, y: 10.00 },
                ),
                PathEl::LineTo(Point { x: 8.00, y: 42.00 }),
                PathEl::LineTo(Point { x: 28.00, y: 42.00 }),
                PathEl::LineTo(Point { x: 28.00, y: 27.00 }),
                PathEl::LineTo(Point { x: 31.00, y: 27.00 }),
                PathEl::LineTo(Point { x: 31.00, y: 37.00 }),
                PathEl::CurveTo(
                    Point { x: 31.00, y: 39.76 },
                    Point { x: 33.24, y: 42.00 },
                    Point { x: 36.00, y: 42.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 38.76, y: 42.00 },
                    Point { x: 41.00, y: 39.76 },
                    Point { x: 41.00, y: 37.00 },
                ),
                PathEl::LineTo(Point { x: 41.00, y: 18.00 }),
                PathEl::CurveTo(
                    Point { x: 41.00, y: 16.62 },
                    Point { x: 40.44, y: 15.37 },
                    Point { x: 39.54, y: 14.46 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 24.00, y: 20.00 }),
                PathEl::LineTo(Point { x: 12.00, y: 20.00 }),
                PathEl::LineTo(Point { x: 12.00, y: 10.00 }),
                PathEl::LineTo(Point { x: 24.00, y: 10.00 }),
                PathEl::LineTo(Point { x: 24.00, y: 20.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 36.00, y: 20.00 }),
                PathEl::CurveTo(
                    Point { x: 34.90, y: 20.00 },
                    Point { x: 34.00, y: 19.10 },
                    Point { x: 34.00, y: 18.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 34.00, y: 16.90 },
                    Point { x: 34.90, y: 16.00 },
                    Point { x: 36.00, y: 16.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 37.10, y: 16.00 },
                    Point { x: 38.00, y: 16.90 },
                    Point { x: 38.00, y: 18.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 38.00, y: 19.10 },
                    Point { x: 37.10, y: 20.00 },
                    Point { x: 36.00, y: 20.00 },
                ),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct PanoramaVertical {
    size: f64,
    color: Color,
}

impl PanoramaVertical {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for PanoramaVertical {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 39.88, y: 42.24 }),
                PathEl::CurveTo(
                    Point { x: 37.69, y: 36.36 },
                    Point { x: 36.59, y: 30.18 },
                    Point { x: 36.59, y: 24.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 36.59, y: 17.82 },
                    Point { x: 37.69, y: 11.64 },
                    Point { x: 39.88, y: 5.76 },
                ),
                PathEl::CurveTo(
                    Point { x: 39.96, y: 5.54 },
                    Point { x: 40.00, y: 5.33 },
                    Point { x: 40.00, y: 5.13 },
                ),
                PathEl::CurveTo(
                    Point { x: 40.00, y: 4.47 },
                    Point { x: 39.53, y: 4.00 },
                    Point { x: 38.75, y: 4.00 },
                ),
                PathEl::LineTo(Point { x: 9.25, y: 4.00 }),
                PathEl::CurveTo(
                    Point { x: 8.47, y: 4.01 },
                    Point { x: 8.00, y: 4.47 },
                    Point { x: 8.00, y: 5.13 },
                ),
                PathEl::CurveTo(
                    Point { x: 8.00, y: 5.32 },
                    Point { x: 8.04, y: 5.53 },
                    Point { x: 8.12, y: 5.75 },
                ),
                PathEl::CurveTo(
                    Point { x: 10.31, y: 11.63 },
                    Point { x: 11.41, y: 17.81 },
                    Point { x: 11.41, y: 23.99 },
                ),
                PathEl::CurveTo(
                    Point { x: 11.41, y: 30.17 },
                    Point { x: 10.31, y: 36.35 },
                    Point { x: 8.12, y: 42.23 },
                ),
                PathEl::CurveTo(
                    Point { x: 8.04, y: 42.46 },
                    Point { x: 8.00, y: 42.67 },
                    Point { x: 8.00, y: 42.87 },
                ),
                PathEl::CurveTo(
                    Point { x: 8.00, y: 43.53 },
                    Point { x: 8.47, y: 44.00 },
                    Point { x: 9.25, y: 44.00 },
                ),
                PathEl::LineTo(Point { x: 38.75, y: 44.00 }),
                PathEl::CurveTo(
                    Point { x: 39.53, y: 44.00 },
                    Point { x: 40.00, y: 43.52 },
                    Point { x: 40.00, y: 42.86 },
                ),
                PathEl::CurveTo(
                    Point { x: 40.00, y: 42.67 },
                    Point { x: 39.96, y: 42.46 },
                    Point { x: 39.88, y: 42.24 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 13.09, y: 40.00 }),
                PathEl::CurveTo(
                    Point { x: 14.63, y: 34.81 },
                    Point { x: 15.41, y: 29.44 },
                    Point { x: 15.41, y: 24.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 15.41, y: 18.56 },
                    Point { x: 14.63, y: 13.20 },
                    Point { x: 13.09, y: 8.00 },
                ),
                PathEl::LineTo(Point { x: 34.91, y: 8.00 }),
                PathEl::CurveTo(
                    Point { x: 33.37, y: 13.19 },
                    Point { x: 32.59, y: 18.56 },
                    Point { x: 32.59, y: 24.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 32.59, y: 29.44 },
                    Point { x: 33.37, y: 34.80 },
                    Point { x: 34.91, y: 40.00 },
                ),
                PathEl::LineTo(Point { x: 13.09, y: 40.00 }),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct PhoneAndroid {
    size: f64,
    color: Color,
}

impl PhoneAndroid {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for PhoneAndroid {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 32.00, y: 2.00 }),
                PathEl::LineTo(Point { x: 16.00, y: 2.00 }),
                PathEl::CurveTo(
                    Point { x: 12.69, y: 2.00 },
                    Point { x: 10.00, y: 4.69 },
                    Point { x: 10.00, y: 8.00 },
                ),
                PathEl::LineTo(Point { x: 10.00, y: 40.00 }),
                PathEl::CurveTo(
                    Point { x: 10.00, y: 43.31 },
                    Point { x: 12.69, y: 46.00 },
                    Point { x: 16.00, y: 46.00 },
                ),
                PathEl::LineTo(Point { x: 32.00, y: 46.00 }),
                PathEl::CurveTo(
                    Point { x: 35.31, y: 46.00 },
                    Point { x: 38.00, y: 43.31 },
                    Point { x: 38.00, y: 40.00 },
                ),
                PathEl::LineTo(Point { x: 38.00, y: 8.00 }),
                PathEl::CurveTo(
                    Point { x: 38.00, y: 4.69 },
                    Point { x: 35.31, y: 2.00 },
                    Point { x: 32.00, y: 2.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 28.00, y: 42.00 }),
                PathEl::LineTo(Point { x: 20.00, y: 42.00 }),
                PathEl::LineTo(Point { x: 20.00, y: 40.00 }),
                PathEl::LineTo(Point { x: 28.00, y: 40.00 }),
                PathEl::LineTo(Point { x: 28.00, y: 42.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 34.50, y: 36.00 }),
                PathEl::LineTo(Point { x: 13.50, y: 36.00 }),
                PathEl::LineTo(Point { x: 13.50, y: 8.00 }),
                PathEl::LineTo(Point { x: 34.50, y: 8.00 }),
                PathEl::LineTo(Point { x: 34.50, y: 36.00 }),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct LocalPhone {
    size: f64,
    color: Color,
}

impl LocalPhone {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for LocalPhone {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 13.25, y: 21.59 }),
                PathEl::CurveTo(
                    Point { x: 16.13, y: 27.25 },
                    Point { x: 20.76, y: 31.88 },
                    Point { x: 26.43, y: 34.76 },
                ),
                PathEl::LineTo(Point { x: 30.83, y: 30.35 }),
                PathEl::CurveTo(
                    Point { x: 31.38, y: 29.80 },
                    Point { x: 32.17, y: 29.64 },
                    Point { x: 32.86, y: 29.86 },
                ),
                PathEl::CurveTo(
                    Point { x: 35.10, y: 30.60 },
                    Point { x: 37.51, y: 31.00 },
                    Point { x: 40.00, y: 31.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 41.11, y: 31.00 },
                    Point { x: 42.00, y: 31.89 },
                    Point { x: 42.00, y: 33.00 },
                ),
                PathEl::LineTo(Point { x: 42.00, y: 40.00 }),
                PathEl::CurveTo(
                    Point { x: 42.00, y: 41.11 },
                    Point { x: 41.11, y: 42.00 },
                    Point { x: 40.00, y: 42.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 21.22, y: 42.00 },
                    Point { x: 6.00, y: 26.78 },
                    Point { x: 6.00, y: 8.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 6.00, y: 6.89 },
                    Point { x: 6.90, y: 6.00 },
                    Point { x: 8.00, y: 6.00 },
                ),
                PathEl::LineTo(Point { x: 15.00, y: 6.00 }),
                PathEl::CurveTo(
                    Point { x: 16.11, y: 6.00 },
                    Point { x: 17.00, y: 6.89 },
                    Point { x: 17.00, y: 8.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 17.00, y: 10.49 },
                    Point { x: 17.40, y: 12.90 },
                    Point { x: 18.14, y: 15.14 },
                ),
                PathEl::CurveTo(
                    Point { x: 18.36, y: 15.83 },
                    Point { x: 18.20, y: 16.62 },
                    Point { x: 17.65, y: 17.17 },
                ),
                PathEl::LineTo(Point { x: 13.25, y: 21.59 }),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct HighlightOff {
    size: f64,
    color: Color,
}

impl HighlightOff {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for HighlightOff {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 29.17, y: 16.00 }),
                PathEl::LineTo(Point { x: 24.00, y: 21.17 }),
                PathEl::LineTo(Point { x: 18.83, y: 16.00 }),
                PathEl::LineTo(Point { x: 16.00, y: 18.83 }),
                PathEl::LineTo(Point { x: 21.17, y: 24.00 }),
                PathEl::LineTo(Point { x: 16.00, y: 29.17 }),
                PathEl::LineTo(Point { x: 18.83, y: 32.00 }),
                PathEl::LineTo(Point { x: 24.00, y: 26.83 }),
                PathEl::LineTo(Point { x: 29.17, y: 32.00 }),
                PathEl::LineTo(Point { x: 32.00, y: 29.17 }),
                PathEl::LineTo(Point { x: 26.83, y: 24.00 }),
                PathEl::LineTo(Point { x: 32.00, y: 18.83 }),
                PathEl::LineTo(Point { x: 29.17, y: 16.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 24.00, y: 4.00 }),
                PathEl::CurveTo(
                    Point { x: 12.95, y: 4.00 },
                    Point { x: 4.00, y: 12.95 },
                    Point { x: 4.00, y: 24.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 4.00, y: 35.05 },
                    Point { x: 12.95, y: 44.00 },
                    Point { x: 24.00, y: 44.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 35.05, y: 44.00 },
                    Point { x: 44.00, y: 35.05 },
                    Point { x: 44.00, y: 24.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 44.00, y: 12.95 },
                    Point { x: 35.05, y: 4.00 },
                    Point { x: 24.00, y: 4.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 24.00, y: 40.00 }),
                PathEl::CurveTo(
                    Point { x: 15.18, y: 40.00 },
                    Point { x: 8.00, y: 32.82 },
                    Point { x: 8.00, y: 24.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 8.00, y: 15.18 },
                    Point { x: 15.18, y: 8.00 },
                    Point { x: 24.00, y: 8.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 32.82, y: 8.00 },
                    Point { x: 40.00, y: 15.18 },
                    Point { x: 40.00, y: 24.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 40.00, y: 32.82 },
                    Point { x: 32.82, y: 40.00 },
                    Point { x: 24.00, y: 40.00 },
                ),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct Work {
    size: f64,
    color: Color,
}

impl Work {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for Work {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 40.00, y: 12.00 }),
                PathEl::LineTo(Point { x: 32.00, y: 12.00 }),
                PathEl::LineTo(Point { x: 32.00, y: 8.00 }),
                PathEl::CurveTo(
                    Point { x: 32.00, y: 5.79 },
                    Point { x: 30.21, y: 4.00 },
                    Point { x: 28.00, y: 4.00 },
                ),
                PathEl::LineTo(Point { x: 20.00, y: 4.00 }),
                PathEl::CurveTo(
                    Point { x: 17.79, y: 4.00 },
                    Point { x: 16.00, y: 5.79 },
                    Point { x: 16.00, y: 8.00 },
                ),
                PathEl::LineTo(Point { x: 16.00, y: 12.00 }),
                PathEl::LineTo(Point { x: 8.00, y: 12.00 }),
                PathEl::CurveTo(
                    Point { x: 5.79, y: 12.00 },
                    Point { x: 4.02, y: 13.79 },
                    Point { x: 4.02, y: 16.00 },
                ),
                PathEl::LineTo(Point { x: 4.00, y: 38.00 }),
                PathEl::CurveTo(
                    Point { x: 4.00, y: 40.21 },
                    Point { x: 5.79, y: 42.00 },
                    Point { x: 8.00, y: 42.00 },
                ),
                PathEl::LineTo(Point { x: 40.00, y: 42.00 }),
                PathEl::CurveTo(
                    Point { x: 42.21, y: 42.00 },
                    Point { x: 44.00, y: 40.21 },
                    Point { x: 44.00, y: 38.00 },
                ),
                PathEl::LineTo(Point { x: 44.00, y: 16.00 }),
                PathEl::CurveTo(
                    Point { x: 44.00, y: 13.79 },
                    Point { x: 42.21, y: 12.00 },
                    Point { x: 40.00, y: 12.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 28.00, y: 12.00 }),
                PathEl::LineTo(Point { x: 20.00, y: 12.00 }),
                PathEl::LineTo(Point { x: 20.00, y: 8.00 }),
                PathEl::LineTo(Point { x: 28.00, y: 8.00 }),
                PathEl::LineTo(Point { x: 28.00, y: 12.00 }),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct Cancel {
    size: f64,
    color: Color,
}

impl Cancel {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for Cancel {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 24.00, y: 4.00 }),
                PathEl::CurveTo(
                    Point { x: 12.95, y: 4.00 },
                    Point { x: 4.00, y: 12.95 },
                    Point { x: 4.00, y: 24.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 4.00, y: 35.05 },
                    Point { x: 12.95, y: 44.00 },
                    Point { x: 24.00, y: 44.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 35.05, y: 44.00 },
                    Point { x: 44.00, y: 35.05 },
                    Point { x: 44.00, y: 24.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 44.00, y: 12.95 },
                    Point { x: 35.05, y: 4.00 },
                    Point { x: 24.00, y: 4.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 34.00, y: 31.17 }),
                PathEl::LineTo(Point { x: 31.17, y: 34.00 }),
                PathEl::LineTo(Point { x: 24.00, y: 26.83 }),
                PathEl::LineTo(Point { x: 16.83, y: 34.00 }),
                PathEl::LineTo(Point { x: 14.00, y: 31.17 }),
                PathEl::LineTo(Point { x: 21.17, y: 24.00 }),
                PathEl::LineTo(Point { x: 14.00, y: 16.83 }),
                PathEl::LineTo(Point { x: 16.83, y: 14.00 }),
                PathEl::LineTo(Point { x: 24.00, y: 21.17 }),
                PathEl::LineTo(Point { x: 31.17, y: 14.00 }),
                PathEl::LineTo(Point { x: 34.00, y: 16.83 }),
                PathEl::LineTo(Point { x: 26.83, y: 24.00 }),
                PathEl::LineTo(Point { x: 34.00, y: 31.17 }),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct RotateLeft {
    size: f64,
    color: Color,
}

impl RotateLeft {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for RotateLeft {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 14.22, y: 17.05 }),
                PathEl::LineTo(Point { x: 11.39, y: 14.22 }),
                PathEl::CurveTo(
                    Point { x: 9.59, y: 16.54 },
                    Point { x: 8.48, y: 19.22 },
                    Point { x: 8.14, y: 22.00 },
                ),
                PathEl::LineTo(Point { x: 12.18, y: 22.00 }),
                PathEl::CurveTo(
                    Point { x: 12.47, y: 20.25 },
                    Point { x: 13.15, y: 18.56 },
                    Point { x: 14.22, y: 17.05 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 12.18, y: 26.00 }),
                PathEl::LineTo(Point { x: 8.14, y: 26.00 }),
                PathEl::CurveTo(
                    Point { x: 8.48, y: 28.78 },
                    Point { x: 9.59, y: 31.46 },
                    Point { x: 11.39, y: 33.78 },
                ),
                PathEl::LineTo(Point { x: 14.22, y: 30.95 }),
                PathEl::CurveTo(
                    Point { x: 13.15, y: 29.44 },
                    Point { x: 12.47, y: 27.75 },
                    Point { x: 12.18, y: 26.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 14.20, y: 36.63 }),
                PathEl::CurveTo(
                    Point { x: 16.52, y: 38.44 },
                    Point { x: 19.22, y: 39.51 },
                    Point { x: 22.00, y: 39.85 },
                ),
                PathEl::LineTo(Point { x: 22.00, y: 35.81 }),
                PathEl::CurveTo(
                    Point { x: 20.25, y: 35.52 },
                    Point { x: 18.57, y: 34.83 },
                    Point { x: 17.07, y: 33.76 },
                ),
                PathEl::LineTo(Point { x: 14.20, y: 36.63 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 26.00, y: 8.14 }),
                PathEl::LineTo(Point { x: 26.00, y: 2.00 }),
                PathEl::LineTo(Point { x: 16.90, y: 11.10 }),
                PathEl::LineTo(Point { x: 26.00, y: 20.00 }),
                PathEl::LineTo(Point { x: 26.00, y: 12.18 }),
                PathEl::CurveTo(
                    Point { x: 31.67, y: 13.13 },
                    Point { x: 36.00, y: 18.06 },
                    Point { x: 36.00, y: 24.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 36.00, y: 29.94 },
                    Point { x: 31.67, y: 34.87 },
                    Point { x: 26.00, y: 35.82 },
                ),
                PathEl::LineTo(Point { x: 26.00, y: 39.86 }),
                PathEl::CurveTo(
                    Point { x: 33.89, y: 38.87 },
                    Point { x: 40.00, y: 32.16 },
                    Point { x: 40.00, y: 24.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 40.00, y: 15.84 },
                    Point { x: 33.89, y: 9.13 },
                    Point { x: 26.00, y: 8.14 },
                ),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct SlowMotionVideo {
    size: f64,
    color: Color,
}

impl SlowMotionVideo {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for SlowMotionVideo {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 26.10, y: 19.58 }),
                PathEl::LineTo(Point { x: 20.00, y: 15.00 }),
                PathEl::LineTo(Point { x: 20.00, y: 33.00 }),
                PathEl::LineTo(Point { x: 26.10, y: 28.42 }),
                PathEl::LineTo(Point { x: 32.00, y: 24.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 26.10, y: 19.58 }),
                PathEl::LineTo(Point { x: 20.00, y: 15.00 }),
                PathEl::LineTo(Point { x: 20.00, y: 33.00 }),
                PathEl::LineTo(Point { x: 26.10, y: 28.42 }),
                PathEl::LineTo(Point { x: 32.00, y: 24.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 26.10, y: 19.58 }),
                PathEl::LineTo(Point { x: 20.00, y: 15.00 }),
                PathEl::LineTo(Point { x: 20.00, y: 33.00 }),
                PathEl::LineTo(Point { x: 26.10, y: 28.42 }),
                PathEl::LineTo(Point { x: 32.00, y: 24.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 22.00, y: 8.14 }),
                PathEl::LineTo(Point { x: 22.00, y: 4.10 }),
                PathEl::CurveTo(
                    Point { x: 17.98, y: 4.50 },
                    Point { x: 14.32, y: 6.10 },
                    Point { x: 11.36, y: 8.52 },
                ),
                PathEl::LineTo(Point { x: 14.20, y: 11.38 }),
                PathEl::CurveTo(
                    Point { x: 16.42, y: 9.66 },
                    Point { x: 19.08, y: 8.50 },
                    Point { x: 22.00, y: 8.14 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 11.38, y: 14.20 }),
                PathEl::LineTo(Point { x: 8.52, y: 11.36 }),
                PathEl::CurveTo(
                    Point { x: 6.10, y: 14.32 },
                    Point { x: 4.50, y: 17.98 },
                    Point { x: 4.10, y: 22.00 },
                ),
                PathEl::LineTo(Point { x: 8.14, y: 22.00 }),
                PathEl::CurveTo(
                    Point { x: 8.50, y: 19.08 },
                    Point { x: 9.66, y: 16.42 },
                    Point { x: 11.38, y: 14.20 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 8.14, y: 26.00 }),
                PathEl::LineTo(Point { x: 4.10, y: 26.00 }),
                PathEl::CurveTo(
                    Point { x: 4.50, y: 30.02 },
                    Point { x: 6.10, y: 33.68 },
                    Point { x: 8.52, y: 36.64 },
                ),
                PathEl::LineTo(Point { x: 11.38, y: 33.78 }),
                PathEl::CurveTo(
                    Point { x: 9.66, y: 31.58 },
                    Point { x: 8.50, y: 28.92 },
                    Point { x: 8.14, y: 26.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 11.36, y: 39.48 }),
                PathEl::CurveTo(
                    Point { x: 14.32, y: 41.90 },
                    Point { x: 18.00, y: 43.50 },
                    Point { x: 22.00, y: 43.90 },
                ),
                PathEl::LineTo(Point { x: 22.00, y: 39.86 }),
                PathEl::CurveTo(
                    Point { x: 19.08, y: 39.50 },
                    Point { x: 16.42, y: 38.34 },
                    Point { x: 14.20, y: 36.62 },
                ),
                PathEl::LineTo(Point { x: 11.36, y: 39.48 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 44.00, y: 24.00 }),
                PathEl::CurveTo(
                    Point { x: 44.00, y: 34.32 },
                    Point { x: 36.16, y: 42.84 },
                    Point { x: 26.10, y: 43.90 },
                ),
                PathEl::LineTo(Point { x: 26.10, y: 39.86 }),
                PathEl::CurveTo(
                    Point { x: 33.94, y: 38.82 },
                    Point { x: 40.00, y: 32.10 },
                    Point { x: 40.00, y: 24.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 40.00, y: 15.90 },
                    Point { x: 33.94, y: 9.18 },
                    Point { x: 26.10, y: 8.14 },
                ),
                PathEl::LineTo(Point { x: 26.10, y: 4.10 }),
                PathEl::CurveTo(
                    Point { x: 36.16, y: 5.16 },
                    Point { x: 44.00, y: 13.68 },
                    Point { x: 44.00, y: 24.00 },
                ),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct Favorite {
    size: f64,
    color: Color,
}

impl Favorite {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for Favorite {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 24.00, y: 42.70 }),
                PathEl::LineTo(Point { x: 21.10, y: 40.07 }),
                PathEl::CurveTo(
                    Point { x: 10.80, y: 30.72 },
                    Point { x: 4.00, y: 24.55 },
                    Point { x: 4.00, y: 17.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 4.00, y: 10.83 },
                    Point { x: 8.83, y: 6.00 },
                    Point { x: 15.00, y: 6.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 18.48, y: 6.00 },
                    Point { x: 21.82, y: 7.62 },
                    Point { x: 24.00, y: 10.17 },
                ),
                PathEl::CurveTo(
                    Point { x: 26.18, y: 7.62 },
                    Point { x: 29.52, y: 6.00 },
                    Point { x: 33.00, y: 6.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 39.17, y: 6.00 },
                    Point { x: 44.00, y: 10.83 },
                    Point { x: 44.00, y: 17.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 44.00, y: 24.55 },
                    Point { x: 37.20, y: 30.72 },
                    Point { x: 26.90, y: 40.07 },
                ),
                PathEl::LineTo(Point { x: 24.00, y: 42.70 }),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct Check {
    size: f64,
    color: Color,
}

impl Check {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for Check {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 18.00, y: 32.34 }),
                PathEl::LineTo(Point { x: 9.66, y: 24.00 }),
                PathEl::LineTo(Point { x: 6.83, y: 26.83 }),
                PathEl::LineTo(Point { x: 18.00, y: 38.00 }),
                PathEl::LineTo(Point { x: 42.00, y: 14.00 }),
                PathEl::LineTo(Point { x: 39.17, y: 11.17 }),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct StarRate {
    size: f64,
    color: Color,
}

impl StarRate {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for StarRate {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 18.0, height / 18.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 9.00, y: 11.30 }),
                PathEl::LineTo(Point { x: 12.71, y: 14.00 }),
                PathEl::LineTo(Point { x: 11.29, y: 9.64 }),
                PathEl::LineTo(Point { x: 15.00, y: 7.00 }),
                PathEl::LineTo(Point { x: 10.45, y: 7.00 }),
                PathEl::LineTo(Point { x: 9.00, y: 2.50 }),
                PathEl::LineTo(Point { x: 7.55, y: 7.00 }),
                PathEl::LineTo(Point { x: 3.00, y: 7.00 }),
                PathEl::LineTo(Point { x: 6.71, y: 9.64 }),
                PathEl::LineTo(Point { x: 5.29, y: 14.00 }),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct Refresh {
    size: f64,
    color: Color,
}

impl Refresh {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for Refresh {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 35.30, y: 12.70 }),
                PathEl::CurveTo(
                    Point { x: 32.41, y: 9.80 },
                    Point { x: 28.42, y: 8.00 },
                    Point { x: 24.00, y: 8.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 15.16, y: 8.00 },
                    Point { x: 8.02, y: 15.16 },
                    Point { x: 8.02, y: 24.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 8.02, y: 32.84 },
                    Point { x: 15.16, y: 40.00 },
                    Point { x: 24.00, y: 40.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 31.45, y: 40.00 },
                    Point { x: 37.69, y: 34.90 },
                    Point { x: 39.46, y: 28.00 },
                ),
                PathEl::LineTo(Point { x: 35.30, y: 28.00 }),
                PathEl::CurveTo(
                    Point { x: 33.65, y: 32.66 },
                    Point { x: 29.23, y: 36.00 },
                    Point { x: 24.00, y: 36.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 17.37, y: 36.00 },
                    Point { x: 12.00, y: 30.63 },
                    Point { x: 12.00, y: 24.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 12.00, y: 17.37 },
                    Point { x: 17.37, y: 12.00 },
                    Point { x: 24.00, y: 12.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 27.31, y: 12.00 },
                    Point { x: 30.28, y: 13.38 },
                    Point { x: 32.45, y: 15.55 },
                ),
                PathEl::LineTo(Point { x: 26.00, y: 22.00 }),
                PathEl::LineTo(Point { x: 40.00, y: 22.00 }),
                PathEl::LineTo(Point { x: 40.00, y: 8.00 }),
                PathEl::LineTo(Point { x: 35.30, y: 12.70 }),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct DirectionsBoat {
    size: f64,
    color: Color,
}

impl DirectionsBoat {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for DirectionsBoat {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 40.00, y: 42.00 }),
                PathEl::CurveTo(
                    Point { x: 37.22, y: 42.00 },
                    Point { x: 34.44, y: 41.06 },
                    Point { x: 32.00, y: 39.35 },
                ),
                PathEl::CurveTo(
                    Point { x: 27.12, y: 42.77 },
                    Point { x: 20.88, y: 42.77 },
                    Point { x: 16.00, y: 39.35 },
                ),
                PathEl::CurveTo(
                    Point { x: 13.56, y: 41.06 },
                    Point { x: 10.78, y: 42.00 },
                    Point { x: 8.00, y: 42.00 },
                ),
                PathEl::LineTo(Point { x: 4.00, y: 42.00 }),
                PathEl::LineTo(Point { x: 4.00, y: 46.00 }),
                PathEl::LineTo(Point { x: 8.00, y: 46.00 }),
                PathEl::CurveTo(
                    Point { x: 10.75, y: 46.00 },
                    Point { x: 13.48, y: 45.31 },
                    Point { x: 16.00, y: 44.01 },
                ),
                PathEl::CurveTo(
                    Point { x: 21.04, y: 46.60 },
                    Point { x: 26.96, y: 46.60 },
                    Point { x: 32.00, y: 44.01 },
                ),
                PathEl::CurveTo(
                    Point { x: 34.52, y: 45.30 },
                    Point { x: 37.25, y: 46.00 },
                    Point { x: 40.00, y: 46.00 },
                ),
                PathEl::LineTo(Point { x: 44.00, y: 46.00 }),
                PathEl::LineTo(Point { x: 44.00, y: 42.00 }),
                PathEl::LineTo(Point { x: 40.00, y: 42.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 7.89, y: 38.00 }),
                PathEl::LineTo(Point { x: 8.00, y: 38.00 }),
                PathEl::CurveTo(
                    Point { x: 11.20, y: 38.00 },
                    Point { x: 14.05, y: 36.24 },
                    Point { x: 16.00, y: 34.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 17.95, y: 36.24 },
                    Point { x: 20.80, y: 38.00 },
                    Point { x: 24.00, y: 38.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 27.20, y: 38.00 },
                    Point { x: 30.05, y: 36.24 },
                    Point { x: 32.00, y: 34.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 33.96, y: 36.24 },
                    Point { x: 36.79, y: 38.00 },
                    Point { x: 40.00, y: 38.00 },
                ),
                PathEl::LineTo(Point { x: 40.11, y: 38.00 }),
                PathEl::LineTo(Point { x: 43.90, y: 24.63 }),
                PathEl::CurveTo(
                    Point { x: 44.07, y: 24.12 },
                    Point { x: 44.02, y: 23.56 },
                    Point { x: 43.78, y: 23.08 },
                ),
                PathEl::CurveTo(
                    Point { x: 43.53, y: 22.60 },
                    Point { x: 43.10, y: 22.24 },
                    Point { x: 42.58, y: 22.09 },
                ),
                PathEl::LineTo(Point { x: 40.00, y: 21.24 }),
                PathEl::LineTo(Point { x: 40.00, y: 12.00 }),
                PathEl::CurveTo(
                    Point { x: 40.00, y: 9.79 },
                    Point { x: 38.21, y: 8.00 },
                    Point { x: 36.00, y: 8.00 },
                ),
                PathEl::LineTo(Point { x: 30.00, y: 8.00 }),
                PathEl::LineTo(Point { x: 30.00, y: 2.00 }),
                PathEl::LineTo(Point { x: 18.00, y: 2.00 }),
                PathEl::LineTo(Point { x: 18.00, y: 8.00 }),
                PathEl::LineTo(Point { x: 12.00, y: 8.00 }),
                PathEl::CurveTo(
                    Point { x: 9.79, y: 8.00 },
                    Point { x: 8.00, y: 9.79 },
                    Point { x: 8.00, y: 12.00 },
                ),
                PathEl::LineTo(Point { x: 8.00, y: 21.24 }),
                PathEl::LineTo(Point { x: 5.43, y: 22.08 }),
                PathEl::CurveTo(
                    Point { x: 4.91, y: 22.24 },
                    Point { x: 4.48, y: 22.59 },
                    Point { x: 4.23, y: 23.07 },
                ),
                PathEl::CurveTo(
                    Point { x: 3.98, y: 23.55 },
                    Point { x: 3.94, y: 24.11 },
                    Point { x: 4.11, y: 24.62 },
                ),
                PathEl::LineTo(Point { x: 7.89, y: 38.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 12.00, y: 12.00 }),
                PathEl::LineTo(Point { x: 36.00, y: 12.00 }),
                PathEl::LineTo(Point { x: 36.00, y: 19.93 }),
                PathEl::LineTo(Point { x: 24.00, y: 16.00 }),
                PathEl::LineTo(Point { x: 12.00, y: 19.93 }),
                PathEl::LineTo(Point { x: 12.00, y: 12.00 }),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct DevicesOther {
    size: f64,
    color: Color,
}

impl DevicesOther {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for DevicesOther {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 6.00, y: 12.00 }),
                PathEl::LineTo(Point { x: 42.00, y: 12.00 }),
                PathEl::LineTo(Point { x: 42.00, y: 8.00 }),
                PathEl::LineTo(Point { x: 6.00, y: 8.00 }),
                PathEl::CurveTo(
                    Point { x: 3.80, y: 8.00 },
                    Point { x: 2.00, y: 9.80 },
                    Point { x: 2.00, y: 12.00 },
                ),
                PathEl::LineTo(Point { x: 2.00, y: 36.00 }),
                PathEl::CurveTo(
                    Point { x: 2.00, y: 38.20 },
                    Point { x: 3.80, y: 40.00 },
                    Point { x: 6.00, y: 40.00 },
                ),
                PathEl::LineTo(Point { x: 14.00, y: 40.00 }),
                PathEl::LineTo(Point { x: 14.00, y: 36.00 }),
                PathEl::LineTo(Point { x: 6.00, y: 36.00 }),
                PathEl::LineTo(Point { x: 6.00, y: 12.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 26.00, y: 24.00 }),
                PathEl::LineTo(Point { x: 18.00, y: 24.00 }),
                PathEl::LineTo(Point { x: 18.00, y: 27.56 }),
                PathEl::CurveTo(
                    Point { x: 16.78, y: 28.66 },
                    Point { x: 16.00, y: 30.23 },
                    Point { x: 16.00, y: 32.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 16.00, y: 33.77 },
                    Point { x: 16.78, y: 35.34 },
                    Point { x: 18.00, y: 36.44 },
                ),
                PathEl::LineTo(Point { x: 18.00, y: 40.00 }),
                PathEl::LineTo(Point { x: 26.00, y: 40.00 }),
                PathEl::LineTo(Point { x: 26.00, y: 36.44 }),
                PathEl::CurveTo(
                    Point { x: 27.22, y: 35.34 },
                    Point { x: 28.00, y: 33.77 },
                    Point { x: 28.00, y: 32.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 28.00, y: 30.23 },
                    Point { x: 27.22, y: 28.66 },
                    Point { x: 26.00, y: 27.56 },
                ),
                PathEl::LineTo(Point { x: 26.00, y: 24.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 22.00, y: 35.00 }),
                PathEl::CurveTo(
                    Point { x: 20.34, y: 35.00 },
                    Point { x: 19.00, y: 33.66 },
                    Point { x: 19.00, y: 32.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 19.00, y: 30.34 },
                    Point { x: 20.34, y: 29.00 },
                    Point { x: 22.00, y: 29.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 23.66, y: 29.00 },
                    Point { x: 25.00, y: 30.34 },
                    Point { x: 25.00, y: 32.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 25.00, y: 33.66 },
                    Point { x: 23.66, y: 35.00 },
                    Point { x: 22.00, y: 35.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 44.00, y: 16.00 }),
                PathEl::LineTo(Point { x: 32.00, y: 16.00 }),
                PathEl::CurveTo(
                    Point { x: 31.00, y: 16.00 },
                    Point { x: 30.00, y: 17.00 },
                    Point { x: 30.00, y: 18.00 },
                ),
                PathEl::LineTo(Point { x: 30.00, y: 38.00 }),
                PathEl::CurveTo(
                    Point { x: 30.00, y: 39.00 },
                    Point { x: 31.00, y: 40.00 },
                    Point { x: 32.00, y: 40.00 },
                ),
                PathEl::LineTo(Point { x: 44.00, y: 40.00 }),
                PathEl::CurveTo(
                    Point { x: 45.00, y: 40.00 },
                    Point { x: 46.00, y: 39.00 },
                    Point { x: 46.00, y: 38.00 },
                ),
                PathEl::LineTo(Point { x: 46.00, y: 18.00 }),
                PathEl::CurveTo(
                    Point { x: 46.00, y: 17.00 },
                    Point { x: 45.00, y: 16.00 },
                    Point { x: 44.00, y: 16.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 42.00, y: 36.00 }),
                PathEl::LineTo(Point { x: 34.00, y: 36.00 }),
                PathEl::LineTo(Point { x: 34.00, y: 20.00 }),
                PathEl::LineTo(Point { x: 42.00, y: 20.00 }),
                PathEl::LineTo(Point { x: 42.00, y: 36.00 }),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct SignalWifiOff {
    size: f64,
    color: Color,
}

impl SignalWifiOff {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for SignalWifiOff {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 47.28, y: 14.00 }),
                PathEl::CurveTo(
                    Point { x: 46.38, y: 13.32 },
                    Point { x: 37.43, y: 6.00 },
                    Point { x: 24.00, y: 6.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 20.99, y: 6.00 },
                    Point { x: 18.22, y: 6.38 },
                    Point { x: 15.70, y: 6.96 },
                ),
                PathEl::LineTo(Point { x: 36.36, y: 27.60 }),
                PathEl::LineTo(Point { x: 47.28, y: 14.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 6.55, y: 2.89 }),
                PathEl::LineTo(Point { x: 4.00, y: 5.44 }),
                PathEl::LineTo(Point { x: 8.11, y: 9.55 }),
                PathEl::CurveTo(
                    Point { x: 3.83, y: 11.52 },
                    Point { x: 1.19, y: 13.65 },
                    Point { x: 0.72, y: 14.01 },
                ),
                PathEl::LineTo(Point { x: 23.98, y: 42.99 }),
                PathEl::LineTo(Point { x: 24.00, y: 43.00 }),
                PathEl::LineTo(Point { x: 24.02, y: 42.98 }),
                PathEl::LineTo(Point { x: 31.82, y: 33.26 }),
                PathEl::LineTo(Point { x: 38.45, y: 39.89 }),
                PathEl::LineTo(Point { x: 41.00, y: 37.34 }),
                PathEl::LineTo(Point { x: 6.55, y: 2.89 }),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct Queue {
    size: f64,
    color: Color,
}

impl Queue {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for Queue {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 8.00, y: 12.00 }),
                PathEl::LineTo(Point { x: 4.00, y: 12.00 }),
                PathEl::LineTo(Point { x: 4.00, y: 40.00 }),
                PathEl::CurveTo(
                    Point { x: 4.00, y: 42.21 },
                    Point { x: 5.79, y: 44.00 },
                    Point { x: 8.00, y: 44.00 },
                ),
                PathEl::LineTo(Point { x: 36.00, y: 44.00 }),
                PathEl::LineTo(Point { x: 36.00, y: 40.00 }),
                PathEl::LineTo(Point { x: 8.00, y: 40.00 }),
                PathEl::LineTo(Point { x: 8.00, y: 12.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 40.00, y: 4.00 }),
                PathEl::LineTo(Point { x: 16.00, y: 4.00 }),
                PathEl::CurveTo(
                    Point { x: 13.79, y: 4.00 },
                    Point { x: 12.00, y: 5.79 },
                    Point { x: 12.00, y: 8.00 },
                ),
                PathEl::LineTo(Point { x: 12.00, y: 32.00 }),
                PathEl::CurveTo(
                    Point { x: 12.00, y: 34.21 },
                    Point { x: 13.79, y: 36.00 },
                    Point { x: 16.00, y: 36.00 },
                ),
                PathEl::LineTo(Point { x: 40.00, y: 36.00 }),
                PathEl::CurveTo(
                    Point { x: 42.21, y: 36.00 },
                    Point { x: 44.00, y: 34.21 },
                    Point { x: 44.00, y: 32.00 },
                ),
                PathEl::LineTo(Point { x: 44.00, y: 8.00 }),
                PathEl::CurveTo(
                    Point { x: 44.00, y: 5.79 },
                    Point { x: 42.21, y: 4.00 },
                    Point { x: 40.00, y: 4.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 38.00, y: 22.00 }),
                PathEl::LineTo(Point { x: 30.00, y: 22.00 }),
                PathEl::LineTo(Point { x: 30.00, y: 30.00 }),
                PathEl::LineTo(Point { x: 26.00, y: 30.00 }),
                PathEl::LineTo(Point { x: 26.00, y: 22.00 }),
                PathEl::LineTo(Point { x: 18.00, y: 22.00 }),
                PathEl::LineTo(Point { x: 18.00, y: 18.00 }),
                PathEl::LineTo(Point { x: 26.00, y: 18.00 }),
                PathEl::LineTo(Point { x: 26.00, y: 10.00 }),
                PathEl::LineTo(Point { x: 30.00, y: 10.00 }),
                PathEl::LineTo(Point { x: 30.00, y: 18.00 }),
                PathEl::LineTo(Point { x: 38.00, y: 18.00 }),
                PathEl::LineTo(Point { x: 38.00, y: 22.00 }),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct MailOutline {
    size: f64,
    color: Color,
}

impl MailOutline {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for MailOutline {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 40.00, y: 8.00 }),
                PathEl::LineTo(Point { x: 8.00, y: 8.00 }),
                PathEl::CurveTo(
                    Point { x: 5.79, y: 8.00 },
                    Point { x: 4.02, y: 9.79 },
                    Point { x: 4.02, y: 12.00 },
                ),
                PathEl::LineTo(Point { x: 4.00, y: 36.00 }),
                PathEl::CurveTo(
                    Point { x: 4.00, y: 38.21 },
                    Point { x: 5.79, y: 40.00 },
                    Point { x: 8.00, y: 40.00 },
                ),
                PathEl::LineTo(Point { x: 40.00, y: 40.00 }),
                PathEl::CurveTo(
                    Point { x: 42.21, y: 40.00 },
                    Point { x: 44.00, y: 38.21 },
                    Point { x: 44.00, y: 36.00 },
                ),
                PathEl::LineTo(Point { x: 44.00, y: 12.00 }),
                PathEl::CurveTo(
                    Point { x: 44.00, y: 9.79 },
                    Point { x: 42.21, y: 8.00 },
                    Point { x: 40.00, y: 8.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 40.00, y: 36.00 }),
                PathEl::LineTo(Point { x: 8.00, y: 36.00 }),
                PathEl::LineTo(Point { x: 8.00, y: 16.00 }),
                PathEl::LineTo(Point { x: 24.00, y: 26.00 }),
                PathEl::LineTo(Point { x: 40.00, y: 16.00 }),
                PathEl::LineTo(Point { x: 40.00, y: 36.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 24.00, y: 22.00 }),
                PathEl::LineTo(Point { x: 8.00, y: 12.00 }),
                PathEl::LineTo(Point { x: 40.00, y: 12.00 }),
                PathEl::LineTo(Point { x: 24.00, y: 22.00 }),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct VerticalAlignCenter {
    size: f64,
    color: Color,
}

impl VerticalAlignCenter {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for VerticalAlignCenter {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 16.00, y: 38.00 }),
                PathEl::LineTo(Point { x: 22.00, y: 38.00 }),
                PathEl::LineTo(Point { x: 22.00, y: 46.00 }),
                PathEl::LineTo(Point { x: 26.00, y: 46.00 }),
                PathEl::LineTo(Point { x: 26.00, y: 38.00 }),
                PathEl::LineTo(Point { x: 32.00, y: 38.00 }),
                PathEl::LineTo(Point { x: 24.00, y: 30.00 }),
                PathEl::LineTo(Point { x: 16.00, y: 38.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 32.00, y: 10.00 }),
                PathEl::LineTo(Point { x: 26.00, y: 10.00 }),
                PathEl::LineTo(Point { x: 26.00, y: 2.00 }),
                PathEl::LineTo(Point { x: 22.00, y: 2.00 }),
                PathEl::LineTo(Point { x: 22.00, y: 10.00 }),
                PathEl::LineTo(Point { x: 16.00, y: 10.00 }),
                PathEl::LineTo(Point { x: 24.00, y: 18.00 }),
                PathEl::LineTo(Point { x: 32.00, y: 10.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 8.00, y: 22.00 }),
                PathEl::LineTo(Point { x: 8.00, y: 26.00 }),
                PathEl::LineTo(Point { x: 40.00, y: 26.00 }),
                PathEl::LineTo(Point { x: 40.00, y: 22.00 }),
                PathEl::LineTo(Point { x: 8.00, y: 22.00 }),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct Lens {
    size: f64,
    color: Color,
}

impl Lens {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for Lens {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 24.00, y: 4.00 }),
                PathEl::CurveTo(
                    Point { x: 12.95, y: 4.00 },
                    Point { x: 4.00, y: 12.95 },
                    Point { x: 4.00, y: 24.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 4.00, y: 35.05 },
                    Point { x: 12.95, y: 44.00 },
                    Point { x: 24.00, y: 44.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 35.05, y: 44.00 },
                    Point { x: 44.00, y: 35.05 },
                    Point { x: 44.00, y: 24.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 44.00, y: 12.95 },
                    Point { x: 35.05, y: 4.00 },
                    Point { x: 24.00, y: 4.00 },
                ),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct LaptopChromebook {
    size: f64,
    color: Color,
}

impl LaptopChromebook {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for LaptopChromebook {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 44.00, y: 36.00 }),
                PathEl::LineTo(Point { x: 44.00, y: 6.00 }),
                PathEl::LineTo(Point { x: 4.00, y: 6.00 }),
                PathEl::LineTo(Point { x: 4.00, y: 36.00 }),
                PathEl::LineTo(Point { x: 0.00, y: 36.00 }),
                PathEl::LineTo(Point { x: 0.00, y: 40.00 }),
                PathEl::LineTo(Point { x: 48.00, y: 40.00 }),
                PathEl::LineTo(Point { x: 48.00, y: 36.00 }),
                PathEl::LineTo(Point { x: 44.00, y: 36.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 28.00, y: 36.00 }),
                PathEl::LineTo(Point { x: 20.00, y: 36.00 }),
                PathEl::LineTo(Point { x: 20.00, y: 34.00 }),
                PathEl::LineTo(Point { x: 28.00, y: 34.00 }),
                PathEl::LineTo(Point { x: 28.00, y: 36.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 40.00, y: 30.00 }),
                PathEl::LineTo(Point { x: 8.00, y: 30.00 }),
                PathEl::LineTo(Point { x: 8.00, y: 10.00 }),
                PathEl::LineTo(Point { x: 40.00, y: 10.00 }),
                PathEl::LineTo(Point { x: 40.00, y: 30.00 }),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct ArrowDownward {
    size: f64,
    color: Color,
}

impl ArrowDownward {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for ArrowDownward {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 40.00, y: 24.00 }),
                PathEl::LineTo(Point { x: 37.18, y: 21.18 }),
                PathEl::LineTo(Point { x: 26.00, y: 32.34 }),
                PathEl::LineTo(Point { x: 26.00, y: 8.00 }),
                PathEl::LineTo(Point { x: 22.00, y: 8.00 }),
                PathEl::LineTo(Point { x: 22.00, y: 32.34 }),
                PathEl::LineTo(Point { x: 10.84, y: 21.16 }),
                PathEl::LineTo(Point { x: 8.00, y: 24.00 }),
                PathEl::LineTo(Point { x: 24.00, y: 40.00 }),
                PathEl::LineTo(Point { x: 40.00, y: 24.00 }),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct SdStorage {
    size: f64,
    color: Color,
}

impl SdStorage {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for SdStorage {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 36.00, y: 4.00 }),
                PathEl::LineTo(Point { x: 20.00, y: 4.00 }),
                PathEl::LineTo(Point { x: 8.04, y: 16.00 }),
                PathEl::LineTo(Point { x: 8.00, y: 40.00 }),
                PathEl::CurveTo(
                    Point { x: 8.00, y: 42.20 },
                    Point { x: 9.80, y: 44.00 },
                    Point { x: 12.00, y: 44.00 },
                ),
                PathEl::LineTo(Point { x: 36.00, y: 44.00 }),
                PathEl::CurveTo(
                    Point { x: 38.20, y: 44.00 },
                    Point { x: 40.00, y: 42.20 },
                    Point { x: 40.00, y: 40.00 },
                ),
                PathEl::LineTo(Point { x: 40.00, y: 8.00 }),
                PathEl::CurveTo(
                    Point { x: 40.00, y: 5.80 },
                    Point { x: 38.20, y: 4.00 },
                    Point { x: 36.00, y: 4.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 24.00, y: 16.00 }),
                PathEl::LineTo(Point { x: 20.00, y: 16.00 }),
                PathEl::LineTo(Point { x: 20.00, y: 8.00 }),
                PathEl::LineTo(Point { x: 24.00, y: 8.00 }),
                PathEl::LineTo(Point { x: 24.00, y: 16.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 30.00, y: 16.00 }),
                PathEl::LineTo(Point { x: 26.00, y: 16.00 }),
                PathEl::LineTo(Point { x: 26.00, y: 8.00 }),
                PathEl::LineTo(Point { x: 30.00, y: 8.00 }),
                PathEl::LineTo(Point { x: 30.00, y: 16.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 36.00, y: 16.00 }),
                PathEl::LineTo(Point { x: 32.00, y: 16.00 }),
                PathEl::LineTo(Point { x: 32.00, y: 8.00 }),
                PathEl::LineTo(Point { x: 36.00, y: 8.00 }),
                PathEl::LineTo(Point { x: 36.00, y: 16.00 }),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct Flight {
    size: f64,
    color: Color,
}

impl Flight {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for Flight {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(&[PathEl::MoveTo(Point { x: 20.36, y: 18.00 })][..], &brush);
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 42.00, y: 32.00 }),
                PathEl::LineTo(Point { x: 42.00, y: 28.00 }),
                PathEl::LineTo(Point { x: 26.00, y: 18.00 }),
                PathEl::LineTo(Point { x: 26.00, y: 7.00 }),
                PathEl::CurveTo(
                    Point { x: 26.00, y: 5.34 },
                    Point { x: 24.66, y: 4.00 },
                    Point { x: 23.00, y: 4.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 21.34, y: 4.00 },
                    Point { x: 20.00, y: 5.34 },
                    Point { x: 20.00, y: 7.00 },
                ),
                PathEl::LineTo(Point { x: 20.00, y: 18.00 }),
                PathEl::LineTo(Point { x: 4.00, y: 28.00 }),
                PathEl::LineTo(Point { x: 4.00, y: 32.00 }),
                PathEl::LineTo(Point { x: 20.00, y: 27.00 }),
                PathEl::LineTo(Point { x: 20.00, y: 38.00 }),
                PathEl::LineTo(Point { x: 16.00, y: 41.00 }),
                PathEl::LineTo(Point { x: 16.00, y: 44.00 }),
                PathEl::LineTo(Point { x: 23.00, y: 42.00 }),
                PathEl::LineTo(Point { x: 30.00, y: 44.00 }),
                PathEl::LineTo(Point { x: 30.00, y: 41.00 }),
                PathEl::LineTo(Point { x: 26.00, y: 38.00 }),
                PathEl::LineTo(Point { x: 26.00, y: 27.00 }),
                PathEl::LineTo(Point { x: 42.00, y: 32.00 }),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct CheckBox {
    size: f64,
    color: Color,
}

impl CheckBox {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for CheckBox {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 38.00, y: 6.00 }),
                PathEl::LineTo(Point { x: 10.00, y: 6.00 }),
                PathEl::CurveTo(
                    Point { x: 7.79, y: 6.00 },
                    Point { x: 6.00, y: 7.79 },
                    Point { x: 6.00, y: 10.00 },
                ),
                PathEl::LineTo(Point { x: 6.00, y: 38.00 }),
                PathEl::CurveTo(
                    Point { x: 6.00, y: 40.21 },
                    Point { x: 7.79, y: 42.00 },
                    Point { x: 10.00, y: 42.00 },
                ),
                PathEl::LineTo(Point { x: 38.00, y: 42.00 }),
                PathEl::CurveTo(
                    Point { x: 40.21, y: 42.00 },
                    Point { x: 42.00, y: 40.21 },
                    Point { x: 42.00, y: 38.00 },
                ),
                PathEl::LineTo(Point { x: 42.00, y: 10.00 }),
                PathEl::CurveTo(
                    Point { x: 42.00, y: 7.79 },
                    Point { x: 40.21, y: 6.00 },
                    Point { x: 38.00, y: 6.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 20.00, y: 34.00 }),
                PathEl::LineTo(Point { x: 10.00, y: 24.00 }),
                PathEl::LineTo(Point { x: 12.83, y: 21.17 }),
                PathEl::LineTo(Point { x: 20.00, y: 28.34 }),
                PathEl::LineTo(Point { x: 35.17, y: 13.17 }),
                PathEl::LineTo(Point { x: 38.00, y: 16.00 }),
                PathEl::LineTo(Point { x: 20.00, y: 34.00 }),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct WbAuto {
    size: f64,
    color: Color,
}

impl WbAuto {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for WbAuto {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 13.70, y: 25.30 }),
                PathEl::LineTo(Point { x: 18.30, y: 25.30 }),
                PathEl::LineTo(Point { x: 16.00, y: 18.00 }),
                PathEl::LineTo(Point { x: 13.70, y: 25.30 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 44.00, y: 14.00 }),
                PathEl::LineTo(Point { x: 41.59, y: 26.58 }),
                PathEl::LineTo(Point { x: 38.60, y: 14.00 }),
                PathEl::LineTo(Point { x: 35.40, y: 14.00 }),
                PathEl::LineTo(Point { x: 32.42, y: 26.58 }),
                PathEl::LineTo(Point { x: 30.00, y: 14.00 }),
                PathEl::LineTo(Point { x: 28.48, y: 14.00 }),
                PathEl::CurveTo(
                    Point { x: 25.55, y: 10.35 },
                    Point { x: 21.05, y: 8.00 },
                    Point { x: 16.00, y: 8.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 7.16, y: 8.00 },
                    Point { x: 0.00, y: 15.16 },
                    Point { x: 0.00, y: 24.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 0.00, y: 32.84 },
                    Point { x: 7.16, y: 40.00 },
                    Point { x: 16.00, y: 40.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 22.27, y: 40.00 },
                    Point { x: 27.68, y: 36.39 },
                    Point { x: 30.31, y: 31.14 },
                ),
                PathEl::LineTo(Point { x: 30.50, y: 32.00 }),
                PathEl::LineTo(Point { x: 34.00, y: 32.00 }),
                PathEl::LineTo(Point { x: 37.00, y: 19.80 }),
                PathEl::LineTo(Point { x: 40.00, y: 32.00 }),
                PathEl::LineTo(Point { x: 43.50, y: 32.00 }),
                PathEl::LineTo(Point { x: 47.60, y: 14.00 }),
                PathEl::LineTo(Point { x: 44.00, y: 14.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 20.60, y: 32.00 }),
                PathEl::LineTo(Point { x: 19.20, y: 28.00 }),
                PathEl::LineTo(Point { x: 12.80, y: 28.00 }),
                PathEl::LineTo(Point { x: 11.40, y: 32.00 }),
                PathEl::LineTo(Point { x: 7.60, y: 32.00 }),
                PathEl::LineTo(Point { x: 14.00, y: 14.00 }),
                PathEl::LineTo(Point { x: 18.00, y: 14.00 }),
                PathEl::LineTo(Point { x: 24.40, y: 32.00 }),
                PathEl::LineTo(Point { x: 20.60, y: 32.00 }),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct SettingsBluetooth {
    size: f64,
    color: Color,
}

impl SettingsBluetooth {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for SettingsBluetooth {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 22.00, y: 48.00 }),
                PathEl::LineTo(Point { x: 26.00, y: 48.00 }),
                PathEl::LineTo(Point { x: 26.00, y: 44.00 }),
                PathEl::LineTo(Point { x: 22.00, y: 44.00 }),
                PathEl::LineTo(Point { x: 22.00, y: 48.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 14.00, y: 48.00 }),
                PathEl::LineTo(Point { x: 18.00, y: 48.00 }),
                PathEl::LineTo(Point { x: 18.00, y: 44.00 }),
                PathEl::LineTo(Point { x: 14.00, y: 44.00 }),
                PathEl::LineTo(Point { x: 14.00, y: 48.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 30.00, y: 48.00 }),
                PathEl::LineTo(Point { x: 34.00, y: 48.00 }),
                PathEl::LineTo(Point { x: 34.00, y: 44.00 }),
                PathEl::LineTo(Point { x: 30.00, y: 44.00 }),
                PathEl::LineTo(Point { x: 30.00, y: 48.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 35.41, y: 11.41 }),
                PathEl::LineTo(Point { x: 24.00, y: 0.00 }),
                PathEl::LineTo(Point { x: 22.00, y: 0.00 }),
                PathEl::LineTo(Point { x: 22.00, y: 15.17 }),
                PathEl::LineTo(Point { x: 12.83, y: 6.00 }),
                PathEl::LineTo(Point { x: 10.00, y: 8.83 }),
                PathEl::LineTo(Point { x: 21.17, y: 20.00 }),
                PathEl::LineTo(Point { x: 10.00, y: 31.17 }),
                PathEl::LineTo(Point { x: 12.83, y: 34.00 }),
                PathEl::LineTo(Point { x: 22.00, y: 24.83 }),
                PathEl::LineTo(Point { x: 22.00, y: 40.00 }),
                PathEl::LineTo(Point { x: 24.00, y: 40.00 }),
                PathEl::LineTo(Point { x: 35.41, y: 28.59 }),
                PathEl::LineTo(Point { x: 26.83, y: 20.00 }),
                PathEl::LineTo(Point { x: 35.41, y: 11.41 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 26.00, y: 7.66 }),
                PathEl::LineTo(Point { x: 29.76, y: 11.42 }),
                PathEl::LineTo(Point { x: 26.00, y: 15.17 }),
                PathEl::LineTo(Point { x: 26.00, y: 7.66 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 29.76, y: 28.59 }),
                PathEl::LineTo(Point { x: 26.00, y: 32.34 }),
                PathEl::LineTo(Point { x: 26.00, y: 24.83 }),
                PathEl::LineTo(Point { x: 29.76, y: 28.59 }),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct ArrowDropDown {
    size: f64,
    color: Color,
}

impl ArrowDropDown {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for ArrowDropDown {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 14.00, y: 20.00 }),
                PathEl::LineTo(Point { x: 24.00, y: 30.00 }),
                PathEl::LineTo(Point { x: 34.00, y: 20.00 }),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct SpeakerNotesOff {
    size: f64,
    color: Color,
}

impl SpeakerNotesOff {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for SpeakerNotesOff {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 21.08, y: 22.00 }),
                PathEl::LineTo(Point { x: 20.00, y: 20.92 }),
                PathEl::LineTo(Point { x: 15.08, y: 16.00 }),
                PathEl::LineTo(Point { x: 12.00, y: 12.92 }),
                PathEl::LineTo(Point { x: 4.77, y: 5.69 }),
                PathEl::LineTo(Point { x: 2.54, y: 3.46 }),
                PathEl::LineTo(Point { x: 0.00, y: 6.00 }),
                PathEl::LineTo(Point { x: 4.02, y: 10.02 }),
                PathEl::LineTo(Point { x: 4.00, y: 44.00 }),
                PathEl::LineTo(Point { x: 12.00, y: 36.00 }),
                PathEl::LineTo(Point { x: 30.00, y: 36.00 }),
                PathEl::LineTo(Point { x: 41.46, y: 47.46 }),
                PathEl::LineTo(Point { x: 44.00, y: 44.92 }),
                PathEl::LineTo(Point { x: 35.08, y: 36.00 }),
                PathEl::LineTo(Point { x: 21.08, y: 22.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 16.00, y: 28.00 }),
                PathEl::LineTo(Point { x: 12.00, y: 28.00 }),
                PathEl::LineTo(Point { x: 12.00, y: 24.00 }),
                PathEl::LineTo(Point { x: 16.00, y: 24.00 }),
                PathEl::LineTo(Point { x: 16.00, y: 28.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 12.00, y: 22.00 }),
                PathEl::LineTo(Point { x: 12.00, y: 18.00 }),
                PathEl::LineTo(Point { x: 16.00, y: 22.00 }),
                PathEl::LineTo(Point { x: 12.00, y: 22.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 40.00, y: 4.00 }),
                PathEl::LineTo(Point { x: 8.16, y: 4.00 }),
                PathEl::LineTo(Point { x: 20.00, y: 15.84 }),
                PathEl::LineTo(Point { x: 20.00, y: 12.00 }),
                PathEl::LineTo(Point { x: 36.00, y: 12.00 }),
                PathEl::LineTo(Point { x: 36.00, y: 16.00 }),
                PathEl::LineTo(Point { x: 20.16, y: 16.00 }),
                PathEl::LineTo(Point { x: 22.16, y: 18.00 }),
                PathEl::LineTo(Point { x: 36.00, y: 18.00 }),
                PathEl::LineTo(Point { x: 36.00, y: 22.00 }),
                PathEl::LineTo(Point { x: 26.16, y: 22.00 }),
                PathEl::LineTo(Point { x: 40.15, y: 35.99 }),
                PathEl::CurveTo(
                    Point { x: 42.28, y: 35.91 },
                    Point { x: 44.00, y: 34.15 },
                    Point { x: 44.00, y: 32.00 },
                ),
                PathEl::LineTo(Point { x: 44.00, y: 8.00 }),
                PathEl::CurveTo(
                    Point { x: 44.00, y: 5.80 },
                    Point { x: 42.20, y: 4.00 },
                    Point { x: 40.00, y: 4.00 },
                ),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct SignalCellular3Bar {
    size: f64,
    color: Color,
}

impl SignalCellular3Bar {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for SignalCellular3Bar {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 4.00, y: 44.00 }),
                PathEl::LineTo(Point { x: 44.00, y: 44.00 }),
                PathEl::LineTo(Point { x: 44.00, y: 4.00 }),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 34.00, y: 14.00 }),
                PathEl::LineTo(Point { x: 4.00, y: 44.00 }),
                PathEl::LineTo(Point { x: 34.00, y: 44.00 }),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct Filter3 {
    size: f64,
    color: Color,
}

impl Filter3 {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for Filter3 {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 42.00, y: 2.00 }),
                PathEl::LineTo(Point { x: 14.00, y: 2.00 }),
                PathEl::CurveTo(
                    Point { x: 11.79, y: 2.00 },
                    Point { x: 10.00, y: 3.79 },
                    Point { x: 10.00, y: 6.00 },
                ),
                PathEl::LineTo(Point { x: 10.00, y: 34.00 }),
                PathEl::CurveTo(
                    Point { x: 10.00, y: 36.21 },
                    Point { x: 11.79, y: 38.00 },
                    Point { x: 14.00, y: 38.00 },
                ),
                PathEl::LineTo(Point { x: 42.00, y: 38.00 }),
                PathEl::CurveTo(
                    Point { x: 44.21, y: 38.00 },
                    Point { x: 46.00, y: 36.21 },
                    Point { x: 46.00, y: 34.00 },
                ),
                PathEl::LineTo(Point { x: 46.00, y: 6.00 }),
                PathEl::CurveTo(
                    Point { x: 46.00, y: 3.79 },
                    Point { x: 44.21, y: 2.00 },
                    Point { x: 42.00, y: 2.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 42.00, y: 34.00 }),
                PathEl::LineTo(Point { x: 14.00, y: 34.00 }),
                PathEl::LineTo(Point { x: 14.00, y: 6.00 }),
                PathEl::LineTo(Point { x: 42.00, y: 6.00 }),
                PathEl::LineTo(Point { x: 42.00, y: 34.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 6.00, y: 10.00 }),
                PathEl::LineTo(Point { x: 2.00, y: 10.00 }),
                PathEl::LineTo(Point { x: 2.00, y: 42.00 }),
                PathEl::CurveTo(
                    Point { x: 2.00, y: 44.21 },
                    Point { x: 3.79, y: 46.00 },
                    Point { x: 6.00, y: 46.00 },
                ),
                PathEl::LineTo(Point { x: 38.00, y: 46.00 }),
                PathEl::LineTo(Point { x: 38.00, y: 42.00 }),
                PathEl::LineTo(Point { x: 6.00, y: 42.00 }),
                PathEl::LineTo(Point { x: 6.00, y: 10.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 34.00, y: 26.00 }),
                PathEl::LineTo(Point { x: 34.00, y: 23.00 }),
                PathEl::CurveTo(
                    Point { x: 34.00, y: 21.34 },
                    Point { x: 32.66, y: 20.00 },
                    Point { x: 31.00, y: 20.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 32.66, y: 20.00 },
                    Point { x: 34.00, y: 18.66 },
                    Point { x: 34.00, y: 17.00 },
                ),
                PathEl::LineTo(Point { x: 34.00, y: 14.00 }),
                PathEl::CurveTo(
                    Point { x: 34.00, y: 11.79 },
                    Point { x: 32.21, y: 10.00 },
                    Point { x: 30.00, y: 10.00 },
                ),
                PathEl::LineTo(Point { x: 22.00, y: 10.00 }),
                PathEl::LineTo(Point { x: 22.00, y: 14.00 }),
                PathEl::LineTo(Point { x: 30.00, y: 14.00 }),
                PathEl::LineTo(Point { x: 30.00, y: 18.00 }),
                PathEl::LineTo(Point { x: 26.00, y: 18.00 }),
                PathEl::LineTo(Point { x: 26.00, y: 22.00 }),
                PathEl::LineTo(Point { x: 30.00, y: 22.00 }),
                PathEl::LineTo(Point { x: 30.00, y: 26.00 }),
                PathEl::LineTo(Point { x: 22.00, y: 26.00 }),
                PathEl::LineTo(Point { x: 22.00, y: 30.00 }),
                PathEl::LineTo(Point { x: 30.00, y: 30.00 }),
                PathEl::CurveTo(
                    Point { x: 32.21, y: 30.00 },
                    Point { x: 34.00, y: 28.21 },
                    Point { x: 34.00, y: 26.00 },
                ),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct YoutubeSearchedFor {
    size: f64,
    color: Color,
}

impl YoutubeSearchedFor {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for YoutubeSearchedFor {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 34.02, y: 28.00 }),
                PathEl::LineTo(Point { x: 32.43, y: 28.00 }),
                PathEl::LineTo(Point { x: 31.88, y: 27.45 }),
                PathEl::CurveTo(
                    Point { x: 33.84, y: 25.18 },
                    Point { x: 35.02, y: 22.23 },
                    Point { x: 35.02, y: 19.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 35.02, y: 11.82 },
                    Point { x: 29.20, y: 6.01 },
                    Point { x: 22.02, y: 6.01 },
                ),
                PathEl::CurveTo(
                    Point { x: 14.84, y: 6.01 },
                    Point { x: 9.03, y: 12.00 },
                    Point { x: 9.02, y: 19.00 },
                ),
                PathEl::LineTo(Point { x: 4.00, y: 19.00 }),
                PathEl::LineTo(Point { x: 11.68, y: 27.00 }),
                PathEl::LineTo(Point { x: 20.00, y: 19.00 }),
                PathEl::LineTo(Point { x: 13.02, y: 19.00 }),
                PathEl::CurveTo(
                    Point { x: 13.03, y: 14.00 },
                    Point { x: 17.05, y: 10.01 },
                    Point { x: 22.02, y: 10.01 },
                ),
                PathEl::CurveTo(
                    Point { x: 26.99, y: 10.01 },
                    Point { x: 31.02, y: 14.04 },
                    Point { x: 31.02, y: 19.01 },
                ),
                PathEl::CurveTo(
                    Point { x: 31.02, y: 23.98 },
                    Point { x: 26.99, y: 28.01 },
                    Point { x: 22.02, y: 28.01 },
                ),
                PathEl::CurveTo(
                    Point { x: 20.73, y: 28.01 },
                    Point { x: 19.50, y: 27.73 },
                    Point { x: 18.39, y: 27.24 },
                ),
                PathEl::LineTo(Point { x: 15.43, y: 30.20 }),
                PathEl::CurveTo(
                    Point { x: 17.36, y: 31.34 },
                    Point { x: 19.61, y: 32.01 },
                    Point { x: 22.02, y: 32.01 },
                ),
                PathEl::CurveTo(
                    Point { x: 25.25, y: 32.01 },
                    Point { x: 28.19, y: 30.83 },
                    Point { x: 30.46, y: 28.88 },
                ),
                PathEl::LineTo(Point { x: 31.00, y: 29.42 }),
                PathEl::LineTo(Point { x: 31.00, y: 31.00 }),
                PathEl::LineTo(Point { x: 41.01, y: 40.98 }),
                PathEl::LineTo(Point { x: 43.99, y: 38.00 }),
                PathEl::LineTo(Point { x: 34.02, y: 28.00 }),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct CameraAlt {
    size: f64,
    color: Color,
}

impl CameraAlt {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for CameraAlt {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            Circle {
                center: Point { x: 24.00, y: 24.00 },
                radius: 6.40,
            },
            &brush,
        );
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 18.00, y: 4.00 }),
                PathEl::LineTo(Point { x: 14.34, y: 8.00 }),
                PathEl::LineTo(Point { x: 8.00, y: 8.00 }),
                PathEl::CurveTo(
                    Point { x: 5.79, y: 8.00 },
                    Point { x: 4.00, y: 9.79 },
                    Point { x: 4.00, y: 12.00 },
                ),
                PathEl::LineTo(Point { x: 4.00, y: 36.00 }),
                PathEl::CurveTo(
                    Point { x: 4.00, y: 38.21 },
                    Point { x: 5.79, y: 40.00 },
                    Point { x: 8.00, y: 40.00 },
                ),
                PathEl::LineTo(Point { x: 40.00, y: 40.00 }),
                PathEl::CurveTo(
                    Point { x: 42.21, y: 40.00 },
                    Point { x: 44.00, y: 38.21 },
                    Point { x: 44.00, y: 36.00 },
                ),
                PathEl::LineTo(Point { x: 44.00, y: 12.00 }),
                PathEl::CurveTo(
                    Point { x: 44.00, y: 9.79 },
                    Point { x: 42.21, y: 8.00 },
                    Point { x: 40.00, y: 8.00 },
                ),
                PathEl::LineTo(Point { x: 33.66, y: 8.00 }),
                PathEl::LineTo(Point { x: 30.00, y: 4.00 }),
                PathEl::LineTo(Point { x: 18.00, y: 4.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 24.00, y: 34.00 }),
                PathEl::CurveTo(
                    Point { x: 18.48, y: 34.00 },
                    Point { x: 14.00, y: 29.52 },
                    Point { x: 14.00, y: 24.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 14.00, y: 18.48 },
                    Point { x: 18.48, y: 14.00 },
                    Point { x: 24.00, y: 14.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 29.52, y: 14.00 },
                    Point { x: 34.00, y: 18.48 },
                    Point { x: 34.00, y: 24.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 34.00, y: 29.52 },
                    Point { x: 29.52, y: 34.00 },
                    Point { x: 24.00, y: 34.00 },
                ),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct SimCard {
    size: f64,
    color: Color,
}

impl SimCard {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for SimCard {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 39.98, y: 8.00 }),
                PathEl::CurveTo(
                    Point { x: 39.98, y: 5.79 },
                    Point { x: 38.21, y: 4.00 },
                    Point { x: 36.00, y: 4.00 },
                ),
                PathEl::LineTo(Point { x: 20.00, y: 4.00 }),
                PathEl::LineTo(Point { x: 8.00, y: 16.00 }),
                PathEl::LineTo(Point { x: 8.00, y: 40.00 }),
                PathEl::CurveTo(
                    Point { x: 8.00, y: 42.21 },
                    Point { x: 9.79, y: 44.00 },
                    Point { x: 12.00, y: 44.00 },
                ),
                PathEl::LineTo(Point { x: 36.02, y: 44.00 }),
                PathEl::CurveTo(
                    Point { x: 38.23, y: 44.00 },
                    Point { x: 40.00, y: 42.21 },
                    Point { x: 40.00, y: 40.00 },
                ),
                PathEl::LineTo(Point { x: 39.98, y: 8.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 18.00, y: 38.00 }),
                PathEl::LineTo(Point { x: 14.00, y: 38.00 }),
                PathEl::LineTo(Point { x: 14.00, y: 34.00 }),
                PathEl::LineTo(Point { x: 18.00, y: 34.00 }),
                PathEl::LineTo(Point { x: 18.00, y: 38.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 34.00, y: 38.00 }),
                PathEl::LineTo(Point { x: 30.00, y: 38.00 }),
                PathEl::LineTo(Point { x: 30.00, y: 34.00 }),
                PathEl::LineTo(Point { x: 34.00, y: 34.00 }),
                PathEl::LineTo(Point { x: 34.00, y: 38.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 18.00, y: 30.00 }),
                PathEl::LineTo(Point { x: 14.00, y: 30.00 }),
                PathEl::LineTo(Point { x: 14.00, y: 22.00 }),
                PathEl::LineTo(Point { x: 18.00, y: 22.00 }),
                PathEl::LineTo(Point { x: 18.00, y: 30.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 26.00, y: 38.00 }),
                PathEl::LineTo(Point { x: 22.00, y: 38.00 }),
                PathEl::LineTo(Point { x: 22.00, y: 30.00 }),
                PathEl::LineTo(Point { x: 26.00, y: 30.00 }),
                PathEl::LineTo(Point { x: 26.00, y: 38.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 26.00, y: 26.00 }),
                PathEl::LineTo(Point { x: 22.00, y: 26.00 }),
                PathEl::LineTo(Point { x: 22.00, y: 22.00 }),
                PathEl::LineTo(Point { x: 26.00, y: 22.00 }),
                PathEl::LineTo(Point { x: 26.00, y: 26.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 34.00, y: 30.00 }),
                PathEl::LineTo(Point { x: 30.00, y: 30.00 }),
                PathEl::LineTo(Point { x: 30.00, y: 22.00 }),
                PathEl::LineTo(Point { x: 34.00, y: 22.00 }),
                PathEl::LineTo(Point { x: 34.00, y: 30.00 }),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct WbCloudy {
    size: f64,
    color: Color,
}

impl WbCloudy {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for WbCloudy {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 38.71, y: 20.07 }),
                PathEl::CurveTo(
                    Point { x: 37.35, y: 13.19 },
                    Point { x: 31.28, y: 8.00 },
                    Point { x: 24.00, y: 8.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 18.22, y: 8.00 },
                    Point { x: 13.21, y: 11.28 },
                    Point { x: 10.70, y: 16.07 },
                ),
                PathEl::CurveTo(
                    Point { x: 4.69, y: 16.72 },
                    Point { x: 0.00, y: 21.81 },
                    Point { x: 0.00, y: 28.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 0.00, y: 34.63 },
                    Point { x: 5.37, y: 40.00 },
                    Point { x: 12.00, y: 40.00 },
                ),
                PathEl::LineTo(Point { x: 38.00, y: 40.00 }),
                PathEl::CurveTo(
                    Point { x: 43.52, y: 40.00 },
                    Point { x: 48.00, y: 35.52 },
                    Point { x: 48.00, y: 30.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 48.00, y: 24.72 },
                    Point { x: 43.89, y: 20.44 },
                    Point { x: 38.71, y: 20.07 },
                ),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct DoNotDisturbOn {
    size: f64,
    color: Color,
}

impl DoNotDisturbOn {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for DoNotDisturbOn {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 24.00, y: 4.00 }),
                PathEl::CurveTo(
                    Point { x: 12.96, y: 4.00 },
                    Point { x: 4.00, y: 12.96 },
                    Point { x: 4.00, y: 24.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 4.00, y: 35.04 },
                    Point { x: 12.96, y: 44.00 },
                    Point { x: 24.00, y: 44.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 35.04, y: 44.00 },
                    Point { x: 44.00, y: 35.04 },
                    Point { x: 44.00, y: 24.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 44.00, y: 12.96 },
                    Point { x: 35.04, y: 4.00 },
                    Point { x: 24.00, y: 4.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 34.00, y: 26.00 }),
                PathEl::LineTo(Point { x: 14.00, y: 26.00 }),
                PathEl::LineTo(Point { x: 14.00, y: 22.00 }),
                PathEl::LineTo(Point { x: 34.00, y: 22.00 }),
                PathEl::LineTo(Point { x: 34.00, y: 26.00 }),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct Snooze {
    size: f64,
    color: Color,
}

impl Snooze {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for Snooze {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 15.76, y: 6.78 }),
                PathEl::LineTo(Point { x: 13.19, y: 3.72 }),
                PathEl::LineTo(Point { x: 4.00, y: 11.43 }),
                PathEl::LineTo(Point { x: 6.57, y: 14.49 }),
                PathEl::LineTo(Point { x: 15.76, y: 6.78 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 44.00, y: 11.44 }),
                PathEl::LineTo(Point { x: 34.81, y: 3.73 }),
                PathEl::LineTo(Point { x: 32.24, y: 6.79 }),
                PathEl::LineTo(Point { x: 41.43, y: 14.50 }),
                PathEl::LineTo(Point { x: 44.00, y: 11.44 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 23.99, y: 8.00 }),
                PathEl::CurveTo(
                    Point { x: 14.04, y: 8.00 },
                    Point { x: 6.00, y: 16.06 },
                    Point { x: 6.00, y: 26.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 6.00, y: 35.94 },
                    Point { x: 14.04, y: 44.00 },
                    Point { x: 23.99, y: 44.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 33.94, y: 44.00 },
                    Point { x: 42.00, y: 35.94 },
                    Point { x: 42.00, y: 26.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 42.00, y: 16.06 },
                    Point { x: 33.94, y: 8.00 },
                    Point { x: 23.99, y: 8.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 24.00, y: 40.00 }),
                PathEl::CurveTo(
                    Point { x: 16.27, y: 40.00 },
                    Point { x: 10.00, y: 33.73 },
                    Point { x: 10.00, y: 26.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 10.00, y: 18.27 },
                    Point { x: 16.27, y: 12.00 },
                    Point { x: 24.00, y: 12.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 31.73, y: 12.00 },
                    Point { x: 38.00, y: 18.27 },
                    Point { x: 38.00, y: 26.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 38.00, y: 33.73 },
                    Point { x: 31.74, y: 40.00 },
                    Point { x: 24.00, y: 40.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 18.00, y: 22.00 }),
                PathEl::LineTo(Point { x: 25.25, y: 22.00 }),
                PathEl::LineTo(Point { x: 18.00, y: 30.40 }),
                PathEl::LineTo(Point { x: 18.00, y: 34.00 }),
                PathEl::LineTo(Point { x: 30.00, y: 34.00 }),
                PathEl::LineTo(Point { x: 30.00, y: 30.00 }),
                PathEl::LineTo(Point { x: 22.75, y: 30.00 }),
                PathEl::LineTo(Point { x: 30.00, y: 21.60 }),
                PathEl::LineTo(Point { x: 30.00, y: 18.00 }),
                PathEl::LineTo(Point { x: 18.00, y: 18.00 }),
                PathEl::LineTo(Point { x: 18.00, y: 22.00 }),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct Satellite {
    size: f64,
    color: Color,
}

impl Satellite {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for Satellite {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 38.00, y: 6.00 }),
                PathEl::LineTo(Point { x: 10.00, y: 6.00 }),
                PathEl::CurveTo(
                    Point { x: 7.79, y: 6.00 },
                    Point { x: 6.00, y: 7.79 },
                    Point { x: 6.00, y: 10.00 },
                ),
                PathEl::LineTo(Point { x: 6.00, y: 38.00 }),
                PathEl::CurveTo(
                    Point { x: 6.00, y: 40.21 },
                    Point { x: 7.79, y: 42.00 },
                    Point { x: 10.00, y: 42.00 },
                ),
                PathEl::LineTo(Point { x: 38.00, y: 42.00 }),
                PathEl::CurveTo(
                    Point { x: 40.21, y: 42.00 },
                    Point { x: 42.00, y: 40.21 },
                    Point { x: 42.00, y: 38.00 },
                ),
                PathEl::LineTo(Point { x: 42.00, y: 10.00 }),
                PathEl::CurveTo(
                    Point { x: 42.00, y: 7.79 },
                    Point { x: 40.21, y: 6.00 },
                    Point { x: 38.00, y: 6.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 10.00, y: 9.98 }),
                PathEl::LineTo(Point { x: 16.00, y: 9.98 }),
                PathEl::CurveTo(
                    Point { x: 16.00, y: 13.29 },
                    Point { x: 13.31, y: 16.00 },
                    Point { x: 10.00, y: 16.00 },
                ),
                PathEl::LineTo(Point { x: 10.00, y: 9.98 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 10.00, y: 24.00 }),
                PathEl::LineTo(Point { x: 10.00, y: 20.00 }),
                PathEl::CurveTo(
                    Point { x: 15.52, y: 20.00 },
                    Point { x: 20.00, y: 15.50 },
                    Point { x: 20.00, y: 9.98 },
                ),
                PathEl::LineTo(Point { x: 24.00, y: 9.98 }),
                PathEl::CurveTo(
                    Point { x: 24.00, y: 17.71 },
                    Point { x: 17.73, y: 24.00 },
                    Point { x: 10.00, y: 24.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 10.00, y: 36.00 }),
                PathEl::LineTo(Point { x: 17.00, y: 27.00 }),
                PathEl::LineTo(Point { x: 22.00, y: 33.01 }),
                PathEl::LineTo(Point { x: 29.00, y: 24.00 }),
                PathEl::LineTo(Point { x: 38.00, y: 36.00 }),
                PathEl::LineTo(Point { x: 10.00, y: 36.00 }),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct Crop169 {
    size: f64,
    color: Color,
}

impl Crop169 {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for Crop169 {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 38.00, y: 12.00 }),
                PathEl::LineTo(Point { x: 10.00, y: 12.00 }),
                PathEl::CurveTo(
                    Point { x: 7.79, y: 12.00 },
                    Point { x: 6.00, y: 13.79 },
                    Point { x: 6.00, y: 16.00 },
                ),
                PathEl::LineTo(Point { x: 6.00, y: 32.00 }),
                PathEl::CurveTo(
                    Point { x: 6.00, y: 34.21 },
                    Point { x: 7.79, y: 36.00 },
                    Point { x: 10.00, y: 36.00 },
                ),
                PathEl::LineTo(Point { x: 38.00, y: 36.00 }),
                PathEl::CurveTo(
                    Point { x: 40.21, y: 36.00 },
                    Point { x: 42.00, y: 34.21 },
                    Point { x: 42.00, y: 32.00 },
                ),
                PathEl::LineTo(Point { x: 42.00, y: 16.00 }),
                PathEl::CurveTo(
                    Point { x: 42.00, y: 13.79 },
                    Point { x: 40.21, y: 12.00 },
                    Point { x: 38.00, y: 12.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 38.00, y: 32.00 }),
                PathEl::LineTo(Point { x: 10.00, y: 32.00 }),
                PathEl::LineTo(Point { x: 10.00, y: 16.00 }),
                PathEl::LineTo(Point { x: 38.00, y: 16.00 }),
                PathEl::LineTo(Point { x: 38.00, y: 32.00 }),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct SignalWifi1Bar {
    size: f64,
    color: Color,
}

impl SignalWifi1Bar {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for SignalWifi1Bar {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 24.02, y: 42.98 }),
                PathEl::LineTo(Point { x: 47.28, y: 14.00 }),
                PathEl::CurveTo(
                    Point { x: 46.38, y: 13.32 },
                    Point { x: 37.43, y: 6.00 },
                    Point { x: 24.00, y: 6.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 10.57, y: 6.00 },
                    Point { x: 1.62, y: 13.32 },
                    Point { x: 0.72, y: 14.00 },
                ),
                PathEl::LineTo(Point { x: 23.98, y: 42.98 }),
                PathEl::LineTo(Point { x: 24.00, y: 43.00 }),
                PathEl::LineTo(Point { x: 24.02, y: 42.98 }),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 13.34, y: 29.72 }),
                PathEl::LineTo(Point { x: 23.99, y: 42.99 }),
                PathEl::LineTo(Point { x: 24.00, y: 43.00 }),
                PathEl::LineTo(Point { x: 24.01, y: 42.99 }),
                PathEl::LineTo(Point { x: 34.66, y: 29.72 }),
                PathEl::CurveTo(
                    Point { x: 34.13, y: 29.31 },
                    Point { x: 30.06, y: 26.00 },
                    Point { x: 24.00, y: 26.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 17.94, y: 26.00 },
                    Point { x: 13.87, y: 29.31 },
                    Point { x: 13.34, y: 29.72 },
                ),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct Motorcycle {
    size: f64,
    color: Color,
}

impl Motorcycle {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for Motorcycle {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 38.88, y: 18.06 }),
                PathEl::LineTo(Point { x: 30.82, y: 10.00 }),
                PathEl::LineTo(Point { x: 22.00, y: 10.00 }),
                PathEl::LineTo(Point { x: 22.00, y: 14.00 }),
                PathEl::LineTo(Point { x: 29.18, y: 14.00 }),
                PathEl::LineTo(Point { x: 33.18, y: 18.00 }),
                PathEl::LineTo(Point { x: 10.00, y: 18.00 }),
                PathEl::CurveTo(
                    Point { x: 4.40, y: 18.00 },
                    Point { x: 0.00, y: 22.40 },
                    Point { x: 0.00, y: 28.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 0.00, y: 33.60 },
                    Point { x: 4.40, y: 38.00 },
                    Point { x: 10.00, y: 38.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 14.92, y: 38.00 },
                    Point { x: 18.90, y: 34.62 },
                    Point { x: 19.80, y: 30.00 },
                ),
                PathEl::LineTo(Point { x: 23.10, y: 30.00 }),
                PathEl::LineTo(Point { x: 28.64, y: 24.46 }),
                PathEl::CurveTo(
                    Point { x: 28.22, y: 25.54 },
                    Point { x: 28.00, y: 26.74 },
                    Point { x: 28.00, y: 28.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 28.00, y: 33.60 },
                    Point { x: 32.40, y: 38.00 },
                    Point { x: 38.00, y: 38.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 43.60, y: 38.00 },
                    Point { x: 48.00, y: 33.60 },
                    Point { x: 48.00, y: 28.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 48.00, y: 22.70 },
                    Point { x: 44.06, y: 18.46 },
                    Point { x: 38.88, y: 18.06 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 15.64, y: 30.00 }),
                PathEl::CurveTo(
                    Point { x: 14.80, y: 32.30 },
                    Point { x: 12.56, y: 34.00 },
                    Point { x: 10.00, y: 34.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 6.74, y: 34.00 },
                    Point { x: 4.00, y: 31.26 },
                    Point { x: 4.00, y: 28.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 4.00, y: 24.74 },
                    Point { x: 6.74, y: 22.00 },
                    Point { x: 10.00, y: 22.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 12.56, y: 22.00 },
                    Point { x: 14.80, y: 23.70 },
                    Point { x: 15.64, y: 26.00 },
                ),
                PathEl::LineTo(Point { x: 10.00, y: 26.00 }),
                PathEl::LineTo(Point { x: 10.00, y: 30.00 }),
                PathEl::LineTo(Point { x: 15.64, y: 30.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 38.00, y: 34.00 }),
                PathEl::CurveTo(
                    Point { x: 34.68, y: 34.00 },
                    Point { x: 32.00, y: 31.32 },
                    Point { x: 32.00, y: 28.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 32.00, y: 24.68 },
                    Point { x: 34.68, y: 22.00 },
                    Point { x: 38.00, y: 22.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 41.32, y: 22.00 },
                    Point { x: 44.00, y: 24.68 },
                    Point { x: 44.00, y: 28.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 44.00, y: 31.32 },
                    Point { x: 41.32, y: 34.00 },
                    Point { x: 38.00, y: 34.00 },
                ),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct Voicemail {
    size: f64,
    color: Color,
}

impl Voicemail {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for Voicemail {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 37.00, y: 12.00 }),
                PathEl::CurveTo(
                    Point { x: 30.92, y: 12.00 },
                    Point { x: 26.00, y: 16.92 },
                    Point { x: 26.00, y: 23.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 26.00, y: 25.66 },
                    Point { x: 26.94, y: 28.10 },
                    Point { x: 28.51, y: 30.00 },
                ),
                PathEl::LineTo(Point { x: 19.48, y: 30.00 }),
                PathEl::CurveTo(
                    Point { x: 21.05, y: 28.10 },
                    Point { x: 21.99, y: 25.66 },
                    Point { x: 21.99, y: 23.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 21.99, y: 16.92 },
                    Point { x: 17.07, y: 12.00 },
                    Point { x: 10.99, y: 12.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 4.91, y: 12.00 },
                    Point { x: 0.00, y: 16.92 },
                    Point { x: 0.00, y: 23.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 0.00, y: 29.08 },
                    Point { x: 4.92, y: 34.00 },
                    Point { x: 11.00, y: 34.00 },
                ),
                PathEl::LineTo(Point { x: 37.00, y: 34.00 }),
                PathEl::CurveTo(
                    Point { x: 43.08, y: 34.00 },
                    Point { x: 48.00, y: 29.08 },
                    Point { x: 48.00, y: 23.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 48.00, y: 16.92 },
                    Point { x: 43.08, y: 12.00 },
                    Point { x: 37.00, y: 12.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 11.00, y: 30.00 }),
                PathEl::CurveTo(
                    Point { x: 7.13, y: 30.00 },
                    Point { x: 4.00, y: 26.87 },
                    Point { x: 4.00, y: 23.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 4.00, y: 19.13 },
                    Point { x: 7.13, y: 16.00 },
                    Point { x: 11.00, y: 16.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 14.87, y: 16.00 },
                    Point { x: 18.00, y: 19.13 },
                    Point { x: 18.00, y: 23.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 18.00, y: 26.87 },
                    Point { x: 14.87, y: 30.00 },
                    Point { x: 11.00, y: 30.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 37.00, y: 30.00 }),
                PathEl::CurveTo(
                    Point { x: 33.13, y: 30.00 },
                    Point { x: 30.00, y: 26.87 },
                    Point { x: 30.00, y: 23.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 30.00, y: 19.13 },
                    Point { x: 33.13, y: 16.00 },
                    Point { x: 37.00, y: 16.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 40.87, y: 16.00 },
                    Point { x: 44.00, y: 19.13 },
                    Point { x: 44.00, y: 23.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 44.00, y: 26.87 },
                    Point { x: 40.87, y: 30.00 },
                    Point { x: 37.00, y: 30.00 },
                ),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct TapAndPlay {
    size: f64,
    color: Color,
}

impl TapAndPlay {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for TapAndPlay {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 4.00, y: 32.00 }),
                PathEl::LineTo(Point { x: 4.00, y: 36.00 }),
                PathEl::CurveTo(
                    Point { x: 9.52, y: 36.00 },
                    Point { x: 14.00, y: 40.48 },
                    Point { x: 14.00, y: 46.00 },
                ),
                PathEl::LineTo(Point { x: 18.00, y: 46.00 }),
                PathEl::CurveTo(
                    Point { x: 18.00, y: 38.27 },
                    Point { x: 11.73, y: 32.00 },
                    Point { x: 4.00, y: 32.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 4.00, y: 40.00 }),
                PathEl::LineTo(Point { x: 4.00, y: 46.00 }),
                PathEl::LineTo(Point { x: 10.00, y: 46.00 }),
                PathEl::CurveTo(
                    Point { x: 10.00, y: 42.69 },
                    Point { x: 7.31, y: 40.00 },
                    Point { x: 4.00, y: 40.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 4.00, y: 24.00 }),
                PathEl::LineTo(Point { x: 4.00, y: 28.00 }),
                PathEl::CurveTo(
                    Point { x: 13.94, y: 28.00 },
                    Point { x: 22.00, y: 36.06 },
                    Point { x: 22.00, y: 46.00 },
                ),
                PathEl::LineTo(Point { x: 26.00, y: 46.00 }),
                PathEl::CurveTo(
                    Point { x: 26.00, y: 33.85 },
                    Point { x: 16.15, y: 24.00 },
                    Point { x: 4.00, y: 24.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 34.00, y: 2.02 }),
                PathEl::LineTo(Point { x: 14.00, y: 2.00 }),
                PathEl::CurveTo(
                    Point { x: 11.79, y: 2.00 },
                    Point { x: 10.00, y: 3.79 },
                    Point { x: 10.00, y: 6.00 },
                ),
                PathEl::LineTo(Point { x: 10.00, y: 20.74 }),
                PathEl::CurveTo(
                    Point { x: 11.38, y: 21.07 },
                    Point { x: 12.72, y: 21.48 },
                    Point { x: 14.00, y: 22.02 },
                ),
                PathEl::LineTo(Point { x: 14.00, y: 10.00 }),
                PathEl::LineTo(Point { x: 34.00, y: 10.00 }),
                PathEl::LineTo(Point { x: 34.00, y: 36.00 }),
                PathEl::LineTo(Point { x: 27.94, y: 36.00 }),
                PathEl::CurveTo(
                    Point { x: 28.98, y: 38.49 },
                    Point { x: 29.62, y: 41.19 },
                    Point { x: 29.84, y: 44.00 },
                ),
                PathEl::LineTo(Point { x: 34.00, y: 44.00 }),
                PathEl::CurveTo(
                    Point { x: 36.21, y: 44.00 },
                    Point { x: 38.00, y: 42.21 },
                    Point { x: 38.00, y: 40.00 },
                ),
                PathEl::LineTo(Point { x: 38.00, y: 6.00 }),
                PathEl::CurveTo(
                    Point { x: 38.00, y: 3.79 },
                    Point { x: 36.21, y: 2.02 },
                    Point { x: 34.00, y: 2.02 },
                ),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct Toys {
    size: f64,
    color: Color,
}

impl Toys {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for Toys {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 24.00, y: 24.00 }),
                PathEl::CurveTo(
                    Point { x: 24.00, y: 17.90 },
                    Point { x: 28.90, y: 13.00 },
                    Point { x: 35.00, y: 13.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 41.10, y: 13.00 },
                    Point { x: 46.00, y: 17.90 },
                    Point { x: 46.00, y: 24.00 },
                ),
                PathEl::LineTo(Point { x: 24.00, y: 24.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 24.00, y: 24.00 }),
                PathEl::CurveTo(
                    Point { x: 24.00, y: 30.10 },
                    Point { x: 19.10, y: 35.00 },
                    Point { x: 13.00, y: 35.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 6.90, y: 35.00 },
                    Point { x: 2.00, y: 30.10 },
                    Point { x: 2.00, y: 24.00 },
                ),
                PathEl::LineTo(Point { x: 24.00, y: 24.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 24.00, y: 24.00 }),
                PathEl::CurveTo(
                    Point { x: 17.90, y: 24.00 },
                    Point { x: 13.00, y: 19.10 },
                    Point { x: 13.00, y: 13.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 13.00, y: 6.90 },
                    Point { x: 17.90, y: 2.00 },
                    Point { x: 24.00, y: 2.00 },
                ),
                PathEl::LineTo(Point { x: 24.00, y: 24.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 24.00, y: 24.00 }),
                PathEl::CurveTo(
                    Point { x: 30.10, y: 24.00 },
                    Point { x: 35.00, y: 28.90 },
                    Point { x: 35.00, y: 35.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 35.00, y: 41.10 },
                    Point { x: 30.10, y: 46.00 },
                    Point { x: 24.00, y: 46.00 },
                ),
                PathEl::LineTo(Point { x: 24.00, y: 24.00 }),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct Payment {
    size: f64,
    color: Color,
}

impl Payment {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for Payment {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 40.00, y: 8.00 }),
                PathEl::LineTo(Point { x: 8.00, y: 8.00 }),
                PathEl::CurveTo(
                    Point { x: 5.79, y: 8.00 },
                    Point { x: 4.02, y: 9.79 },
                    Point { x: 4.02, y: 12.00 },
                ),
                PathEl::LineTo(Point { x: 4.00, y: 36.00 }),
                PathEl::CurveTo(
                    Point { x: 4.00, y: 38.21 },
                    Point { x: 5.79, y: 40.00 },
                    Point { x: 8.00, y: 40.00 },
                ),
                PathEl::LineTo(Point { x: 40.00, y: 40.00 }),
                PathEl::CurveTo(
                    Point { x: 42.21, y: 40.00 },
                    Point { x: 44.00, y: 38.21 },
                    Point { x: 44.00, y: 36.00 },
                ),
                PathEl::LineTo(Point { x: 44.00, y: 12.00 }),
                PathEl::CurveTo(
                    Point { x: 44.00, y: 9.79 },
                    Point { x: 42.21, y: 8.00 },
                    Point { x: 40.00, y: 8.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 40.00, y: 36.00 }),
                PathEl::LineTo(Point { x: 8.00, y: 36.00 }),
                PathEl::LineTo(Point { x: 8.00, y: 24.00 }),
                PathEl::LineTo(Point { x: 40.00, y: 24.00 }),
                PathEl::LineTo(Point { x: 40.00, y: 36.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 40.00, y: 16.00 }),
                PathEl::LineTo(Point { x: 8.00, y: 16.00 }),
                PathEl::LineTo(Point { x: 8.00, y: 12.00 }),
                PathEl::LineTo(Point { x: 40.00, y: 12.00 }),
                PathEl::LineTo(Point { x: 40.00, y: 16.00 }),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct SettingsVoice {
    size: f64,
    color: Color,
}

impl SettingsVoice {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for SettingsVoice {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 14.00, y: 48.00 }),
                PathEl::LineTo(Point { x: 18.00, y: 48.00 }),
                PathEl::LineTo(Point { x: 18.00, y: 44.00 }),
                PathEl::LineTo(Point { x: 14.00, y: 44.00 }),
                PathEl::LineTo(Point { x: 14.00, y: 48.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 24.00, y: 26.00 }),
                PathEl::CurveTo(
                    Point { x: 27.31, y: 26.00 },
                    Point { x: 29.98, y: 23.31 },
                    Point { x: 29.98, y: 20.00 },
                ),
                PathEl::LineTo(Point { x: 30.00, y: 8.00 }),
                PathEl::CurveTo(
                    Point { x: 30.00, y: 4.68 },
                    Point { x: 27.32, y: 2.00 },
                    Point { x: 24.00, y: 2.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 20.69, y: 2.00 },
                    Point { x: 18.00, y: 4.68 },
                    Point { x: 18.00, y: 8.00 },
                ),
                PathEl::LineTo(Point { x: 18.00, y: 20.00 }),
                PathEl::CurveTo(
                    Point { x: 18.00, y: 23.31 },
                    Point { x: 20.69, y: 26.00 },
                    Point { x: 24.00, y: 26.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 22.00, y: 48.00 }),
                PathEl::LineTo(Point { x: 26.00, y: 48.00 }),
                PathEl::LineTo(Point { x: 26.00, y: 44.00 }),
                PathEl::LineTo(Point { x: 22.00, y: 44.00 }),
                PathEl::LineTo(Point { x: 22.00, y: 48.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 30.00, y: 48.00 }),
                PathEl::LineTo(Point { x: 34.00, y: 48.00 }),
                PathEl::LineTo(Point { x: 34.00, y: 44.00 }),
                PathEl::LineTo(Point { x: 30.00, y: 44.00 }),
                PathEl::LineTo(Point { x: 30.00, y: 48.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 38.00, y: 20.00 }),
                PathEl::LineTo(Point { x: 34.60, y: 20.00 }),
                PathEl::CurveTo(
                    Point { x: 34.60, y: 26.00 },
                    Point { x: 29.53, y: 30.20 },
                    Point { x: 24.00, y: 30.20 },
                ),
                PathEl::CurveTo(
                    Point { x: 18.48, y: 30.20 },
                    Point { x: 13.40, y: 26.00 },
                    Point { x: 13.40, y: 20.00 },
                ),
                PathEl::LineTo(Point { x: 10.00, y: 20.00 }),
                PathEl::CurveTo(
                    Point { x: 10.00, y: 26.83 },
                    Point { x: 15.44, y: 32.47 },
                    Point { x: 22.00, y: 33.44 },
                ),
                PathEl::LineTo(Point { x: 22.00, y: 40.00 }),
                PathEl::LineTo(Point { x: 26.00, y: 40.00 }),
                PathEl::LineTo(Point { x: 26.00, y: 33.44 }),
                PathEl::CurveTo(
                    Point { x: 32.56, y: 32.47 },
                    Point { x: 38.00, y: 26.83 },
                    Point { x: 38.00, y: 20.00 },
                ),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct Update {
    size: f64,
    color: Color,
}

impl Update {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for Update {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 42.00, y: 20.25 }),
                PathEl::LineTo(Point { x: 28.43, y: 20.25 }),
                PathEl::LineTo(Point { x: 33.92, y: 14.61 }),
                PathEl::CurveTo(
                    Point { x: 28.46, y: 9.20 },
                    Point { x: 19.62, y: 9.00 },
                    Point { x: 14.16, y: 14.41 },
                ),
                PathEl::CurveTo(
                    Point { x: 8.70, y: 19.82 },
                    Point { x: 8.70, y: 28.58 },
                    Point { x: 14.16, y: 33.99 },
                ),
                PathEl::CurveTo(
                    Point { x: 19.62, y: 39.40 },
                    Point { x: 28.46, y: 39.40 },
                    Point { x: 33.92, y: 33.99 },
                ),
                PathEl::CurveTo(
                    Point { x: 36.64, y: 31.29 },
                    Point { x: 38.00, y: 28.16 },
                    Point { x: 37.99, y: 24.20 },
                ),
                PathEl::LineTo(Point { x: 42.00, y: 24.20 }),
                PathEl::CurveTo(
                    Point { x: 42.00, y: 28.16 },
                    Point { x: 40.24, y: 33.30 },
                    Point { x: 36.72, y: 36.79 },
                ),
                PathEl::CurveTo(
                    Point { x: 29.70, y: 43.74 },
                    Point { x: 18.30, y: 43.74 },
                    Point { x: 11.28, y: 36.79 },
                ),
                PathEl::CurveTo(
                    Point { x: 4.26, y: 29.84 },
                    Point { x: 4.21, y: 18.57 },
                    Point { x: 11.23, y: 11.62 },
                ),
                PathEl::CurveTo(
                    Point { x: 18.24, y: 4.67 },
                    Point { x: 29.52, y: 4.67 },
                    Point { x: 36.53, y: 11.62 },
                ),
                PathEl::LineTo(Point { x: 42.00, y: 6.00 }),
                PathEl::LineTo(Point { x: 42.00, y: 20.25 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 25.00, y: 16.00 }),
                PathEl::LineTo(Point { x: 25.00, y: 24.50 }),
                PathEl::LineTo(Point { x: 32.00, y: 28.66 }),
                PathEl::LineTo(Point { x: 30.56, y: 31.08 }),
                PathEl::LineTo(Point { x: 22.00, y: 26.00 }),
                PathEl::LineTo(Point { x: 22.00, y: 16.00 }),
                PathEl::LineTo(Point { x: 25.00, y: 16.00 }),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct KeyboardTab {
    size: f64,
    color: Color,
}

impl KeyboardTab {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for KeyboardTab {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 23.17, y: 14.83 }),
                PathEl::LineTo(Point { x: 30.34, y: 22.00 }),
                PathEl::LineTo(Point { x: 2.00, y: 22.00 }),
                PathEl::LineTo(Point { x: 2.00, y: 26.00 }),
                PathEl::LineTo(Point { x: 30.34, y: 26.00 }),
                PathEl::LineTo(Point { x: 23.17, y: 33.17 }),
                PathEl::LineTo(Point { x: 26.00, y: 36.00 }),
                PathEl::LineTo(Point { x: 38.00, y: 24.00 }),
                PathEl::LineTo(Point { x: 26.00, y: 12.00 }),
                PathEl::LineTo(Point { x: 23.17, y: 14.83 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 40.00, y: 12.00 }),
                PathEl::LineTo(Point { x: 40.00, y: 36.00 }),
                PathEl::LineTo(Point { x: 44.00, y: 36.00 }),
                PathEl::LineTo(Point { x: 44.00, y: 12.00 }),
                PathEl::LineTo(Point { x: 40.00, y: 12.00 }),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct DeveloperBoard {
    size: f64,
    color: Color,
}

impl DeveloperBoard {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for DeveloperBoard {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 44.00, y: 18.00 }),
                PathEl::LineTo(Point { x: 44.00, y: 14.00 }),
                PathEl::LineTo(Point { x: 40.00, y: 14.00 }),
                PathEl::LineTo(Point { x: 40.00, y: 10.00 }),
                PathEl::CurveTo(
                    Point { x: 40.00, y: 7.80 },
                    Point { x: 38.20, y: 6.00 },
                    Point { x: 36.00, y: 6.00 },
                ),
                PathEl::LineTo(Point { x: 8.00, y: 6.00 }),
                PathEl::CurveTo(
                    Point { x: 5.80, y: 6.00 },
                    Point { x: 4.00, y: 7.80 },
                    Point { x: 4.00, y: 10.00 },
                ),
                PathEl::LineTo(Point { x: 4.00, y: 38.00 }),
                PathEl::CurveTo(
                    Point { x: 4.00, y: 40.20 },
                    Point { x: 5.80, y: 42.00 },
                    Point { x: 8.00, y: 42.00 },
                ),
                PathEl::LineTo(Point { x: 36.00, y: 42.00 }),
                PathEl::CurveTo(
                    Point { x: 38.20, y: 42.00 },
                    Point { x: 40.00, y: 40.20 },
                    Point { x: 40.00, y: 38.00 },
                ),
                PathEl::LineTo(Point { x: 40.00, y: 34.00 }),
                PathEl::LineTo(Point { x: 44.00, y: 34.00 }),
                PathEl::LineTo(Point { x: 44.00, y: 30.00 }),
                PathEl::LineTo(Point { x: 40.00, y: 30.00 }),
                PathEl::LineTo(Point { x: 40.00, y: 26.00 }),
                PathEl::LineTo(Point { x: 44.00, y: 26.00 }),
                PathEl::LineTo(Point { x: 44.00, y: 22.00 }),
                PathEl::LineTo(Point { x: 40.00, y: 22.00 }),
                PathEl::LineTo(Point { x: 40.00, y: 18.00 }),
                PathEl::LineTo(Point { x: 44.00, y: 18.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 36.00, y: 38.00 }),
                PathEl::LineTo(Point { x: 8.00, y: 38.00 }),
                PathEl::LineTo(Point { x: 8.00, y: 10.00 }),
                PathEl::LineTo(Point { x: 36.00, y: 10.00 }),
                PathEl::LineTo(Point { x: 36.00, y: 38.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 12.00, y: 26.00 }),
                PathEl::LineTo(Point { x: 22.00, y: 26.00 }),
                PathEl::LineTo(Point { x: 22.00, y: 34.00 }),
                PathEl::LineTo(Point { x: 12.00, y: 34.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 24.00, y: 14.00 }),
                PathEl::LineTo(Point { x: 32.00, y: 14.00 }),
                PathEl::LineTo(Point { x: 32.00, y: 20.00 }),
                PathEl::LineTo(Point { x: 24.00, y: 20.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 12.00, y: 14.00 }),
                PathEl::LineTo(Point { x: 22.00, y: 14.00 }),
                PathEl::LineTo(Point { x: 22.00, y: 24.00 }),
                PathEl::LineTo(Point { x: 12.00, y: 24.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 24.00, y: 22.00 }),
                PathEl::LineTo(Point { x: 32.00, y: 22.00 }),
                PathEl::LineTo(Point { x: 32.00, y: 34.00 }),
                PathEl::LineTo(Point { x: 24.00, y: 34.00 }),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct DesktopMac {
    size: f64,
    color: Color,
}

impl DesktopMac {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for DesktopMac {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 42.00, y: 4.00 }),
                PathEl::LineTo(Point { x: 6.00, y: 4.00 }),
                PathEl::CurveTo(
                    Point { x: 3.79, y: 4.00 },
                    Point { x: 2.00, y: 5.79 },
                    Point { x: 2.00, y: 8.00 },
                ),
                PathEl::LineTo(Point { x: 2.00, y: 32.00 }),
                PathEl::CurveTo(
                    Point { x: 2.00, y: 34.21 },
                    Point { x: 3.79, y: 36.00 },
                    Point { x: 6.00, y: 36.00 },
                ),
                PathEl::LineTo(Point { x: 20.00, y: 36.00 }),
                PathEl::LineTo(Point { x: 16.00, y: 42.00 }),
                PathEl::LineTo(Point { x: 16.00, y: 44.00 }),
                PathEl::LineTo(Point { x: 32.00, y: 44.00 }),
                PathEl::LineTo(Point { x: 32.00, y: 42.00 }),
                PathEl::LineTo(Point { x: 28.00, y: 36.00 }),
                PathEl::LineTo(Point { x: 42.00, y: 36.00 }),
                PathEl::CurveTo(
                    Point { x: 44.21, y: 36.00 },
                    Point { x: 46.00, y: 34.21 },
                    Point { x: 46.00, y: 32.00 },
                ),
                PathEl::LineTo(Point { x: 46.00, y: 8.00 }),
                PathEl::CurveTo(
                    Point { x: 46.00, y: 5.79 },
                    Point { x: 44.21, y: 4.00 },
                    Point { x: 42.00, y: 4.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 42.00, y: 28.00 }),
                PathEl::LineTo(Point { x: 6.00, y: 28.00 }),
                PathEl::LineTo(Point { x: 6.00, y: 8.00 }),
                PathEl::LineTo(Point { x: 42.00, y: 8.00 }),
                PathEl::LineTo(Point { x: 42.00, y: 28.00 }),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct MoneyOff {
    size: f64,
    color: Color,
}

impl MoneyOff {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for MoneyOff {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 24.0, height / 24.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 12.50, y: 6.90 }),
                PathEl::CurveTo(
                    Point { x: 14.28, y: 6.90 },
                    Point { x: 14.94, y: 7.75 },
                    Point { x: 15.00, y: 9.00 },
                ),
                PathEl::LineTo(Point { x: 17.21, y: 9.00 }),
                PathEl::CurveTo(
                    Point { x: 17.14, y: 7.28 },
                    Point { x: 16.09, y: 5.70 },
                    Point { x: 14.00, y: 5.19 },
                ),
                PathEl::LineTo(Point { x: 14.00, y: 3.00 }),
                PathEl::LineTo(Point { x: 11.00, y: 3.00 }),
                PathEl::LineTo(Point { x: 11.00, y: 5.16 }),
                PathEl::CurveTo(
                    Point { x: 10.47, y: 5.28 },
                    Point { x: 9.97, y: 5.46 },
                    Point { x: 9.52, y: 5.70 },
                ),
                PathEl::LineTo(Point { x: 10.99, y: 7.17 }),
                PathEl::CurveTo(
                    Point { x: 11.40, y: 7.00 },
                    Point { x: 11.90, y: 6.90 },
                    Point { x: 12.50, y: 6.90 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 5.33, y: 4.06 }),
                PathEl::LineTo(Point { x: 4.06, y: 5.33 }),
                PathEl::LineTo(Point { x: 7.50, y: 8.77 }),
                PathEl::CurveTo(
                    Point { x: 7.50, y: 10.85 },
                    Point { x: 9.06, y: 11.98 },
                    Point { x: 11.41, y: 12.68 },
                ),
                PathEl::LineTo(Point { x: 14.92, y: 16.19 }),
                PathEl::CurveTo(
                    Point { x: 14.58, y: 16.67 },
                    Point { x: 13.87, y: 17.10 },
                    Point { x: 12.50, y: 17.10 },
                ),
                PathEl::CurveTo(
                    Point { x: 10.44, y: 17.10 },
                    Point { x: 9.63, y: 16.18 },
                    Point { x: 9.52, y: 15.00 },
                ),
                PathEl::LineTo(Point { x: 7.32, y: 15.00 }),
                PathEl::CurveTo(
                    Point { x: 7.44, y: 17.19 },
                    Point { x: 9.08, y: 18.42 },
                    Point { x: 11.00, y: 18.83 },
                ),
                PathEl::LineTo(Point { x: 11.00, y: 21.00 }),
                PathEl::LineTo(Point { x: 14.00, y: 21.00 }),
                PathEl::LineTo(Point { x: 14.00, y: 18.85 }),
                PathEl::CurveTo(
                    Point { x: 14.96, y: 18.67 },
                    Point { x: 15.82, y: 18.30 },
                    Point { x: 16.45, y: 17.73 },
                ),
                PathEl::LineTo(Point { x: 18.67, y: 19.95 }),
                PathEl::LineTo(Point { x: 19.94, y: 18.68 }),
                PathEl::LineTo(Point { x: 5.33, y: 4.06 }),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct Build {
    size: f64,
    color: Color,
}

impl Build {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for Build {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 45.40, y: 37.90 }),
                PathEl::LineTo(Point { x: 27.10, y: 19.60 }),
                PathEl::CurveTo(
                    Point { x: 28.90, y: 15.00 },
                    Point { x: 27.90, y: 9.50 },
                    Point { x: 24.20, y: 5.80 },
                ),
                PathEl::CurveTo(
                    Point { x: 20.20, y: 1.80 },
                    Point { x: 14.20, y: 1.00 },
                    Point { x: 9.40, y: 3.30 },
                ),
                PathEl::LineTo(Point { x: 18.10, y: 12.00 }),
                PathEl::LineTo(Point { x: 12.00, y: 18.10 }),
                PathEl::LineTo(Point { x: 3.30, y: 9.40 }),
                PathEl::CurveTo(
                    Point { x: 1.00, y: 14.20 },
                    Point { x: 1.80, y: 20.20 },
                    Point { x: 5.80, y: 24.20 },
                ),
                PathEl::CurveTo(
                    Point { x: 9.50, y: 27.90 },
                    Point { x: 15.00, y: 28.90 },
                    Point { x: 19.60, y: 27.10 },
                ),
                PathEl::LineTo(Point { x: 37.90, y: 45.40 }),
                PathEl::CurveTo(
                    Point { x: 38.70, y: 46.20 },
                    Point { x: 40.00, y: 46.20 },
                    Point { x: 40.70, y: 45.40 },
                ),
                PathEl::LineTo(Point { x: 45.40, y: 40.70 }),
                PathEl::CurveTo(
                    Point { x: 46.20, y: 40.00 },
                    Point { x: 46.20, y: 38.70 },
                    Point { x: 45.40, y: 37.90 },
                ),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct NavigateNext {
    size: f64,
    color: Color,
}

impl NavigateNext {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for NavigateNext {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 20.00, y: 12.00 }),
                PathEl::LineTo(Point { x: 17.17, y: 14.83 }),
                PathEl::LineTo(Point { x: 26.34, y: 24.00 }),
                PathEl::LineTo(Point { x: 17.17, y: 33.17 }),
                PathEl::LineTo(Point { x: 20.00, y: 36.00 }),
                PathEl::LineTo(Point { x: 32.00, y: 24.00 }),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct Brightness4 {
    size: f64,
    color: Color,
}

impl Brightness4 {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for Brightness4 {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 40.00, y: 17.37 }),
                PathEl::LineTo(Point { x: 40.00, y: 8.00 }),
                PathEl::LineTo(Point { x: 30.63, y: 8.00 }),
                PathEl::LineTo(Point { x: 24.00, y: 1.37 }),
                PathEl::LineTo(Point { x: 17.37, y: 8.00 }),
                PathEl::LineTo(Point { x: 8.00, y: 8.00 }),
                PathEl::LineTo(Point { x: 8.00, y: 17.37 }),
                PathEl::LineTo(Point { x: 1.37, y: 24.00 }),
                PathEl::LineTo(Point { x: 8.00, y: 30.63 }),
                PathEl::LineTo(Point { x: 8.00, y: 40.00 }),
                PathEl::LineTo(Point { x: 17.37, y: 40.00 }),
                PathEl::LineTo(Point { x: 24.00, y: 46.63 }),
                PathEl::LineTo(Point { x: 30.63, y: 40.00 }),
                PathEl::LineTo(Point { x: 40.00, y: 40.00 }),
                PathEl::LineTo(Point { x: 40.00, y: 30.63 }),
                PathEl::LineTo(Point { x: 46.63, y: 24.00 }),
                PathEl::LineTo(Point { x: 40.00, y: 17.37 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 24.00, y: 36.00 }),
                PathEl::CurveTo(
                    Point { x: 22.21, y: 36.00 },
                    Point { x: 20.52, y: 35.60 },
                    Point { x: 19.00, y: 34.90 },
                ),
                PathEl::CurveTo(
                    Point { x: 23.13, y: 33.00 },
                    Point { x: 26.00, y: 28.84 },
                    Point { x: 26.00, y: 24.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 26.00, y: 19.16 },
                    Point { x: 23.13, y: 15.00 },
                    Point { x: 19.00, y: 13.10 },
                ),
                PathEl::CurveTo(
                    Point { x: 20.52, y: 12.40 },
                    Point { x: 22.21, y: 12.00 },
                    Point { x: 24.00, y: 12.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 30.63, y: 12.00 },
                    Point { x: 36.00, y: 17.37 },
                    Point { x: 36.00, y: 24.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 36.00, y: 30.63 },
                    Point { x: 30.63, y: 36.00 },
                    Point { x: 24.00, y: 36.00 },
                ),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct PermMedia {
    size: f64,
    color: Color,
}

impl PermMedia {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for PermMedia {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 4.00, y: 12.00 }),
                PathEl::LineTo(Point { x: 0.00, y: 12.00 }),
                PathEl::LineTo(Point { x: 0.00, y: 22.00 }),
                PathEl::LineTo(Point { x: 0.02, y: 22.00 }),
                PathEl::LineTo(Point { x: 0.00, y: 40.00 }),
                PathEl::CurveTo(
                    Point { x: 0.00, y: 42.21 },
                    Point { x: 1.79, y: 44.00 },
                    Point { x: 4.00, y: 44.00 },
                ),
                PathEl::LineTo(Point { x: 40.00, y: 44.00 }),
                PathEl::LineTo(Point { x: 40.00, y: 40.00 }),
                PathEl::LineTo(Point { x: 4.00, y: 40.00 }),
                PathEl::LineTo(Point { x: 4.00, y: 12.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 44.00, y: 8.00 }),
                PathEl::LineTo(Point { x: 28.00, y: 8.00 }),
                PathEl::LineTo(Point { x: 24.00, y: 4.00 }),
                PathEl::LineTo(Point { x: 12.00, y: 4.00 }),
                PathEl::CurveTo(
                    Point { x: 9.79, y: 4.00 },
                    Point { x: 8.02, y: 5.79 },
                    Point { x: 8.02, y: 8.00 },
                ),
                PathEl::LineTo(Point { x: 8.00, y: 32.00 }),
                PathEl::CurveTo(
                    Point { x: 8.00, y: 34.21 },
                    Point { x: 9.79, y: 36.00 },
                    Point { x: 12.00, y: 36.00 },
                ),
                PathEl::LineTo(Point { x: 44.00, y: 36.00 }),
                PathEl::CurveTo(
                    Point { x: 46.21, y: 36.00 },
                    Point { x: 48.00, y: 34.21 },
                    Point { x: 48.00, y: 32.00 },
                ),
                PathEl::LineTo(Point { x: 48.00, y: 12.00 }),
                PathEl::CurveTo(
                    Point { x: 48.00, y: 9.79 },
                    Point { x: 46.21, y: 8.00 },
                    Point { x: 44.00, y: 8.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 14.00, y: 30.00 }),
                PathEl::LineTo(Point { x: 23.00, y: 18.00 }),
                PathEl::LineTo(Point { x: 30.00, y: 27.01 }),
                PathEl::LineTo(Point { x: 35.00, y: 21.00 }),
                PathEl::LineTo(Point { x: 42.00, y: 30.00 }),
                PathEl::LineTo(Point { x: 14.00, y: 30.00 }),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct LaptopWindows {
    size: f64,
    color: Color,
}

impl LaptopWindows {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for LaptopWindows {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 40.00, y: 36.00 }),
                PathEl::LineTo(Point { x: 40.00, y: 34.00 }),
                PathEl::CurveTo(
                    Point { x: 42.21, y: 34.00 },
                    Point { x: 43.98, y: 32.21 },
                    Point { x: 43.98, y: 30.00 },
                ),
                PathEl::LineTo(Point { x: 44.00, y: 10.00 }),
                PathEl::CurveTo(
                    Point { x: 44.00, y: 7.79 },
                    Point { x: 42.21, y: 6.00 },
                    Point { x: 40.00, y: 6.00 },
                ),
                PathEl::LineTo(Point { x: 8.00, y: 6.00 }),
                PathEl::CurveTo(
                    Point { x: 5.79, y: 6.00 },
                    Point { x: 4.00, y: 7.79 },
                    Point { x: 4.00, y: 10.00 },
                ),
                PathEl::LineTo(Point { x: 4.00, y: 30.00 }),
                PathEl::CurveTo(
                    Point { x: 4.00, y: 32.21 },
                    Point { x: 5.79, y: 34.00 },
                    Point { x: 8.00, y: 34.00 },
                ),
                PathEl::LineTo(Point { x: 8.00, y: 36.00 }),
                PathEl::LineTo(Point { x: 0.00, y: 36.00 }),
                PathEl::LineTo(Point { x: 0.00, y: 40.00 }),
                PathEl::LineTo(Point { x: 48.00, y: 40.00 }),
                PathEl::LineTo(Point { x: 48.00, y: 36.00 }),
                PathEl::LineTo(Point { x: 40.00, y: 36.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 8.00, y: 10.00 }),
                PathEl::LineTo(Point { x: 40.00, y: 10.00 }),
                PathEl::LineTo(Point { x: 40.00, y: 30.00 }),
                PathEl::LineTo(Point { x: 8.00, y: 30.00 }),
                PathEl::LineTo(Point { x: 8.00, y: 10.00 }),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct BusinessCenter {
    size: f64,
    color: Color,
}

impl BusinessCenter {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for BusinessCenter {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 20.00, y: 32.00 }),
                PathEl::LineTo(Point { x: 20.00, y: 30.00 }),
                PathEl::LineTo(Point { x: 6.02, y: 30.00 }),
                PathEl::LineTo(Point { x: 6.00, y: 38.00 }),
                PathEl::CurveTo(
                    Point { x: 6.00, y: 40.22 },
                    Point { x: 7.78, y: 42.00 },
                    Point { x: 10.00, y: 42.00 },
                ),
                PathEl::LineTo(Point { x: 38.00, y: 42.00 }),
                PathEl::CurveTo(
                    Point { x: 40.22, y: 42.00 },
                    Point { x: 42.00, y: 40.22 },
                    Point { x: 42.00, y: 38.00 },
                ),
                PathEl::LineTo(Point { x: 42.00, y: 30.00 }),
                PathEl::LineTo(Point { x: 28.00, y: 30.00 }),
                PathEl::LineTo(Point { x: 28.00, y: 32.00 }),
                PathEl::LineTo(Point { x: 20.00, y: 32.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 40.00, y: 14.00 }),
                PathEl::LineTo(Point { x: 31.98, y: 14.00 }),
                PathEl::LineTo(Point { x: 31.98, y: 10.00 }),
                PathEl::LineTo(Point { x: 27.98, y: 6.00 }),
                PathEl::LineTo(Point { x: 19.98, y: 6.00 }),
                PathEl::LineTo(Point { x: 16.00, y: 10.00 }),
                PathEl::LineTo(Point { x: 16.00, y: 14.00 }),
                PathEl::LineTo(Point { x: 8.01, y: 14.00 }),
                PathEl::CurveTo(
                    Point { x: 5.80, y: 14.00 },
                    Point { x: 4.01, y: 15.79 },
                    Point { x: 4.01, y: 18.00 },
                ),
                PathEl::LineTo(Point { x: 4.01, y: 24.00 }),
                PathEl::CurveTo(
                    Point { x: 4.01, y: 26.21 },
                    Point { x: 5.80, y: 28.00 },
                    Point { x: 8.01, y: 28.00 },
                ),
                PathEl::LineTo(Point { x: 20.01, y: 28.00 }),
                PathEl::LineTo(Point { x: 20.01, y: 24.00 }),
                PathEl::LineTo(Point { x: 28.01, y: 24.00 }),
                PathEl::LineTo(Point { x: 28.01, y: 28.00 }),
                PathEl::LineTo(Point { x: 40.01, y: 28.00 }),
                PathEl::CurveTo(
                    Point { x: 42.22, y: 28.00 },
                    Point { x: 44.01, y: 26.21 },
                    Point { x: 44.01, y: 24.00 },
                ),
                PathEl::LineTo(Point { x: 44.01, y: 18.00 }),
                PathEl::CurveTo(
                    Point { x: 44.00, y: 15.79 },
                    Point { x: 42.21, y: 14.00 },
                    Point { x: 40.00, y: 14.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 27.99, y: 14.00 }),
                PathEl::LineTo(Point { x: 19.99, y: 14.00 }),
                PathEl::LineTo(Point { x: 19.99, y: 10.00 }),
                PathEl::LineTo(Point { x: 27.99, y: 10.00 }),
                PathEl::LineTo(Point { x: 27.99, y: 14.00 }),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct DeleteForever {
    size: f64,
    color: Color,
}

impl DeleteForever {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for DeleteForever {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 12.00, y: 38.00 }),
                PathEl::CurveTo(
                    Point { x: 12.00, y: 40.20 },
                    Point { x: 13.80, y: 42.00 },
                    Point { x: 16.00, y: 42.00 },
                ),
                PathEl::LineTo(Point { x: 32.00, y: 42.00 }),
                PathEl::CurveTo(
                    Point { x: 34.20, y: 42.00 },
                    Point { x: 36.00, y: 40.20 },
                    Point { x: 36.00, y: 38.00 },
                ),
                PathEl::LineTo(Point { x: 36.00, y: 14.00 }),
                PathEl::LineTo(Point { x: 12.00, y: 14.00 }),
                PathEl::LineTo(Point { x: 12.00, y: 38.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 16.93, y: 23.76 }),
                PathEl::LineTo(Point { x: 19.76, y: 20.93 }),
                PathEl::LineTo(Point { x: 24.00, y: 25.17 }),
                PathEl::LineTo(Point { x: 28.24, y: 20.93 }),
                PathEl::LineTo(Point { x: 31.07, y: 23.76 }),
                PathEl::LineTo(Point { x: 26.83, y: 28.00 }),
                PathEl::LineTo(Point { x: 31.07, y: 32.24 }),
                PathEl::LineTo(Point { x: 28.24, y: 35.07 }),
                PathEl::LineTo(Point { x: 24.00, y: 30.83 }),
                PathEl::LineTo(Point { x: 19.76, y: 35.07 }),
                PathEl::LineTo(Point { x: 16.93, y: 32.24 }),
                PathEl::LineTo(Point { x: 21.17, y: 28.00 }),
                PathEl::LineTo(Point { x: 16.93, y: 23.76 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 31.00, y: 8.00 }),
                PathEl::LineTo(Point { x: 29.00, y: 6.00 }),
                PathEl::LineTo(Point { x: 19.00, y: 6.00 }),
                PathEl::LineTo(Point { x: 17.00, y: 8.00 }),
                PathEl::LineTo(Point { x: 10.00, y: 8.00 }),
                PathEl::LineTo(Point { x: 10.00, y: 12.00 }),
                PathEl::LineTo(Point { x: 38.00, y: 12.00 }),
                PathEl::LineTo(Point { x: 38.00, y: 8.00 }),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct RadioButtonUnchecked {
    size: f64,
    color: Color,
}

impl RadioButtonUnchecked {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for RadioButtonUnchecked {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 24.00, y: 4.00 }),
                PathEl::CurveTo(
                    Point { x: 12.95, y: 4.00 },
                    Point { x: 4.00, y: 12.95 },
                    Point { x: 4.00, y: 24.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 4.00, y: 35.05 },
                    Point { x: 12.95, y: 44.00 },
                    Point { x: 24.00, y: 44.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 35.05, y: 44.00 },
                    Point { x: 44.00, y: 35.05 },
                    Point { x: 44.00, y: 24.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 44.00, y: 12.95 },
                    Point { x: 35.05, y: 4.00 },
                    Point { x: 24.00, y: 4.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 24.00, y: 40.00 }),
                PathEl::CurveTo(
                    Point { x: 15.16, y: 40.00 },
                    Point { x: 8.00, y: 32.84 },
                    Point { x: 8.00, y: 24.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 8.00, y: 15.16 },
                    Point { x: 15.16, y: 8.00 },
                    Point { x: 24.00, y: 8.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 32.84, y: 8.00 },
                    Point { x: 40.00, y: 15.16 },
                    Point { x: 40.00, y: 24.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 40.00, y: 32.84 },
                    Point { x: 32.84, y: 40.00 },
                    Point { x: 24.00, y: 40.00 },
                ),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct GroupWork {
    size: f64,
    color: Color,
}

impl GroupWork {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for GroupWork {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 24.00, y: 4.00 }),
                PathEl::CurveTo(
                    Point { x: 12.95, y: 4.00 },
                    Point { x: 4.00, y: 12.95 },
                    Point { x: 4.00, y: 24.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 4.00, y: 35.04 },
                    Point { x: 12.95, y: 44.00 },
                    Point { x: 24.00, y: 44.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 35.05, y: 44.00 },
                    Point { x: 44.00, y: 35.04 },
                    Point { x: 44.00, y: 24.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 44.00, y: 12.95 },
                    Point { x: 35.05, y: 4.00 },
                    Point { x: 24.00, y: 4.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 16.00, y: 35.00 }),
                PathEl::CurveTo(
                    Point { x: 13.24, y: 35.00 },
                    Point { x: 11.00, y: 32.76 },
                    Point { x: 11.00, y: 30.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 11.00, y: 27.24 },
                    Point { x: 13.24, y: 25.00 },
                    Point { x: 16.00, y: 25.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 18.76, y: 25.00 },
                    Point { x: 21.00, y: 27.24 },
                    Point { x: 21.00, y: 30.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 21.00, y: 32.76 },
                    Point { x: 18.76, y: 35.00 },
                    Point { x: 16.00, y: 35.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 19.00, y: 16.00 }),
                PathEl::CurveTo(
                    Point { x: 19.00, y: 13.24 },
                    Point { x: 21.24, y: 11.00 },
                    Point { x: 24.00, y: 11.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 26.76, y: 11.00 },
                    Point { x: 29.00, y: 13.24 },
                    Point { x: 29.00, y: 16.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 29.00, y: 18.76 },
                    Point { x: 26.76, y: 21.00 },
                    Point { x: 24.00, y: 21.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 21.24, y: 21.00 },
                    Point { x: 19.00, y: 18.76 },
                    Point { x: 19.00, y: 16.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 32.00, y: 35.00 }),
                PathEl::CurveTo(
                    Point { x: 29.24, y: 35.00 },
                    Point { x: 27.00, y: 32.76 },
                    Point { x: 27.00, y: 30.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 27.00, y: 27.24 },
                    Point { x: 29.24, y: 25.00 },
                    Point { x: 32.00, y: 25.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 34.76, y: 25.00 },
                    Point { x: 37.00, y: 27.24 },
                    Point { x: 37.00, y: 30.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 37.00, y: 32.76 },
                    Point { x: 34.76, y: 35.00 },
                    Point { x: 32.00, y: 35.00 },
                ),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct DirectionsTransit {
    size: f64,
    color: Color,
}

impl DirectionsTransit {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for DirectionsTransit {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 24.00, y: 4.00 }),
                PathEl::CurveTo(
                    Point { x: 15.16, y: 4.00 },
                    Point { x: 8.00, y: 5.00 },
                    Point { x: 8.00, y: 12.00 },
                ),
                PathEl::LineTo(Point { x: 8.00, y: 31.00 }),
                PathEl::CurveTo(
                    Point { x: 8.00, y: 34.87 },
                    Point { x: 11.14, y: 38.00 },
                    Point { x: 15.00, y: 38.00 },
                ),
                PathEl::LineTo(Point { x: 12.00, y: 41.00 }),
                PathEl::LineTo(Point { x: 12.00, y: 42.00 }),
                PathEl::LineTo(Point { x: 36.00, y: 42.00 }),
                PathEl::LineTo(Point { x: 36.00, y: 41.00 }),
                PathEl::LineTo(Point { x: 33.00, y: 38.00 }),
                PathEl::CurveTo(
                    Point { x: 36.87, y: 38.00 },
                    Point { x: 40.00, y: 34.87 },
                    Point { x: 40.00, y: 31.00 },
                ),
                PathEl::LineTo(Point { x: 40.00, y: 12.00 }),
                PathEl::CurveTo(
                    Point { x: 40.00, y: 5.00 },
                    Point { x: 32.84, y: 4.00 },
                    Point { x: 24.00, y: 4.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 15.00, y: 34.00 }),
                PathEl::CurveTo(
                    Point { x: 13.34, y: 34.00 },
                    Point { x: 12.00, y: 32.66 },
                    Point { x: 12.00, y: 31.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 12.00, y: 29.34 },
                    Point { x: 13.34, y: 28.00 },
                    Point { x: 15.00, y: 28.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 16.66, y: 28.00 },
                    Point { x: 18.00, y: 29.34 },
                    Point { x: 18.00, y: 31.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 18.00, y: 32.66 },
                    Point { x: 16.66, y: 34.00 },
                    Point { x: 15.00, y: 34.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 22.00, y: 22.00 }),
                PathEl::LineTo(Point { x: 12.00, y: 22.00 }),
                PathEl::LineTo(Point { x: 12.00, y: 12.00 }),
                PathEl::LineTo(Point { x: 22.00, y: 12.00 }),
                PathEl::LineTo(Point { x: 22.00, y: 22.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 33.00, y: 34.00 }),
                PathEl::CurveTo(
                    Point { x: 31.34, y: 34.00 },
                    Point { x: 30.00, y: 32.66 },
                    Point { x: 30.00, y: 31.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 30.00, y: 29.34 },
                    Point { x: 31.34, y: 28.00 },
                    Point { x: 33.00, y: 28.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 34.66, y: 28.00 },
                    Point { x: 36.00, y: 29.34 },
                    Point { x: 36.00, y: 31.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 36.00, y: 32.66 },
                    Point { x: 34.66, y: 34.00 },
                    Point { x: 33.00, y: 34.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 36.00, y: 22.00 }),
                PathEl::LineTo(Point { x: 26.00, y: 22.00 }),
                PathEl::LineTo(Point { x: 26.00, y: 12.00 }),
                PathEl::LineTo(Point { x: 36.00, y: 12.00 }),
                PathEl::LineTo(Point { x: 36.00, y: 22.00 }),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct CompareArrows {
    size: f64,
    color: Color,
}

impl CompareArrows {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for CompareArrows {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 18.02, y: 28.00 }),
                PathEl::LineTo(Point { x: 4.00, y: 28.00 }),
                PathEl::LineTo(Point { x: 4.00, y: 32.00 }),
                PathEl::LineTo(Point { x: 18.02, y: 32.00 }),
                PathEl::LineTo(Point { x: 18.02, y: 38.00 }),
                PathEl::LineTo(Point { x: 26.00, y: 30.00 }),
                PathEl::LineTo(Point { x: 18.02, y: 22.00 }),
                PathEl::LineTo(Point { x: 18.02, y: 28.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 29.98, y: 26.00 }),
                PathEl::LineTo(Point { x: 29.98, y: 20.00 }),
                PathEl::LineTo(Point { x: 44.00, y: 20.00 }),
                PathEl::LineTo(Point { x: 44.00, y: 16.00 }),
                PathEl::LineTo(Point { x: 29.98, y: 16.00 }),
                PathEl::LineTo(Point { x: 29.98, y: 10.00 }),
                PathEl::LineTo(Point { x: 22.00, y: 18.00 }),
                PathEl::LineTo(Point { x: 29.98, y: 26.00 }),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct Crop32 {
    size: f64,
    color: Color,
}

impl Crop32 {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for Crop32 {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 38.00, y: 8.00 }),
                PathEl::LineTo(Point { x: 10.00, y: 8.00 }),
                PathEl::CurveTo(
                    Point { x: 7.79, y: 8.00 },
                    Point { x: 6.00, y: 9.79 },
                    Point { x: 6.00, y: 12.00 },
                ),
                PathEl::LineTo(Point { x: 6.00, y: 36.00 }),
                PathEl::CurveTo(
                    Point { x: 6.00, y: 38.21 },
                    Point { x: 7.79, y: 40.00 },
                    Point { x: 10.00, y: 40.00 },
                ),
                PathEl::LineTo(Point { x: 38.00, y: 40.00 }),
                PathEl::CurveTo(
                    Point { x: 40.21, y: 40.00 },
                    Point { x: 42.00, y: 38.21 },
                    Point { x: 42.00, y: 36.00 },
                ),
                PathEl::LineTo(Point { x: 42.00, y: 12.00 }),
                PathEl::CurveTo(
                    Point { x: 42.00, y: 9.79 },
                    Point { x: 40.21, y: 8.00 },
                    Point { x: 38.00, y: 8.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 38.00, y: 36.00 }),
                PathEl::LineTo(Point { x: 10.00, y: 36.00 }),
                PathEl::LineTo(Point { x: 10.00, y: 12.00 }),
                PathEl::LineTo(Point { x: 38.00, y: 12.00 }),
                PathEl::LineTo(Point { x: 38.00, y: 36.00 }),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct Theaters {
    size: f64,
    color: Color,
}

impl Theaters {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for Theaters {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 36.00, y: 6.00 }),
                PathEl::LineTo(Point { x: 36.00, y: 10.00 }),
                PathEl::LineTo(Point { x: 32.00, y: 10.00 }),
                PathEl::LineTo(Point { x: 32.00, y: 6.00 }),
                PathEl::LineTo(Point { x: 16.00, y: 6.00 }),
                PathEl::LineTo(Point { x: 16.00, y: 10.00 }),
                PathEl::LineTo(Point { x: 12.00, y: 10.00 }),
                PathEl::LineTo(Point { x: 12.00, y: 6.00 }),
                PathEl::LineTo(Point { x: 8.00, y: 6.00 }),
                PathEl::LineTo(Point { x: 8.00, y: 42.00 }),
                PathEl::LineTo(Point { x: 12.00, y: 42.00 }),
                PathEl::LineTo(Point { x: 12.00, y: 38.00 }),
                PathEl::LineTo(Point { x: 16.00, y: 38.00 }),
                PathEl::LineTo(Point { x: 16.00, y: 42.00 }),
                PathEl::LineTo(Point { x: 32.00, y: 42.00 }),
                PathEl::LineTo(Point { x: 32.00, y: 38.00 }),
                PathEl::LineTo(Point { x: 36.00, y: 38.00 }),
                PathEl::LineTo(Point { x: 36.00, y: 42.00 }),
                PathEl::LineTo(Point { x: 40.00, y: 42.00 }),
                PathEl::LineTo(Point { x: 40.00, y: 6.00 }),
                PathEl::LineTo(Point { x: 36.00, y: 6.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 16.00, y: 34.00 }),
                PathEl::LineTo(Point { x: 12.00, y: 34.00 }),
                PathEl::LineTo(Point { x: 12.00, y: 30.00 }),
                PathEl::LineTo(Point { x: 16.00, y: 30.00 }),
                PathEl::LineTo(Point { x: 16.00, y: 34.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 16.00, y: 26.00 }),
                PathEl::LineTo(Point { x: 12.00, y: 26.00 }),
                PathEl::LineTo(Point { x: 12.00, y: 22.00 }),
                PathEl::LineTo(Point { x: 16.00, y: 22.00 }),
                PathEl::LineTo(Point { x: 16.00, y: 26.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 16.00, y: 18.00 }),
                PathEl::LineTo(Point { x: 12.00, y: 18.00 }),
                PathEl::LineTo(Point { x: 12.00, y: 14.00 }),
                PathEl::LineTo(Point { x: 16.00, y: 14.00 }),
                PathEl::LineTo(Point { x: 16.00, y: 18.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 36.00, y: 34.00 }),
                PathEl::LineTo(Point { x: 32.00, y: 34.00 }),
                PathEl::LineTo(Point { x: 32.00, y: 30.00 }),
                PathEl::LineTo(Point { x: 36.00, y: 30.00 }),
                PathEl::LineTo(Point { x: 36.00, y: 34.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 36.00, y: 26.00 }),
                PathEl::LineTo(Point { x: 32.00, y: 26.00 }),
                PathEl::LineTo(Point { x: 32.00, y: 22.00 }),
                PathEl::LineTo(Point { x: 36.00, y: 22.00 }),
                PathEl::LineTo(Point { x: 36.00, y: 26.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 36.00, y: 18.00 }),
                PathEl::LineTo(Point { x: 32.00, y: 18.00 }),
                PathEl::LineTo(Point { x: 32.00, y: 14.00 }),
                PathEl::LineTo(Point { x: 36.00, y: 14.00 }),
                PathEl::LineTo(Point { x: 36.00, y: 18.00 }),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct PregnantWoman {
    size: f64,
    color: Color,
}

impl PregnantWoman {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for PregnantWoman {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 18.00, y: 8.00 }),
                PathEl::CurveTo(
                    Point { x: 18.00, y: 5.78 },
                    Point { x: 19.78, y: 4.00 },
                    Point { x: 22.00, y: 4.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 24.22, y: 4.00 },
                    Point { x: 26.00, y: 5.78 },
                    Point { x: 26.00, y: 8.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 26.00, y: 10.22 },
                    Point { x: 24.22, y: 12.00 },
                    Point { x: 22.00, y: 12.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 19.78, y: 12.00 },
                    Point { x: 18.00, y: 10.22 },
                    Point { x: 18.00, y: 8.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 32.00, y: 26.00 }),
                PathEl::CurveTo(
                    Point { x: 31.98, y: 23.31 },
                    Point { x: 30.34, y: 20.98 },
                    Point { x: 28.00, y: 20.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 28.00, y: 16.69 },
                    Point { x: 25.31, y: 14.00 },
                    Point { x: 22.00, y: 14.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 18.69, y: 14.00 },
                    Point { x: 16.00, y: 16.69 },
                    Point { x: 16.00, y: 20.00 },
                ),
                PathEl::LineTo(Point { x: 16.00, y: 34.00 }),
                PathEl::LineTo(Point { x: 20.00, y: 34.00 }),
                PathEl::LineTo(Point { x: 20.00, y: 44.00 }),
                PathEl::LineTo(Point { x: 26.00, y: 44.00 }),
                PathEl::LineTo(Point { x: 26.00, y: 34.00 }),
                PathEl::LineTo(Point { x: 32.00, y: 34.00 }),
                PathEl::LineTo(Point { x: 32.00, y: 26.00 }),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct StayPrimaryPortrait {
    size: f64,
    color: Color,
}

impl StayPrimaryPortrait {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for StayPrimaryPortrait {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 34.00, y: 2.02 }),
                PathEl::LineTo(Point { x: 14.00, y: 2.00 }),
                PathEl::CurveTo(
                    Point { x: 11.79, y: 2.00 },
                    Point { x: 10.02, y: 3.79 },
                    Point { x: 10.02, y: 6.00 },
                ),
                PathEl::LineTo(Point { x: 10.02, y: 42.00 }),
                PathEl::CurveTo(
                    Point { x: 10.02, y: 44.21 },
                    Point { x: 11.79, y: 46.00 },
                    Point { x: 14.00, y: 46.00 },
                ),
                PathEl::LineTo(Point { x: 34.00, y: 46.00 }),
                PathEl::CurveTo(
                    Point { x: 36.21, y: 46.00 },
                    Point { x: 38.00, y: 44.21 },
                    Point { x: 38.00, y: 42.00 },
                ),
                PathEl::LineTo(Point { x: 38.00, y: 6.00 }),
                PathEl::CurveTo(
                    Point { x: 38.00, y: 3.79 },
                    Point { x: 36.21, y: 2.02 },
                    Point { x: 34.00, y: 2.02 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 34.00, y: 38.00 }),
                PathEl::LineTo(Point { x: 14.00, y: 38.00 }),
                PathEl::LineTo(Point { x: 14.00, y: 10.00 }),
                PathEl::LineTo(Point { x: 34.00, y: 10.00 }),
                PathEl::LineTo(Point { x: 34.00, y: 38.00 }),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct ModeEdit {
    size: f64,
    color: Color,
}

impl ModeEdit {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for ModeEdit {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 6.00, y: 34.50 }),
                PathEl::LineTo(Point { x: 6.00, y: 42.00 }),
                PathEl::LineTo(Point { x: 13.50, y: 42.00 }),
                PathEl::LineTo(Point { x: 35.63, y: 19.87 }),
                PathEl::LineTo(Point { x: 28.13, y: 12.37 }),
                PathEl::LineTo(Point { x: 6.00, y: 34.50 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 41.41, y: 14.09 }),
                PathEl::CurveTo(
                    Point { x: 42.19, y: 13.31 },
                    Point { x: 42.19, y: 12.04 },
                    Point { x: 41.41, y: 11.26 },
                ),
                PathEl::LineTo(Point { x: 36.74, y: 6.59 }),
                PathEl::CurveTo(
                    Point { x: 35.96, y: 5.81 },
                    Point { x: 34.69, y: 5.81 },
                    Point { x: 33.91, y: 6.59 },
                ),
                PathEl::LineTo(Point { x: 30.25, y: 10.25 }),
                PathEl::LineTo(Point { x: 37.75, y: 17.75 }),
                PathEl::LineTo(Point { x: 41.41, y: 14.09 }),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct BorderOuter {
    size: f64,
    color: Color,
}

impl BorderOuter {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for BorderOuter {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 26.00, y: 14.00 }),
                PathEl::LineTo(Point { x: 22.00, y: 14.00 }),
                PathEl::LineTo(Point { x: 22.00, y: 18.00 }),
                PathEl::LineTo(Point { x: 26.00, y: 18.00 }),
                PathEl::LineTo(Point { x: 26.00, y: 14.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 26.00, y: 22.00 }),
                PathEl::LineTo(Point { x: 22.00, y: 22.00 }),
                PathEl::LineTo(Point { x: 22.00, y: 26.00 }),
                PathEl::LineTo(Point { x: 26.00, y: 26.00 }),
                PathEl::LineTo(Point { x: 26.00, y: 22.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 34.00, y: 22.00 }),
                PathEl::LineTo(Point { x: 30.00, y: 22.00 }),
                PathEl::LineTo(Point { x: 30.00, y: 26.00 }),
                PathEl::LineTo(Point { x: 34.00, y: 26.00 }),
                PathEl::LineTo(Point { x: 34.00, y: 22.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 6.00, y: 6.00 }),
                PathEl::LineTo(Point { x: 6.00, y: 42.00 }),
                PathEl::LineTo(Point { x: 42.00, y: 42.00 }),
                PathEl::LineTo(Point { x: 42.00, y: 6.00 }),
                PathEl::LineTo(Point { x: 6.00, y: 6.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 38.00, y: 38.00 }),
                PathEl::LineTo(Point { x: 10.00, y: 38.00 }),
                PathEl::LineTo(Point { x: 10.00, y: 10.00 }),
                PathEl::LineTo(Point { x: 38.00, y: 10.00 }),
                PathEl::LineTo(Point { x: 38.00, y: 38.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 26.00, y: 30.00 }),
                PathEl::LineTo(Point { x: 22.00, y: 30.00 }),
                PathEl::LineTo(Point { x: 22.00, y: 34.00 }),
                PathEl::LineTo(Point { x: 26.00, y: 34.00 }),
                PathEl::LineTo(Point { x: 26.00, y: 30.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 18.00, y: 22.00 }),
                PathEl::LineTo(Point { x: 14.00, y: 22.00 }),
                PathEl::LineTo(Point { x: 14.00, y: 26.00 }),
                PathEl::LineTo(Point { x: 18.00, y: 26.00 }),
                PathEl::LineTo(Point { x: 18.00, y: 22.00 }),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct Straighten {
    size: f64,
    color: Color,
}

impl Straighten {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for Straighten {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 42.00, y: 12.00 }),
                PathEl::LineTo(Point { x: 6.00, y: 12.00 }),
                PathEl::CurveTo(
                    Point { x: 3.79, y: 12.00 },
                    Point { x: 2.00, y: 13.79 },
                    Point { x: 2.00, y: 16.00 },
                ),
                PathEl::LineTo(Point { x: 2.00, y: 32.00 }),
                PathEl::CurveTo(
                    Point { x: 2.00, y: 34.21 },
                    Point { x: 3.79, y: 36.00 },
                    Point { x: 6.00, y: 36.00 },
                ),
                PathEl::LineTo(Point { x: 42.00, y: 36.00 }),
                PathEl::CurveTo(
                    Point { x: 44.21, y: 36.00 },
                    Point { x: 46.00, y: 34.21 },
                    Point { x: 46.00, y: 32.00 },
                ),
                PathEl::LineTo(Point { x: 46.00, y: 16.00 }),
                PathEl::CurveTo(
                    Point { x: 46.00, y: 13.79 },
                    Point { x: 44.21, y: 12.00 },
                    Point { x: 42.00, y: 12.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 42.00, y: 32.00 }),
                PathEl::LineTo(Point { x: 6.00, y: 32.00 }),
                PathEl::LineTo(Point { x: 6.00, y: 16.00 }),
                PathEl::LineTo(Point { x: 10.00, y: 16.00 }),
                PathEl::LineTo(Point { x: 10.00, y: 24.00 }),
                PathEl::LineTo(Point { x: 14.00, y: 24.00 }),
                PathEl::LineTo(Point { x: 14.00, y: 16.00 }),
                PathEl::LineTo(Point { x: 18.00, y: 16.00 }),
                PathEl::LineTo(Point { x: 18.00, y: 24.00 }),
                PathEl::LineTo(Point { x: 22.00, y: 24.00 }),
                PathEl::LineTo(Point { x: 22.00, y: 16.00 }),
                PathEl::LineTo(Point { x: 26.00, y: 16.00 }),
                PathEl::LineTo(Point { x: 26.00, y: 24.00 }),
                PathEl::LineTo(Point { x: 30.00, y: 24.00 }),
                PathEl::LineTo(Point { x: 30.00, y: 16.00 }),
                PathEl::LineTo(Point { x: 34.00, y: 16.00 }),
                PathEl::LineTo(Point { x: 34.00, y: 24.00 }),
                PathEl::LineTo(Point { x: 38.00, y: 24.00 }),
                PathEl::LineTo(Point { x: 38.00, y: 16.00 }),
                PathEl::LineTo(Point { x: 42.00, y: 16.00 }),
                PathEl::LineTo(Point { x: 42.00, y: 32.00 }),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct Home {
    size: f64,
    color: Color,
}

impl Home {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for Home {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 20.00, y: 40.00 }),
                PathEl::LineTo(Point { x: 20.00, y: 28.00 }),
                PathEl::LineTo(Point { x: 28.00, y: 28.00 }),
                PathEl::LineTo(Point { x: 28.00, y: 40.00 }),
                PathEl::LineTo(Point { x: 38.00, y: 40.00 }),
                PathEl::LineTo(Point { x: 38.00, y: 24.00 }),
                PathEl::LineTo(Point { x: 44.00, y: 24.00 }),
                PathEl::LineTo(Point { x: 24.00, y: 6.00 }),
                PathEl::LineTo(Point { x: 4.00, y: 24.00 }),
                PathEl::LineTo(Point { x: 10.00, y: 24.00 }),
                PathEl::LineTo(Point { x: 10.00, y: 40.00 }),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct SignalCellularConnectedNoInternet1Bar {
    size: f64,
    color: Color,
}

impl SignalCellularConnectedNoInternet1Bar {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for SignalCellularConnectedNoInternet1Bar {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 44.00, y: 16.00 }),
                PathEl::LineTo(Point { x: 44.00, y: 4.00 }),
                PathEl::LineTo(Point { x: 4.00, y: 44.00 }),
                PathEl::LineTo(Point { x: 36.00, y: 44.00 }),
                PathEl::LineTo(Point { x: 36.00, y: 16.00 }),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 40.00, y: 20.00 }),
                PathEl::LineTo(Point { x: 40.00, y: 36.00 }),
                PathEl::LineTo(Point { x: 44.00, y: 36.00 }),
                PathEl::LineTo(Point { x: 44.00, y: 20.00 }),
                PathEl::LineTo(Point { x: 40.00, y: 20.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 24.00, y: 44.00 }),
                PathEl::LineTo(Point { x: 24.00, y: 24.00 }),
                PathEl::LineTo(Point { x: 4.00, y: 44.00 }),
                PathEl::LineTo(Point { x: 24.00, y: 44.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 40.00, y: 44.00 }),
                PathEl::LineTo(Point { x: 44.00, y: 44.00 }),
                PathEl::LineTo(Point { x: 44.00, y: 40.00 }),
                PathEl::LineTo(Point { x: 40.00, y: 40.00 }),
                PathEl::LineTo(Point { x: 40.00, y: 44.00 }),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct Gamepad {
    size: f64,
    color: Color,
}

impl Gamepad {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for Gamepad {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 30.00, y: 15.00 }),
                PathEl::LineTo(Point { x: 30.00, y: 4.00 }),
                PathEl::LineTo(Point { x: 18.00, y: 4.00 }),
                PathEl::LineTo(Point { x: 18.00, y: 15.00 }),
                PathEl::LineTo(Point { x: 24.00, y: 21.00 }),
                PathEl::LineTo(Point { x: 30.00, y: 15.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 15.00, y: 18.00 }),
                PathEl::LineTo(Point { x: 4.00, y: 18.00 }),
                PathEl::LineTo(Point { x: 4.00, y: 30.00 }),
                PathEl::LineTo(Point { x: 15.00, y: 30.00 }),
                PathEl::LineTo(Point { x: 21.00, y: 24.00 }),
                PathEl::LineTo(Point { x: 15.00, y: 18.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 18.00, y: 33.00 }),
                PathEl::LineTo(Point { x: 18.00, y: 44.00 }),
                PathEl::LineTo(Point { x: 30.00, y: 44.00 }),
                PathEl::LineTo(Point { x: 30.00, y: 33.00 }),
                PathEl::LineTo(Point { x: 24.00, y: 27.00 }),
                PathEl::LineTo(Point { x: 18.00, y: 33.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 33.00, y: 18.00 }),
                PathEl::LineTo(Point { x: 27.00, y: 24.00 }),
                PathEl::LineTo(Point { x: 33.00, y: 30.00 }),
                PathEl::LineTo(Point { x: 44.00, y: 30.00 }),
                PathEl::LineTo(Point { x: 44.00, y: 18.00 }),
                PathEl::LineTo(Point { x: 33.00, y: 18.00 }),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct Scanner {
    size: f64,
    color: Color,
}

impl Scanner {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for Scanner {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 16.00, y: 34.00 }),
                PathEl::LineTo(Point { x: 38.00, y: 34.00 }),
                PathEl::LineTo(Point { x: 38.00, y: 38.00 }),
                PathEl::LineTo(Point { x: 16.00, y: 38.00 }),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 39.52, y: 20.30 }),
                PathEl::LineTo(Point { x: 8.37, y: 9.00 }),
                PathEl::LineTo(Point { x: 7.00, y: 12.76 }),
                PathEl::LineTo(Point { x: 35.26, y: 23.00 }),
                PathEl::LineTo(Point { x: 10.00, y: 23.00 }),
                PathEl::CurveTo(
                    Point { x: 7.79, y: 23.00 },
                    Point { x: 6.00, y: 24.79 },
                    Point { x: 6.00, y: 27.00 },
                ),
                PathEl::LineTo(Point { x: 6.00, y: 35.00 }),
                PathEl::CurveTo(
                    Point { x: 6.00, y: 37.21 },
                    Point { x: 7.79, y: 39.00 },
                    Point { x: 10.00, y: 39.00 },
                ),
                PathEl::LineTo(Point { x: 38.00, y: 39.00 }),
                PathEl::CurveTo(
                    Point { x: 40.21, y: 39.00 },
                    Point { x: 42.00, y: 37.21 },
                    Point { x: 42.00, y: 35.00 },
                ),
                PathEl::LineTo(Point { x: 42.00, y: 24.00 }),
                PathEl::CurveTo(
                    Point { x: 42.00, y: 22.33 },
                    Point { x: 40.97, y: 20.90 },
                    Point { x: 39.52, y: 20.30 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 14.00, y: 33.00 }),
                PathEl::LineTo(Point { x: 10.00, y: 33.00 }),
                PathEl::LineTo(Point { x: 10.00, y: 29.00 }),
                PathEl::LineTo(Point { x: 14.00, y: 29.00 }),
                PathEl::LineTo(Point { x: 14.00, y: 33.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 38.00, y: 33.00 }),
                PathEl::LineTo(Point { x: 18.00, y: 33.00 }),
                PathEl::LineTo(Point { x: 18.00, y: 29.00 }),
                PathEl::LineTo(Point { x: 38.00, y: 29.00 }),
                PathEl::LineTo(Point { x: 38.00, y: 33.00 }),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct BluetoothConnected {
    size: f64,
    color: Color,
}

impl BluetoothConnected {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for BluetoothConnected {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 14.00, y: 24.00 }),
                PathEl::LineTo(Point { x: 10.00, y: 20.00 }),
                PathEl::LineTo(Point { x: 6.00, y: 24.00 }),
                PathEl::LineTo(Point { x: 10.00, y: 28.00 }),
                PathEl::LineTo(Point { x: 14.00, y: 24.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 35.41, y: 15.41 }),
                PathEl::LineTo(Point { x: 24.00, y: 4.00 }),
                PathEl::LineTo(Point { x: 22.00, y: 4.00 }),
                PathEl::LineTo(Point { x: 22.00, y: 19.17 }),
                PathEl::LineTo(Point { x: 12.83, y: 10.00 }),
                PathEl::LineTo(Point { x: 10.00, y: 12.83 }),
                PathEl::LineTo(Point { x: 21.17, y: 24.00 }),
                PathEl::LineTo(Point { x: 10.00, y: 35.17 }),
                PathEl::LineTo(Point { x: 12.83, y: 38.00 }),
                PathEl::LineTo(Point { x: 22.00, y: 28.83 }),
                PathEl::LineTo(Point { x: 22.00, y: 44.00 }),
                PathEl::LineTo(Point { x: 24.00, y: 44.00 }),
                PathEl::LineTo(Point { x: 35.41, y: 32.59 }),
                PathEl::LineTo(Point { x: 26.83, y: 24.00 }),
                PathEl::LineTo(Point { x: 35.41, y: 15.41 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 26.00, y: 11.66 }),
                PathEl::LineTo(Point { x: 29.76, y: 15.42 }),
                PathEl::LineTo(Point { x: 26.00, y: 19.17 }),
                PathEl::LineTo(Point { x: 26.00, y: 11.66 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 29.76, y: 32.59 }),
                PathEl::LineTo(Point { x: 26.00, y: 36.34 }),
                PathEl::LineTo(Point { x: 26.00, y: 28.82 }),
                PathEl::LineTo(Point { x: 29.76, y: 32.59 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 38.00, y: 20.00 }),
                PathEl::LineTo(Point { x: 34.00, y: 24.00 }),
                PathEl::LineTo(Point { x: 38.00, y: 28.00 }),
                PathEl::LineTo(Point { x: 42.00, y: 24.00 }),
                PathEl::LineTo(Point { x: 38.00, y: 20.00 }),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct Crop54 {
    size: f64,
    color: Color,
}

impl Crop54 {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for Crop54 {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 38.00, y: 10.00 }),
                PathEl::LineTo(Point { x: 10.00, y: 10.00 }),
                PathEl::CurveTo(
                    Point { x: 7.79, y: 10.00 },
                    Point { x: 6.00, y: 11.79 },
                    Point { x: 6.00, y: 14.00 },
                ),
                PathEl::LineTo(Point { x: 6.00, y: 34.00 }),
                PathEl::CurveTo(
                    Point { x: 6.00, y: 36.21 },
                    Point { x: 7.79, y: 38.00 },
                    Point { x: 10.00, y: 38.00 },
                ),
                PathEl::LineTo(Point { x: 38.00, y: 38.00 }),
                PathEl::CurveTo(
                    Point { x: 40.21, y: 38.00 },
                    Point { x: 42.00, y: 36.21 },
                    Point { x: 42.00, y: 34.00 },
                ),
                PathEl::LineTo(Point { x: 42.00, y: 14.00 }),
                PathEl::CurveTo(
                    Point { x: 42.00, y: 11.79 },
                    Point { x: 40.21, y: 10.00 },
                    Point { x: 38.00, y: 10.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 38.00, y: 34.00 }),
                PathEl::LineTo(Point { x: 10.00, y: 34.00 }),
                PathEl::LineTo(Point { x: 10.00, y: 14.00 }),
                PathEl::LineTo(Point { x: 38.00, y: 14.00 }),
                PathEl::LineTo(Point { x: 38.00, y: 34.00 }),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct StarBorder {
    size: f64,
    color: Color,
}

impl StarBorder {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for StarBorder {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 24.0, height / 24.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 22.00, y: 9.24 }),
                PathEl::LineTo(Point { x: 14.81, y: 8.62 }),
                PathEl::LineTo(Point { x: 12.00, y: 2.00 }),
                PathEl::LineTo(Point { x: 9.19, y: 8.63 }),
                PathEl::LineTo(Point { x: 2.00, y: 9.24 }),
                PathEl::LineTo(Point { x: 7.46, y: 13.97 }),
                PathEl::LineTo(Point { x: 5.82, y: 21.00 }),
                PathEl::LineTo(Point { x: 12.00, y: 17.27 }),
                PathEl::LineTo(Point { x: 18.18, y: 21.00 }),
                PathEl::LineTo(Point { x: 16.55, y: 13.97 }),
                PathEl::LineTo(Point { x: 22.00, y: 9.24 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 12.00, y: 15.40 }),
                PathEl::LineTo(Point { x: 8.24, y: 17.67 }),
                PathEl::LineTo(Point { x: 9.24, y: 13.39 }),
                PathEl::LineTo(Point { x: 5.92, y: 10.51 }),
                PathEl::LineTo(Point { x: 10.30, y: 10.13 }),
                PathEl::LineTo(Point { x: 12.00, y: 6.10 }),
                PathEl::LineTo(Point { x: 13.71, y: 10.14 }),
                PathEl::LineTo(Point { x: 18.09, y: 10.52 }),
                PathEl::LineTo(Point { x: 14.77, y: 13.40 }),
                PathEl::LineTo(Point { x: 15.77, y: 17.68 }),
                PathEl::LineTo(Point { x: 12.00, y: 15.40 }),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct Replay30 {
    size: f64,
    color: Color,
}

impl Replay30 {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for Replay30 {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 24.00, y: 10.00 }),
                PathEl::LineTo(Point { x: 24.00, y: 2.00 }),
                PathEl::LineTo(Point { x: 14.00, y: 12.00 }),
                PathEl::LineTo(Point { x: 24.00, y: 22.00 }),
                PathEl::LineTo(Point { x: 24.00, y: 14.00 }),
                PathEl::CurveTo(
                    Point { x: 30.60, y: 14.00 },
                    Point { x: 36.00, y: 19.40 },
                    Point { x: 36.00, y: 26.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 36.00, y: 32.60 },
                    Point { x: 30.60, y: 38.00 },
                    Point { x: 24.00, y: 38.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 17.40, y: 38.00 },
                    Point { x: 12.00, y: 32.60 },
                    Point { x: 12.00, y: 26.00 },
                ),
                PathEl::LineTo(Point { x: 8.00, y: 26.00 }),
                PathEl::CurveTo(
                    Point { x: 8.00, y: 34.80 },
                    Point { x: 15.20, y: 42.00 },
                    Point { x: 24.00, y: 42.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 32.80, y: 42.00 },
                    Point { x: 40.00, y: 34.80 },
                    Point { x: 40.00, y: 26.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 40.00, y: 17.20 },
                    Point { x: 32.80, y: 10.00 },
                    Point { x: 24.00, y: 10.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 19.10, y: 27.00 }),
                PathEl::LineTo(Point { x: 20.00, y: 27.00 }),
                PathEl::CurveTo(
                    Point { x: 20.40, y: 27.00 },
                    Point { x: 20.70, y: 26.90 },
                    Point { x: 21.00, y: 26.70 },
                ),
                PathEl::CurveTo(
                    Point { x: 21.30, y: 26.50 },
                    Point { x: 21.30, y: 26.20 },
                    Point { x: 21.30, y: 25.80 },
                ),
                PathEl::CurveTo(
                    Point { x: 21.30, y: 25.60 },
                    Point { x: 21.30, y: 25.50 },
                    Point { x: 21.20, y: 25.40 },
                ),
                PathEl::CurveTo(
                    Point { x: 21.10, y: 25.30 },
                    Point { x: 21.10, y: 25.10 },
                    Point { x: 21.00, y: 25.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 20.90, y: 24.90 },
                    Point { x: 20.80, y: 24.80 },
                    Point { x: 20.60, y: 24.80 },
                ),
                PathEl::CurveTo(
                    Point { x: 20.40, y: 24.80 },
                    Point { x: 20.30, y: 24.70 },
                    Point { x: 20.10, y: 24.70 },
                ),
                PathEl::CurveTo(
                    Point { x: 19.90, y: 24.70 },
                    Point { x: 19.80, y: 24.70 },
                    Point { x: 19.70, y: 24.80 },
                ),
                PathEl::CurveTo(
                    Point { x: 19.60, y: 24.90 },
                    Point { x: 19.40, y: 24.90 },
                    Point { x: 19.30, y: 25.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 19.20, y: 25.10 },
                    Point { x: 19.10, y: 25.20 },
                    Point { x: 19.10, y: 25.30 },
                ),
                PathEl::CurveTo(
                    Point { x: 19.10, y: 25.40 },
                    Point { x: 19.00, y: 25.50 },
                    Point { x: 19.00, y: 25.70 },
                ),
                PathEl::LineTo(Point { x: 17.30, y: 25.70 }),
                PathEl::CurveTo(
                    Point { x: 17.30, y: 25.30 },
                    Point { x: 17.40, y: 25.00 },
                    Point { x: 17.50, y: 24.70 },
                ),
                PathEl::CurveTo(
                    Point { x: 17.60, y: 24.40 },
                    Point { x: 17.80, y: 24.20 },
                    Point { x: 18.10, y: 24.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 18.40, y: 23.80 },
                    Point { x: 18.60, y: 23.60 },
                    Point { x: 19.00, y: 23.50 },
                ),
                PathEl::CurveTo(
                    Point { x: 19.40, y: 23.40 },
                    Point { x: 19.70, y: 23.30 },
                    Point { x: 20.10, y: 23.30 },
                ),
                PathEl::CurveTo(
                    Point { x: 20.50, y: 23.30 },
                    Point { x: 20.90, y: 23.40 },
                    Point { x: 21.30, y: 23.50 },
                ),
                PathEl::CurveTo(
                    Point { x: 21.70, y: 23.60 },
                    Point { x: 22.00, y: 23.80 },
                    Point { x: 22.20, y: 24.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 22.40, y: 24.20 },
                    Point { x: 22.70, y: 24.50 },
                    Point { x: 22.80, y: 24.80 },
                ),
                PathEl::CurveTo(
                    Point { x: 22.90, y: 25.10 },
                    Point { x: 23.00, y: 25.50 },
                    Point { x: 23.00, y: 25.90 },
                ),
                PathEl::CurveTo(
                    Point { x: 23.00, y: 26.10 },
                    Point { x: 23.00, y: 26.30 },
                    Point { x: 22.90, y: 26.40 },
                ),
                PathEl::CurveTo(
                    Point { x: 22.80, y: 26.50 },
                    Point { x: 22.80, y: 26.70 },
                    Point { x: 22.60, y: 26.90 },
                ),
                PathEl::CurveTo(
                    Point { x: 22.40, y: 27.10 },
                    Point { x: 22.40, y: 27.20 },
                    Point { x: 22.20, y: 27.30 },
                ),
                PathEl::CurveTo(
                    Point { x: 22.00, y: 27.40 },
                    Point { x: 21.90, y: 27.50 },
                    Point { x: 21.60, y: 27.60 },
                ),
                PathEl::CurveTo(
                    Point { x: 22.10, y: 27.80 },
                    Point { x: 22.40, y: 28.00 },
                    Point { x: 22.70, y: 28.40 },
                ),
                PathEl::CurveTo(
                    Point { x: 23.00, y: 28.80 },
                    Point { x: 23.10, y: 29.20 },
                    Point { x: 23.10, y: 29.60 },
                ),
                PathEl::CurveTo(
                    Point { x: 23.10, y: 30.00 },
                    Point { x: 23.00, y: 30.40 },
                    Point { x: 22.90, y: 30.70 },
                ),
                PathEl::CurveTo(
                    Point { x: 22.80, y: 31.00 },
                    Point { x: 22.50, y: 31.30 },
                    Point { x: 22.30, y: 31.50 },
                ),
                PathEl::CurveTo(
                    Point { x: 22.10, y: 31.70 },
                    Point { x: 21.70, y: 31.90 },
                    Point { x: 21.30, y: 32.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 20.90, y: 32.10 },
                    Point { x: 20.50, y: 32.20 },
                    Point { x: 20.10, y: 32.20 },
                ),
                PathEl::CurveTo(
                    Point { x: 19.70, y: 32.20 },
                    Point { x: 19.40, y: 32.20 },
                    Point { x: 19.00, y: 32.10 },
                ),
                PathEl::CurveTo(
                    Point { x: 18.60, y: 32.00 },
                    Point { x: 18.30, y: 31.90 },
                    Point { x: 18.10, y: 31.60 },
                ),
                PathEl::CurveTo(
                    Point { x: 17.90, y: 31.30 },
                    Point { x: 17.60, y: 31.10 },
                    Point { x: 17.40, y: 30.80 },
                ),
                PathEl::CurveTo(
                    Point { x: 17.20, y: 30.50 },
                    Point { x: 17.20, y: 30.10 },
                    Point { x: 17.20, y: 29.70 },
                ),
                PathEl::LineTo(Point { x: 18.90, y: 29.70 }),
                PathEl::CurveTo(
                    Point { x: 18.90, y: 29.90 },
                    Point { x: 18.90, y: 30.00 },
                    Point { x: 19.00, y: 30.10 },
                ),
                PathEl::CurveTo(
                    Point { x: 19.10, y: 30.20 },
                    Point { x: 19.10, y: 30.30 },
                    Point { x: 19.30, y: 30.40 },
                ),
                PathEl::CurveTo(
                    Point { x: 19.50, y: 30.50 },
                    Point { x: 19.50, y: 30.60 },
                    Point { x: 19.70, y: 30.60 },
                ),
                PathEl::CurveTo(
                    Point { x: 19.90, y: 30.60 },
                    Point { x: 20.00, y: 30.70 },
                    Point { x: 20.20, y: 30.70 },
                ),
                PathEl::CurveTo(
                    Point { x: 20.40, y: 30.70 },
                    Point { x: 20.60, y: 30.70 },
                    Point { x: 20.70, y: 30.60 },
                ),
                PathEl::CurveTo(
                    Point { x: 20.80, y: 30.50 },
                    Point { x: 21.00, y: 30.50 },
                    Point { x: 21.10, y: 30.40 },
                ),
                PathEl::CurveTo(
                    Point { x: 21.20, y: 30.30 },
                    Point { x: 21.30, y: 30.20 },
                    Point { x: 21.40, y: 30.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 21.50, y: 29.80 },
                    Point { x: 21.50, y: 29.70 },
                    Point { x: 21.50, y: 29.50 },
                ),
                PathEl::CurveTo(
                    Point { x: 21.50, y: 29.30 },
                    Point { x: 21.50, y: 29.10 },
                    Point { x: 21.40, y: 28.90 },
                ),
                PathEl::CurveTo(
                    Point { x: 21.30, y: 28.70 },
                    Point { x: 21.20, y: 28.60 },
                    Point { x: 21.10, y: 28.50 },
                ),
                PathEl::CurveTo(
                    Point { x: 21.00, y: 28.40 },
                    Point { x: 20.80, y: 28.30 },
                    Point { x: 20.70, y: 28.30 },
                ),
                PathEl::CurveTo(
                    Point { x: 20.60, y: 28.30 },
                    Point { x: 20.30, y: 28.20 },
                    Point { x: 20.10, y: 28.20 },
                ),
                PathEl::LineTo(Point { x: 19.20, y: 28.20 }),
                PathEl::LineTo(Point { x: 19.20, y: 27.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 30.60, y: 28.50 }),
                PathEl::CurveTo(
                    Point { x: 30.60, y: 29.10 },
                    Point { x: 30.50, y: 29.70 },
                    Point { x: 30.40, y: 30.10 },
                ),
                PathEl::CurveTo(
                    Point { x: 30.30, y: 30.50 },
                    Point { x: 30.10, y: 30.90 },
                    Point { x: 29.80, y: 31.20 },
                ),
                PathEl::CurveTo(
                    Point { x: 29.50, y: 31.50 },
                    Point { x: 29.20, y: 31.70 },
                    Point { x: 28.90, y: 31.90 },
                ),
                PathEl::CurveTo(
                    Point { x: 28.60, y: 32.10 },
                    Point { x: 28.20, y: 32.10 },
                    Point { x: 27.70, y: 32.10 },
                ),
                PathEl::CurveTo(
                    Point { x: 27.20, y: 32.10 },
                    Point { x: 26.90, y: 32.00 },
                    Point { x: 26.50, y: 31.90 },
                ),
                PathEl::CurveTo(
                    Point { x: 26.10, y: 31.80 },
                    Point { x: 25.80, y: 31.50 },
                    Point { x: 25.60, y: 31.20 },
                ),
                PathEl::CurveTo(
                    Point { x: 25.40, y: 30.90 },
                    Point { x: 25.10, y: 30.50 },
                    Point { x: 25.00, y: 30.10 },
                ),
                PathEl::CurveTo(
                    Point { x: 24.90, y: 29.70 },
                    Point { x: 24.80, y: 29.10 },
                    Point { x: 24.80, y: 28.50 },
                ),
                PathEl::LineTo(Point { x: 24.80, y: 27.00 }),
                PathEl::CurveTo(
                    Point { x: 24.80, y: 26.40 },
                    Point { x: 24.90, y: 25.80 },
                    Point { x: 25.00, y: 25.40 },
                ),
                PathEl::CurveTo(
                    Point { x: 25.10, y: 25.00 },
                    Point { x: 25.30, y: 24.60 },
                    Point { x: 25.60, y: 24.30 },
                ),
                PathEl::CurveTo(
                    Point { x: 25.90, y: 24.00 },
                    Point { x: 26.20, y: 23.80 },
                    Point { x: 26.50, y: 23.60 },
                ),
                PathEl::CurveTo(
                    Point { x: 26.80, y: 23.40 },
                    Point { x: 27.20, y: 23.40 },
                    Point { x: 27.70, y: 23.40 },
                ),
                PathEl::CurveTo(
                    Point { x: 28.20, y: 23.40 },
                    Point { x: 28.50, y: 23.50 },
                    Point { x: 28.90, y: 23.60 },
                ),
                PathEl::CurveTo(
                    Point { x: 29.30, y: 23.70 },
                    Point { x: 29.60, y: 24.00 },
                    Point { x: 29.80, y: 24.30 },
                ),
                PathEl::CurveTo(
                    Point { x: 30.00, y: 24.60 },
                    Point { x: 30.30, y: 25.00 },
                    Point { x: 30.40, y: 25.40 },
                ),
                PathEl::CurveTo(
                    Point { x: 30.50, y: 25.80 },
                    Point { x: 30.60, y: 26.40 },
                    Point { x: 30.60, y: 27.00 },
                ),
                PathEl::LineTo(Point { x: 30.60, y: 28.50 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 28.90, y: 26.80 }),
                PathEl::CurveTo(
                    Point { x: 28.90, y: 26.40 },
                    Point { x: 28.90, y: 26.10 },
                    Point { x: 28.80, y: 25.80 },
                ),
                PathEl::CurveTo(
                    Point { x: 28.70, y: 25.50 },
                    Point { x: 28.70, y: 25.30 },
                    Point { x: 28.60, y: 25.20 },
                ),
                PathEl::CurveTo(
                    Point { x: 28.50, y: 25.10 },
                    Point { x: 28.40, y: 24.90 },
                    Point { x: 28.20, y: 24.90 },
                ),
                PathEl::CurveTo(
                    Point { x: 28.00, y: 24.90 },
                    Point { x: 27.90, y: 24.80 },
                    Point { x: 27.70, y: 24.80 },
                ),
                PathEl::CurveTo(
                    Point { x: 27.50, y: 24.80 },
                    Point { x: 27.30, y: 24.80 },
                    Point { x: 27.20, y: 24.90 },
                ),
                PathEl::CurveTo(
                    Point { x: 27.10, y: 25.00 },
                    Point { x: 26.90, y: 25.10 },
                    Point { x: 26.80, y: 25.20 },
                ),
                PathEl::CurveTo(
                    Point { x: 26.70, y: 25.30 },
                    Point { x: 26.60, y: 25.60 },
                    Point { x: 26.60, y: 25.80 },
                ),
                PathEl::CurveTo(
                    Point { x: 26.60, y: 26.00 },
                    Point { x: 26.50, y: 26.40 },
                    Point { x: 26.50, y: 26.80 },
                ),
                PathEl::LineTo(Point { x: 26.50, y: 28.70 }),
                PathEl::CurveTo(
                    Point { x: 26.50, y: 29.10 },
                    Point { x: 26.50, y: 29.40 },
                    Point { x: 26.60, y: 29.70 },
                ),
                PathEl::CurveTo(
                    Point { x: 26.70, y: 30.00 },
                    Point { x: 26.70, y: 30.20 },
                    Point { x: 26.80, y: 30.30 },
                ),
                PathEl::CurveTo(
                    Point { x: 26.90, y: 30.40 },
                    Point { x: 27.00, y: 30.60 },
                    Point { x: 27.20, y: 30.60 },
                ),
                PathEl::CurveTo(
                    Point { x: 27.40, y: 30.60 },
                    Point { x: 27.50, y: 30.70 },
                    Point { x: 27.70, y: 30.70 },
                ),
                PathEl::CurveTo(
                    Point { x: 27.90, y: 30.70 },
                    Point { x: 28.10, y: 30.70 },
                    Point { x: 28.20, y: 30.60 },
                ),
                PathEl::CurveTo(
                    Point { x: 28.30, y: 30.50 },
                    Point { x: 28.50, y: 30.40 },
                    Point { x: 28.60, y: 30.30 },
                ),
                PathEl::CurveTo(
                    Point { x: 28.70, y: 30.20 },
                    Point { x: 28.80, y: 29.90 },
                    Point { x: 28.80, y: 29.70 },
                ),
                PathEl::CurveTo(
                    Point { x: 28.80, y: 29.50 },
                    Point { x: 28.90, y: 29.10 },
                    Point { x: 28.90, y: 28.70 },
                ),
                PathEl::LineTo(Point { x: 28.90, y: 26.80 }),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct AirlineSeatLegroomExtra {
    size: f64,
    color: Color,
}

impl AirlineSeatLegroomExtra {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for AirlineSeatLegroomExtra {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 8.00, y: 24.00 }),
                PathEl::LineTo(Point { x: 8.00, y: 6.00 }),
                PathEl::LineTo(Point { x: 4.00, y: 6.00 }),
                PathEl::LineTo(Point { x: 4.00, y: 24.00 }),
                PathEl::CurveTo(
                    Point { x: 4.00, y: 29.52 },
                    Point { x: 8.48, y: 34.00 },
                    Point { x: 14.00, y: 34.00 },
                ),
                PathEl::LineTo(Point { x: 26.00, y: 34.00 }),
                PathEl::LineTo(Point { x: 26.00, y: 30.00 }),
                PathEl::LineTo(Point { x: 14.00, y: 30.00 }),
                PathEl::CurveTo(
                    Point { x: 10.69, y: 30.00 },
                    Point { x: 8.00, y: 27.31 },
                    Point { x: 8.00, y: 24.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 45.66, y: 34.47 }),
                PathEl::CurveTo(
                    Point { x: 44.91, y: 33.03 },
                    Point { x: 43.08, y: 32.53 },
                    Point { x: 41.60, y: 33.21 },
                ),
                PathEl::LineTo(Point { x: 39.41, y: 34.21 }),
                PathEl::LineTo(Point { x: 32.58, y: 20.26 }),
                PathEl::CurveTo(
                    Point { x: 31.91, y: 18.89 },
                    Point { x: 30.52, y: 18.02 },
                    Point { x: 29.00, y: 18.02 },
                ),
                PathEl::LineTo(Point { x: 22.00, y: 18.00 }),
                PathEl::LineTo(Point { x: 22.00, y: 6.00 }),
                PathEl::LineTo(Point { x: 10.00, y: 6.00 }),
                PathEl::LineTo(Point { x: 10.00, y: 22.00 }),
                PathEl::CurveTo(
                    Point { x: 10.00, y: 25.31 },
                    Point { x: 12.69, y: 28.00 },
                    Point { x: 16.00, y: 28.00 },
                ),
                PathEl::LineTo(Point { x: 30.00, y: 28.00 }),
                PathEl::LineTo(Point { x: 36.82, y: 42.00 }),
                PathEl::LineTo(Point { x: 44.25, y: 38.59 }),
                PathEl::CurveTo(
                    Point { x: 45.80, y: 37.88 },
                    Point { x: 46.46, y: 36.01 },
                    Point { x: 45.66, y: 34.47 },
                ),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct SettingsInputComponent {
    size: f64,
    color: Color,
}

impl SettingsInputComponent {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for SettingsInputComponent {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 10.00, y: 4.00 }),
                PathEl::CurveTo(
                    Point { x: 10.00, y: 2.90 },
                    Point { x: 9.11, y: 2.00 },
                    Point { x: 8.00, y: 2.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 6.89, y: 2.00 },
                    Point { x: 6.00, y: 2.90 },
                    Point { x: 6.00, y: 4.00 },
                ),
                PathEl::LineTo(Point { x: 6.00, y: 12.00 }),
                PathEl::LineTo(Point { x: 2.00, y: 12.00 }),
                PathEl::LineTo(Point { x: 2.00, y: 24.00 }),
                PathEl::LineTo(Point { x: 14.00, y: 24.00 }),
                PathEl::LineTo(Point { x: 14.00, y: 12.00 }),
                PathEl::LineTo(Point { x: 10.00, y: 12.00 }),
                PathEl::LineTo(Point { x: 10.00, y: 4.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 18.00, y: 32.00 }),
                PathEl::CurveTo(
                    Point { x: 18.00, y: 34.61 },
                    Point { x: 19.68, y: 36.81 },
                    Point { x: 22.00, y: 37.63 },
                ),
                PathEl::LineTo(Point { x: 22.00, y: 46.00 }),
                PathEl::LineTo(Point { x: 26.00, y: 46.00 }),
                PathEl::LineTo(Point { x: 26.00, y: 37.63 }),
                PathEl::CurveTo(
                    Point { x: 28.32, y: 36.80 },
                    Point { x: 30.00, y: 34.61 },
                    Point { x: 30.00, y: 32.00 },
                ),
                PathEl::LineTo(Point { x: 30.00, y: 28.00 }),
                PathEl::LineTo(Point { x: 18.00, y: 28.00 }),
                PathEl::LineTo(Point { x: 18.00, y: 32.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 2.00, y: 32.00 }),
                PathEl::CurveTo(
                    Point { x: 2.00, y: 34.61 },
                    Point { x: 3.68, y: 36.81 },
                    Point { x: 6.00, y: 37.63 },
                ),
                PathEl::LineTo(Point { x: 6.00, y: 46.00 }),
                PathEl::LineTo(Point { x: 10.00, y: 46.00 }),
                PathEl::LineTo(Point { x: 10.00, y: 37.63 }),
                PathEl::CurveTo(
                    Point { x: 12.32, y: 36.80 },
                    Point { x: 14.00, y: 34.61 },
                    Point { x: 14.00, y: 32.00 },
                ),
                PathEl::LineTo(Point { x: 14.00, y: 28.00 }),
                PathEl::LineTo(Point { x: 2.00, y: 28.00 }),
                PathEl::LineTo(Point { x: 2.00, y: 32.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 42.00, y: 12.00 }),
                PathEl::LineTo(Point { x: 42.00, y: 4.00 }),
                PathEl::CurveTo(
                    Point { x: 42.00, y: 2.90 },
                    Point { x: 41.11, y: 2.00 },
                    Point { x: 40.00, y: 2.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 38.89, y: 2.00 },
                    Point { x: 38.00, y: 2.90 },
                    Point { x: 38.00, y: 4.00 },
                ),
                PathEl::LineTo(Point { x: 38.00, y: 12.00 }),
                PathEl::LineTo(Point { x: 34.00, y: 12.00 }),
                PathEl::LineTo(Point { x: 34.00, y: 24.00 }),
                PathEl::LineTo(Point { x: 46.00, y: 24.00 }),
                PathEl::LineTo(Point { x: 46.00, y: 12.00 }),
                PathEl::LineTo(Point { x: 42.00, y: 12.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 26.00, y: 4.00 }),
                PathEl::CurveTo(
                    Point { x: 26.00, y: 2.90 },
                    Point { x: 25.11, y: 2.00 },
                    Point { x: 24.00, y: 2.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 22.89, y: 2.00 },
                    Point { x: 22.00, y: 2.90 },
                    Point { x: 22.00, y: 4.00 },
                ),
                PathEl::LineTo(Point { x: 22.00, y: 12.00 }),
                PathEl::LineTo(Point { x: 18.00, y: 12.00 }),
                PathEl::LineTo(Point { x: 18.00, y: 24.00 }),
                PathEl::LineTo(Point { x: 30.00, y: 24.00 }),
                PathEl::LineTo(Point { x: 30.00, y: 12.00 }),
                PathEl::LineTo(Point { x: 26.00, y: 12.00 }),
                PathEl::LineTo(Point { x: 26.00, y: 4.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 34.00, y: 32.00 }),
                PathEl::CurveTo(
                    Point { x: 34.00, y: 34.61 },
                    Point { x: 35.68, y: 36.81 },
                    Point { x: 38.00, y: 37.63 },
                ),
                PathEl::LineTo(Point { x: 38.00, y: 46.00 }),
                PathEl::LineTo(Point { x: 42.00, y: 46.00 }),
                PathEl::LineTo(Point { x: 42.00, y: 37.63 }),
                PathEl::CurveTo(
                    Point { x: 44.32, y: 36.80 },
                    Point { x: 46.00, y: 34.61 },
                    Point { x: 46.00, y: 32.00 },
                ),
                PathEl::LineTo(Point { x: 46.00, y: 28.00 }),
                PathEl::LineTo(Point { x: 34.00, y: 28.00 }),
                PathEl::LineTo(Point { x: 34.00, y: 32.00 }),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct SpeakerGroup {
    size: f64,
    color: Color,
}

impl SpeakerGroup {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for SpeakerGroup {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 36.40, y: 2.00 }),
                PathEl::LineTo(Point { x: 19.60, y: 2.00 }),
                PathEl::CurveTo(
                    Point { x: 17.61, y: 2.00 },
                    Point { x: 16.00, y: 3.61 },
                    Point { x: 16.00, y: 5.60 },
                ),
                PathEl::LineTo(Point { x: 16.00, y: 34.40 }),
                PathEl::CurveTo(
                    Point { x: 16.00, y: 36.39 },
                    Point { x: 17.61, y: 37.98 },
                    Point { x: 19.60, y: 37.98 },
                ),
                PathEl::LineTo(Point { x: 36.40, y: 38.00 }),
                PathEl::CurveTo(
                    Point { x: 38.39, y: 38.00 },
                    Point { x: 40.00, y: 36.39 },
                    Point { x: 40.00, y: 34.40 },
                ),
                PathEl::LineTo(Point { x: 40.00, y: 5.60 }),
                PathEl::CurveTo(
                    Point { x: 40.00, y: 3.61 },
                    Point { x: 38.39, y: 2.00 },
                    Point { x: 36.40, y: 2.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 28.00, y: 6.00 }),
                PathEl::CurveTo(
                    Point { x: 30.21, y: 6.00 },
                    Point { x: 32.00, y: 7.79 },
                    Point { x: 32.00, y: 10.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 32.00, y: 12.21 },
                    Point { x: 30.21, y: 14.00 },
                    Point { x: 28.00, y: 14.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 25.79, y: 14.00 },
                    Point { x: 24.00, y: 12.21 },
                    Point { x: 24.00, y: 10.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 24.00, y: 7.79 },
                    Point { x: 25.79, y: 6.00 },
                    Point { x: 28.00, y: 6.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 28.00, y: 33.00 }),
                PathEl::CurveTo(
                    Point { x: 23.58, y: 33.00 },
                    Point { x: 20.00, y: 29.42 },
                    Point { x: 20.00, y: 25.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 20.00, y: 20.58 },
                    Point { x: 23.58, y: 17.00 },
                    Point { x: 28.00, y: 17.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 32.42, y: 17.00 },
                    Point { x: 36.00, y: 20.58 },
                    Point { x: 36.00, y: 25.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 36.00, y: 29.42 },
                    Point { x: 32.42, y: 33.00 },
                    Point { x: 28.00, y: 33.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 28.00, y: 20.00 }),
                PathEl::CurveTo(
                    Point { x: 25.24, y: 20.00 },
                    Point { x: 23.00, y: 22.24 },
                    Point { x: 23.00, y: 25.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 23.00, y: 27.76 },
                    Point { x: 25.24, y: 30.00 },
                    Point { x: 28.00, y: 30.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 30.76, y: 30.00 },
                    Point { x: 33.00, y: 27.76 },
                    Point { x: 33.00, y: 25.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 33.00, y: 22.24 },
                    Point { x: 30.76, y: 20.00 },
                    Point { x: 28.00, y: 20.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 12.00, y: 10.00 }),
                PathEl::LineTo(Point { x: 8.00, y: 10.00 }),
                PathEl::LineTo(Point { x: 8.00, y: 42.00 }),
                PathEl::CurveTo(
                    Point { x: 8.00, y: 44.21 },
                    Point { x: 9.79, y: 46.00 },
                    Point { x: 12.00, y: 46.00 },
                ),
                PathEl::LineTo(Point { x: 32.00, y: 46.00 }),
                PathEl::LineTo(Point { x: 32.00, y: 42.00 }),
                PathEl::LineTo(Point { x: 12.00, y: 42.00 }),
                PathEl::LineTo(Point { x: 12.00, y: 10.00 }),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct ExpandLess {
    size: f64,
    color: Color,
}

impl ExpandLess {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for ExpandLess {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 24.00, y: 16.00 }),
                PathEl::LineTo(Point { x: 12.00, y: 28.00 }),
                PathEl::LineTo(Point { x: 14.83, y: 30.83 }),
                PathEl::LineTo(Point { x: 24.00, y: 21.66 }),
                PathEl::LineTo(Point { x: 33.17, y: 30.83 }),
                PathEl::LineTo(Point { x: 36.00, y: 28.00 }),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct FlightTakeoff {
    size: f64,
    color: Color,
}

impl FlightTakeoff {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for FlightTakeoff {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 5.00, y: 38.00 }),
                PathEl::LineTo(Point { x: 43.00, y: 38.00 }),
                PathEl::LineTo(Point { x: 43.00, y: 42.00 }),
                PathEl::LineTo(Point { x: 5.00, y: 42.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 44.14, y: 19.27 }),
                PathEl::CurveTo(
                    Point { x: 43.71, y: 17.67 },
                    Point { x: 42.07, y: 16.72 },
                    Point { x: 40.47, y: 17.15 },
                ),
                PathEl::LineTo(Point { x: 29.84, y: 20.00 }),
                PathEl::LineTo(Point { x: 16.04, y: 7.13 }),
                PathEl::LineTo(Point { x: 12.18, y: 8.17 }),
                PathEl::LineTo(Point { x: 20.46, y: 22.52 }),
                PathEl::LineTo(Point { x: 10.52, y: 25.18 }),
                PathEl::LineTo(Point { x: 6.59, y: 22.09 }),
                PathEl::LineTo(Point { x: 3.69, y: 22.87 }),
                PathEl::LineTo(Point { x: 7.33, y: 29.18 }),
                PathEl::LineTo(Point { x: 8.86, y: 31.83 }),
                PathEl::LineTo(Point { x: 12.07, y: 30.97 }),
                PathEl::LineTo(Point { x: 22.70, y: 28.12 }),
                PathEl::LineTo(Point { x: 31.39, y: 25.79 }),
                PathEl::LineTo(Point { x: 42.02, y: 22.94 }),
                PathEl::CurveTo(
                    Point { x: 43.62, y: 22.51 },
                    Point { x: 44.57, y: 20.87 },
                    Point { x: 44.14, y: 19.27 },
                ),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct CloudCircle {
    size: f64,
    color: Color,
}

impl CloudCircle {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for CloudCircle {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 24.00, y: 4.00 }),
                PathEl::CurveTo(
                    Point { x: 12.95, y: 4.00 },
                    Point { x: 4.00, y: 12.95 },
                    Point { x: 4.00, y: 24.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 4.00, y: 35.05 },
                    Point { x: 12.95, y: 44.00 },
                    Point { x: 24.00, y: 44.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 35.05, y: 44.00 },
                    Point { x: 44.00, y: 35.05 },
                    Point { x: 44.00, y: 24.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 44.00, y: 12.95 },
                    Point { x: 35.05, y: 4.00 },
                    Point { x: 24.00, y: 4.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 33.00, y: 32.00 }),
                PathEl::LineTo(Point { x: 16.00, y: 32.00 }),
                PathEl::CurveTo(
                    Point { x: 12.69, y: 32.00 },
                    Point { x: 10.00, y: 29.31 },
                    Point { x: 10.00, y: 26.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 10.00, y: 22.69 },
                    Point { x: 12.69, y: 20.00 },
                    Point { x: 16.00, y: 20.00 },
                ),
                PathEl::LineTo(Point { x: 16.27, y: 20.03 }),
                PathEl::CurveTo(
                    Point { x: 17.16, y: 16.57 },
                    Point { x: 20.27, y: 14.00 },
                    Point { x: 24.00, y: 14.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 28.42, y: 14.00 },
                    Point { x: 32.00, y: 17.58 },
                    Point { x: 32.00, y: 22.00 },
                ),
                PathEl::LineTo(Point { x: 33.00, y: 22.00 }),
                PathEl::CurveTo(
                    Point { x: 35.76, y: 22.00 },
                    Point { x: 38.00, y: 24.24 },
                    Point { x: 38.00, y: 27.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 38.00, y: 29.76 },
                    Point { x: 35.76, y: 32.00 },
                    Point { x: 33.00, y: 32.00 },
                ),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct PanoramaHorizontal {
    size: f64,
    color: Color,
}

impl PanoramaHorizontal {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for PanoramaHorizontal {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 40.00, y: 13.09 }),
                PathEl::LineTo(Point { x: 40.00, y: 34.91 }),
                PathEl::CurveTo(
                    Point { x: 34.81, y: 33.37 },
                    Point { x: 29.44, y: 32.59 },
                    Point { x: 24.00, y: 32.59 },
                ),
                PathEl::CurveTo(
                    Point { x: 18.56, y: 32.59 },
                    Point { x: 13.20, y: 33.37 },
                    Point { x: 8.00, y: 34.91 },
                ),
                PathEl::LineTo(Point { x: 8.00, y: 13.09 }),
                PathEl::CurveTo(
                    Point { x: 13.19, y: 14.63 },
                    Point { x: 18.56, y: 15.41 },
                    Point { x: 24.00, y: 15.41 },
                ),
                PathEl::CurveTo(
                    Point { x: 29.44, y: 15.41 },
                    Point { x: 34.80, y: 14.63 },
                    Point { x: 40.00, y: 13.09 },
                ),
                PathEl::MoveTo(Point { x: 42.86, y: 8.00 }),
                PathEl::CurveTo(
                    Point { x: 42.67, y: 8.00 },
                    Point { x: 42.46, y: 8.04 },
                    Point { x: 42.24, y: 8.12 },
                ),
                PathEl::CurveTo(
                    Point { x: 36.36, y: 10.31 },
                    Point { x: 30.18, y: 11.41 },
                    Point { x: 24.00, y: 11.41 },
                ),
                PathEl::CurveTo(
                    Point { x: 17.82, y: 11.41 },
                    Point { x: 11.64, y: 10.31 },
                    Point { x: 5.76, y: 8.12 },
                ),
                PathEl::CurveTo(
                    Point { x: 5.54, y: 8.04 },
                    Point { x: 5.33, y: 8.00 },
                    Point { x: 5.13, y: 8.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 4.47, y: 8.00 },
                    Point { x: 4.00, y: 8.47 },
                    Point { x: 4.00, y: 9.25 },
                ),
                PathEl::LineTo(Point { x: 4.00, y: 38.75 }),
                PathEl::CurveTo(
                    Point { x: 4.01, y: 39.53 },
                    Point { x: 4.47, y: 40.00 },
                    Point { x: 5.13, y: 40.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 5.32, y: 40.00 },
                    Point { x: 5.53, y: 39.96 },
                    Point { x: 5.75, y: 39.88 },
                ),
                PathEl::CurveTo(
                    Point { x: 11.63, y: 37.69 },
                    Point { x: 17.81, y: 36.59 },
                    Point { x: 23.99, y: 36.59 },
                ),
                PathEl::CurveTo(
                    Point { x: 30.17, y: 36.59 },
                    Point { x: 36.35, y: 37.69 },
                    Point { x: 42.23, y: 39.88 },
                ),
                PathEl::CurveTo(
                    Point { x: 42.45, y: 39.96 },
                    Point { x: 42.66, y: 40.00 },
                    Point { x: 42.85, y: 40.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 43.51, y: 40.00 },
                    Point { x: 43.99, y: 39.53 },
                    Point { x: 43.98, y: 38.75 },
                ),
                PathEl::LineTo(Point { x: 43.98, y: 9.25 }),
                PathEl::CurveTo(
                    Point { x: 44.00, y: 8.47 },
                    Point { x: 43.52, y: 8.00 },
                    Point { x: 42.86, y: 8.00 },
                ),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct Http {
    size: f64,
    color: Color,
}

impl Http {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for Http {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 9.00, y: 22.00 }),
                PathEl::LineTo(Point { x: 5.00, y: 22.00 }),
                PathEl::LineTo(Point { x: 5.00, y: 18.00 }),
                PathEl::LineTo(Point { x: 2.00, y: 18.00 }),
                PathEl::LineTo(Point { x: 2.00, y: 30.00 }),
                PathEl::LineTo(Point { x: 5.00, y: 30.00 }),
                PathEl::LineTo(Point { x: 5.00, y: 25.00 }),
                PathEl::LineTo(Point { x: 9.00, y: 25.00 }),
                PathEl::LineTo(Point { x: 9.00, y: 30.00 }),
                PathEl::LineTo(Point { x: 12.00, y: 30.00 }),
                PathEl::LineTo(Point { x: 12.00, y: 18.00 }),
                PathEl::LineTo(Point { x: 9.00, y: 18.00 }),
                PathEl::LineTo(Point { x: 9.00, y: 22.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 14.00, y: 21.00 }),
                PathEl::LineTo(Point { x: 17.00, y: 21.00 }),
                PathEl::LineTo(Point { x: 17.00, y: 30.00 }),
                PathEl::LineTo(Point { x: 20.00, y: 30.00 }),
                PathEl::LineTo(Point { x: 20.00, y: 21.00 }),
                PathEl::LineTo(Point { x: 23.00, y: 21.00 }),
                PathEl::LineTo(Point { x: 23.00, y: 18.00 }),
                PathEl::LineTo(Point { x: 14.00, y: 18.00 }),
                PathEl::LineTo(Point { x: 14.00, y: 21.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 25.00, y: 21.00 }),
                PathEl::LineTo(Point { x: 28.00, y: 21.00 }),
                PathEl::LineTo(Point { x: 28.00, y: 30.00 }),
                PathEl::LineTo(Point { x: 31.00, y: 30.00 }),
                PathEl::LineTo(Point { x: 31.00, y: 21.00 }),
                PathEl::LineTo(Point { x: 34.00, y: 21.00 }),
                PathEl::LineTo(Point { x: 34.00, y: 18.00 }),
                PathEl::LineTo(Point { x: 25.00, y: 18.00 }),
                PathEl::LineTo(Point { x: 25.00, y: 21.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 43.00, y: 18.00 }),
                PathEl::LineTo(Point { x: 36.00, y: 18.00 }),
                PathEl::LineTo(Point { x: 36.00, y: 30.00 }),
                PathEl::LineTo(Point { x: 39.00, y: 30.00 }),
                PathEl::LineTo(Point { x: 39.00, y: 26.00 }),
                PathEl::LineTo(Point { x: 43.00, y: 26.00 }),
                PathEl::CurveTo(
                    Point { x: 44.70, y: 26.00 },
                    Point { x: 46.00, y: 24.70 },
                    Point { x: 46.00, y: 23.00 },
                ),
                PathEl::LineTo(Point { x: 46.00, y: 21.00 }),
                PathEl::CurveTo(
                    Point { x: 46.00, y: 19.30 },
                    Point { x: 44.70, y: 18.00 },
                    Point { x: 43.00, y: 18.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 43.00, y: 23.00 }),
                PathEl::LineTo(Point { x: 39.00, y: 23.00 }),
                PathEl::LineTo(Point { x: 39.00, y: 21.00 }),
                PathEl::LineTo(Point { x: 43.00, y: 21.00 }),
                PathEl::LineTo(Point { x: 43.00, y: 23.00 }),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct CallSplit {
    size: f64,
    color: Color,
}

impl CallSplit {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for CallSplit {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 28.00, y: 8.00 }),
                PathEl::LineTo(Point { x: 32.59, y: 12.59 }),
                PathEl::LineTo(Point { x: 26.83, y: 18.34 }),
                PathEl::LineTo(Point { x: 29.66, y: 21.17 }),
                PathEl::LineTo(Point { x: 35.41, y: 15.41 }),
                PathEl::LineTo(Point { x: 40.00, y: 20.00 }),
                PathEl::LineTo(Point { x: 40.00, y: 8.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 20.00, y: 8.00 }),
                PathEl::LineTo(Point { x: 8.00, y: 8.00 }),
                PathEl::LineTo(Point { x: 8.00, y: 20.00 }),
                PathEl::LineTo(Point { x: 12.59, y: 15.41 }),
                PathEl::LineTo(Point { x: 22.00, y: 24.83 }),
                PathEl::LineTo(Point { x: 22.00, y: 40.00 }),
                PathEl::LineTo(Point { x: 26.00, y: 40.00 }),
                PathEl::LineTo(Point { x: 26.00, y: 23.17 }),
                PathEl::LineTo(Point { x: 15.41, y: 12.59 }),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct Adjust {
    size: f64,
    color: Color,
}

impl Adjust {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for Adjust {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 24.00, y: 4.00 }),
                PathEl::CurveTo(
                    Point { x: 12.97, y: 4.00 },
                    Point { x: 4.00, y: 12.97 },
                    Point { x: 4.00, y: 24.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 4.00, y: 35.03 },
                    Point { x: 12.97, y: 44.00 },
                    Point { x: 24.00, y: 44.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 35.03, y: 44.00 },
                    Point { x: 44.00, y: 35.03 },
                    Point { x: 44.00, y: 24.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 44.00, y: 12.97 },
                    Point { x: 35.03, y: 4.00 },
                    Point { x: 24.00, y: 4.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 24.00, y: 40.00 }),
                PathEl::CurveTo(
                    Point { x: 15.18, y: 40.00 },
                    Point { x: 8.00, y: 32.82 },
                    Point { x: 8.00, y: 24.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 8.00, y: 15.18 },
                    Point { x: 15.18, y: 8.00 },
                    Point { x: 24.00, y: 8.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 32.82, y: 8.00 },
                    Point { x: 40.00, y: 15.18 },
                    Point { x: 40.00, y: 24.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 40.00, y: 32.82 },
                    Point { x: 32.82, y: 40.00 },
                    Point { x: 24.00, y: 40.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 30.00, y: 24.00 }),
                PathEl::CurveTo(
                    Point { x: 30.00, y: 27.31 },
                    Point { x: 27.31, y: 30.00 },
                    Point { x: 24.00, y: 30.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 20.69, y: 30.00 },
                    Point { x: 18.00, y: 27.31 },
                    Point { x: 18.00, y: 24.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 18.00, y: 20.69 },
                    Point { x: 20.69, y: 18.00 },
                    Point { x: 24.00, y: 18.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 27.31, y: 18.00 },
                    Point { x: 30.00, y: 20.69 },
                    Point { x: 30.00, y: 24.00 },
                ),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct Rowing {
    size: f64,
    color: Color,
}

impl Rowing {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for Rowing {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 17.00, y: 29.00 }),
                PathEl::LineTo(Point { x: 8.00, y: 38.00 }),
                PathEl::LineTo(Point { x: 11.00, y: 41.00 }),
                PathEl::LineTo(Point { x: 18.00, y: 34.00 }),
                PathEl::LineTo(Point { x: 22.00, y: 34.00 }),
                PathEl::LineTo(Point { x: 17.00, y: 29.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 30.00, y: 2.00 }),
                PathEl::CurveTo(
                    Point { x: 27.80, y: 2.00 },
                    Point { x: 26.00, y: 3.80 },
                    Point { x: 26.00, y: 6.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 26.00, y: 8.20 },
                    Point { x: 27.80, y: 10.00 },
                    Point { x: 30.00, y: 10.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 32.20, y: 10.00 },
                    Point { x: 34.00, y: 8.20 },
                    Point { x: 34.00, y: 6.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 34.00, y: 3.80 },
                    Point { x: 32.20, y: 2.00 },
                    Point { x: 30.00, y: 2.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 42.00, y: 42.02 }),
                PathEl::LineTo(Point { x: 36.00, y: 48.00 }),
                PathEl::LineTo(Point { x: 30.02, y: 41.98 }),
                PathEl::LineTo(Point { x: 30.02, y: 39.00 }),
                PathEl::LineTo(Point { x: 15.82, y: 24.82 }),
                PathEl::CurveTo(
                    Point { x: 15.20, y: 24.92 },
                    Point { x: 14.60, y: 24.96 },
                    Point { x: 14.00, y: 24.96 },
                ),
                PathEl::LineTo(Point { x: 14.00, y: 20.64 }),
                PathEl::CurveTo(
                    Point { x: 17.32, y: 20.70 },
                    Point { x: 21.22, y: 18.90 },
                    Point { x: 23.34, y: 16.56 },
                ),
                PathEl::LineTo(Point { x: 26.14, y: 13.46 }),
                PathEl::CurveTo(
                    Point { x: 26.52, y: 13.04 },
                    Point { x: 27.00, y: 12.70 },
                    Point { x: 27.52, y: 12.46 },
                ),
                PathEl::CurveTo(
                    Point { x: 28.10, y: 12.18 },
                    Point { x: 28.76, y: 12.00 },
                    Point { x: 29.44, y: 12.00 },
                ),
                PathEl::LineTo(Point { x: 29.50, y: 12.00 }),
                PathEl::CurveTo(
                    Point { x: 31.98, y: 12.02 },
                    Point { x: 34.00, y: 14.04 },
                    Point { x: 34.00, y: 16.52 },
                ),
                PathEl::LineTo(Point { x: 34.00, y: 28.02 }),
                PathEl::CurveTo(
                    Point { x: 34.00, y: 29.70 },
                    Point { x: 33.30, y: 31.24 },
                    Point { x: 32.16, y: 32.34 },
                ),
                PathEl::LineTo(Point { x: 25.00, y: 25.18 }),
                PathEl::LineTo(Point { x: 25.00, y: 20.64 }),
                PathEl::CurveTo(
                    Point { x: 23.74, y: 21.68 },
                    Point { x: 22.14, y: 22.68 },
                    Point { x: 20.42, y: 23.42 },
                ),
                PathEl::LineTo(Point { x: 33.00, y: 36.00 }),
                PathEl::LineTo(Point { x: 36.00, y: 36.00 }),
                PathEl::LineTo(Point { x: 42.00, y: 42.02 }),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct AirlineSeatReclineExtra {
    size: f64,
    color: Color,
}

impl AirlineSeatReclineExtra {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for AirlineSeatReclineExtra {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 10.71, y: 11.28 }),
                PathEl::CurveTo(
                    Point { x: 8.90, y: 10.01 },
                    Point { x: 8.46, y: 7.52 },
                    Point { x: 9.72, y: 5.71 },
                ),
                PathEl::CurveTo(
                    Point { x: 10.99, y: 3.90 },
                    Point { x: 13.48, y: 3.46 },
                    Point { x: 15.29, y: 4.73 },
                ),
                PathEl::CurveTo(
                    Point { x: 17.10, y: 6.00 },
                    Point { x: 17.54, y: 8.49 },
                    Point { x: 16.27, y: 10.30 },
                ),
                PathEl::CurveTo(
                    Point { x: 15.01, y: 12.10 },
                    Point { x: 12.52, y: 12.54 },
                    Point { x: 10.71, y: 11.28 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 32.00, y: 38.00 }),
                PathEl::LineTo(Point { x: 17.86, y: 38.00 }),
                PathEl::CurveTo(
                    Point { x: 14.90, y: 38.00 },
                    Point { x: 12.38, y: 35.84 },
                    Point { x: 11.93, y: 32.92 },
                ),
                PathEl::LineTo(Point { x: 8.00, y: 14.00 }),
                PathEl::LineTo(Point { x: 4.00, y: 14.00 }),
                PathEl::LineTo(Point { x: 7.99, y: 33.51 }),
                PathEl::CurveTo(
                    Point { x: 8.73, y: 38.39 },
                    Point { x: 12.93, y: 42.00 },
                    Point { x: 17.87, y: 42.00 },
                ),
                PathEl::LineTo(Point { x: 32.00, y: 42.00 }),
                PathEl::LineTo(Point { x: 32.00, y: 38.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 32.46, y: 30.00 }),
                PathEl::LineTo(Point { x: 22.70, y: 30.00 }),
                PathEl::LineTo(Point { x: 20.65, y: 21.80 }),
                PathEl::CurveTo(
                    Point { x: 23.80, y: 23.58 },
                    Point { x: 27.21, y: 24.89 },
                    Point { x: 30.95, y: 24.24 },
                ),
                PathEl::LineTo(Point { x: 30.95, y: 19.99 }),
                PathEl::CurveTo(
                    Point { x: 27.69, y: 20.60 },
                    Point { x: 24.07, y: 19.44 },
                    Point { x: 21.57, y: 17.50 },
                ),
                PathEl::LineTo(Point { x: 18.28, y: 14.94 }),
                PathEl::CurveTo(
                    Point { x: 17.83, y: 14.59 },
                    Point { x: 17.30, y: 14.34 },
                    Point { x: 16.75, y: 14.18 },
                ),
                PathEl::CurveTo(
                    Point { x: 16.12, y: 14.00 },
                    Point { x: 15.44, y: 13.95 },
                    Point { x: 14.77, y: 14.06 },
                ),
                PathEl::LineTo(Point { x: 14.72, y: 14.07 }),
                PathEl::CurveTo(
                    Point { x: 12.27, y: 14.50 },
                    Point { x: 10.63, y: 16.83 },
                    Point { x: 11.06, y: 19.28 },
                ),
                PathEl::LineTo(Point { x: 13.77, y: 31.12 }),
                PathEl::CurveTo(
                    Point { x: 14.31, y: 33.95 },
                    Point { x: 16.78, y: 36.00 },
                    Point { x: 19.66, y: 36.00 },
                ),
                PathEl::LineTo(Point { x: 33.36, y: 36.00 }),
                PathEl::LineTo(Point { x: 41.00, y: 42.00 }),
                PathEl::LineTo(Point { x: 44.00, y: 39.00 }),
                PathEl::LineTo(Point { x: 32.46, y: 30.00 }),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct Radio {
    size: f64,
    color: Color,
}

impl Radio {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for Radio {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 6.47, y: 12.30 }),
                PathEl::CurveTo(
                    Point { x: 5.02, y: 12.87 },
                    Point { x: 4.00, y: 14.33 },
                    Point { x: 4.00, y: 16.00 },
                ),
                PathEl::LineTo(Point { x: 4.00, y: 40.00 }),
                PathEl::CurveTo(
                    Point { x: 4.00, y: 42.21 },
                    Point { x: 5.79, y: 44.00 },
                    Point { x: 8.00, y: 44.00 },
                ),
                PathEl::LineTo(Point { x: 40.00, y: 44.00 }),
                PathEl::CurveTo(
                    Point { x: 42.21, y: 44.00 },
                    Point { x: 44.00, y: 42.21 },
                    Point { x: 44.00, y: 40.00 },
                ),
                PathEl::LineTo(Point { x: 44.00, y: 16.00 }),
                PathEl::CurveTo(
                    Point { x: 44.00, y: 13.79 },
                    Point { x: 42.21, y: 12.00 },
                    Point { x: 40.00, y: 12.00 },
                ),
                PathEl::LineTo(Point { x: 16.61, y: 12.00 }),
                PathEl::LineTo(Point { x: 33.14, y: 5.33 }),
                PathEl::LineTo(Point { x: 31.76, y: 2.00 }),
                PathEl::LineTo(Point { x: 6.47, y: 12.30 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 14.00, y: 40.00 }),
                PathEl::CurveTo(
                    Point { x: 10.69, y: 40.00 },
                    Point { x: 8.00, y: 37.31 },
                    Point { x: 8.00, y: 34.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 8.00, y: 30.69 },
                    Point { x: 10.69, y: 28.00 },
                    Point { x: 14.00, y: 28.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 17.31, y: 28.00 },
                    Point { x: 20.00, y: 30.69 },
                    Point { x: 20.00, y: 34.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 20.00, y: 37.31 },
                    Point { x: 17.31, y: 40.00 },
                    Point { x: 14.00, y: 40.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 40.00, y: 24.00 }),
                PathEl::LineTo(Point { x: 36.00, y: 24.00 }),
                PathEl::LineTo(Point { x: 36.00, y: 20.00 }),
                PathEl::LineTo(Point { x: 32.00, y: 20.00 }),
                PathEl::LineTo(Point { x: 32.00, y: 24.00 }),
                PathEl::LineTo(Point { x: 8.00, y: 24.00 }),
                PathEl::LineTo(Point { x: 8.00, y: 16.00 }),
                PathEl::LineTo(Point { x: 40.00, y: 16.00 }),
                PathEl::LineTo(Point { x: 40.00, y: 24.00 }),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct Replay10 {
    size: f64,
    color: Color,
}

impl Replay10 {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for Replay10 {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 24.00, y: 10.00 }),
                PathEl::LineTo(Point { x: 24.00, y: 2.00 }),
                PathEl::LineTo(Point { x: 14.00, y: 12.00 }),
                PathEl::LineTo(Point { x: 24.00, y: 22.00 }),
                PathEl::LineTo(Point { x: 24.00, y: 14.00 }),
                PathEl::CurveTo(
                    Point { x: 30.60, y: 14.00 },
                    Point { x: 36.00, y: 19.40 },
                    Point { x: 36.00, y: 26.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 36.00, y: 32.60 },
                    Point { x: 30.60, y: 38.00 },
                    Point { x: 24.00, y: 38.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 17.40, y: 38.00 },
                    Point { x: 12.00, y: 32.60 },
                    Point { x: 12.00, y: 26.00 },
                ),
                PathEl::LineTo(Point { x: 8.00, y: 26.00 }),
                PathEl::CurveTo(
                    Point { x: 8.00, y: 34.80 },
                    Point { x: 15.20, y: 42.00 },
                    Point { x: 24.00, y: 42.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 32.80, y: 42.00 },
                    Point { x: 40.00, y: 34.80 },
                    Point { x: 40.00, y: 26.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 40.00, y: 17.20 },
                    Point { x: 32.80, y: 10.00 },
                    Point { x: 24.00, y: 10.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 21.80, y: 32.00 }),
                PathEl::LineTo(Point { x: 20.10, y: 32.00 }),
                PathEl::LineTo(Point { x: 20.10, y: 25.50 }),
                PathEl::LineTo(Point { x: 18.10, y: 26.10 }),
                PathEl::LineTo(Point { x: 18.10, y: 24.70 }),
                PathEl::LineTo(Point { x: 21.60, y: 23.40 }),
                PathEl::LineTo(Point { x: 21.80, y: 23.40 }),
                PathEl::LineTo(Point { x: 21.80, y: 32.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 30.30, y: 28.50 }),
                PathEl::CurveTo(
                    Point { x: 30.30, y: 29.10 },
                    Point { x: 30.20, y: 29.70 },
                    Point { x: 30.10, y: 30.10 },
                ),
                PathEl::CurveTo(
                    Point { x: 30.00, y: 30.50 },
                    Point { x: 29.80, y: 30.90 },
                    Point { x: 29.50, y: 31.20 },
                ),
                PathEl::CurveTo(
                    Point { x: 29.20, y: 31.50 },
                    Point { x: 28.90, y: 31.70 },
                    Point { x: 28.60, y: 31.90 },
                ),
                PathEl::CurveTo(
                    Point { x: 28.30, y: 32.10 },
                    Point { x: 27.90, y: 32.10 },
                    Point { x: 27.40, y: 32.10 },
                ),
                PathEl::CurveTo(
                    Point { x: 26.90, y: 32.10 },
                    Point { x: 26.60, y: 32.00 },
                    Point { x: 26.20, y: 31.90 },
                ),
                PathEl::CurveTo(
                    Point { x: 25.80, y: 31.80 },
                    Point { x: 25.50, y: 31.50 },
                    Point { x: 25.30, y: 31.20 },
                ),
                PathEl::CurveTo(
                    Point { x: 25.10, y: 30.90 },
                    Point { x: 24.80, y: 30.50 },
                    Point { x: 24.70, y: 30.10 },
                ),
                PathEl::CurveTo(
                    Point { x: 24.60, y: 29.70 },
                    Point { x: 24.50, y: 29.10 },
                    Point { x: 24.50, y: 28.50 },
                ),
                PathEl::LineTo(Point { x: 24.50, y: 27.00 }),
                PathEl::CurveTo(
                    Point { x: 24.50, y: 26.40 },
                    Point { x: 24.60, y: 25.80 },
                    Point { x: 24.70, y: 25.40 },
                ),
                PathEl::CurveTo(
                    Point { x: 24.80, y: 25.00 },
                    Point { x: 25.00, y: 24.60 },
                    Point { x: 25.30, y: 24.30 },
                ),
                PathEl::CurveTo(
                    Point { x: 25.60, y: 24.00 },
                    Point { x: 25.90, y: 23.80 },
                    Point { x: 26.20, y: 23.60 },
                ),
                PathEl::CurveTo(
                    Point { x: 26.50, y: 23.40 },
                    Point { x: 26.90, y: 23.40 },
                    Point { x: 27.40, y: 23.40 },
                ),
                PathEl::CurveTo(
                    Point { x: 27.90, y: 23.40 },
                    Point { x: 28.20, y: 23.50 },
                    Point { x: 28.60, y: 23.60 },
                ),
                PathEl::CurveTo(
                    Point { x: 29.00, y: 23.70 },
                    Point { x: 29.30, y: 24.00 },
                    Point { x: 29.50, y: 24.30 },
                ),
                PathEl::CurveTo(
                    Point { x: 29.70, y: 24.60 },
                    Point { x: 30.00, y: 25.00 },
                    Point { x: 30.10, y: 25.40 },
                ),
                PathEl::CurveTo(
                    Point { x: 30.20, y: 25.80 },
                    Point { x: 30.30, y: 26.40 },
                    Point { x: 30.30, y: 27.00 },
                ),
                PathEl::LineTo(Point { x: 30.30, y: 28.50 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 28.70, y: 26.80 }),
                PathEl::CurveTo(
                    Point { x: 28.70, y: 26.40 },
                    Point { x: 28.70, y: 26.10 },
                    Point { x: 28.60, y: 25.80 },
                ),
                PathEl::CurveTo(
                    Point { x: 28.50, y: 25.50 },
                    Point { x: 28.50, y: 25.30 },
                    Point { x: 28.40, y: 25.20 },
                ),
                PathEl::CurveTo(
                    Point { x: 28.30, y: 25.10 },
                    Point { x: 28.20, y: 24.90 },
                    Point { x: 28.00, y: 24.90 },
                ),
                PathEl::CurveTo(
                    Point { x: 27.80, y: 24.90 },
                    Point { x: 27.70, y: 24.80 },
                    Point { x: 27.50, y: 24.80 },
                ),
                PathEl::CurveTo(
                    Point { x: 27.30, y: 24.80 },
                    Point { x: 27.10, y: 24.80 },
                    Point { x: 27.00, y: 24.90 },
                ),
                PathEl::CurveTo(
                    Point { x: 26.90, y: 25.00 },
                    Point { x: 26.70, y: 25.10 },
                    Point { x: 26.60, y: 25.20 },
                ),
                PathEl::CurveTo(
                    Point { x: 26.50, y: 25.30 },
                    Point { x: 26.40, y: 25.60 },
                    Point { x: 26.40, y: 25.80 },
                ),
                PathEl::CurveTo(
                    Point { x: 26.40, y: 26.00 },
                    Point { x: 26.30, y: 26.40 },
                    Point { x: 26.30, y: 26.80 },
                ),
                PathEl::LineTo(Point { x: 26.30, y: 28.70 }),
                PathEl::CurveTo(
                    Point { x: 26.30, y: 29.10 },
                    Point { x: 26.30, y: 29.40 },
                    Point { x: 26.40, y: 29.70 },
                ),
                PathEl::CurveTo(
                    Point { x: 26.50, y: 30.00 },
                    Point { x: 26.50, y: 30.20 },
                    Point { x: 26.60, y: 30.30 },
                ),
                PathEl::CurveTo(
                    Point { x: 26.70, y: 30.40 },
                    Point { x: 26.80, y: 30.60 },
                    Point { x: 27.00, y: 30.60 },
                ),
                PathEl::CurveTo(
                    Point { x: 27.20, y: 30.60 },
                    Point { x: 27.30, y: 30.70 },
                    Point { x: 27.50, y: 30.70 },
                ),
                PathEl::CurveTo(
                    Point { x: 27.70, y: 30.70 },
                    Point { x: 27.90, y: 30.70 },
                    Point { x: 28.00, y: 30.60 },
                ),
                PathEl::CurveTo(
                    Point { x: 28.10, y: 30.50 },
                    Point { x: 28.30, y: 30.40 },
                    Point { x: 28.40, y: 30.30 },
                ),
                PathEl::CurveTo(
                    Point { x: 28.50, y: 30.20 },
                    Point { x: 28.60, y: 29.90 },
                    Point { x: 28.60, y: 29.70 },
                ),
                PathEl::CurveTo(
                    Point { x: 28.60, y: 29.50 },
                    Point { x: 28.70, y: 29.10 },
                    Point { x: 28.70, y: 28.70 },
                ),
                PathEl::LineTo(Point { x: 28.70, y: 26.80 }),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct FastForward {
    size: f64,
    color: Color,
}

impl FastForward {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for FastForward {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 8.00, y: 36.00 }),
                PathEl::LineTo(Point { x: 25.00, y: 24.00 }),
                PathEl::LineTo(Point { x: 8.00, y: 12.00 }),
                PathEl::LineTo(Point { x: 8.00, y: 36.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 26.00, y: 12.00 }),
                PathEl::LineTo(Point { x: 26.00, y: 36.00 }),
                PathEl::LineTo(Point { x: 43.00, y: 24.00 }),
                PathEl::LineTo(Point { x: 26.00, y: 12.00 }),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct FormatListBulleted {
    size: f64,
    color: Color,
}

impl FormatListBulleted {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for FormatListBulleted {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 8.00, y: 21.00 }),
                PathEl::CurveTo(
                    Point { x: 6.34, y: 21.00 },
                    Point { x: 5.00, y: 22.34 },
                    Point { x: 5.00, y: 24.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 5.00, y: 25.66 },
                    Point { x: 6.34, y: 27.00 },
                    Point { x: 8.00, y: 27.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 9.66, y: 27.00 },
                    Point { x: 11.00, y: 25.66 },
                    Point { x: 11.00, y: 24.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 11.00, y: 22.34 },
                    Point { x: 9.66, y: 21.00 },
                    Point { x: 8.00, y: 21.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 8.00, y: 9.00 }),
                PathEl::CurveTo(
                    Point { x: 6.34, y: 9.00 },
                    Point { x: 5.00, y: 10.34 },
                    Point { x: 5.00, y: 12.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 5.00, y: 13.66 },
                    Point { x: 6.34, y: 15.00 },
                    Point { x: 8.00, y: 15.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 9.66, y: 15.00 },
                    Point { x: 11.00, y: 13.66 },
                    Point { x: 11.00, y: 12.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 11.00, y: 10.34 },
                    Point { x: 9.66, y: 9.00 },
                    Point { x: 8.00, y: 9.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 8.00, y: 33.00 }),
                PathEl::CurveTo(
                    Point { x: 6.33, y: 33.00 },
                    Point { x: 5.00, y: 34.35 },
                    Point { x: 5.00, y: 36.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 5.00, y: 37.65 },
                    Point { x: 6.35, y: 39.00 },
                    Point { x: 8.00, y: 39.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 9.65, y: 39.00 },
                    Point { x: 11.00, y: 37.65 },
                    Point { x: 11.00, y: 36.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 11.00, y: 34.35 },
                    Point { x: 9.67, y: 33.00 },
                    Point { x: 8.00, y: 33.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 14.00, y: 38.00 }),
                PathEl::LineTo(Point { x: 42.00, y: 38.00 }),
                PathEl::LineTo(Point { x: 42.00, y: 34.00 }),
                PathEl::LineTo(Point { x: 14.00, y: 34.00 }),
                PathEl::LineTo(Point { x: 14.00, y: 38.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 14.00, y: 26.00 }),
                PathEl::LineTo(Point { x: 42.00, y: 26.00 }),
                PathEl::LineTo(Point { x: 42.00, y: 22.00 }),
                PathEl::LineTo(Point { x: 14.00, y: 22.00 }),
                PathEl::LineTo(Point { x: 14.00, y: 26.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 14.00, y: 10.00 }),
                PathEl::LineTo(Point { x: 14.00, y: 14.00 }),
                PathEl::LineTo(Point { x: 42.00, y: 14.00 }),
                PathEl::LineTo(Point { x: 42.00, y: 10.00 }),
                PathEl::LineTo(Point { x: 14.00, y: 10.00 }),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct LocationOn {
    size: f64,
    color: Color,
}

impl LocationOn {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for LocationOn {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 24.00, y: 4.00 }),
                PathEl::CurveTo(
                    Point { x: 16.27, y: 4.00 },
                    Point { x: 10.00, y: 10.27 },
                    Point { x: 10.00, y: 18.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 10.00, y: 28.50 },
                    Point { x: 24.00, y: 44.00 },
                    Point { x: 24.00, y: 44.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 24.00, y: 44.00 },
                    Point { x: 38.00, y: 28.50 },
                    Point { x: 38.00, y: 18.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 38.00, y: 10.27 },
                    Point { x: 31.73, y: 4.00 },
                    Point { x: 24.00, y: 4.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 24.00, y: 23.00 }),
                PathEl::CurveTo(
                    Point { x: 21.24, y: 23.00 },
                    Point { x: 19.00, y: 20.76 },
                    Point { x: 19.00, y: 18.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 19.00, y: 15.24 },
                    Point { x: 21.24, y: 13.00 },
                    Point { x: 24.00, y: 13.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 26.76, y: 13.00 },
                    Point { x: 29.00, y: 15.24 },
                    Point { x: 29.00, y: 18.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 29.00, y: 20.76 },
                    Point { x: 26.76, y: 23.00 },
                    Point { x: 24.00, y: 23.00 },
                ),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct CallReceived {
    size: f64,
    color: Color,
}

impl CallReceived {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for CallReceived {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 40.00, y: 10.83 }),
                PathEl::LineTo(Point { x: 37.17, y: 8.00 }),
                PathEl::LineTo(Point { x: 14.00, y: 31.17 }),
                PathEl::LineTo(Point { x: 14.00, y: 18.00 }),
                PathEl::LineTo(Point { x: 10.00, y: 18.00 }),
                PathEl::LineTo(Point { x: 10.00, y: 38.00 }),
                PathEl::LineTo(Point { x: 30.00, y: 38.00 }),
                PathEl::LineTo(Point { x: 30.00, y: 34.00 }),
                PathEl::LineTo(Point { x: 16.83, y: 34.00 }),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct Inbox {
    size: f64,
    color: Color,
}

impl Inbox {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for Inbox {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 38.00, y: 6.00 }),
                PathEl::LineTo(Point { x: 9.98, y: 6.00 }),
                PathEl::CurveTo(
                    Point { x: 7.77, y: 6.00 },
                    Point { x: 6.02, y: 7.79 },
                    Point { x: 6.02, y: 10.00 },
                ),
                PathEl::LineTo(Point { x: 6.00, y: 38.00 }),
                PathEl::CurveTo(
                    Point { x: 6.00, y: 40.21 },
                    Point { x: 7.77, y: 42.00 },
                    Point { x: 9.98, y: 42.00 },
                ),
                PathEl::LineTo(Point { x: 38.00, y: 42.00 }),
                PathEl::CurveTo(
                    Point { x: 40.21, y: 42.00 },
                    Point { x: 42.00, y: 40.21 },
                    Point { x: 42.00, y: 38.00 },
                ),
                PathEl::LineTo(Point { x: 42.00, y: 10.00 }),
                PathEl::CurveTo(
                    Point { x: 42.00, y: 7.79 },
                    Point { x: 40.21, y: 6.00 },
                    Point { x: 38.00, y: 6.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 38.00, y: 30.00 }),
                PathEl::LineTo(Point { x: 30.00, y: 30.00 }),
                PathEl::CurveTo(
                    Point { x: 30.00, y: 33.31 },
                    Point { x: 27.31, y: 36.00 },
                    Point { x: 24.00, y: 36.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 20.69, y: 36.00 },
                    Point { x: 18.00, y: 33.31 },
                    Point { x: 18.00, y: 30.00 },
                ),
                PathEl::LineTo(Point { x: 9.98, y: 30.00 }),
                PathEl::LineTo(Point { x: 9.98, y: 10.00 }),
                PathEl::LineTo(Point { x: 38.00, y: 10.00 }),
                PathEl::LineTo(Point { x: 38.00, y: 30.00 }),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct BubbleChart {
    size: f64,
    color: Color,
}

impl BubbleChart {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for BubbleChart {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            Circle {
                center: Point { x: 14.40, y: 28.80 },
                radius: 6.40,
            },
            &brush,
        );
        ctx.fill(
            Circle {
                center: Point { x: 29.60, y: 36.00 },
                radius: 4.00,
            },
            &brush,
        );
        ctx.fill(
            Circle {
                center: Point { x: 30.40, y: 17.60 },
                radius: 9.60,
            },
            &brush,
        );
    }
}

pub struct LeakRemove {
    size: f64,
    color: Color,
}

impl LeakRemove {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for LeakRemove {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 20.00, y: 6.00 }),
                PathEl::LineTo(Point { x: 16.00, y: 6.00 }),
                PathEl::CurveTo(
                    Point { x: 16.00, y: 6.73 },
                    Point { x: 15.91, y: 7.44 },
                    Point { x: 15.76, y: 8.13 },
                ),
                PathEl::LineTo(Point { x: 18.95, y: 11.32 }),
                PathEl::CurveTo(
                    Point { x: 19.62, y: 9.67 },
                    Point { x: 20.00, y: 7.88 },
                    Point { x: 20.00, y: 6.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 6.00, y: 8.55 }),
                PathEl::LineTo(Point { x: 11.68, y: 14.23 }),
                PathEl::CurveTo(
                    Point { x: 10.06, y: 15.34 },
                    Point { x: 8.11, y: 16.00 },
                    Point { x: 6.00, y: 16.00 },
                ),
                PathEl::LineTo(Point { x: 6.00, y: 20.00 }),
                PathEl::CurveTo(
                    Point { x: 9.22, y: 20.00 },
                    Point { x: 12.17, y: 18.90 },
                    Point { x: 14.53, y: 17.08 },
                ),
                PathEl::LineTo(Point { x: 17.38, y: 19.93 }),
                PathEl::CurveTo(
                    Point { x: 14.29, y: 22.47 },
                    Point { x: 10.32, y: 24.00 },
                    Point { x: 6.00, y: 24.00 },
                ),
                PathEl::LineTo(Point { x: 6.00, y: 28.00 }),
                PathEl::CurveTo(
                    Point { x: 11.43, y: 28.00 },
                    Point { x: 16.39, y: 26.03 },
                    Point { x: 20.22, y: 22.77 },
                ),
                PathEl::LineTo(Point { x: 25.23, y: 27.78 }),
                PathEl::CurveTo(
                    Point { x: 21.97, y: 31.61 },
                    Point { x: 20.00, y: 36.57 },
                    Point { x: 20.00, y: 42.00 },
                ),
                PathEl::LineTo(Point { x: 24.00, y: 42.00 }),
                PathEl::CurveTo(
                    Point { x: 24.00, y: 37.68 },
                    Point { x: 25.53, y: 33.71 },
                    Point { x: 28.07, y: 30.61 },
                ),
                PathEl::LineTo(Point { x: 30.92, y: 33.46 }),
                PathEl::CurveTo(
                    Point { x: 29.10, y: 35.83 },
                    Point { x: 28.00, y: 38.78 },
                    Point { x: 28.00, y: 42.00 },
                ),
                PathEl::LineTo(Point { x: 32.00, y: 42.00 }),
                PathEl::CurveTo(
                    Point { x: 32.00, y: 39.89 },
                    Point { x: 32.66, y: 37.94 },
                    Point { x: 33.78, y: 36.32 },
                ),
                PathEl::LineTo(Point { x: 39.46, y: 42.00 }),
                PathEl::LineTo(Point { x: 42.00, y: 39.45 }),
                PathEl::LineTo(Point { x: 8.55, y: 6.00 }),
                PathEl::LineTo(Point { x: 6.00, y: 8.55 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 28.00, y: 6.00 }),
                PathEl::LineTo(Point { x: 24.00, y: 6.00 }),
                PathEl::CurveTo(
                    Point { x: 24.00, y: 9.00 },
                    Point { x: 23.25, y: 11.83 },
                    Point { x: 21.95, y: 14.32 },
                ),
                PathEl::LineTo(Point { x: 24.88, y: 17.25 }),
                PathEl::CurveTo(
                    Point { x: 26.85, y: 13.95 },
                    Point { x: 28.00, y: 10.12 },
                    Point { x: 28.00, y: 6.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 39.87, y: 32.24 }),
                PathEl::CurveTo(
                    Point { x: 40.56, y: 32.09 },
                    Point { x: 41.27, y: 32.00 },
                    Point { x: 42.00, y: 32.00 },
                ),
                PathEl::LineTo(Point { x: 42.00, y: 28.00 }),
                PathEl::CurveTo(
                    Point { x: 40.12, y: 28.00 },
                    Point { x: 38.33, y: 28.38 },
                    Point { x: 36.69, y: 29.05 },
                ),
                PathEl::LineTo(Point { x: 39.87, y: 32.24 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 30.75, y: 23.12 }),
                PathEl::LineTo(Point { x: 33.68, y: 26.05 }),
                PathEl::CurveTo(
                    Point { x: 36.17, y: 24.75 },
                    Point { x: 39.00, y: 24.00 },
                    Point { x: 42.00, y: 24.00 },
                ),
                PathEl::LineTo(Point { x: 42.00, y: 20.00 }),
                PathEl::CurveTo(
                    Point { x: 37.88, y: 20.00 },
                    Point { x: 34.05, y: 21.15 },
                    Point { x: 30.75, y: 23.12 },
                ),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct Place {
    size: f64,
    color: Color,
}

impl Place {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for Place {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 24.00, y: 4.00 }),
                PathEl::CurveTo(
                    Point { x: 16.27, y: 4.00 },
                    Point { x: 10.00, y: 10.27 },
                    Point { x: 10.00, y: 18.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 10.00, y: 28.50 },
                    Point { x: 24.00, y: 44.00 },
                    Point { x: 24.00, y: 44.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 24.00, y: 44.00 },
                    Point { x: 38.00, y: 28.50 },
                    Point { x: 38.00, y: 18.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 38.00, y: 10.27 },
                    Point { x: 31.73, y: 4.00 },
                    Point { x: 24.00, y: 4.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 24.00, y: 23.00 }),
                PathEl::CurveTo(
                    Point { x: 21.24, y: 23.00 },
                    Point { x: 19.00, y: 20.76 },
                    Point { x: 19.00, y: 18.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 19.00, y: 15.24 },
                    Point { x: 21.24, y: 13.00 },
                    Point { x: 24.00, y: 13.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 26.76, y: 13.00 },
                    Point { x: 29.00, y: 15.24 },
                    Point { x: 29.00, y: 18.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 29.00, y: 20.76 },
                    Point { x: 26.76, y: 23.00 },
                    Point { x: 24.00, y: 23.00 },
                ),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct ExpandMore {
    size: f64,
    color: Color,
}

impl ExpandMore {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for ExpandMore {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 33.17, y: 17.17 }),
                PathEl::LineTo(Point { x: 24.00, y: 26.34 }),
                PathEl::LineTo(Point { x: 14.83, y: 17.17 }),
                PathEl::LineTo(Point { x: 12.00, y: 20.00 }),
                PathEl::LineTo(Point { x: 24.00, y: 32.00 }),
                PathEl::LineTo(Point { x: 36.00, y: 20.00 }),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct ScreenLockRotation {
    size: f64,
    color: Color,
}

impl ScreenLockRotation {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for ScreenLockRotation {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 46.51, y: 25.54 }),
                PathEl::LineTo(Point { x: 41.37, y: 20.40 }),
                PathEl::LineTo(Point { x: 38.54, y: 23.23 }),
                PathEl::LineTo(Point { x: 42.97, y: 27.66 }),
                PathEl::LineTo(Point { x: 31.66, y: 38.97 }),
                PathEl::LineTo(Point { x: 9.03, y: 16.34 }),
                PathEl::LineTo(Point { x: 20.34, y: 5.03 }),
                PathEl::LineTo(Point { x: 24.53, y: 9.22 }),
                PathEl::LineTo(Point { x: 27.36, y: 6.39 }),
                PathEl::LineTo(Point { x: 22.46, y: 1.49 }),
                PathEl::CurveTo(
                    Point { x: 21.29, y: 0.32 },
                    Point { x: 19.39, y: 0.32 },
                    Point { x: 18.22, y: 1.49 },
                ),
                PathEl::LineTo(Point { x: 5.49, y: 14.22 }),
                PathEl::CurveTo(
                    Point { x: 4.32, y: 15.39 },
                    Point { x: 4.32, y: 17.29 },
                    Point { x: 5.49, y: 18.46 },
                ),
                PathEl::LineTo(Point { x: 29.53, y: 42.50 }),
                PathEl::CurveTo(
                    Point { x: 30.70, y: 43.67 },
                    Point { x: 32.60, y: 43.67 },
                    Point { x: 33.77, y: 42.50 },
                ),
                PathEl::LineTo(Point { x: 46.50, y: 29.77 }),
                PathEl::CurveTo(
                    Point { x: 47.68, y: 28.61 },
                    Point { x: 47.68, y: 26.71 },
                    Point { x: 46.51, y: 25.54 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 16.93, y: 40.97 }),
                PathEl::CurveTo(
                    Point { x: 10.40, y: 37.87 },
                    Point { x: 5.71, y: 31.52 },
                    Point { x: 5.00, y: 24.00 },
                ),
                PathEl::LineTo(Point { x: 2.00, y: 24.00 }),
                PathEl::CurveTo(
                    Point { x: 3.02, y: 36.32 },
                    Point { x: 13.32, y: 46.00 },
                    Point { x: 25.90, y: 46.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 26.35, y: 46.00 },
                    Point { x: 26.78, y: 45.96 },
                    Point { x: 27.23, y: 45.93 },
                ),
                PathEl::LineTo(Point { x: 19.60, y: 38.30 }),
                PathEl::LineTo(Point { x: 16.93, y: 40.97 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 32.00, y: 18.00 }),
                PathEl::LineTo(Point { x: 42.00, y: 18.00 }),
                PathEl::CurveTo(
                    Point { x: 43.11, y: 18.00 },
                    Point { x: 44.00, y: 17.10 },
                    Point { x: 44.00, y: 16.00 },
                ),
                PathEl::LineTo(Point { x: 44.00, y: 8.00 }),
                PathEl::CurveTo(
                    Point { x: 44.00, y: 6.90 },
                    Point { x: 43.11, y: 6.00 },
                    Point { x: 42.00, y: 6.00 },
                ),
                PathEl::LineTo(Point { x: 42.00, y: 5.00 }),
                PathEl::CurveTo(
                    Point { x: 42.00, y: 2.24 },
                    Point { x: 39.76, y: 0.00 },
                    Point { x: 37.00, y: 0.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 34.24, y: 0.00 },
                    Point { x: 32.00, y: 2.24 },
                    Point { x: 32.00, y: 5.00 },
                ),
                PathEl::LineTo(Point { x: 32.00, y: 6.00 }),
                PathEl::CurveTo(
                    Point { x: 30.89, y: 6.00 },
                    Point { x: 30.00, y: 6.90 },
                    Point { x: 30.00, y: 8.00 },
                ),
                PathEl::LineTo(Point { x: 30.00, y: 16.00 }),
                PathEl::CurveTo(
                    Point { x: 30.00, y: 17.10 },
                    Point { x: 30.89, y: 18.00 },
                    Point { x: 32.00, y: 18.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 33.60, y: 5.00 }),
                PathEl::CurveTo(
                    Point { x: 33.60, y: 3.12 },
                    Point { x: 35.12, y: 1.60 },
                    Point { x: 37.00, y: 1.60 },
                ),
                PathEl::CurveTo(
                    Point { x: 38.88, y: 1.60 },
                    Point { x: 40.40, y: 3.12 },
                    Point { x: 40.40, y: 5.00 },
                ),
                PathEl::LineTo(Point { x: 40.40, y: 6.00 }),
                PathEl::LineTo(Point { x: 33.60, y: 6.00 }),
                PathEl::LineTo(Point { x: 33.60, y: 5.00 }),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct DirectionsBus {
    size: f64,
    color: Color,
}

impl DirectionsBus {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for DirectionsBus {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 8.00, y: 32.00 }),
                PathEl::CurveTo(
                    Point { x: 8.00, y: 33.77 },
                    Point { x: 8.78, y: 35.34 },
                    Point { x: 10.00, y: 36.44 },
                ),
                PathEl::LineTo(Point { x: 10.00, y: 40.00 }),
                PathEl::CurveTo(
                    Point { x: 10.00, y: 41.10 },
                    Point { x: 10.90, y: 42.00 },
                    Point { x: 12.00, y: 42.00 },
                ),
                PathEl::LineTo(Point { x: 14.00, y: 42.00 }),
                PathEl::CurveTo(
                    Point { x: 15.11, y: 42.00 },
                    Point { x: 16.00, y: 41.10 },
                    Point { x: 16.00, y: 40.00 },
                ),
                PathEl::LineTo(Point { x: 16.00, y: 38.00 }),
                PathEl::LineTo(Point { x: 32.00, y: 38.00 }),
                PathEl::LineTo(Point { x: 32.00, y: 40.00 }),
                PathEl::CurveTo(
                    Point { x: 32.00, y: 41.10 },
                    Point { x: 32.89, y: 42.00 },
                    Point { x: 34.00, y: 42.00 },
                ),
                PathEl::LineTo(Point { x: 36.00, y: 42.00 }),
                PathEl::CurveTo(
                    Point { x: 37.10, y: 42.00 },
                    Point { x: 38.00, y: 41.10 },
                    Point { x: 38.00, y: 40.00 },
                ),
                PathEl::LineTo(Point { x: 38.00, y: 36.44 }),
                PathEl::CurveTo(
                    Point { x: 39.22, y: 35.34 },
                    Point { x: 40.00, y: 33.77 },
                    Point { x: 40.00, y: 32.00 },
                ),
                PathEl::LineTo(Point { x: 40.00, y: 12.00 }),
                PathEl::CurveTo(
                    Point { x: 40.00, y: 5.00 },
                    Point { x: 32.84, y: 4.00 },
                    Point { x: 24.00, y: 4.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 15.16, y: 4.00 },
                    Point { x: 8.00, y: 5.00 },
                    Point { x: 8.00, y: 12.00 },
                ),
                PathEl::LineTo(Point { x: 8.00, y: 32.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 15.00, y: 34.00 }),
                PathEl::CurveTo(
                    Point { x: 13.34, y: 34.00 },
                    Point { x: 12.00, y: 32.66 },
                    Point { x: 12.00, y: 31.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 12.00, y: 29.34 },
                    Point { x: 13.34, y: 28.00 },
                    Point { x: 15.00, y: 28.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 16.66, y: 28.00 },
                    Point { x: 18.00, y: 29.34 },
                    Point { x: 18.00, y: 31.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 18.00, y: 32.66 },
                    Point { x: 16.66, y: 34.00 },
                    Point { x: 15.00, y: 34.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 33.00, y: 34.00 }),
                PathEl::CurveTo(
                    Point { x: 31.34, y: 34.00 },
                    Point { x: 30.00, y: 32.66 },
                    Point { x: 30.00, y: 31.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 30.00, y: 29.34 },
                    Point { x: 31.34, y: 28.00 },
                    Point { x: 33.00, y: 28.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 34.66, y: 28.00 },
                    Point { x: 36.00, y: 29.34 },
                    Point { x: 36.00, y: 31.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 36.00, y: 32.66 },
                    Point { x: 34.66, y: 34.00 },
                    Point { x: 33.00, y: 34.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 36.00, y: 22.00 }),
                PathEl::LineTo(Point { x: 12.00, y: 22.00 }),
                PathEl::LineTo(Point { x: 12.00, y: 12.00 }),
                PathEl::LineTo(Point { x: 36.00, y: 12.00 }),
                PathEl::LineTo(Point { x: 36.00, y: 22.00 }),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct SignalCellularNoSim {
    size: f64,
    color: Color,
}

impl SignalCellularNoSim {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for SignalCellularNoSim {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 37.98, y: 10.00 }),
                PathEl::CurveTo(
                    Point { x: 37.98, y: 7.79 },
                    Point { x: 36.21, y: 6.00 },
                    Point { x: 34.00, y: 6.00 },
                ),
                PathEl::LineTo(Point { x: 20.00, y: 6.00 }),
                PathEl::LineTo(Point { x: 15.32, y: 10.68 }),
                PathEl::LineTo(Point { x: 38.00, y: 33.36 }),
                PathEl::LineTo(Point { x: 37.98, y: 10.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 7.30, y: 7.76 }),
                PathEl::LineTo(Point { x: 4.76, y: 10.30 }),
                PathEl::LineTo(Point { x: 10.00, y: 15.55 }),
                PathEl::LineTo(Point { x: 10.00, y: 38.00 }),
                PathEl::CurveTo(
                    Point { x: 10.00, y: 40.21 },
                    Point { x: 11.79, y: 42.00 },
                    Point { x: 14.00, y: 42.00 },
                ),
                PathEl::LineTo(Point { x: 34.02, y: 42.00 }),
                PathEl::CurveTo(
                    Point { x: 34.72, y: 42.00 },
                    Point { x: 35.37, y: 41.80 },
                    Point { x: 35.94, y: 41.49 },
                ),
                PathEl::LineTo(Point { x: 39.70, y: 45.25 }),
                PathEl::LineTo(Point { x: 42.24, y: 42.70 }),
                PathEl::LineTo(Point { x: 7.30, y: 7.76 }),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct Hearing {
    size: f64,
    color: Color,
}

impl Hearing {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for Hearing {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 34.00, y: 40.00 }),
                PathEl::CurveTo(
                    Point { x: 33.43, y: 40.00 },
                    Point { x: 32.87, y: 39.88 },
                    Point { x: 32.47, y: 39.70 },
                ),
                PathEl::CurveTo(
                    Point { x: 31.06, y: 38.95 },
                    Point { x: 30.04, y: 37.93 },
                    Point { x: 29.05, y: 34.93 },
                ),
                PathEl::CurveTo(
                    Point { x: 28.02, y: 31.82 },
                    Point { x: 26.11, y: 30.35 },
                    Point { x: 24.26, y: 28.92 },
                ),
                PathEl::CurveTo(
                    Point { x: 22.68, y: 27.70 },
                    Point { x: 21.04, y: 26.44 },
                    Point { x: 19.63, y: 23.87 },
                ),
                PathEl::CurveTo(
                    Point { x: 18.58, y: 21.95 },
                    Point { x: 18.00, y: 19.86 },
                    Point { x: 18.00, y: 18.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 18.00, y: 12.39 },
                    Point { x: 22.39, y: 8.00 },
                    Point { x: 28.00, y: 8.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 33.61, y: 8.00 },
                    Point { x: 38.00, y: 12.39 },
                    Point { x: 38.00, y: 18.00 },
                ),
                PathEl::LineTo(Point { x: 42.00, y: 18.00 }),
                PathEl::CurveTo(
                    Point { x: 42.00, y: 10.15 },
                    Point { x: 35.85, y: 4.00 },
                    Point { x: 28.00, y: 4.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 20.15, y: 4.00 },
                    Point { x: 14.00, y: 10.15 },
                    Point { x: 14.00, y: 18.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 14.00, y: 20.53 },
                    Point { x: 14.76, y: 23.30 },
                    Point { x: 16.13, y: 25.80 },
                ),
                PathEl::CurveTo(
                    Point { x: 17.95, y: 29.11 },
                    Point { x: 20.10, y: 30.76 },
                    Point { x: 21.83, y: 32.10 },
                ),
                PathEl::CurveTo(
                    Point { x: 23.45, y: 33.35 },
                    Point { x: 24.62, y: 34.25 },
                    Point { x: 25.26, y: 36.19 },
                ),
                PathEl::CurveTo(
                    Point { x: 26.46, y: 39.82 },
                    Point { x: 28.01, y: 41.87 },
                    Point { x: 30.71, y: 43.29 },
                ),
                PathEl::CurveTo(
                    Point { x: 31.75, y: 43.76 },
                    Point { x: 32.85, y: 44.00 },
                    Point { x: 34.00, y: 44.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 38.41, y: 44.00 },
                    Point { x: 42.00, y: 40.41 },
                    Point { x: 42.00, y: 36.00 },
                ),
                PathEl::LineTo(Point { x: 38.00, y: 36.00 }),
                PathEl::CurveTo(
                    Point { x: 38.00, y: 38.21 },
                    Point { x: 36.21, y: 40.00 },
                    Point { x: 34.00, y: 40.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 15.27, y: 5.27 }),
                PathEl::LineTo(Point { x: 12.44, y: 2.44 }),
                PathEl::CurveTo(
                    Point { x: 8.46, y: 6.42 },
                    Point { x: 6.00, y: 11.92 },
                    Point { x: 6.00, y: 18.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 6.00, y: 24.08 },
                    Point { x: 8.46, y: 29.58 },
                    Point { x: 12.44, y: 33.56 },
                ),
                PathEl::LineTo(Point { x: 15.27, y: 30.73 }),
                PathEl::CurveTo(
                    Point { x: 12.01, y: 27.47 },
                    Point { x: 10.00, y: 22.97 },
                    Point { x: 10.00, y: 18.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 10.00, y: 13.03 },
                    Point { x: 12.01, y: 8.53 },
                    Point { x: 15.27, y: 5.27 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 23.00, y: 18.00 }),
                PathEl::CurveTo(
                    Point { x: 23.00, y: 20.76 },
                    Point { x: 25.24, y: 23.00 },
                    Point { x: 28.00, y: 23.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 30.76, y: 23.00 },
                    Point { x: 33.00, y: 20.76 },
                    Point { x: 33.00, y: 18.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 33.00, y: 15.24 },
                    Point { x: 30.76, y: 13.00 },
                    Point { x: 28.00, y: 13.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 25.24, y: 13.00 },
                    Point { x: 23.00, y: 15.24 },
                    Point { x: 23.00, y: 18.00 },
                ),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct AirlineSeatFlat {
    size: f64,
    color: Color,
}

impl AirlineSeatFlat {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for AirlineSeatFlat {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 44.00, y: 22.00 }),
                PathEl::LineTo(Point { x: 44.00, y: 26.00 }),
                PathEl::LineTo(Point { x: 18.00, y: 26.00 }),
                PathEl::LineTo(Point { x: 18.00, y: 14.00 }),
                PathEl::LineTo(Point { x: 36.00, y: 14.00 }),
                PathEl::CurveTo(
                    Point { x: 40.42, y: 14.00 },
                    Point { x: 44.00, y: 17.58 },
                    Point { x: 44.00, y: 22.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 4.00, y: 28.00 }),
                PathEl::LineTo(Point { x: 4.00, y: 32.00 }),
                PathEl::LineTo(Point { x: 16.00, y: 32.00 }),
                PathEl::LineTo(Point { x: 16.00, y: 36.00 }),
                PathEl::LineTo(Point { x: 32.00, y: 36.00 }),
                PathEl::LineTo(Point { x: 32.00, y: 32.00 }),
                PathEl::LineTo(Point { x: 44.00, y: 32.00 }),
                PathEl::LineTo(Point { x: 44.00, y: 28.00 }),
                PathEl::LineTo(Point { x: 4.00, y: 28.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 14.29, y: 24.20 }),
                PathEl::CurveTo(
                    Point { x: 16.61, y: 21.83 },
                    Point { x: 16.57, y: 18.03 },
                    Point { x: 14.20, y: 15.72 },
                ),
                PathEl::CurveTo(
                    Point { x: 11.83, y: 13.40 },
                    Point { x: 8.03, y: 13.44 },
                    Point { x: 5.72, y: 15.81 },
                ),
                PathEl::CurveTo(
                    Point { x: 3.40, y: 18.18 },
                    Point { x: 3.44, y: 21.98 },
                    Point { x: 5.81, y: 24.29 },
                ),
                PathEl::CurveTo(
                    Point { x: 8.17, y: 26.61 },
                    Point { x: 11.97, y: 26.57 },
                    Point { x: 14.29, y: 24.20 },
                ),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct ClosedCaption {
    size: f64,
    color: Color,
}

impl ClosedCaption {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for ClosedCaption {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 38.00, y: 8.00 }),
                PathEl::LineTo(Point { x: 10.00, y: 8.00 }),
                PathEl::CurveTo(
                    Point { x: 7.79, y: 8.00 },
                    Point { x: 6.00, y: 9.79 },
                    Point { x: 6.00, y: 12.00 },
                ),
                PathEl::LineTo(Point { x: 6.00, y: 36.00 }),
                PathEl::CurveTo(
                    Point { x: 6.00, y: 38.21 },
                    Point { x: 7.79, y: 40.00 },
                    Point { x: 10.00, y: 40.00 },
                ),
                PathEl::LineTo(Point { x: 38.00, y: 40.00 }),
                PathEl::CurveTo(
                    Point { x: 40.21, y: 40.00 },
                    Point { x: 42.00, y: 38.21 },
                    Point { x: 42.00, y: 36.00 },
                ),
                PathEl::LineTo(Point { x: 42.00, y: 12.00 }),
                PathEl::CurveTo(
                    Point { x: 42.00, y: 9.79 },
                    Point { x: 40.21, y: 8.00 },
                    Point { x: 38.00, y: 8.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 22.00, y: 22.00 }),
                PathEl::LineTo(Point { x: 19.00, y: 22.00 }),
                PathEl::LineTo(Point { x: 19.00, y: 21.00 }),
                PathEl::LineTo(Point { x: 15.00, y: 21.00 }),
                PathEl::LineTo(Point { x: 15.00, y: 27.00 }),
                PathEl::LineTo(Point { x: 19.00, y: 27.00 }),
                PathEl::LineTo(Point { x: 19.00, y: 26.00 }),
                PathEl::LineTo(Point { x: 22.00, y: 26.00 }),
                PathEl::LineTo(Point { x: 22.00, y: 28.00 }),
                PathEl::CurveTo(
                    Point { x: 22.00, y: 29.10 },
                    Point { x: 21.11, y: 30.00 },
                    Point { x: 20.00, y: 30.00 },
                ),
                PathEl::LineTo(Point { x: 14.00, y: 30.00 }),
                PathEl::CurveTo(
                    Point { x: 12.89, y: 30.00 },
                    Point { x: 12.00, y: 29.10 },
                    Point { x: 12.00, y: 28.00 },
                ),
                PathEl::LineTo(Point { x: 12.00, y: 20.00 }),
                PathEl::CurveTo(
                    Point { x: 12.00, y: 18.90 },
                    Point { x: 12.89, y: 18.00 },
                    Point { x: 14.00, y: 18.00 },
                ),
                PathEl::LineTo(Point { x: 20.00, y: 18.00 }),
                PathEl::CurveTo(
                    Point { x: 21.11, y: 18.00 },
                    Point { x: 22.00, y: 18.90 },
                    Point { x: 22.00, y: 20.00 },
                ),
                PathEl::LineTo(Point { x: 22.00, y: 22.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 36.00, y: 22.00 }),
                PathEl::LineTo(Point { x: 33.00, y: 22.00 }),
                PathEl::LineTo(Point { x: 33.00, y: 21.00 }),
                PathEl::LineTo(Point { x: 29.00, y: 21.00 }),
                PathEl::LineTo(Point { x: 29.00, y: 27.00 }),
                PathEl::LineTo(Point { x: 33.00, y: 27.00 }),
                PathEl::LineTo(Point { x: 33.00, y: 26.00 }),
                PathEl::LineTo(Point { x: 36.00, y: 26.00 }),
                PathEl::LineTo(Point { x: 36.00, y: 28.00 }),
                PathEl::CurveTo(
                    Point { x: 36.00, y: 29.10 },
                    Point { x: 35.11, y: 30.00 },
                    Point { x: 34.00, y: 30.00 },
                ),
                PathEl::LineTo(Point { x: 28.00, y: 30.00 }),
                PathEl::CurveTo(
                    Point { x: 26.89, y: 30.00 },
                    Point { x: 26.00, y: 29.10 },
                    Point { x: 26.00, y: 28.00 },
                ),
                PathEl::LineTo(Point { x: 26.00, y: 20.00 }),
                PathEl::CurveTo(
                    Point { x: 26.00, y: 18.90 },
                    Point { x: 26.89, y: 18.00 },
                    Point { x: 28.00, y: 18.00 },
                ),
                PathEl::LineTo(Point { x: 34.00, y: 18.00 }),
                PathEl::CurveTo(
                    Point { x: 35.11, y: 18.00 },
                    Point { x: 36.00, y: 18.90 },
                    Point { x: 36.00, y: 20.00 },
                ),
                PathEl::LineTo(Point { x: 36.00, y: 22.00 }),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct InfoOutline {
    size: f64,
    color: Color,
}

impl InfoOutline {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for InfoOutline {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 22.00, y: 34.00 }),
                PathEl::LineTo(Point { x: 26.00, y: 34.00 }),
                PathEl::LineTo(Point { x: 26.00, y: 22.00 }),
                PathEl::LineTo(Point { x: 22.00, y: 22.00 }),
                PathEl::LineTo(Point { x: 22.00, y: 34.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 24.00, y: 4.00 }),
                PathEl::CurveTo(
                    Point { x: 12.95, y: 4.00 },
                    Point { x: 4.00, y: 12.95 },
                    Point { x: 4.00, y: 24.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 4.00, y: 35.05 },
                    Point { x: 12.95, y: 44.00 },
                    Point { x: 24.00, y: 44.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 35.05, y: 44.00 },
                    Point { x: 44.00, y: 35.05 },
                    Point { x: 44.00, y: 24.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 44.00, y: 12.95 },
                    Point { x: 35.05, y: 4.00 },
                    Point { x: 24.00, y: 4.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 24.00, y: 40.00 }),
                PathEl::CurveTo(
                    Point { x: 15.18, y: 40.00 },
                    Point { x: 8.00, y: 32.82 },
                    Point { x: 8.00, y: 24.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 8.00, y: 15.18 },
                    Point { x: 15.18, y: 8.00 },
                    Point { x: 24.00, y: 8.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 32.82, y: 8.00 },
                    Point { x: 40.00, y: 15.18 },
                    Point { x: 40.00, y: 24.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 40.00, y: 32.82 },
                    Point { x: 32.82, y: 40.00 },
                    Point { x: 24.00, y: 40.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 22.00, y: 18.00 }),
                PathEl::LineTo(Point { x: 26.00, y: 18.00 }),
                PathEl::LineTo(Point { x: 26.00, y: 14.00 }),
                PathEl::LineTo(Point { x: 22.00, y: 14.00 }),
                PathEl::LineTo(Point { x: 22.00, y: 18.00 }),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct Archive {
    size: f64,
    color: Color,
}

impl Archive {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for Archive {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 41.09, y: 10.45 }),
                PathEl::LineTo(Point { x: 38.32, y: 7.09 }),
                PathEl::CurveTo(
                    Point { x: 37.76, y: 6.43 },
                    Point { x: 36.93, y: 6.00 },
                    Point { x: 36.00, y: 6.00 },
                ),
                PathEl::LineTo(Point { x: 12.00, y: 6.00 }),
                PathEl::CurveTo(
                    Point { x: 11.07, y: 6.00 },
                    Point { x: 10.24, y: 6.43 },
                    Point { x: 9.69, y: 7.09 },
                ),
                PathEl::LineTo(Point { x: 6.92, y: 10.45 }),
                PathEl::CurveTo(
                    Point { x: 6.34, y: 11.15 },
                    Point { x: 6.00, y: 12.03 },
                    Point { x: 6.00, y: 13.00 },
                ),
                PathEl::LineTo(Point { x: 6.00, y: 38.00 }),
                PathEl::CurveTo(
                    Point { x: 6.00, y: 40.21 },
                    Point { x: 7.79, y: 42.00 },
                    Point { x: 10.00, y: 42.00 },
                ),
                PathEl::LineTo(Point { x: 38.00, y: 42.00 }),
                PathEl::CurveTo(
                    Point { x: 40.21, y: 42.00 },
                    Point { x: 42.00, y: 40.21 },
                    Point { x: 42.00, y: 38.00 },
                ),
                PathEl::LineTo(Point { x: 42.00, y: 13.00 }),
                PathEl::CurveTo(
                    Point { x: 42.00, y: 12.03 },
                    Point { x: 41.66, y: 11.15 },
                    Point { x: 41.09, y: 10.45 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 24.00, y: 35.00 }),
                PathEl::LineTo(Point { x: 13.00, y: 24.00 }),
                PathEl::LineTo(Point { x: 20.00, y: 24.00 }),
                PathEl::LineTo(Point { x: 20.00, y: 20.00 }),
                PathEl::LineTo(Point { x: 28.00, y: 20.00 }),
                PathEl::LineTo(Point { x: 28.00, y: 24.00 }),
                PathEl::LineTo(Point { x: 35.00, y: 24.00 }),
                PathEl::LineTo(Point { x: 24.00, y: 35.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 10.25, y: 10.00 }),
                PathEl::LineTo(Point { x: 11.88, y: 8.00 }),
                PathEl::LineTo(Point { x: 35.88, y: 8.00 }),
                PathEl::LineTo(Point { x: 37.75, y: 10.00 }),
                PathEl::LineTo(Point { x: 10.25, y: 10.00 }),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct PresentToAll {
    size: f64,
    color: Color,
}

impl PresentToAll {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for PresentToAll {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 42.00, y: 6.00 }),
                PathEl::LineTo(Point { x: 6.00, y: 6.00 }),
                PathEl::CurveTo(
                    Point { x: 3.79, y: 6.00 },
                    Point { x: 2.00, y: 7.79 },
                    Point { x: 2.00, y: 10.00 },
                ),
                PathEl::LineTo(Point { x: 2.00, y: 38.00 }),
                PathEl::CurveTo(
                    Point { x: 2.00, y: 40.21 },
                    Point { x: 3.79, y: 42.00 },
                    Point { x: 6.00, y: 42.00 },
                ),
                PathEl::LineTo(Point { x: 42.00, y: 42.00 }),
                PathEl::CurveTo(
                    Point { x: 44.21, y: 42.00 },
                    Point { x: 46.00, y: 40.21 },
                    Point { x: 46.00, y: 38.00 },
                ),
                PathEl::LineTo(Point { x: 46.00, y: 10.00 }),
                PathEl::CurveTo(
                    Point { x: 46.00, y: 7.79 },
                    Point { x: 44.21, y: 6.00 },
                    Point { x: 42.00, y: 6.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 42.00, y: 38.03 }),
                PathEl::LineTo(Point { x: 6.00, y: 38.03 }),
                PathEl::LineTo(Point { x: 6.00, y: 9.97 }),
                PathEl::LineTo(Point { x: 42.00, y: 9.97 }),
                PathEl::LineTo(Point { x: 42.00, y: 38.03 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 20.00, y: 24.00 }),
                PathEl::LineTo(Point { x: 16.00, y: 24.00 }),
                PathEl::LineTo(Point { x: 24.00, y: 16.00 }),
                PathEl::LineTo(Point { x: 32.00, y: 24.00 }),
                PathEl::LineTo(Point { x: 28.00, y: 24.00 }),
                PathEl::LineTo(Point { x: 28.00, y: 32.00 }),
                PathEl::LineTo(Point { x: 20.00, y: 32.00 }),
                PathEl::LineTo(Point { x: 20.00, y: 24.00 }),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct PhotoSizeSelectActual {
    size: f64,
    color: Color,
}

impl PhotoSizeSelectActual {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for PhotoSizeSelectActual {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 24.0, height / 24.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 21.00, y: 3.00 }),
                PathEl::LineTo(Point { x: 3.00, y: 3.00 }),
                PathEl::CurveTo(
                    Point { x: 2.00, y: 3.00 },
                    Point { x: 1.00, y: 4.00 },
                    Point { x: 1.00, y: 5.00 },
                ),
                PathEl::LineTo(Point { x: 1.00, y: 19.00 }),
                PathEl::CurveTo(
                    Point { x: 1.00, y: 20.10 },
                    Point { x: 1.90, y: 21.00 },
                    Point { x: 3.00, y: 21.00 },
                ),
                PathEl::LineTo(Point { x: 21.00, y: 21.00 }),
                PathEl::CurveTo(
                    Point { x: 22.00, y: 21.00 },
                    Point { x: 23.00, y: 20.00 },
                    Point { x: 23.00, y: 19.00 },
                ),
                PathEl::LineTo(Point { x: 23.00, y: 5.00 }),
                PathEl::CurveTo(
                    Point { x: 23.00, y: 4.00 },
                    Point { x: 22.00, y: 3.00 },
                    Point { x: 21.00, y: 3.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 5.00, y: 17.00 }),
                PathEl::LineTo(Point { x: 8.50, y: 12.50 }),
                PathEl::LineTo(Point { x: 11.00, y: 15.51 }),
                PathEl::LineTo(Point { x: 14.50, y: 11.00 }),
                PathEl::LineTo(Point { x: 19.00, y: 17.00 }),
                PathEl::LineTo(Point { x: 5.00, y: 17.00 }),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct LocalOffer {
    size: f64,
    color: Color,
}

impl LocalOffer {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for LocalOffer {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 42.82, y: 23.16 }),
                PathEl::LineTo(Point { x: 24.83, y: 5.17 }),
                PathEl::CurveTo(
                    Point { x: 24.10, y: 4.45 },
                    Point { x: 23.10, y: 4.00 },
                    Point { x: 22.00, y: 4.00 },
                ),
                PathEl::LineTo(Point { x: 8.00, y: 4.00 }),
                PathEl::CurveTo(
                    Point { x: 5.79, y: 4.00 },
                    Point { x: 4.00, y: 5.79 },
                    Point { x: 4.00, y: 8.00 },
                ),
                PathEl::LineTo(Point { x: 4.00, y: 22.00 }),
                PathEl::CurveTo(
                    Point { x: 4.00, y: 23.11 },
                    Point { x: 4.45, y: 24.11 },
                    Point { x: 5.18, y: 24.83 },
                ),
                PathEl::LineTo(Point { x: 23.18, y: 42.83 }),
                PathEl::CurveTo(
                    Point { x: 23.90, y: 43.55 },
                    Point { x: 24.90, y: 44.00 },
                    Point { x: 26.00, y: 44.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 27.10, y: 44.00 },
                    Point { x: 28.11, y: 43.55 },
                    Point { x: 28.83, y: 42.83 },
                ),
                PathEl::LineTo(Point { x: 42.83, y: 28.83 }),
                PathEl::CurveTo(
                    Point { x: 43.55, y: 28.10 },
                    Point { x: 44.00, y: 27.10 },
                    Point { x: 44.00, y: 26.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 44.00, y: 24.89 },
                    Point { x: 43.55, y: 23.89 },
                    Point { x: 42.82, y: 23.16 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 11.00, y: 14.00 }),
                PathEl::CurveTo(
                    Point { x: 9.34, y: 14.00 },
                    Point { x: 8.00, y: 12.66 },
                    Point { x: 8.00, y: 11.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 8.00, y: 9.34 },
                    Point { x: 9.34, y: 8.00 },
                    Point { x: 11.00, y: 8.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 12.66, y: 8.00 },
                    Point { x: 14.00, y: 9.34 },
                    Point { x: 14.00, y: 11.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 14.00, y: 12.66 },
                    Point { x: 12.66, y: 14.00 },
                    Point { x: 11.00, y: 14.00 },
                ),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct SignalWifi0Bar {
    size: f64,
    color: Color,
}

impl SignalWifi0Bar {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for SignalWifi0Bar {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 24.02, y: 42.98 }),
                PathEl::LineTo(Point { x: 47.28, y: 14.00 }),
                PathEl::CurveTo(
                    Point { x: 46.38, y: 13.32 },
                    Point { x: 37.43, y: 6.00 },
                    Point { x: 24.00, y: 6.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 10.57, y: 6.00 },
                    Point { x: 1.62, y: 13.32 },
                    Point { x: 0.72, y: 14.00 },
                ),
                PathEl::LineTo(Point { x: 23.98, y: 42.98 }),
                PathEl::LineTo(Point { x: 24.00, y: 43.00 }),
                PathEl::LineTo(Point { x: 24.02, y: 42.98 }),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct SignalCellularOff {
    size: f64,
    color: Color,
}

impl SignalCellularOff {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for SignalCellularOff {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 42.00, y: 2.00 }),
                PathEl::LineTo(Point { x: 24.82, y: 19.18 }),
                PathEl::LineTo(Point { x: 42.00, y: 36.36 }),
                PathEl::LineTo(Point { x: 42.00, y: 2.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 9.55, y: 9.00 }),
                PathEl::LineTo(Point { x: 7.00, y: 11.54 }),
                PathEl::LineTo(Point { x: 19.73, y: 24.27 }),
                PathEl::LineTo(Point { x: 2.00, y: 42.00 }),
                PathEl::LineTo(Point { x: 37.45, y: 42.00 }),
                PathEl::LineTo(Point { x: 41.45, y: 46.00 }),
                PathEl::LineTo(Point { x: 44.00, y: 43.45 }),
                PathEl::LineTo(Point { x: 9.55, y: 9.00 }),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct Toc {
    size: f64,
    color: Color,
}

impl Toc {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for Toc {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 6.00, y: 18.00 }),
                PathEl::LineTo(Point { x: 34.00, y: 18.00 }),
                PathEl::LineTo(Point { x: 34.00, y: 14.00 }),
                PathEl::LineTo(Point { x: 6.00, y: 14.00 }),
                PathEl::LineTo(Point { x: 6.00, y: 18.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 6.00, y: 26.00 }),
                PathEl::LineTo(Point { x: 34.00, y: 26.00 }),
                PathEl::LineTo(Point { x: 34.00, y: 22.00 }),
                PathEl::LineTo(Point { x: 6.00, y: 22.00 }),
                PathEl::LineTo(Point { x: 6.00, y: 26.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 6.00, y: 34.00 }),
                PathEl::LineTo(Point { x: 34.00, y: 34.00 }),
                PathEl::LineTo(Point { x: 34.00, y: 30.00 }),
                PathEl::LineTo(Point { x: 6.00, y: 30.00 }),
                PathEl::LineTo(Point { x: 6.00, y: 34.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 38.00, y: 34.00 }),
                PathEl::LineTo(Point { x: 42.00, y: 34.00 }),
                PathEl::LineTo(Point { x: 42.00, y: 30.00 }),
                PathEl::LineTo(Point { x: 38.00, y: 30.00 }),
                PathEl::LineTo(Point { x: 38.00, y: 34.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 38.00, y: 14.00 }),
                PathEl::LineTo(Point { x: 38.00, y: 18.00 }),
                PathEl::LineTo(Point { x: 42.00, y: 18.00 }),
                PathEl::LineTo(Point { x: 42.00, y: 14.00 }),
                PathEl::LineTo(Point { x: 38.00, y: 14.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 38.00, y: 26.00 }),
                PathEl::LineTo(Point { x: 42.00, y: 26.00 }),
                PathEl::LineTo(Point { x: 42.00, y: 22.00 }),
                PathEl::LineTo(Point { x: 38.00, y: 22.00 }),
                PathEl::LineTo(Point { x: 38.00, y: 26.00 }),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct Airplay {
    size: f64,
    color: Color,
}

impl Airplay {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for Airplay {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 42.00, y: 6.00 }),
                PathEl::LineTo(Point { x: 6.00, y: 6.00 }),
                PathEl::CurveTo(
                    Point { x: 3.80, y: 6.00 },
                    Point { x: 2.00, y: 7.80 },
                    Point { x: 2.00, y: 10.00 },
                ),
                PathEl::LineTo(Point { x: 2.00, y: 34.00 }),
                PathEl::CurveTo(
                    Point { x: 2.00, y: 36.20 },
                    Point { x: 3.80, y: 38.00 },
                    Point { x: 6.00, y: 38.00 },
                ),
                PathEl::LineTo(Point { x: 14.00, y: 38.00 }),
                PathEl::LineTo(Point { x: 14.00, y: 34.00 }),
                PathEl::LineTo(Point { x: 6.00, y: 34.00 }),
                PathEl::LineTo(Point { x: 6.00, y: 10.00 }),
                PathEl::LineTo(Point { x: 42.00, y: 10.00 }),
                PathEl::LineTo(Point { x: 42.00, y: 34.00 }),
                PathEl::LineTo(Point { x: 34.00, y: 34.00 }),
                PathEl::LineTo(Point { x: 34.00, y: 38.00 }),
                PathEl::LineTo(Point { x: 42.00, y: 38.00 }),
                PathEl::CurveTo(
                    Point { x: 44.20, y: 38.00 },
                    Point { x: 46.00, y: 36.20 },
                    Point { x: 46.00, y: 34.00 },
                ),
                PathEl::LineTo(Point { x: 46.00, y: 10.00 }),
                PathEl::CurveTo(
                    Point { x: 46.00, y: 7.80 },
                    Point { x: 44.20, y: 6.00 },
                    Point { x: 42.00, y: 6.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 12.00, y: 44.00 }),
                PathEl::LineTo(Point { x: 36.00, y: 44.00 }),
                PathEl::LineTo(Point { x: 24.00, y: 32.00 }),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct Copyright {
    size: f64,
    color: Color,
}

impl Copyright {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for Copyright {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 24.00, y: 4.00 }),
                PathEl::CurveTo(
                    Point { x: 12.95, y: 4.00 },
                    Point { x: 4.00, y: 12.95 },
                    Point { x: 4.00, y: 24.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 4.00, y: 35.05 },
                    Point { x: 12.95, y: 44.00 },
                    Point { x: 24.00, y: 44.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 35.05, y: 44.00 },
                    Point { x: 44.00, y: 35.05 },
                    Point { x: 44.00, y: 24.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 44.00, y: 12.95 },
                    Point { x: 35.05, y: 4.00 },
                    Point { x: 24.00, y: 4.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 24.00, y: 40.00 }),
                PathEl::CurveTo(
                    Point { x: 15.18, y: 40.00 },
                    Point { x: 8.00, y: 32.82 },
                    Point { x: 8.00, y: 24.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 8.00, y: 15.18 },
                    Point { x: 15.18, y: 8.00 },
                    Point { x: 24.00, y: 8.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 32.82, y: 8.00 },
                    Point { x: 40.00, y: 15.18 },
                    Point { x: 40.00, y: 24.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 40.00, y: 32.82 },
                    Point { x: 32.82, y: 40.00 },
                    Point { x: 24.00, y: 40.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 20.16, y: 21.73 }),
                PathEl::CurveTo(
                    Point { x: 20.27, y: 21.08 },
                    Point { x: 20.47, y: 20.50 },
                    Point { x: 20.76, y: 19.99 },
                ),
                PathEl::CurveTo(
                    Point { x: 21.05, y: 19.48 },
                    Point { x: 21.45, y: 19.07 },
                    Point { x: 21.94, y: 18.76 },
                ),
                PathEl::CurveTo(
                    Point { x: 22.41, y: 18.47 },
                    Point { x: 23.00, y: 18.31 },
                    Point { x: 23.73, y: 18.30 },
                ),
                PathEl::CurveTo(
                    Point { x: 24.21, y: 18.31 },
                    Point { x: 24.65, y: 18.39 },
                    Point { x: 25.03, y: 18.56 },
                ),
                PathEl::CurveTo(
                    Point { x: 25.44, y: 18.74 },
                    Point { x: 25.78, y: 18.98 },
                    Point { x: 26.07, y: 19.28 },
                ),
                PathEl::CurveTo(
                    Point { x: 26.36, y: 19.58 },
                    Point { x: 26.58, y: 19.94 },
                    Point { x: 26.74, y: 20.34 },
                ),
                PathEl::CurveTo(
                    Point { x: 26.90, y: 20.74 },
                    Point { x: 26.99, y: 21.17 },
                    Point { x: 27.01, y: 21.62 },
                ),
                PathEl::LineTo(Point { x: 30.59, y: 21.62 }),
                PathEl::CurveTo(
                    Point { x: 30.56, y: 20.68 },
                    Point { x: 30.37, y: 19.82 },
                    Point { x: 30.04, y: 19.04 },
                ),
                PathEl::CurveTo(
                    Point { x: 29.71, y: 18.26 },
                    Point { x: 29.23, y: 17.59 },
                    Point { x: 28.63, y: 17.02 },
                ),
                PathEl::CurveTo(
                    Point { x: 28.03, y: 16.45 },
                    Point { x: 27.31, y: 16.02 },
                    Point { x: 26.47, y: 15.71 },
                ),
                PathEl::CurveTo(
                    Point { x: 25.63, y: 15.40 },
                    Point { x: 24.70, y: 15.24 },
                    Point { x: 23.68, y: 15.24 },
                ),
                PathEl::CurveTo(
                    Point { x: 22.38, y: 15.24 },
                    Point { x: 21.25, y: 15.46 },
                    Point { x: 20.29, y: 15.91 },
                ),
                PathEl::CurveTo(
                    Point { x: 19.33, y: 16.36 },
                    Point { x: 18.53, y: 16.97 },
                    Point { x: 17.89, y: 17.75 },
                ),
                PathEl::CurveTo(
                    Point { x: 17.25, y: 18.53 },
                    Point { x: 16.77, y: 19.43 },
                    Point { x: 16.46, y: 20.46 },
                ),
                PathEl::CurveTo(
                    Point { x: 16.15, y: 21.49 },
                    Point { x: 16.00, y: 22.58 },
                    Point { x: 16.00, y: 23.73 },
                ),
                PathEl::LineTo(Point { x: 16.00, y: 24.28 }),
                PathEl::CurveTo(
                    Point { x: 16.00, y: 25.44 },
                    Point { x: 16.16, y: 26.53 },
                    Point { x: 16.47, y: 27.56 },
                ),
                PathEl::CurveTo(
                    Point { x: 16.78, y: 28.59 },
                    Point { x: 17.26, y: 29.49 },
                    Point { x: 17.90, y: 30.26 },
                ),
                PathEl::CurveTo(
                    Point { x: 18.54, y: 31.03 },
                    Point { x: 19.34, y: 31.64 },
                    Point { x: 20.31, y: 32.09 },
                ),
                PathEl::CurveTo(
                    Point { x: 21.28, y: 32.54 },
                    Point { x: 22.41, y: 32.76 },
                    Point { x: 23.71, y: 32.76 },
                ),
                PathEl::CurveTo(
                    Point { x: 24.65, y: 32.76 },
                    Point { x: 25.53, y: 32.61 },
                    Point { x: 26.35, y: 32.30 },
                ),
                PathEl::CurveTo(
                    Point { x: 27.17, y: 31.99 },
                    Point { x: 27.89, y: 31.57 },
                    Point { x: 28.51, y: 31.03 },
                ),
                PathEl::CurveTo(
                    Point { x: 29.13, y: 30.49 },
                    Point { x: 29.63, y: 29.87 },
                    Point { x: 29.99, y: 29.15 },
                ),
                PathEl::CurveTo(
                    Point { x: 30.35, y: 28.43 },
                    Point { x: 30.56, y: 27.67 },
                    Point { x: 30.59, y: 26.85 },
                ),
                PathEl::LineTo(Point { x: 27.01, y: 26.85 }),
                PathEl::CurveTo(
                    Point { x: 26.99, y: 27.27 },
                    Point { x: 26.89, y: 27.65 },
                    Point { x: 26.71, y: 28.01 },
                ),
                PathEl::CurveTo(
                    Point { x: 26.53, y: 28.37 },
                    Point { x: 26.29, y: 28.67 },
                    Point { x: 25.99, y: 28.92 },
                ),
                PathEl::CurveTo(
                    Point { x: 25.69, y: 29.17 },
                    Point { x: 25.34, y: 29.37 },
                    Point { x: 24.94, y: 29.51 },
                ),
                PathEl::CurveTo(
                    Point { x: 24.56, y: 29.64 },
                    Point { x: 24.16, y: 29.71 },
                    Point { x: 23.73, y: 29.71 },
                ),
                PathEl::CurveTo(
                    Point { x: 23.01, y: 29.69 },
                    Point { x: 22.42, y: 29.54 },
                    Point { x: 21.94, y: 29.24 },
                ),
                PathEl::CurveTo(
                    Point { x: 21.44, y: 28.92 },
                    Point { x: 21.04, y: 28.51 },
                    Point { x: 20.75, y: 28.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 20.46, y: 27.49 },
                    Point { x: 20.26, y: 26.91 },
                    Point { x: 20.15, y: 26.25 },
                ),
                PathEl::CurveTo(
                    Point { x: 20.04, y: 25.59 },
                    Point { x: 20.00, y: 24.95 },
                    Point { x: 20.00, y: 24.28 },
                ),
                PathEl::LineTo(Point { x: 20.00, y: 23.73 }),
                PathEl::CurveTo(
                    Point { x: 20.00, y: 23.05 },
                    Point { x: 20.05, y: 22.38 },
                    Point { x: 20.16, y: 21.73 },
                ),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct NotInterested {
    size: f64,
    color: Color,
}

impl NotInterested {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for NotInterested {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 24.00, y: 4.00 }),
                PathEl::CurveTo(
                    Point { x: 12.95, y: 4.00 },
                    Point { x: 4.00, y: 12.95 },
                    Point { x: 4.00, y: 24.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 4.00, y: 35.05 },
                    Point { x: 12.95, y: 44.00 },
                    Point { x: 24.00, y: 44.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 35.05, y: 44.00 },
                    Point { x: 44.00, y: 35.05 },
                    Point { x: 44.00, y: 24.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 44.00, y: 12.95 },
                    Point { x: 35.05, y: 4.00 },
                    Point { x: 24.00, y: 4.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 24.00, y: 40.00 }),
                PathEl::CurveTo(
                    Point { x: 15.16, y: 40.00 },
                    Point { x: 8.00, y: 32.84 },
                    Point { x: 8.00, y: 24.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 8.00, y: 20.30 },
                    Point { x: 9.27, y: 16.91 },
                    Point { x: 11.37, y: 14.20 },
                ),
                PathEl::LineTo(Point { x: 33.80, y: 36.63 }),
                PathEl::CurveTo(
                    Point { x: 31.09, y: 38.73 },
                    Point { x: 27.70, y: 40.00 },
                    Point { x: 24.00, y: 40.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 36.63, y: 33.80 }),
                PathEl::LineTo(Point { x: 14.20, y: 11.37 }),
                PathEl::CurveTo(
                    Point { x: 16.91, y: 9.27 },
                    Point { x: 20.30, y: 8.00 },
                    Point { x: 24.00, y: 8.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 32.84, y: 8.00 },
                    Point { x: 40.00, y: 15.16 },
                    Point { x: 40.00, y: 24.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 40.00, y: 27.70 },
                    Point { x: 38.73, y: 31.09 },
                    Point { x: 36.63, y: 33.80 },
                ),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct DonutSmall {
    size: f64,
    color: Color,
}

impl DonutSmall {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for DonutSmall {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 22.00, y: 18.32 }),
                PathEl::LineTo(Point { x: 22.00, y: 4.00 }),
                PathEl::CurveTo(
                    Point { x: 12.00, y: 5.00 },
                    Point { x: 4.00, y: 13.58 },
                    Point { x: 4.00, y: 24.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 4.00, y: 34.42 },
                    Point { x: 12.00, y: 43.00 },
                    Point { x: 22.00, y: 44.00 },
                ),
                PathEl::LineTo(Point { x: 22.00, y: 29.68 }),
                PathEl::CurveTo(
                    Point { x: 20.00, y: 28.86 },
                    Point { x: 18.00, y: 26.64 },
                    Point { x: 18.00, y: 24.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 18.00, y: 21.36 },
                    Point { x: 20.00, y: 19.14 },
                    Point { x: 22.00, y: 18.32 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 29.72, y: 22.00 }),
                PathEl::LineTo(Point { x: 44.00, y: 22.00 }),
                PathEl::CurveTo(
                    Point { x: 43.04, y: 12.50 },
                    Point { x: 36.00, y: 4.94 },
                    Point { x: 26.00, y: 4.00 },
                ),
                PathEl::LineTo(Point { x: 26.00, y: 18.32 }),
                PathEl::CurveTo(
                    Point { x: 28.00, y: 18.92 },
                    Point { x: 29.04, y: 20.28 },
                    Point { x: 29.72, y: 22.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 26.00, y: 29.68 }),
                PathEl::LineTo(Point { x: 26.00, y: 44.00 }),
                PathEl::CurveTo(
                    Point { x: 36.00, y: 43.06 },
                    Point { x: 43.04, y: 35.50 },
                    Point { x: 44.00, y: 26.00 },
                ),
                PathEl::LineTo(Point { x: 29.72, y: 26.00 }),
                PathEl::CurveTo(
                    Point { x: 29.04, y: 27.72 },
                    Point { x: 28.00, y: 29.08 },
                    Point { x: 26.00, y: 29.68 },
                ),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct BorderVertical {
    size: f64,
    color: Color,
}

impl BorderVertical {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for BorderVertical {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 6.00, y: 18.00 }),
                PathEl::LineTo(Point { x: 10.00, y: 18.00 }),
                PathEl::LineTo(Point { x: 10.00, y: 14.00 }),
                PathEl::LineTo(Point { x: 6.00, y: 14.00 }),
                PathEl::LineTo(Point { x: 6.00, y: 18.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 6.00, y: 10.00 }),
                PathEl::LineTo(Point { x: 10.00, y: 10.00 }),
                PathEl::LineTo(Point { x: 10.00, y: 6.00 }),
                PathEl::LineTo(Point { x: 6.00, y: 6.00 }),
                PathEl::LineTo(Point { x: 6.00, y: 10.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 14.00, y: 42.00 }),
                PathEl::LineTo(Point { x: 18.00, y: 42.00 }),
                PathEl::LineTo(Point { x: 18.00, y: 38.00 }),
                PathEl::LineTo(Point { x: 14.00, y: 38.00 }),
                PathEl::LineTo(Point { x: 14.00, y: 42.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 14.00, y: 26.00 }),
                PathEl::LineTo(Point { x: 18.00, y: 26.00 }),
                PathEl::LineTo(Point { x: 18.00, y: 22.00 }),
                PathEl::LineTo(Point { x: 14.00, y: 22.00 }),
                PathEl::LineTo(Point { x: 14.00, y: 26.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 6.00, y: 26.00 }),
                PathEl::LineTo(Point { x: 10.00, y: 26.00 }),
                PathEl::LineTo(Point { x: 10.00, y: 22.00 }),
                PathEl::LineTo(Point { x: 6.00, y: 22.00 }),
                PathEl::LineTo(Point { x: 6.00, y: 26.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 6.00, y: 42.00 }),
                PathEl::LineTo(Point { x: 10.00, y: 42.00 }),
                PathEl::LineTo(Point { x: 10.00, y: 38.00 }),
                PathEl::LineTo(Point { x: 6.00, y: 38.00 }),
                PathEl::LineTo(Point { x: 6.00, y: 42.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 6.00, y: 34.00 }),
                PathEl::LineTo(Point { x: 10.00, y: 34.00 }),
                PathEl::LineTo(Point { x: 10.00, y: 30.00 }),
                PathEl::LineTo(Point { x: 6.00, y: 30.00 }),
                PathEl::LineTo(Point { x: 6.00, y: 34.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 14.00, y: 10.00 }),
                PathEl::LineTo(Point { x: 18.00, y: 10.00 }),
                PathEl::LineTo(Point { x: 18.00, y: 6.00 }),
                PathEl::LineTo(Point { x: 14.00, y: 6.00 }),
                PathEl::LineTo(Point { x: 14.00, y: 10.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 38.00, y: 34.00 }),
                PathEl::LineTo(Point { x: 42.00, y: 34.00 }),
                PathEl::LineTo(Point { x: 42.00, y: 30.00 }),
                PathEl::LineTo(Point { x: 38.00, y: 30.00 }),
                PathEl::LineTo(Point { x: 38.00, y: 34.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 22.00, y: 42.00 }),
                PathEl::LineTo(Point { x: 26.00, y: 42.00 }),
                PathEl::LineTo(Point { x: 26.00, y: 6.00 }),
                PathEl::LineTo(Point { x: 22.00, y: 6.00 }),
                PathEl::LineTo(Point { x: 22.00, y: 42.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 38.00, y: 42.00 }),
                PathEl::LineTo(Point { x: 42.00, y: 42.00 }),
                PathEl::LineTo(Point { x: 42.00, y: 38.00 }),
                PathEl::LineTo(Point { x: 38.00, y: 38.00 }),
                PathEl::LineTo(Point { x: 38.00, y: 42.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 38.00, y: 26.00 }),
                PathEl::LineTo(Point { x: 42.00, y: 26.00 }),
                PathEl::LineTo(Point { x: 42.00, y: 22.00 }),
                PathEl::LineTo(Point { x: 38.00, y: 22.00 }),
                PathEl::LineTo(Point { x: 38.00, y: 26.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 38.00, y: 6.00 }),
                PathEl::LineTo(Point { x: 38.00, y: 10.00 }),
                PathEl::LineTo(Point { x: 42.00, y: 10.00 }),
                PathEl::LineTo(Point { x: 42.00, y: 6.00 }),
                PathEl::LineTo(Point { x: 38.00, y: 6.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 38.00, y: 18.00 }),
                PathEl::LineTo(Point { x: 42.00, y: 18.00 }),
                PathEl::LineTo(Point { x: 42.00, y: 14.00 }),
                PathEl::LineTo(Point { x: 38.00, y: 14.00 }),
                PathEl::LineTo(Point { x: 38.00, y: 18.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 30.00, y: 10.00 }),
                PathEl::LineTo(Point { x: 34.00, y: 10.00 }),
                PathEl::LineTo(Point { x: 34.00, y: 6.00 }),
                PathEl::LineTo(Point { x: 30.00, y: 6.00 }),
                PathEl::LineTo(Point { x: 30.00, y: 10.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 30.00, y: 42.00 }),
                PathEl::LineTo(Point { x: 34.00, y: 42.00 }),
                PathEl::LineTo(Point { x: 34.00, y: 38.00 }),
                PathEl::LineTo(Point { x: 30.00, y: 38.00 }),
                PathEl::LineTo(Point { x: 30.00, y: 42.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 30.00, y: 26.00 }),
                PathEl::LineTo(Point { x: 34.00, y: 26.00 }),
                PathEl::LineTo(Point { x: 34.00, y: 22.00 }),
                PathEl::LineTo(Point { x: 30.00, y: 22.00 }),
                PathEl::LineTo(Point { x: 30.00, y: 26.00 }),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct Nature {
    size: f64,
    color: Color,
}

impl Nature {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for Nature {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 26.00, y: 32.24 }),
                PathEl::CurveTo(
                    Point { x: 32.95, y: 31.42 },
                    Point { x: 38.34, y: 25.52 },
                    Point { x: 38.34, y: 18.35 },
                ),
                PathEl::CurveTo(
                    Point { x: 38.34, y: 10.62 },
                    Point { x: 32.07, y: 4.35 },
                    Point { x: 24.34, y: 4.35 },
                ),
                PathEl::CurveTo(
                    Point { x: 16.61, y: 4.35 },
                    Point { x: 10.34, y: 10.62 },
                    Point { x: 10.34, y: 18.35 },
                ),
                PathEl::CurveTo(
                    Point { x: 10.34, y: 25.28 },
                    Point { x: 15.38, y: 31.02 },
                    Point { x: 22.00, y: 32.14 },
                ),
                PathEl::LineTo(Point { x: 22.00, y: 40.00 }),
                PathEl::LineTo(Point { x: 10.00, y: 40.00 }),
                PathEl::LineTo(Point { x: 10.00, y: 44.00 }),
                PathEl::LineTo(Point { x: 38.00, y: 44.00 }),
                PathEl::LineTo(Point { x: 38.00, y: 40.00 }),
                PathEl::LineTo(Point { x: 26.00, y: 40.00 }),
                PathEl::LineTo(Point { x: 26.00, y: 32.24 }),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct Pages {
    size: f64,
    color: Color,
}

impl Pages {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for Pages {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 6.00, y: 10.00 }),
                PathEl::LineTo(Point { x: 6.00, y: 22.00 }),
                PathEl::LineTo(Point { x: 16.00, y: 22.00 }),
                PathEl::LineTo(Point { x: 14.00, y: 14.00 }),
                PathEl::LineTo(Point { x: 22.00, y: 16.00 }),
                PathEl::LineTo(Point { x: 22.00, y: 6.00 }),
                PathEl::LineTo(Point { x: 10.00, y: 6.00 }),
                PathEl::CurveTo(
                    Point { x: 7.79, y: 6.00 },
                    Point { x: 6.00, y: 7.79 },
                    Point { x: 6.00, y: 10.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 16.00, y: 26.00 }),
                PathEl::LineTo(Point { x: 6.00, y: 26.00 }),
                PathEl::LineTo(Point { x: 6.00, y: 38.00 }),
                PathEl::CurveTo(
                    Point { x: 6.00, y: 40.21 },
                    Point { x: 7.79, y: 42.00 },
                    Point { x: 10.00, y: 42.00 },
                ),
                PathEl::LineTo(Point { x: 22.00, y: 42.00 }),
                PathEl::LineTo(Point { x: 22.00, y: 32.00 }),
                PathEl::LineTo(Point { x: 14.00, y: 34.00 }),
                PathEl::LineTo(Point { x: 16.00, y: 26.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 34.00, y: 34.00 }),
                PathEl::LineTo(Point { x: 26.00, y: 32.00 }),
                PathEl::LineTo(Point { x: 26.00, y: 42.00 }),
                PathEl::LineTo(Point { x: 38.00, y: 42.00 }),
                PathEl::CurveTo(
                    Point { x: 40.21, y: 42.00 },
                    Point { x: 42.00, y: 40.21 },
                    Point { x: 42.00, y: 38.00 },
                ),
                PathEl::LineTo(Point { x: 42.00, y: 26.00 }),
                PathEl::LineTo(Point { x: 32.00, y: 26.00 }),
                PathEl::LineTo(Point { x: 34.00, y: 34.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 38.00, y: 6.00 }),
                PathEl::LineTo(Point { x: 26.00, y: 6.00 }),
                PathEl::LineTo(Point { x: 26.00, y: 16.00 }),
                PathEl::LineTo(Point { x: 34.00, y: 14.00 }),
                PathEl::LineTo(Point { x: 32.00, y: 22.00 }),
                PathEl::LineTo(Point { x: 42.00, y: 22.00 }),
                PathEl::LineTo(Point { x: 42.00, y: 10.00 }),
                PathEl::CurveTo(
                    Point { x: 42.00, y: 7.79 },
                    Point { x: 40.21, y: 6.00 },
                    Point { x: 38.00, y: 6.00 },
                ),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct PortableWifiOff {
    size: f64,
    color: Color,
}

impl PortableWifiOff {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for PortableWifiOff {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 35.12, y: 28.48 }),
                PathEl::CurveTo(
                    Point { x: 35.68, y: 27.10 },
                    Point { x: 36.00, y: 25.59 },
                    Point { x: 36.00, y: 24.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 36.00, y: 17.37 },
                    Point { x: 30.63, y: 12.00 },
                    Point { x: 24.00, y: 12.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 22.41, y: 12.00 },
                    Point { x: 20.90, y: 12.32 },
                    Point { x: 19.51, y: 12.88 },
                ),
                PathEl::LineTo(Point { x: 22.76, y: 16.13 }),
                PathEl::CurveTo(
                    Point { x: 23.17, y: 16.06 },
                    Point { x: 23.58, y: 16.00 },
                    Point { x: 24.00, y: 16.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 28.42, y: 16.00 },
                    Point { x: 32.00, y: 19.58 },
                    Point { x: 32.00, y: 24.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 32.00, y: 24.43 },
                    Point { x: 31.96, y: 24.85 },
                    Point { x: 31.89, y: 25.25 },
                ),
                PathEl::LineTo(Point { x: 35.12, y: 28.48 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 24.00, y: 8.00 }),
                PathEl::CurveTo(
                    Point { x: 32.84, y: 8.00 },
                    Point { x: 40.00, y: 15.16 },
                    Point { x: 40.00, y: 24.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 40.00, y: 26.71 },
                    Point { x: 39.30, y: 29.24 },
                    Point { x: 38.11, y: 31.47 },
                ),
                PathEl::LineTo(Point { x: 41.05, y: 34.41 }),
                PathEl::CurveTo(
                    Point { x: 42.91, y: 31.38 },
                    Point { x: 44.00, y: 27.82 },
                    Point { x: 44.00, y: 24.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 44.00, y: 12.95 },
                    Point { x: 35.04, y: 4.00 },
                    Point { x: 24.00, y: 4.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 20.18, y: 4.00 },
                    Point { x: 16.62, y: 5.09 },
                    Point { x: 13.59, y: 6.95 },
                ),
                PathEl::LineTo(Point { x: 16.51, y: 9.87 }),
                PathEl::CurveTo(
                    Point { x: 18.74, y: 8.68 },
                    Point { x: 21.29, y: 8.00 },
                    Point { x: 24.00, y: 8.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 6.54, y: 5.00 }),
                PathEl::LineTo(Point { x: 4.00, y: 7.55 }),
                PathEl::LineTo(Point { x: 8.21, y: 11.76 }),
                PathEl::CurveTo(
                    Point { x: 5.58, y: 15.14 },
                    Point { x: 4.00, y: 19.38 },
                    Point { x: 4.00, y: 24.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 4.00, y: 31.39 },
                    Point { x: 8.02, y: 37.83 },
                    Point { x: 13.99, y: 41.29 },
                ),
                PathEl::LineTo(Point { x: 15.99, y: 37.83 }),
                PathEl::CurveTo(
                    Point { x: 11.22, y: 35.07 },
                    Point { x: 8.00, y: 29.91 },
                    Point { x: 8.00, y: 24.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 8.00, y: 20.49 },
                    Point { x: 9.14, y: 17.25 },
                    Point { x: 11.06, y: 14.61 },
                ),
                PathEl::LineTo(Point { x: 13.93, y: 17.48 }),
                PathEl::CurveTo(
                    Point { x: 12.71, y: 19.36 },
                    Point { x: 12.00, y: 21.59 },
                    Point { x: 12.00, y: 24.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 12.00, y: 28.44 },
                    Point { x: 14.41, y: 32.30 },
                    Point { x: 17.99, y: 34.38 },
                ),
                PathEl::LineTo(Point { x: 20.01, y: 30.90 }),
                PathEl::CurveTo(
                    Point { x: 17.62, y: 29.51 },
                    Point { x: 16.00, y: 26.96 },
                    Point { x: 16.00, y: 24.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 16.00, y: 22.71 },
                    Point { x: 16.34, y: 21.51 },
                    Point { x: 16.88, y: 20.43 },
                ),
                PathEl::LineTo(Point { x: 20.04, y: 23.59 }),
                PathEl::LineTo(Point { x: 20.00, y: 24.00 }),
                PathEl::CurveTo(
                    Point { x: 20.00, y: 26.21 },
                    Point { x: 21.79, y: 28.00 },
                    Point { x: 24.00, y: 28.00 },
                ),
                PathEl::LineTo(Point { x: 24.41, y: 27.96 }),
                PathEl::LineTo(Point { x: 24.43, y: 27.98 }),
                PathEl::LineTo(Point { x: 39.45, y: 43.00 }),
                PathEl::LineTo(Point { x: 42.00, y: 40.45 }),
                PathEl::LineTo(Point { x: 8.54, y: 7.00 }),
                PathEl::LineTo(Point { x: 6.54, y: 5.00 }),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct BugReport {
    size: f64,
    color: Color,
}

impl BugReport {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for BugReport {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 40.00, y: 16.00 }),
                PathEl::LineTo(Point { x: 34.38, y: 16.00 }),
                PathEl::CurveTo(
                    Point { x: 33.48, y: 14.44 },
                    Point { x: 32.24, y: 13.09 },
                    Point { x: 30.75, y: 12.08 },
                ),
                PathEl::LineTo(Point { x: 34.00, y: 8.83 }),
                PathEl::LineTo(Point { x: 31.17, y: 6.00 }),
                PathEl::LineTo(Point { x: 26.82, y: 10.35 }),
                PathEl::CurveTo(
                    Point { x: 25.92, y: 10.13 },
                    Point { x: 24.97, y: 10.00 },
                    Point { x: 24.00, y: 10.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 23.03, y: 10.00 },
                    Point { x: 22.08, y: 10.13 },
                    Point { x: 21.18, y: 10.35 },
                ),
                PathEl::LineTo(Point { x: 16.83, y: 6.00 }),
                PathEl::LineTo(Point { x: 14.00, y: 8.83 }),
                PathEl::LineTo(Point { x: 17.25, y: 12.08 }),
                PathEl::CurveTo(
                    Point { x: 15.76, y: 13.09 },
                    Point { x: 14.52, y: 14.44 },
                    Point { x: 13.62, y: 16.00 },
                ),
                PathEl::LineTo(Point { x: 8.00, y: 16.00 }),
                PathEl::LineTo(Point { x: 8.00, y: 20.00 }),
                PathEl::LineTo(Point { x: 12.18, y: 20.00 }),
                PathEl::CurveTo(
                    Point { x: 12.07, y: 20.65 },
                    Point { x: 12.00, y: 21.32 },
                    Point { x: 12.00, y: 22.00 },
                ),
                PathEl::LineTo(Point { x: 12.00, y: 24.00 }),
                PathEl::LineTo(Point { x: 8.00, y: 24.00 }),
                PathEl::LineTo(Point { x: 8.00, y: 28.00 }),
                PathEl::LineTo(Point { x: 12.00, y: 28.00 }),
                PathEl::LineTo(Point { x: 12.00, y: 30.00 }),
                PathEl::CurveTo(
                    Point { x: 12.00, y: 30.68 },
                    Point { x: 12.07, y: 31.35 },
                    Point { x: 12.18, y: 32.00 },
                ),
                PathEl::LineTo(Point { x: 8.00, y: 32.00 }),
                PathEl::LineTo(Point { x: 8.00, y: 36.00 }),
                PathEl::LineTo(Point { x: 13.62, y: 36.00 }),
                PathEl::CurveTo(
                    Point { x: 15.69, y: 39.58 },
                    Point { x: 19.56, y: 42.00 },
                    Point { x: 24.00, y: 42.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 28.44, y: 42.00 },
                    Point { x: 32.31, y: 39.58 },
                    Point { x: 34.38, y: 36.00 },
                ),
                PathEl::LineTo(Point { x: 40.00, y: 36.00 }),
                PathEl::LineTo(Point { x: 40.00, y: 32.00 }),
                PathEl::LineTo(Point { x: 35.82, y: 32.00 }),
                PathEl::CurveTo(
                    Point { x: 35.93, y: 31.35 },
                    Point { x: 36.00, y: 30.68 },
                    Point { x: 36.00, y: 30.00 },
                ),
                PathEl::LineTo(Point { x: 36.00, y: 28.00 }),
                PathEl::LineTo(Point { x: 40.00, y: 28.00 }),
                PathEl::LineTo(Point { x: 40.00, y: 24.00 }),
                PathEl::LineTo(Point { x: 36.00, y: 24.00 }),
                PathEl::LineTo(Point { x: 36.00, y: 22.00 }),
                PathEl::CurveTo(
                    Point { x: 36.00, y: 21.32 },
                    Point { x: 35.93, y: 20.65 },
                    Point { x: 35.82, y: 20.00 },
                ),
                PathEl::LineTo(Point { x: 40.00, y: 20.00 }),
                PathEl::LineTo(Point { x: 40.00, y: 16.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 28.00, y: 32.00 }),
                PathEl::LineTo(Point { x: 20.00, y: 32.00 }),
                PathEl::LineTo(Point { x: 20.00, y: 28.00 }),
                PathEl::LineTo(Point { x: 28.00, y: 28.00 }),
                PathEl::LineTo(Point { x: 28.00, y: 32.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 28.00, y: 24.00 }),
                PathEl::LineTo(Point { x: 20.00, y: 24.00 }),
                PathEl::LineTo(Point { x: 20.00, y: 20.00 }),
                PathEl::LineTo(Point { x: 28.00, y: 20.00 }),
                PathEl::LineTo(Point { x: 28.00, y: 24.00 }),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct WbIridescent {
    size: f64,
    color: Color,
}

impl WbIridescent {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for WbIridescent {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 10.00, y: 29.00 }),
                PathEl::LineTo(Point { x: 38.00, y: 29.00 }),
                PathEl::LineTo(Point { x: 38.00, y: 17.00 }),
                PathEl::LineTo(Point { x: 10.00, y: 17.00 }),
                PathEl::LineTo(Point { x: 10.00, y: 29.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 22.00, y: 1.10 }),
                PathEl::LineTo(Point { x: 22.00, y: 7.00 }),
                PathEl::LineTo(Point { x: 26.00, y: 7.00 }),
                PathEl::LineTo(Point { x: 26.00, y: 1.10 }),
                PathEl::LineTo(Point { x: 22.00, y: 1.10 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 38.07, y: 6.10 }),
                PathEl::LineTo(Point { x: 34.48, y: 9.69 }),
                PathEl::LineTo(Point { x: 37.31, y: 12.52 }),
                PathEl::LineTo(Point { x: 40.90, y: 8.93 }),
                PathEl::LineTo(Point { x: 38.07, y: 6.10 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 26.00, y: 44.90 }),
                PathEl::LineTo(Point { x: 26.00, y: 39.00 }),
                PathEl::LineTo(Point { x: 22.00, y: 39.00 }),
                PathEl::LineTo(Point { x: 22.00, y: 44.90 }),
                PathEl::LineTo(Point { x: 26.00, y: 44.90 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 40.90, y: 37.07 }),
                PathEl::LineTo(Point { x: 37.31, y: 33.48 }),
                PathEl::LineTo(Point { x: 34.48, y: 36.31 }),
                PathEl::LineTo(Point { x: 38.07, y: 39.90 }),
                PathEl::LineTo(Point { x: 40.90, y: 37.07 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 7.10, y: 8.93 }),
                PathEl::LineTo(Point { x: 10.69, y: 12.52 }),
                PathEl::LineTo(Point { x: 13.52, y: 9.69 }),
                PathEl::LineTo(Point { x: 9.93, y: 6.10 }),
                PathEl::LineTo(Point { x: 7.10, y: 8.93 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 9.93, y: 39.90 }),
                PathEl::LineTo(Point { x: 13.52, y: 36.31 }),
                PathEl::LineTo(Point { x: 10.69, y: 33.48 }),
                PathEl::LineTo(Point { x: 7.10, y: 37.07 }),
                PathEl::LineTo(Point { x: 9.93, y: 39.90 }),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct AddCircle {
    size: f64,
    color: Color,
}

impl AddCircle {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for AddCircle {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 24.00, y: 4.00 }),
                PathEl::CurveTo(
                    Point { x: 12.95, y: 4.00 },
                    Point { x: 4.00, y: 12.95 },
                    Point { x: 4.00, y: 24.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 4.00, y: 35.05 },
                    Point { x: 12.95, y: 44.00 },
                    Point { x: 24.00, y: 44.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 35.05, y: 44.00 },
                    Point { x: 44.00, y: 35.05 },
                    Point { x: 44.00, y: 24.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 44.00, y: 12.95 },
                    Point { x: 35.05, y: 4.00 },
                    Point { x: 24.00, y: 4.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 34.00, y: 26.00 }),
                PathEl::LineTo(Point { x: 26.00, y: 26.00 }),
                PathEl::LineTo(Point { x: 26.00, y: 34.00 }),
                PathEl::LineTo(Point { x: 22.00, y: 34.00 }),
                PathEl::LineTo(Point { x: 22.00, y: 26.00 }),
                PathEl::LineTo(Point { x: 14.00, y: 26.00 }),
                PathEl::LineTo(Point { x: 14.00, y: 22.00 }),
                PathEl::LineTo(Point { x: 22.00, y: 22.00 }),
                PathEl::LineTo(Point { x: 22.00, y: 14.00 }),
                PathEl::LineTo(Point { x: 26.00, y: 14.00 }),
                PathEl::LineTo(Point { x: 26.00, y: 22.00 }),
                PathEl::LineTo(Point { x: 34.00, y: 22.00 }),
                PathEl::LineTo(Point { x: 34.00, y: 26.00 }),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct Weekend {
    size: f64,
    color: Color,
}

impl Weekend {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for Weekend {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 42.00, y: 20.00 }),
                PathEl::CurveTo(
                    Point { x: 39.79, y: 20.00 },
                    Point { x: 38.00, y: 21.79 },
                    Point { x: 38.00, y: 24.00 },
                ),
                PathEl::LineTo(Point { x: 38.00, y: 30.00 }),
                PathEl::LineTo(Point { x: 10.00, y: 30.00 }),
                PathEl::LineTo(Point { x: 10.00, y: 24.00 }),
                PathEl::CurveTo(
                    Point { x: 10.00, y: 21.79 },
                    Point { x: 8.21, y: 20.00 },
                    Point { x: 6.00, y: 20.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 3.79, y: 20.00 },
                    Point { x: 2.00, y: 21.79 },
                    Point { x: 2.00, y: 24.00 },
                ),
                PathEl::LineTo(Point { x: 2.00, y: 34.00 }),
                PathEl::CurveTo(
                    Point { x: 2.00, y: 36.20 },
                    Point { x: 3.80, y: 38.00 },
                    Point { x: 6.00, y: 38.00 },
                ),
                PathEl::LineTo(Point { x: 42.00, y: 38.00 }),
                PathEl::CurveTo(
                    Point { x: 44.20, y: 38.00 },
                    Point { x: 46.00, y: 36.20 },
                    Point { x: 46.00, y: 34.00 },
                ),
                PathEl::LineTo(Point { x: 46.00, y: 24.00 }),
                PathEl::CurveTo(
                    Point { x: 46.00, y: 21.79 },
                    Point { x: 44.21, y: 20.00 },
                    Point { x: 42.00, y: 20.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 36.00, y: 10.00 }),
                PathEl::LineTo(Point { x: 12.00, y: 10.00 }),
                PathEl::CurveTo(
                    Point { x: 9.80, y: 10.00 },
                    Point { x: 8.00, y: 11.80 },
                    Point { x: 8.00, y: 14.00 },
                ),
                PathEl::LineTo(Point { x: 8.00, y: 18.31 }),
                PathEl::CurveTo(
                    Point { x: 10.32, y: 19.14 },
                    Point { x: 12.00, y: 21.34 },
                    Point { x: 12.00, y: 23.94 },
                ),
                PathEl::LineTo(Point { x: 12.00, y: 28.00 }),
                PathEl::LineTo(Point { x: 36.00, y: 28.00 }),
                PathEl::LineTo(Point { x: 36.00, y: 23.94 }),
                PathEl::CurveTo(
                    Point { x: 36.00, y: 21.34 },
                    Point { x: 37.68, y: 19.14 },
                    Point { x: 40.00, y: 18.31 },
                ),
                PathEl::LineTo(Point { x: 40.00, y: 14.00 }),
                PathEl::CurveTo(
                    Point { x: 40.00, y: 11.80 },
                    Point { x: 38.20, y: 10.00 },
                    Point { x: 36.00, y: 10.00 },
                ),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct CardTravel {
    size: f64,
    color: Color,
}

impl CardTravel {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for CardTravel {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 40.00, y: 12.00 }),
                PathEl::LineTo(Point { x: 34.00, y: 12.00 }),
                PathEl::LineTo(Point { x: 34.00, y: 8.00 }),
                PathEl::CurveTo(
                    Point { x: 34.00, y: 5.79 },
                    Point { x: 32.21, y: 4.00 },
                    Point { x: 30.00, y: 4.00 },
                ),
                PathEl::LineTo(Point { x: 18.00, y: 4.00 }),
                PathEl::CurveTo(
                    Point { x: 15.79, y: 4.00 },
                    Point { x: 14.00, y: 5.79 },
                    Point { x: 14.00, y: 8.00 },
                ),
                PathEl::LineTo(Point { x: 14.00, y: 12.00 }),
                PathEl::LineTo(Point { x: 8.00, y: 12.00 }),
                PathEl::CurveTo(
                    Point { x: 5.79, y: 12.00 },
                    Point { x: 4.00, y: 13.79 },
                    Point { x: 4.00, y: 16.00 },
                ),
                PathEl::LineTo(Point { x: 4.00, y: 38.00 }),
                PathEl::CurveTo(
                    Point { x: 4.00, y: 40.21 },
                    Point { x: 5.79, y: 42.00 },
                    Point { x: 8.00, y: 42.00 },
                ),
                PathEl::LineTo(Point { x: 40.00, y: 42.00 }),
                PathEl::CurveTo(
                    Point { x: 42.21, y: 42.00 },
                    Point { x: 44.00, y: 40.21 },
                    Point { x: 44.00, y: 38.00 },
                ),
                PathEl::LineTo(Point { x: 44.00, y: 16.00 }),
                PathEl::CurveTo(
                    Point { x: 44.00, y: 13.79 },
                    Point { x: 42.21, y: 12.00 },
                    Point { x: 40.00, y: 12.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 18.00, y: 8.00 }),
                PathEl::LineTo(Point { x: 30.00, y: 8.00 }),
                PathEl::LineTo(Point { x: 30.00, y: 12.00 }),
                PathEl::LineTo(Point { x: 18.00, y: 12.00 }),
                PathEl::LineTo(Point { x: 18.00, y: 8.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 40.00, y: 38.00 }),
                PathEl::LineTo(Point { x: 8.00, y: 38.00 }),
                PathEl::LineTo(Point { x: 8.00, y: 34.00 }),
                PathEl::LineTo(Point { x: 40.00, y: 34.00 }),
                PathEl::LineTo(Point { x: 40.00, y: 38.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 40.00, y: 28.00 }),
                PathEl::LineTo(Point { x: 8.00, y: 28.00 }),
                PathEl::LineTo(Point { x: 8.00, y: 16.00 }),
                PathEl::LineTo(Point { x: 14.00, y: 16.00 }),
                PathEl::LineTo(Point { x: 14.00, y: 20.00 }),
                PathEl::LineTo(Point { x: 18.00, y: 20.00 }),
                PathEl::LineTo(Point { x: 18.00, y: 16.00 }),
                PathEl::LineTo(Point { x: 30.00, y: 16.00 }),
                PathEl::LineTo(Point { x: 30.00, y: 20.00 }),
                PathEl::LineTo(Point { x: 34.00, y: 20.00 }),
                PathEl::LineTo(Point { x: 34.00, y: 16.00 }),
                PathEl::LineTo(Point { x: 40.00, y: 16.00 }),
                PathEl::LineTo(Point { x: 40.00, y: 28.00 }),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct RemoveCircleOutline {
    size: f64,
    color: Color,
}

impl RemoveCircleOutline {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for RemoveCircleOutline {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 14.00, y: 22.00 }),
                PathEl::LineTo(Point { x: 14.00, y: 26.00 }),
                PathEl::LineTo(Point { x: 34.00, y: 26.00 }),
                PathEl::LineTo(Point { x: 34.00, y: 22.00 }),
                PathEl::LineTo(Point { x: 14.00, y: 22.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 24.00, y: 4.00 }),
                PathEl::CurveTo(
                    Point { x: 12.95, y: 4.00 },
                    Point { x: 4.00, y: 12.95 },
                    Point { x: 4.00, y: 24.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 4.00, y: 35.05 },
                    Point { x: 12.95, y: 44.00 },
                    Point { x: 24.00, y: 44.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 35.05, y: 44.00 },
                    Point { x: 44.00, y: 35.05 },
                    Point { x: 44.00, y: 24.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 44.00, y: 12.95 },
                    Point { x: 35.05, y: 4.00 },
                    Point { x: 24.00, y: 4.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 24.00, y: 40.00 }),
                PathEl::CurveTo(
                    Point { x: 15.18, y: 40.00 },
                    Point { x: 8.00, y: 32.82 },
                    Point { x: 8.00, y: 24.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 8.00, y: 15.18 },
                    Point { x: 15.18, y: 8.00 },
                    Point { x: 24.00, y: 8.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 32.82, y: 8.00 },
                    Point { x: 40.00, y: 15.18 },
                    Point { x: 40.00, y: 24.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 40.00, y: 32.82 },
                    Point { x: 32.82, y: 40.00 },
                    Point { x: 24.00, y: 40.00 },
                ),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct CheckCircle {
    size: f64,
    color: Color,
}

impl CheckCircle {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for CheckCircle {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 24.00, y: 4.00 }),
                PathEl::CurveTo(
                    Point { x: 12.95, y: 4.00 },
                    Point { x: 4.00, y: 12.95 },
                    Point { x: 4.00, y: 24.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 4.00, y: 35.04 },
                    Point { x: 12.95, y: 44.00 },
                    Point { x: 24.00, y: 44.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 35.04, y: 44.00 },
                    Point { x: 44.00, y: 35.04 },
                    Point { x: 44.00, y: 24.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 44.00, y: 12.95 },
                    Point { x: 35.04, y: 4.00 },
                    Point { x: 24.00, y: 4.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 20.00, y: 34.00 }),
                PathEl::LineTo(Point { x: 10.00, y: 24.00 }),
                PathEl::LineTo(Point { x: 12.83, y: 21.17 }),
                PathEl::LineTo(Point { x: 20.00, y: 28.34 }),
                PathEl::LineTo(Point { x: 35.17, y: 13.17 }),
                PathEl::LineTo(Point { x: 38.00, y: 16.00 }),
                PathEl::LineTo(Point { x: 20.00, y: 34.00 }),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct Textsms {
    size: f64,
    color: Color,
}

impl Textsms {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for Textsms {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 40.00, y: 4.00 }),
                PathEl::LineTo(Point { x: 8.00, y: 4.00 }),
                PathEl::CurveTo(
                    Point { x: 5.79, y: 4.00 },
                    Point { x: 4.02, y: 5.79 },
                    Point { x: 4.02, y: 8.00 },
                ),
                PathEl::LineTo(Point { x: 4.00, y: 44.00 }),
                PathEl::LineTo(Point { x: 12.00, y: 36.00 }),
                PathEl::LineTo(Point { x: 40.00, y: 36.00 }),
                PathEl::CurveTo(
                    Point { x: 42.21, y: 36.00 },
                    Point { x: 44.00, y: 34.21 },
                    Point { x: 44.00, y: 32.00 },
                ),
                PathEl::LineTo(Point { x: 44.00, y: 8.00 }),
                PathEl::CurveTo(
                    Point { x: 44.00, y: 5.79 },
                    Point { x: 42.21, y: 4.00 },
                    Point { x: 40.00, y: 4.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 18.00, y: 22.00 }),
                PathEl::LineTo(Point { x: 14.00, y: 22.00 }),
                PathEl::LineTo(Point { x: 14.00, y: 18.00 }),
                PathEl::LineTo(Point { x: 18.00, y: 18.00 }),
                PathEl::LineTo(Point { x: 18.00, y: 22.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 26.00, y: 22.00 }),
                PathEl::LineTo(Point { x: 22.00, y: 22.00 }),
                PathEl::LineTo(Point { x: 22.00, y: 18.00 }),
                PathEl::LineTo(Point { x: 26.00, y: 18.00 }),
                PathEl::LineTo(Point { x: 26.00, y: 22.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 34.00, y: 22.00 }),
                PathEl::LineTo(Point { x: 30.00, y: 22.00 }),
                PathEl::LineTo(Point { x: 30.00, y: 18.00 }),
                PathEl::LineTo(Point { x: 34.00, y: 18.00 }),
                PathEl::LineTo(Point { x: 34.00, y: 22.00 }),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct OndemandVideo {
    size: f64,
    color: Color,
}

impl OndemandVideo {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for OndemandVideo {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 42.00, y: 6.00 }),
                PathEl::LineTo(Point { x: 6.00, y: 6.00 }),
                PathEl::CurveTo(
                    Point { x: 3.79, y: 6.00 },
                    Point { x: 2.00, y: 7.79 },
                    Point { x: 2.00, y: 10.00 },
                ),
                PathEl::LineTo(Point { x: 2.00, y: 34.00 }),
                PathEl::CurveTo(
                    Point { x: 2.00, y: 36.21 },
                    Point { x: 3.79, y: 38.00 },
                    Point { x: 6.00, y: 38.00 },
                ),
                PathEl::LineTo(Point { x: 16.00, y: 38.00 }),
                PathEl::LineTo(Point { x: 16.00, y: 42.00 }),
                PathEl::LineTo(Point { x: 32.00, y: 42.00 }),
                PathEl::LineTo(Point { x: 32.00, y: 38.00 }),
                PathEl::LineTo(Point { x: 42.00, y: 38.00 }),
                PathEl::CurveTo(
                    Point { x: 44.21, y: 38.00 },
                    Point { x: 45.98, y: 36.21 },
                    Point { x: 45.98, y: 34.00 },
                ),
                PathEl::LineTo(Point { x: 46.00, y: 10.00 }),
                PathEl::CurveTo(
                    Point { x: 46.00, y: 7.79 },
                    Point { x: 44.21, y: 6.00 },
                    Point { x: 42.00, y: 6.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 42.00, y: 34.00 }),
                PathEl::LineTo(Point { x: 6.00, y: 34.00 }),
                PathEl::LineTo(Point { x: 6.00, y: 10.00 }),
                PathEl::LineTo(Point { x: 42.00, y: 10.00 }),
                PathEl::LineTo(Point { x: 42.00, y: 34.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 32.00, y: 22.00 }),
                PathEl::LineTo(Point { x: 18.00, y: 30.00 }),
                PathEl::LineTo(Point { x: 18.00, y: 14.00 }),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct ViewCarousel {
    size: f64,
    color: Color,
}

impl ViewCarousel {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for ViewCarousel {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 14.00, y: 38.00 }),
                PathEl::LineTo(Point { x: 34.00, y: 38.00 }),
                PathEl::LineTo(Point { x: 34.00, y: 8.00 }),
                PathEl::LineTo(Point { x: 14.00, y: 8.00 }),
                PathEl::LineTo(Point { x: 14.00, y: 38.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 4.00, y: 34.00 }),
                PathEl::LineTo(Point { x: 12.00, y: 34.00 }),
                PathEl::LineTo(Point { x: 12.00, y: 12.00 }),
                PathEl::LineTo(Point { x: 4.00, y: 12.00 }),
                PathEl::LineTo(Point { x: 4.00, y: 34.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 36.00, y: 12.00 }),
                PathEl::LineTo(Point { x: 36.00, y: 34.00 }),
                PathEl::LineTo(Point { x: 44.00, y: 34.00 }),
                PathEl::LineTo(Point { x: 44.00, y: 12.00 }),
                PathEl::LineTo(Point { x: 36.00, y: 12.00 }),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct Cake {
    size: f64,
    color: Color,
}

impl Cake {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for Cake {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 24.00, y: 12.00 }),
                PathEl::CurveTo(
                    Point { x: 26.21, y: 12.00 },
                    Point { x: 28.00, y: 10.21 },
                    Point { x: 28.00, y: 8.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 28.00, y: 7.25 },
                    Point { x: 27.79, y: 6.54 },
                    Point { x: 27.43, y: 5.94 },
                ),
                PathEl::LineTo(Point { x: 24.00, y: 0.00 }),
                PathEl::LineTo(Point { x: 20.57, y: 5.94 }),
                PathEl::CurveTo(
                    Point { x: 20.21, y: 6.54 },
                    Point { x: 20.00, y: 7.25 },
                    Point { x: 20.00, y: 8.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 20.00, y: 10.21 },
                    Point { x: 21.79, y: 12.00 },
                    Point { x: 24.00, y: 12.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 33.19, y: 31.97 }),
                PathEl::LineTo(Point { x: 31.04, y: 29.82 }),
                PathEl::LineTo(Point { x: 28.88, y: 31.97 }),
                PathEl::CurveTo(
                    Point { x: 26.27, y: 34.58 },
                    Point { x: 21.71, y: 34.58 },
                    Point { x: 19.10, y: 31.97 },
                ),
                PathEl::LineTo(Point { x: 16.95, y: 29.82 }),
                PathEl::LineTo(Point { x: 14.79, y: 31.97 }),
                PathEl::CurveTo(
                    Point { x: 13.50, y: 33.28 },
                    Point { x: 11.77, y: 34.00 },
                    Point { x: 9.92, y: 34.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 8.47, y: 34.00 },
                    Point { x: 7.12, y: 33.54 },
                    Point { x: 6.00, y: 32.77 },
                ),
                PathEl::LineTo(Point { x: 6.00, y: 42.00 }),
                PathEl::CurveTo(
                    Point { x: 6.00, y: 43.10 },
                    Point { x: 6.90, y: 44.00 },
                    Point { x: 8.00, y: 44.00 },
                ),
                PathEl::LineTo(Point { x: 40.00, y: 44.00 }),
                PathEl::CurveTo(
                    Point { x: 41.10, y: 44.00 },
                    Point { x: 42.00, y: 43.10 },
                    Point { x: 42.00, y: 42.00 },
                ),
                PathEl::LineTo(Point { x: 42.00, y: 32.77 }),
                PathEl::CurveTo(
                    Point { x: 40.88, y: 33.54 },
                    Point { x: 39.54, y: 34.00 },
                    Point { x: 38.08, y: 34.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 36.23, y: 34.00 },
                    Point { x: 34.50, y: 33.28 },
                    Point { x: 33.19, y: 31.97 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 36.00, y: 18.00 }),
                PathEl::LineTo(Point { x: 26.00, y: 18.00 }),
                PathEl::LineTo(Point { x: 26.00, y: 14.00 }),
                PathEl::LineTo(Point { x: 22.00, y: 14.00 }),
                PathEl::LineTo(Point { x: 22.00, y: 18.00 }),
                PathEl::LineTo(Point { x: 12.00, y: 18.00 }),
                PathEl::CurveTo(
                    Point { x: 8.69, y: 18.00 },
                    Point { x: 6.00, y: 20.69 },
                    Point { x: 6.00, y: 24.00 },
                ),
                PathEl::LineTo(Point { x: 6.00, y: 27.08 }),
                PathEl::CurveTo(
                    Point { x: 6.00, y: 29.24 },
                    Point { x: 7.76, y: 31.00 },
                    Point { x: 9.92, y: 31.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 10.97, y: 31.00 },
                    Point { x: 11.95, y: 30.59 },
                    Point { x: 12.69, y: 29.85 },
                ),
                PathEl::LineTo(Point { x: 16.97, y: 25.58 }),
                PathEl::LineTo(Point { x: 21.24, y: 29.84 }),
                PathEl::CurveTo(
                    Point { x: 22.72, y: 31.32 },
                    Point { x: 25.30, y: 31.32 },
                    Point { x: 26.78, y: 29.84 },
                ),
                PathEl::LineTo(Point { x: 31.06, y: 25.58 }),
                PathEl::LineTo(Point { x: 35.33, y: 29.84 }),
                PathEl::CurveTo(
                    Point { x: 36.07, y: 30.58 },
                    Point { x: 37.05, y: 30.99 },
                    Point { x: 38.10, y: 30.99 },
                ),
                PathEl::CurveTo(
                    Point { x: 40.26, y: 30.99 },
                    Point { x: 42.02, y: 29.23 },
                    Point { x: 42.02, y: 27.07 },
                ),
                PathEl::LineTo(Point { x: 42.02, y: 24.00 }),
                PathEl::CurveTo(
                    Point { x: 42.00, y: 20.69 },
                    Point { x: 39.31, y: 18.00 },
                    Point { x: 36.00, y: 18.00 },
                ),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct FolderSpecial {
    size: f64,
    color: Color,
}

impl FolderSpecial {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for FolderSpecial {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 40.00, y: 12.00 }),
                PathEl::LineTo(Point { x: 24.00, y: 12.00 }),
                PathEl::LineTo(Point { x: 20.00, y: 8.00 }),
                PathEl::LineTo(Point { x: 8.00, y: 8.00 }),
                PathEl::CurveTo(
                    Point { x: 5.80, y: 8.00 },
                    Point { x: 4.00, y: 9.80 },
                    Point { x: 4.00, y: 12.00 },
                ),
                PathEl::LineTo(Point { x: 4.00, y: 36.00 }),
                PathEl::CurveTo(
                    Point { x: 4.00, y: 38.20 },
                    Point { x: 5.80, y: 40.00 },
                    Point { x: 8.00, y: 40.00 },
                ),
                PathEl::LineTo(Point { x: 40.00, y: 40.00 }),
                PathEl::CurveTo(
                    Point { x: 42.20, y: 40.00 },
                    Point { x: 44.00, y: 38.20 },
                    Point { x: 44.00, y: 36.00 },
                ),
                PathEl::LineTo(Point { x: 44.00, y: 16.00 }),
                PathEl::CurveTo(
                    Point { x: 44.00, y: 13.80 },
                    Point { x: 42.20, y: 12.00 },
                    Point { x: 40.00, y: 12.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 35.87, y: 34.00 }),
                PathEl::LineTo(Point { x: 30.00, y: 30.56 }),
                PathEl::LineTo(Point { x: 24.13, y: 34.00 }),
                PathEl::LineTo(Point { x: 25.69, y: 27.34 }),
                PathEl::LineTo(Point { x: 20.51, y: 22.86 }),
                PathEl::LineTo(Point { x: 27.34, y: 22.27 }),
                PathEl::LineTo(Point { x: 30.00, y: 16.00 }),
                PathEl::LineTo(Point { x: 32.67, y: 22.28 }),
                PathEl::LineTo(Point { x: 39.50, y: 22.87 }),
                PathEl::LineTo(Point { x: 34.32, y: 27.35 }),
                PathEl::LineTo(Point { x: 35.87, y: 34.00 }),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct SurroundSound {
    size: f64,
    color: Color,
}

impl SurroundSound {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for SurroundSound {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 40.00, y: 8.00 }),
                PathEl::LineTo(Point { x: 8.00, y: 8.00 }),
                PathEl::CurveTo(
                    Point { x: 5.79, y: 8.00 },
                    Point { x: 4.00, y: 9.79 },
                    Point { x: 4.00, y: 12.00 },
                ),
                PathEl::LineTo(Point { x: 4.00, y: 36.00 }),
                PathEl::CurveTo(
                    Point { x: 4.00, y: 38.21 },
                    Point { x: 5.79, y: 40.00 },
                    Point { x: 8.00, y: 40.00 },
                ),
                PathEl::LineTo(Point { x: 40.00, y: 40.00 }),
                PathEl::CurveTo(
                    Point { x: 42.21, y: 40.00 },
                    Point { x: 44.00, y: 38.21 },
                    Point { x: 44.00, y: 36.00 },
                ),
                PathEl::LineTo(Point { x: 44.00, y: 12.00 }),
                PathEl::CurveTo(
                    Point { x: 44.00, y: 9.79 },
                    Point { x: 42.21, y: 8.00 },
                    Point { x: 40.00, y: 8.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 15.51, y: 32.49 }),
                PathEl::LineTo(Point { x: 12.68, y: 35.32 }),
                PathEl::CurveTo(
                    Point { x: 9.57, y: 32.19 },
                    Point { x: 8.00, y: 28.10 },
                    Point { x: 8.00, y: 24.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 8.00, y: 19.90 },
                    Point { x: 9.57, y: 15.81 },
                    Point { x: 12.69, y: 12.69 },
                ),
                PathEl::LineTo(Point { x: 15.52, y: 15.52 }),
                PathEl::CurveTo(
                    Point { x: 13.18, y: 17.85 },
                    Point { x: 12.00, y: 20.93 },
                    Point { x: 12.00, y: 24.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 12.00, y: 27.07 },
                    Point { x: 13.17, y: 30.15 },
                    Point { x: 15.51, y: 32.49 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 24.00, y: 32.00 }),
                PathEl::CurveTo(
                    Point { x: 19.58, y: 32.00 },
                    Point { x: 16.00, y: 28.42 },
                    Point { x: 16.00, y: 24.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 16.00, y: 19.58 },
                    Point { x: 19.58, y: 16.00 },
                    Point { x: 24.00, y: 16.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 28.42, y: 16.00 },
                    Point { x: 32.00, y: 19.58 },
                    Point { x: 32.00, y: 24.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 32.00, y: 28.42 },
                    Point { x: 28.42, y: 32.00 },
                    Point { x: 24.00, y: 32.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 35.31, y: 35.31 }),
                PathEl::LineTo(Point { x: 32.48, y: 32.48 }),
                PathEl::CurveTo(
                    Point { x: 34.83, y: 30.15 },
                    Point { x: 36.00, y: 27.07 },
                    Point { x: 36.00, y: 24.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 36.00, y: 20.93 },
                    Point { x: 34.82, y: 17.85 },
                    Point { x: 32.49, y: 15.51 },
                ),
                PathEl::LineTo(Point { x: 35.32, y: 12.68 }),
                PathEl::CurveTo(
                    Point { x: 38.43, y: 15.81 },
                    Point { x: 40.00, y: 19.90 },
                    Point { x: 40.00, y: 24.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 40.00, y: 28.10 },
                    Point { x: 38.43, y: 32.19 },
                    Point { x: 35.31, y: 35.31 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 24.00, y: 20.00 }),
                PathEl::CurveTo(
                    Point { x: 21.79, y: 20.00 },
                    Point { x: 20.00, y: 21.79 },
                    Point { x: 20.00, y: 24.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 20.00, y: 26.21 },
                    Point { x: 21.79, y: 28.00 },
                    Point { x: 24.00, y: 28.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 26.21, y: 28.00 },
                    Point { x: 28.00, y: 26.21 },
                    Point { x: 28.00, y: 24.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 28.00, y: 21.79 },
                    Point { x: 26.21, y: 20.00 },
                    Point { x: 24.00, y: 20.00 },
                ),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct CallToAction {
    size: f64,
    color: Color,
}

impl CallToAction {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for CallToAction {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 42.00, y: 6.00 }),
                PathEl::LineTo(Point { x: 6.00, y: 6.00 }),
                PathEl::CurveTo(
                    Point { x: 3.80, y: 6.00 },
                    Point { x: 2.00, y: 7.80 },
                    Point { x: 2.00, y: 10.00 },
                ),
                PathEl::LineTo(Point { x: 2.00, y: 38.00 }),
                PathEl::CurveTo(
                    Point { x: 2.00, y: 40.20 },
                    Point { x: 3.80, y: 42.00 },
                    Point { x: 6.00, y: 42.00 },
                ),
                PathEl::LineTo(Point { x: 42.00, y: 42.00 }),
                PathEl::CurveTo(
                    Point { x: 44.20, y: 42.00 },
                    Point { x: 46.00, y: 40.20 },
                    Point { x: 46.00, y: 38.00 },
                ),
                PathEl::LineTo(Point { x: 46.00, y: 10.00 }),
                PathEl::CurveTo(
                    Point { x: 46.00, y: 7.80 },
                    Point { x: 44.20, y: 6.00 },
                    Point { x: 42.00, y: 6.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 42.00, y: 38.00 }),
                PathEl::LineTo(Point { x: 6.00, y: 38.00 }),
                PathEl::LineTo(Point { x: 6.00, y: 32.00 }),
                PathEl::LineTo(Point { x: 42.00, y: 32.00 }),
                PathEl::LineTo(Point { x: 42.00, y: 38.00 }),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct Person {
    size: f64,
    color: Color,
}

impl Person {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for Person {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 24.00, y: 24.00 }),
                PathEl::CurveTo(
                    Point { x: 28.42, y: 24.00 },
                    Point { x: 32.00, y: 20.41 },
                    Point { x: 32.00, y: 16.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 32.00, y: 11.58 },
                    Point { x: 28.42, y: 8.00 },
                    Point { x: 24.00, y: 8.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 19.58, y: 8.00 },
                    Point { x: 16.00, y: 11.58 },
                    Point { x: 16.00, y: 16.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 16.00, y: 20.41 },
                    Point { x: 19.58, y: 24.00 },
                    Point { x: 24.00, y: 24.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 24.00, y: 28.00 }),
                PathEl::CurveTo(
                    Point { x: 18.67, y: 28.00 },
                    Point { x: 8.00, y: 30.67 },
                    Point { x: 8.00, y: 36.00 },
                ),
                PathEl::LineTo(Point { x: 8.00, y: 40.00 }),
                PathEl::LineTo(Point { x: 40.00, y: 40.00 }),
                PathEl::LineTo(Point { x: 40.00, y: 36.00 }),
                PathEl::CurveTo(
                    Point { x: 40.00, y: 30.67 },
                    Point { x: 29.33, y: 28.00 },
                    Point { x: 24.00, y: 28.00 },
                ),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct Info {
    size: f64,
    color: Color,
}

impl Info {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for Info {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 24.00, y: 4.00 }),
                PathEl::CurveTo(
                    Point { x: 12.95, y: 4.00 },
                    Point { x: 4.00, y: 12.95 },
                    Point { x: 4.00, y: 24.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 4.00, y: 35.05 },
                    Point { x: 12.95, y: 44.00 },
                    Point { x: 24.00, y: 44.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 35.05, y: 44.00 },
                    Point { x: 44.00, y: 35.05 },
                    Point { x: 44.00, y: 24.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 44.00, y: 12.95 },
                    Point { x: 35.05, y: 4.00 },
                    Point { x: 24.00, y: 4.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 26.00, y: 34.00 }),
                PathEl::LineTo(Point { x: 22.00, y: 34.00 }),
                PathEl::LineTo(Point { x: 22.00, y: 22.00 }),
                PathEl::LineTo(Point { x: 26.00, y: 22.00 }),
                PathEl::LineTo(Point { x: 26.00, y: 34.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 26.00, y: 18.00 }),
                PathEl::LineTo(Point { x: 22.00, y: 18.00 }),
                PathEl::LineTo(Point { x: 22.00, y: 14.00 }),
                PathEl::LineTo(Point { x: 26.00, y: 14.00 }),
                PathEl::LineTo(Point { x: 26.00, y: 18.00 }),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct Gavel {
    size: f64,
    color: Color,
}

impl Gavel {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for Gavel {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 2.00, y: 42.00 }),
                PathEl::LineTo(Point { x: 26.00, y: 42.00 }),
                PathEl::LineTo(Point { x: 26.00, y: 46.00 }),
                PathEl::LineTo(Point { x: 2.00, y: 46.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 10.49, y: 16.14 }),
                PathEl::LineTo(Point { x: 16.15, y: 10.48 }),
                PathEl::LineTo(Point { x: 44.43, y: 38.77 }),
                PathEl::LineTo(Point { x: 38.78, y: 44.43 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 24.63, y: 2.01 }),
                PathEl::LineTo(Point { x: 35.94, y: 13.32 }),
                PathEl::LineTo(Point { x: 30.28, y: 18.98 }),
                PathEl::LineTo(Point { x: 18.97, y: 7.66 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 7.66, y: 18.98 }),
                PathEl::LineTo(Point { x: 18.97, y: 30.29 }),
                PathEl::LineTo(Point { x: 13.31, y: 35.95 }),
                PathEl::LineTo(Point { x: 2.00, y: 24.63 }),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct PlayCircleFilledWhite {
    size: f64,
    color: Color,
}

impl PlayCircleFilledWhite {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for PlayCircleFilledWhite {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 24.00, y: 4.00 }),
                PathEl::CurveTo(
                    Point { x: 12.95, y: 4.00 },
                    Point { x: 4.00, y: 12.95 },
                    Point { x: 4.00, y: 24.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 4.00, y: 35.05 },
                    Point { x: 12.95, y: 44.00 },
                    Point { x: 24.00, y: 44.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 35.05, y: 44.00 },
                    Point { x: 44.00, y: 35.05 },
                    Point { x: 44.00, y: 24.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 44.00, y: 12.95 },
                    Point { x: 35.05, y: 4.00 },
                    Point { x: 24.00, y: 4.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 20.00, y: 33.00 }),
                PathEl::LineTo(Point { x: 20.00, y: 15.00 }),
                PathEl::LineTo(Point { x: 32.00, y: 24.00 }),
                PathEl::LineTo(Point { x: 20.00, y: 33.00 }),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct TrendingDown {
    size: f64,
    color: Color,
}

impl TrendingDown {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for TrendingDown {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 32.00, y: 36.00 }),
                PathEl::LineTo(Point { x: 36.59, y: 31.41 }),
                PathEl::LineTo(Point { x: 26.83, y: 21.66 }),
                PathEl::LineTo(Point { x: 18.83, y: 29.66 }),
                PathEl::LineTo(Point { x: 4.00, y: 14.83 }),
                PathEl::LineTo(Point { x: 6.83, y: 12.00 }),
                PathEl::LineTo(Point { x: 18.83, y: 24.00 }),
                PathEl::LineTo(Point { x: 26.83, y: 16.00 }),
                PathEl::LineTo(Point { x: 39.41, y: 28.59 }),
                PathEl::LineTo(Point { x: 44.00, y: 24.00 }),
                PathEl::LineTo(Point { x: 44.00, y: 36.00 }),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct FlipToFront {
    size: f64,
    color: Color,
}

impl FlipToFront {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for FlipToFront {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 6.00, y: 26.00 }),
                PathEl::LineTo(Point { x: 10.00, y: 26.00 }),
                PathEl::LineTo(Point { x: 10.00, y: 22.00 }),
                PathEl::LineTo(Point { x: 6.00, y: 22.00 }),
                PathEl::LineTo(Point { x: 6.00, y: 26.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 6.00, y: 34.00 }),
                PathEl::LineTo(Point { x: 10.00, y: 34.00 }),
                PathEl::LineTo(Point { x: 10.00, y: 30.00 }),
                PathEl::LineTo(Point { x: 6.00, y: 30.00 }),
                PathEl::LineTo(Point { x: 6.00, y: 34.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 10.00, y: 42.00 }),
                PathEl::LineTo(Point { x: 10.00, y: 38.00 }),
                PathEl::LineTo(Point { x: 6.00, y: 38.00 }),
                PathEl::CurveTo(
                    Point { x: 6.00, y: 40.21 },
                    Point { x: 7.79, y: 42.00 },
                    Point { x: 10.00, y: 42.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 6.00, y: 18.00 }),
                PathEl::LineTo(Point { x: 10.00, y: 18.00 }),
                PathEl::LineTo(Point { x: 10.00, y: 14.00 }),
                PathEl::LineTo(Point { x: 6.00, y: 14.00 }),
                PathEl::LineTo(Point { x: 6.00, y: 18.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 30.00, y: 42.00 }),
                PathEl::LineTo(Point { x: 34.00, y: 42.00 }),
                PathEl::LineTo(Point { x: 34.00, y: 38.00 }),
                PathEl::LineTo(Point { x: 30.00, y: 38.00 }),
                PathEl::LineTo(Point { x: 30.00, y: 42.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 38.00, y: 6.00 }),
                PathEl::LineTo(Point { x: 18.00, y: 6.00 }),
                PathEl::CurveTo(
                    Point { x: 15.79, y: 6.00 },
                    Point { x: 14.00, y: 7.79 },
                    Point { x: 14.00, y: 10.00 },
                ),
                PathEl::LineTo(Point { x: 14.00, y: 30.00 }),
                PathEl::CurveTo(
                    Point { x: 14.00, y: 32.21 },
                    Point { x: 15.79, y: 34.00 },
                    Point { x: 18.00, y: 34.00 },
                ),
                PathEl::LineTo(Point { x: 38.00, y: 34.00 }),
                PathEl::CurveTo(
                    Point { x: 40.21, y: 34.00 },
                    Point { x: 42.00, y: 32.21 },
                    Point { x: 42.00, y: 30.00 },
                ),
                PathEl::LineTo(Point { x: 42.00, y: 10.00 }),
                PathEl::CurveTo(
                    Point { x: 42.00, y: 7.79 },
                    Point { x: 40.21, y: 6.00 },
                    Point { x: 38.00, y: 6.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 38.00, y: 30.00 }),
                PathEl::LineTo(Point { x: 18.00, y: 30.00 }),
                PathEl::LineTo(Point { x: 18.00, y: 10.00 }),
                PathEl::LineTo(Point { x: 38.00, y: 10.00 }),
                PathEl::LineTo(Point { x: 38.00, y: 30.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 22.00, y: 42.00 }),
                PathEl::LineTo(Point { x: 26.00, y: 42.00 }),
                PathEl::LineTo(Point { x: 26.00, y: 38.00 }),
                PathEl::LineTo(Point { x: 22.00, y: 38.00 }),
                PathEl::LineTo(Point { x: 22.00, y: 42.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 14.00, y: 42.00 }),
                PathEl::LineTo(Point { x: 18.00, y: 42.00 }),
                PathEl::LineTo(Point { x: 18.00, y: 38.00 }),
                PathEl::LineTo(Point { x: 14.00, y: 38.00 }),
                PathEl::LineTo(Point { x: 14.00, y: 42.00 }),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct Dns {
    size: f64,
    color: Color,
}

impl Dns {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for Dns {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 40.00, y: 26.00 }),
                PathEl::LineTo(Point { x: 8.00, y: 26.00 }),
                PathEl::CurveTo(
                    Point { x: 6.90, y: 26.00 },
                    Point { x: 6.00, y: 26.90 },
                    Point { x: 6.00, y: 28.00 },
                ),
                PathEl::LineTo(Point { x: 6.00, y: 40.00 }),
                PathEl::CurveTo(
                    Point { x: 6.00, y: 41.10 },
                    Point { x: 6.90, y: 42.00 },
                    Point { x: 8.00, y: 42.00 },
                ),
                PathEl::LineTo(Point { x: 40.00, y: 42.00 }),
                PathEl::CurveTo(
                    Point { x: 41.10, y: 42.00 },
                    Point { x: 42.00, y: 41.10 },
                    Point { x: 42.00, y: 40.00 },
                ),
                PathEl::LineTo(Point { x: 42.00, y: 28.00 }),
                PathEl::CurveTo(
                    Point { x: 42.00, y: 26.90 },
                    Point { x: 41.10, y: 26.00 },
                    Point { x: 40.00, y: 26.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 14.00, y: 38.00 }),
                PathEl::CurveTo(
                    Point { x: 11.79, y: 38.00 },
                    Point { x: 10.00, y: 36.21 },
                    Point { x: 10.00, y: 34.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 10.00, y: 31.79 },
                    Point { x: 11.79, y: 30.00 },
                    Point { x: 14.00, y: 30.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 16.21, y: 30.00 },
                    Point { x: 18.00, y: 31.79 },
                    Point { x: 18.00, y: 34.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 18.00, y: 36.21 },
                    Point { x: 16.21, y: 38.00 },
                    Point { x: 14.00, y: 38.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 40.00, y: 6.00 }),
                PathEl::LineTo(Point { x: 8.00, y: 6.00 }),
                PathEl::CurveTo(
                    Point { x: 6.90, y: 6.00 },
                    Point { x: 6.00, y: 6.90 },
                    Point { x: 6.00, y: 8.00 },
                ),
                PathEl::LineTo(Point { x: 6.00, y: 20.00 }),
                PathEl::CurveTo(
                    Point { x: 6.00, y: 21.10 },
                    Point { x: 6.90, y: 22.00 },
                    Point { x: 8.00, y: 22.00 },
                ),
                PathEl::LineTo(Point { x: 40.00, y: 22.00 }),
                PathEl::CurveTo(
                    Point { x: 41.10, y: 22.00 },
                    Point { x: 42.00, y: 21.10 },
                    Point { x: 42.00, y: 20.00 },
                ),
                PathEl::LineTo(Point { x: 42.00, y: 8.00 }),
                PathEl::CurveTo(
                    Point { x: 42.00, y: 6.90 },
                    Point { x: 41.10, y: 6.00 },
                    Point { x: 40.00, y: 6.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 14.00, y: 18.00 }),
                PathEl::CurveTo(
                    Point { x: 11.79, y: 18.00 },
                    Point { x: 10.00, y: 16.21 },
                    Point { x: 10.00, y: 14.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 10.00, y: 11.79 },
                    Point { x: 11.79, y: 10.00 },
                    Point { x: 14.00, y: 10.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 16.21, y: 10.00 },
                    Point { x: 18.00, y: 11.79 },
                    Point { x: 18.00, y: 14.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 18.00, y: 16.21 },
                    Point { x: 16.21, y: 18.00 },
                    Point { x: 14.00, y: 18.00 },
                ),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct MicNone {
    size: f64,
    color: Color,
}

impl MicNone {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for MicNone {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 24.00, y: 28.00 }),
                PathEl::CurveTo(
                    Point { x: 27.31, y: 28.00 },
                    Point { x: 29.98, y: 25.31 },
                    Point { x: 29.98, y: 22.00 },
                ),
                PathEl::LineTo(Point { x: 30.00, y: 10.00 }),
                PathEl::CurveTo(
                    Point { x: 30.00, y: 6.68 },
                    Point { x: 27.32, y: 4.00 },
                    Point { x: 24.00, y: 4.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 20.69, y: 4.00 },
                    Point { x: 18.00, y: 6.68 },
                    Point { x: 18.00, y: 10.00 },
                ),
                PathEl::LineTo(Point { x: 18.00, y: 22.00 }),
                PathEl::CurveTo(
                    Point { x: 18.00, y: 25.31 },
                    Point { x: 20.69, y: 28.00 },
                    Point { x: 24.00, y: 28.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 21.60, y: 9.80 }),
                PathEl::CurveTo(
                    Point { x: 21.60, y: 8.48 },
                    Point { x: 22.68, y: 7.40 },
                    Point { x: 24.00, y: 7.40 },
                ),
                PathEl::CurveTo(
                    Point { x: 25.32, y: 7.40 },
                    Point { x: 26.40, y: 8.48 },
                    Point { x: 26.40, y: 9.80 },
                ),
                PathEl::LineTo(Point { x: 26.38, y: 22.20 }),
                PathEl::CurveTo(
                    Point { x: 26.38, y: 23.52 },
                    Point { x: 25.31, y: 24.60 },
                    Point { x: 24.00, y: 24.60 },
                ),
                PathEl::CurveTo(
                    Point { x: 22.68, y: 24.60 },
                    Point { x: 21.60, y: 23.52 },
                    Point { x: 21.60, y: 22.20 },
                ),
                PathEl::LineTo(Point { x: 21.60, y: 9.80 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 34.60, y: 22.00 }),
                PathEl::CurveTo(
                    Point { x: 34.60, y: 28.00 },
                    Point { x: 29.53, y: 32.20 },
                    Point { x: 24.00, y: 32.20 },
                ),
                PathEl::CurveTo(
                    Point { x: 18.48, y: 32.20 },
                    Point { x: 13.40, y: 28.00 },
                    Point { x: 13.40, y: 22.00 },
                ),
                PathEl::LineTo(Point { x: 10.00, y: 22.00 }),
                PathEl::CurveTo(
                    Point { x: 10.00, y: 28.83 },
                    Point { x: 15.44, y: 34.47 },
                    Point { x: 22.00, y: 35.44 },
                ),
                PathEl::LineTo(Point { x: 22.00, y: 42.00 }),
                PathEl::LineTo(Point { x: 26.00, y: 42.00 }),
                PathEl::LineTo(Point { x: 26.00, y: 35.44 }),
                PathEl::CurveTo(
                    Point { x: 32.56, y: 34.47 },
                    Point { x: 38.00, y: 28.83 },
                    Point { x: 38.00, y: 22.00 },
                ),
                PathEl::LineTo(Point { x: 34.60, y: 22.00 }),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct Polymer {
    size: f64,
    color: Color,
}

impl Polymer {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for Polymer {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 38.00, y: 8.00 }),
                PathEl::LineTo(Point { x: 30.00, y: 8.00 }),
                PathEl::LineTo(Point { x: 14.21, y: 33.26 }),
                PathEl::LineTo(Point { x: 9.00, y: 24.00 }),
                PathEl::LineTo(Point { x: 18.00, y: 8.00 }),
                PathEl::LineTo(Point { x: 10.00, y: 8.00 }),
                PathEl::LineTo(Point { x: 1.00, y: 24.00 }),
                PathEl::LineTo(Point { x: 10.00, y: 40.00 }),
                PathEl::LineTo(Point { x: 18.00, y: 40.00 }),
                PathEl::LineTo(Point { x: 33.79, y: 14.74 }),
                PathEl::LineTo(Point { x: 39.00, y: 24.00 }),
                PathEl::LineTo(Point { x: 30.00, y: 40.00 }),
                PathEl::LineTo(Point { x: 38.00, y: 40.00 }),
                PathEl::LineTo(Point { x: 47.00, y: 24.00 }),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct RestorePage {
    size: f64,
    color: Color,
}

impl RestorePage {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for RestorePage {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 28.00, y: 4.00 }),
                PathEl::LineTo(Point { x: 12.00, y: 4.00 }),
                PathEl::CurveTo(
                    Point { x: 9.80, y: 4.00 },
                    Point { x: 8.02, y: 5.80 },
                    Point { x: 8.02, y: 8.00 },
                ),
                PathEl::LineTo(Point { x: 8.00, y: 40.00 }),
                PathEl::CurveTo(
                    Point { x: 8.00, y: 42.20 },
                    Point { x: 9.78, y: 44.00 },
                    Point { x: 11.98, y: 44.00 },
                ),
                PathEl::LineTo(Point { x: 36.00, y: 44.00 }),
                PathEl::CurveTo(
                    Point { x: 38.20, y: 44.00 },
                    Point { x: 40.00, y: 42.20 },
                    Point { x: 40.00, y: 40.00 },
                ),
                PathEl::LineTo(Point { x: 40.00, y: 16.00 }),
                PathEl::LineTo(Point { x: 28.00, y: 4.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 24.00, y: 36.00 }),
                PathEl::CurveTo(
                    Point { x: 19.90, y: 36.00 },
                    Point { x: 16.39, y: 33.53 },
                    Point { x: 14.84, y: 30.00 },
                ),
                PathEl::LineTo(Point { x: 18.26, y: 30.00 }),
                PathEl::CurveTo(
                    Point { x: 19.53, y: 31.81 },
                    Point { x: 21.62, y: 33.00 },
                    Point { x: 23.99, y: 33.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 27.86, y: 33.00 },
                    Point { x: 30.99, y: 29.87 },
                    Point { x: 30.99, y: 26.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 30.99, y: 22.13 },
                    Point { x: 27.86, y: 19.00 },
                    Point { x: 23.99, y: 19.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 21.28, y: 19.00 },
                    Point { x: 18.96, y: 20.55 },
                    Point { x: 17.80, y: 22.81 },
                ),
                PathEl::LineTo(Point { x: 21.00, y: 26.00 }),
                PathEl::LineTo(Point { x: 13.00, y: 26.00 }),
                PathEl::LineTo(Point { x: 13.00, y: 18.00 }),
                PathEl::LineTo(Point { x: 15.60, y: 20.60 }),
                PathEl::CurveTo(
                    Point { x: 17.38, y: 17.84 },
                    Point { x: 20.47, y: 16.00 },
                    Point { x: 24.00, y: 16.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 29.52, y: 16.00 },
                    Point { x: 34.00, y: 20.48 },
                    Point { x: 34.00, y: 26.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 34.00, y: 31.52 },
                    Point { x: 29.52, y: 36.00 },
                    Point { x: 24.00, y: 36.00 },
                ),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct ColorLens {
    size: f64,
    color: Color,
}

impl ColorLens {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for ColorLens {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 24.00, y: 6.00 }),
                PathEl::CurveTo(
                    Point { x: 14.06, y: 6.00 },
                    Point { x: 6.00, y: 14.06 },
                    Point { x: 6.00, y: 24.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 6.00, y: 33.94 },
                    Point { x: 14.06, y: 42.00 },
                    Point { x: 24.00, y: 42.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 25.66, y: 42.00 },
                    Point { x: 27.00, y: 40.66 },
                    Point { x: 27.00, y: 39.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 27.00, y: 38.22 },
                    Point { x: 26.71, y: 37.52 },
                    Point { x: 26.22, y: 36.99 },
                ),
                PathEl::CurveTo(
                    Point { x: 25.75, y: 36.46 },
                    Point { x: 25.47, y: 35.77 },
                    Point { x: 25.47, y: 35.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 25.47, y: 33.34 },
                    Point { x: 26.81, y: 32.00 },
                    Point { x: 28.47, y: 32.00 },
                ),
                PathEl::LineTo(Point { x: 32.00, y: 32.00 }),
                PathEl::CurveTo(
                    Point { x: 37.52, y: 32.00 },
                    Point { x: 42.00, y: 27.52 },
                    Point { x: 42.00, y: 22.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 42.00, y: 13.16 },
                    Point { x: 33.94, y: 6.00 },
                    Point { x: 24.00, y: 6.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 13.00, y: 24.00 }),
                PathEl::CurveTo(
                    Point { x: 11.34, y: 24.00 },
                    Point { x: 10.00, y: 22.66 },
                    Point { x: 10.00, y: 21.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 10.00, y: 19.34 },
                    Point { x: 11.34, y: 18.00 },
                    Point { x: 13.00, y: 18.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 14.66, y: 18.00 },
                    Point { x: 16.00, y: 19.34 },
                    Point { x: 16.00, y: 21.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 16.00, y: 22.66 },
                    Point { x: 14.66, y: 24.00 },
                    Point { x: 13.00, y: 24.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 19.00, y: 16.00 }),
                PathEl::CurveTo(
                    Point { x: 17.34, y: 16.00 },
                    Point { x: 16.00, y: 14.66 },
                    Point { x: 16.00, y: 13.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 16.00, y: 11.34 },
                    Point { x: 17.34, y: 10.00 },
                    Point { x: 19.00, y: 10.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 20.66, y: 10.00 },
                    Point { x: 22.00, y: 11.34 },
                    Point { x: 22.00, y: 13.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 22.00, y: 14.66 },
                    Point { x: 20.66, y: 16.00 },
                    Point { x: 19.00, y: 16.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 29.00, y: 16.00 }),
                PathEl::CurveTo(
                    Point { x: 27.34, y: 16.00 },
                    Point { x: 26.00, y: 14.66 },
                    Point { x: 26.00, y: 13.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 26.00, y: 11.34 },
                    Point { x: 27.34, y: 10.00 },
                    Point { x: 29.00, y: 10.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 30.66, y: 10.00 },
                    Point { x: 32.00, y: 11.34 },
                    Point { x: 32.00, y: 13.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 32.00, y: 14.66 },
                    Point { x: 30.66, y: 16.00 },
                    Point { x: 29.00, y: 16.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 35.00, y: 24.00 }),
                PathEl::CurveTo(
                    Point { x: 33.34, y: 24.00 },
                    Point { x: 32.00, y: 22.66 },
                    Point { x: 32.00, y: 21.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 32.00, y: 19.34 },
                    Point { x: 33.34, y: 18.00 },
                    Point { x: 35.00, y: 18.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 36.66, y: 18.00 },
                    Point { x: 38.00, y: 19.34 },
                    Point { x: 38.00, y: 21.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 38.00, y: 22.66 },
                    Point { x: 36.66, y: 24.00 },
                    Point { x: 35.00, y: 24.00 },
                ),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct EuroSymbol {
    size: f64,
    color: Color,
}

impl EuroSymbol {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for EuroSymbol {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 30.00, y: 37.00 }),
                PathEl::CurveTo(
                    Point { x: 24.99, y: 37.00 },
                    Point { x: 20.64, y: 34.16 },
                    Point { x: 18.47, y: 30.00 },
                ),
                PathEl::LineTo(Point { x: 30.00, y: 30.00 }),
                PathEl::LineTo(Point { x: 30.00, y: 26.00 }),
                PathEl::LineTo(Point { x: 17.17, y: 26.00 }),
                PathEl::CurveTo(
                    Point { x: 17.07, y: 25.35 },
                    Point { x: 17.00, y: 24.68 },
                    Point { x: 17.00, y: 24.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 17.00, y: 23.32 },
                    Point { x: 17.07, y: 22.65 },
                    Point { x: 17.17, y: 22.00 },
                ),
                PathEl::LineTo(Point { x: 30.00, y: 22.00 }),
                PathEl::LineTo(Point { x: 30.00, y: 18.00 }),
                PathEl::LineTo(Point { x: 18.47, y: 18.00 }),
                PathEl::CurveTo(
                    Point { x: 20.64, y: 13.84 },
                    Point { x: 24.98, y: 11.00 },
                    Point { x: 30.00, y: 11.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 33.23, y: 11.00 },
                    Point { x: 36.18, y: 12.18 },
                    Point { x: 38.45, y: 14.13 },
                ),
                PathEl::LineTo(Point { x: 42.00, y: 10.60 }),
                PathEl::CurveTo(
                    Point { x: 38.82, y: 7.75 },
                    Point { x: 34.61, y: 6.00 },
                    Point { x: 30.00, y: 6.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 22.17, y: 6.00 },
                    Point { x: 15.52, y: 11.01 },
                    Point { x: 13.05, y: 18.00 },
                ),
                PathEl::LineTo(Point { x: 6.00, y: 18.00 }),
                PathEl::LineTo(Point { x: 6.00, y: 22.00 }),
                PathEl::LineTo(Point { x: 12.12, y: 22.00 }),
                PathEl::CurveTo(
                    Point { x: 12.04, y: 22.66 },
                    Point { x: 12.00, y: 23.32 },
                    Point { x: 12.00, y: 24.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 12.00, y: 24.68 },
                    Point { x: 12.04, y: 25.34 },
                    Point { x: 12.12, y: 26.00 },
                ),
                PathEl::LineTo(Point { x: 6.00, y: 26.00 }),
                PathEl::LineTo(Point { x: 6.00, y: 30.00 }),
                PathEl::LineTo(Point { x: 13.05, y: 30.00 }),
                PathEl::CurveTo(
                    Point { x: 15.52, y: 36.99 },
                    Point { x: 22.17, y: 42.00 },
                    Point { x: 30.00, y: 42.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 34.61, y: 42.00 },
                    Point { x: 38.82, y: 40.25 },
                    Point { x: 42.00, y: 37.40 },
                ),
                PathEl::LineTo(Point { x: 38.45, y: 33.86 }),
                PathEl::CurveTo(
                    Point { x: 36.18, y: 35.81 },
                    Point { x: 33.23, y: 37.00 },
                    Point { x: 30.00, y: 37.00 },
                ),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct Close {
    size: f64,
    color: Color,
}

impl Close {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for Close {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 38.00, y: 12.83 }),
                PathEl::LineTo(Point { x: 35.17, y: 10.00 }),
                PathEl::LineTo(Point { x: 24.00, y: 21.17 }),
                PathEl::LineTo(Point { x: 12.83, y: 10.00 }),
                PathEl::LineTo(Point { x: 10.00, y: 12.83 }),
                PathEl::LineTo(Point { x: 21.17, y: 24.00 }),
                PathEl::LineTo(Point { x: 10.00, y: 35.17 }),
                PathEl::LineTo(Point { x: 12.83, y: 38.00 }),
                PathEl::LineTo(Point { x: 24.00, y: 26.83 }),
                PathEl::LineTo(Point { x: 35.17, y: 38.00 }),
                PathEl::LineTo(Point { x: 38.00, y: 35.17 }),
                PathEl::LineTo(Point { x: 26.83, y: 24.00 }),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct CreditCard {
    size: f64,
    color: Color,
}

impl CreditCard {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for CreditCard {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 40.00, y: 8.00 }),
                PathEl::LineTo(Point { x: 8.00, y: 8.00 }),
                PathEl::CurveTo(
                    Point { x: 5.79, y: 8.00 },
                    Point { x: 4.02, y: 9.79 },
                    Point { x: 4.02, y: 12.00 },
                ),
                PathEl::LineTo(Point { x: 4.00, y: 36.00 }),
                PathEl::CurveTo(
                    Point { x: 4.00, y: 38.21 },
                    Point { x: 5.79, y: 40.00 },
                    Point { x: 8.00, y: 40.00 },
                ),
                PathEl::LineTo(Point { x: 40.00, y: 40.00 }),
                PathEl::CurveTo(
                    Point { x: 42.21, y: 40.00 },
                    Point { x: 44.00, y: 38.21 },
                    Point { x: 44.00, y: 36.00 },
                ),
                PathEl::LineTo(Point { x: 44.00, y: 12.00 }),
                PathEl::CurveTo(
                    Point { x: 44.00, y: 9.79 },
                    Point { x: 42.21, y: 8.00 },
                    Point { x: 40.00, y: 8.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 40.00, y: 36.00 }),
                PathEl::LineTo(Point { x: 8.00, y: 36.00 }),
                PathEl::LineTo(Point { x: 8.00, y: 24.00 }),
                PathEl::LineTo(Point { x: 40.00, y: 24.00 }),
                PathEl::LineTo(Point { x: 40.00, y: 36.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 40.00, y: 16.00 }),
                PathEl::LineTo(Point { x: 8.00, y: 16.00 }),
                PathEl::LineTo(Point { x: 8.00, y: 12.00 }),
                PathEl::LineTo(Point { x: 40.00, y: 12.00 }),
                PathEl::LineTo(Point { x: 40.00, y: 16.00 }),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct Vibration {
    size: f64,
    color: Color,
}

impl Vibration {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for Vibration {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 0.00, y: 30.00 }),
                PathEl::LineTo(Point { x: 4.00, y: 30.00 }),
                PathEl::LineTo(Point { x: 4.00, y: 18.00 }),
                PathEl::LineTo(Point { x: 0.00, y: 18.00 }),
                PathEl::LineTo(Point { x: 0.00, y: 30.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 6.00, y: 34.00 }),
                PathEl::LineTo(Point { x: 10.00, y: 34.00 }),
                PathEl::LineTo(Point { x: 10.00, y: 14.00 }),
                PathEl::LineTo(Point { x: 6.00, y: 14.00 }),
                PathEl::LineTo(Point { x: 6.00, y: 34.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 44.00, y: 18.00 }),
                PathEl::LineTo(Point { x: 44.00, y: 30.00 }),
                PathEl::LineTo(Point { x: 48.00, y: 30.00 }),
                PathEl::LineTo(Point { x: 48.00, y: 18.00 }),
                PathEl::LineTo(Point { x: 44.00, y: 18.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 38.00, y: 34.00 }),
                PathEl::LineTo(Point { x: 42.00, y: 34.00 }),
                PathEl::LineTo(Point { x: 42.00, y: 14.00 }),
                PathEl::LineTo(Point { x: 38.00, y: 14.00 }),
                PathEl::LineTo(Point { x: 38.00, y: 34.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 33.00, y: 6.00 }),
                PathEl::LineTo(Point { x: 15.00, y: 6.00 }),
                PathEl::CurveTo(
                    Point { x: 13.34, y: 6.00 },
                    Point { x: 12.00, y: 7.34 },
                    Point { x: 12.00, y: 9.00 },
                ),
                PathEl::LineTo(Point { x: 12.00, y: 39.00 }),
                PathEl::CurveTo(
                    Point { x: 12.00, y: 40.66 },
                    Point { x: 13.34, y: 42.00 },
                    Point { x: 15.00, y: 42.00 },
                ),
                PathEl::LineTo(Point { x: 33.00, y: 42.00 }),
                PathEl::CurveTo(
                    Point { x: 34.66, y: 42.00 },
                    Point { x: 36.00, y: 40.66 },
                    Point { x: 36.00, y: 39.00 },
                ),
                PathEl::LineTo(Point { x: 36.00, y: 9.00 }),
                PathEl::CurveTo(
                    Point { x: 36.00, y: 7.34 },
                    Point { x: 34.66, y: 6.00 },
                    Point { x: 33.00, y: 6.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 32.00, y: 38.00 }),
                PathEl::LineTo(Point { x: 16.00, y: 38.00 }),
                PathEl::LineTo(Point { x: 16.00, y: 10.00 }),
                PathEl::LineTo(Point { x: 32.00, y: 10.00 }),
                PathEl::LineTo(Point { x: 32.00, y: 38.00 }),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct AccountCircle {
    size: f64,
    color: Color,
}

impl AccountCircle {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for AccountCircle {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 24.00, y: 4.00 }),
                PathEl::CurveTo(
                    Point { x: 12.95, y: 4.00 },
                    Point { x: 4.00, y: 12.95 },
                    Point { x: 4.00, y: 24.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 4.00, y: 35.05 },
                    Point { x: 12.95, y: 44.00 },
                    Point { x: 24.00, y: 44.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 35.05, y: 44.00 },
                    Point { x: 44.00, y: 35.05 },
                    Point { x: 44.00, y: 24.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 44.00, y: 12.95 },
                    Point { x: 35.05, y: 4.00 },
                    Point { x: 24.00, y: 4.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 24.00, y: 10.00 }),
                PathEl::CurveTo(
                    Point { x: 27.31, y: 10.00 },
                    Point { x: 30.00, y: 12.69 },
                    Point { x: 30.00, y: 16.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 30.00, y: 19.32 },
                    Point { x: 27.31, y: 22.00 },
                    Point { x: 24.00, y: 22.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 20.69, y: 22.00 },
                    Point { x: 18.00, y: 19.32 },
                    Point { x: 18.00, y: 16.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 18.00, y: 12.69 },
                    Point { x: 20.69, y: 10.00 },
                    Point { x: 24.00, y: 10.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 24.00, y: 38.40 }),
                PathEl::CurveTo(
                    Point { x: 18.99, y: 38.40 },
                    Point { x: 14.59, y: 35.84 },
                    Point { x: 12.00, y: 31.96 },
                ),
                PathEl::CurveTo(
                    Point { x: 12.05, y: 27.99 },
                    Point { x: 20.01, y: 25.80 },
                    Point { x: 24.00, y: 25.80 },
                ),
                PathEl::CurveTo(
                    Point { x: 27.99, y: 25.80 },
                    Point { x: 35.94, y: 27.99 },
                    Point { x: 36.00, y: 31.96 },
                ),
                PathEl::CurveTo(
                    Point { x: 33.41, y: 35.84 },
                    Point { x: 29.01, y: 38.40 },
                    Point { x: 24.00, y: 38.40 },
                ),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct Dvr {
    size: f64,
    color: Color,
}

impl Dvr {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for Dvr {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 42.00, y: 6.00 }),
                PathEl::LineTo(Point { x: 6.00, y: 6.00 }),
                PathEl::CurveTo(
                    Point { x: 3.79, y: 6.00 },
                    Point { x: 2.00, y: 7.79 },
                    Point { x: 2.00, y: 10.00 },
                ),
                PathEl::LineTo(Point { x: 2.00, y: 34.00 }),
                PathEl::CurveTo(
                    Point { x: 2.00, y: 36.21 },
                    Point { x: 3.79, y: 38.00 },
                    Point { x: 6.00, y: 38.00 },
                ),
                PathEl::LineTo(Point { x: 16.00, y: 38.00 }),
                PathEl::LineTo(Point { x: 16.00, y: 42.00 }),
                PathEl::LineTo(Point { x: 32.00, y: 42.00 }),
                PathEl::LineTo(Point { x: 32.00, y: 38.00 }),
                PathEl::LineTo(Point { x: 42.00, y: 38.00 }),
                PathEl::CurveTo(
                    Point { x: 44.21, y: 38.00 },
                    Point { x: 45.98, y: 36.21 },
                    Point { x: 45.98, y: 34.00 },
                ),
                PathEl::LineTo(Point { x: 46.00, y: 10.00 }),
                PathEl::CurveTo(
                    Point { x: 46.00, y: 7.79 },
                    Point { x: 44.21, y: 6.00 },
                    Point { x: 42.00, y: 6.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 42.00, y: 34.00 }),
                PathEl::LineTo(Point { x: 6.00, y: 34.00 }),
                PathEl::LineTo(Point { x: 6.00, y: 10.00 }),
                PathEl::LineTo(Point { x: 42.00, y: 10.00 }),
                PathEl::LineTo(Point { x: 42.00, y: 34.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 38.00, y: 16.00 }),
                PathEl::LineTo(Point { x: 16.00, y: 16.00 }),
                PathEl::LineTo(Point { x: 16.00, y: 20.00 }),
                PathEl::LineTo(Point { x: 38.00, y: 20.00 }),
                PathEl::LineTo(Point { x: 38.00, y: 16.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 38.00, y: 24.00 }),
                PathEl::LineTo(Point { x: 16.00, y: 24.00 }),
                PathEl::LineTo(Point { x: 16.00, y: 28.00 }),
                PathEl::LineTo(Point { x: 38.00, y: 28.00 }),
                PathEl::LineTo(Point { x: 38.00, y: 24.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 14.00, y: 16.00 }),
                PathEl::LineTo(Point { x: 10.00, y: 16.00 }),
                PathEl::LineTo(Point { x: 10.00, y: 20.00 }),
                PathEl::LineTo(Point { x: 14.00, y: 20.00 }),
                PathEl::LineTo(Point { x: 14.00, y: 16.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 14.00, y: 24.00 }),
                PathEl::LineTo(Point { x: 10.00, y: 24.00 }),
                PathEl::LineTo(Point { x: 10.00, y: 28.00 }),
                PathEl::LineTo(Point { x: 14.00, y: 28.00 }),
                PathEl::LineTo(Point { x: 14.00, y: 24.00 }),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct FormatClear {
    size: f64,
    color: Color,
}

impl FormatClear {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for FormatClear {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 6.54, y: 10.00 }),
                PathEl::LineTo(Point { x: 4.00, y: 12.55 }),
                PathEl::LineTo(Point { x: 17.94, y: 26.49 }),
                PathEl::LineTo(Point { x: 13.00, y: 38.00 }),
                PathEl::LineTo(Point { x: 19.00, y: 38.00 }),
                PathEl::LineTo(Point { x: 22.14, y: 30.68 }),
                PathEl::LineTo(Point { x: 33.46, y: 42.00 }),
                PathEl::LineTo(Point { x: 36.00, y: 39.45 }),
                PathEl::LineTo(Point { x: 7.09, y: 10.55 }),
                PathEl::LineTo(Point { x: 6.54, y: 10.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 12.00, y: 10.00 }),
                PathEl::LineTo(Point { x: 12.00, y: 10.36 }),
                PathEl::LineTo(Point { x: 17.64, y: 16.00 }),
                PathEl::LineTo(Point { x: 22.43, y: 16.00 }),
                PathEl::LineTo(Point { x: 20.99, y: 19.35 }),
                PathEl::LineTo(Point { x: 25.19, y: 23.55 }),
                PathEl::LineTo(Point { x: 28.43, y: 16.00 }),
                PathEl::LineTo(Point { x: 40.00, y: 16.00 }),
                PathEl::LineTo(Point { x: 40.00, y: 10.00 }),
                PathEl::LineTo(Point { x: 12.00, y: 10.00 }),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct FilterCenterFocus {
    size: f64,
    color: Color,
}

impl FilterCenterFocus {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for FilterCenterFocus {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 10.00, y: 30.00 }),
                PathEl::LineTo(Point { x: 6.00, y: 30.00 }),
                PathEl::LineTo(Point { x: 6.00, y: 38.00 }),
                PathEl::CurveTo(
                    Point { x: 6.00, y: 40.21 },
                    Point { x: 7.79, y: 42.00 },
                    Point { x: 10.00, y: 42.00 },
                ),
                PathEl::LineTo(Point { x: 18.00, y: 42.00 }),
                PathEl::LineTo(Point { x: 18.00, y: 38.00 }),
                PathEl::LineTo(Point { x: 10.00, y: 38.00 }),
                PathEl::LineTo(Point { x: 10.00, y: 30.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 10.00, y: 10.00 }),
                PathEl::LineTo(Point { x: 18.00, y: 10.00 }),
                PathEl::LineTo(Point { x: 18.00, y: 6.00 }),
                PathEl::LineTo(Point { x: 10.00, y: 6.00 }),
                PathEl::CurveTo(
                    Point { x: 7.79, y: 6.00 },
                    Point { x: 6.00, y: 7.79 },
                    Point { x: 6.00, y: 10.00 },
                ),
                PathEl::LineTo(Point { x: 6.00, y: 18.00 }),
                PathEl::LineTo(Point { x: 10.00, y: 18.00 }),
                PathEl::LineTo(Point { x: 10.00, y: 10.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 38.00, y: 6.00 }),
                PathEl::LineTo(Point { x: 30.00, y: 6.00 }),
                PathEl::LineTo(Point { x: 30.00, y: 10.00 }),
                PathEl::LineTo(Point { x: 38.00, y: 10.00 }),
                PathEl::LineTo(Point { x: 38.00, y: 18.00 }),
                PathEl::LineTo(Point { x: 42.00, y: 18.00 }),
                PathEl::LineTo(Point { x: 42.00, y: 10.00 }),
                PathEl::CurveTo(
                    Point { x: 42.00, y: 7.79 },
                    Point { x: 40.21, y: 6.00 },
                    Point { x: 38.00, y: 6.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 38.00, y: 38.00 }),
                PathEl::LineTo(Point { x: 30.00, y: 38.00 }),
                PathEl::LineTo(Point { x: 30.00, y: 42.00 }),
                PathEl::LineTo(Point { x: 38.00, y: 42.00 }),
                PathEl::CurveTo(
                    Point { x: 40.21, y: 42.00 },
                    Point { x: 42.00, y: 40.21 },
                    Point { x: 42.00, y: 38.00 },
                ),
                PathEl::LineTo(Point { x: 42.00, y: 30.00 }),
                PathEl::LineTo(Point { x: 38.00, y: 30.00 }),
                PathEl::LineTo(Point { x: 38.00, y: 38.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 24.00, y: 18.00 }),
                PathEl::CurveTo(
                    Point { x: 20.69, y: 18.00 },
                    Point { x: 18.00, y: 20.69 },
                    Point { x: 18.00, y: 24.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 18.00, y: 27.31 },
                    Point { x: 20.69, y: 30.00 },
                    Point { x: 24.00, y: 30.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 27.31, y: 30.00 },
                    Point { x: 30.00, y: 27.31 },
                    Point { x: 30.00, y: 24.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 30.00, y: 20.69 },
                    Point { x: 27.31, y: 18.00 },
                    Point { x: 24.00, y: 18.00 },
                ),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct PhotoAlbum {
    size: f64,
    color: Color,
}

impl PhotoAlbum {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for PhotoAlbum {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 36.00, y: 4.00 }),
                PathEl::LineTo(Point { x: 12.00, y: 4.00 }),
                PathEl::CurveTo(
                    Point { x: 9.79, y: 4.00 },
                    Point { x: 8.00, y: 5.79 },
                    Point { x: 8.00, y: 8.00 },
                ),
                PathEl::LineTo(Point { x: 8.00, y: 40.00 }),
                PathEl::CurveTo(
                    Point { x: 8.00, y: 42.21 },
                    Point { x: 9.79, y: 44.00 },
                    Point { x: 12.00, y: 44.00 },
                ),
                PathEl::LineTo(Point { x: 36.00, y: 44.00 }),
                PathEl::CurveTo(
                    Point { x: 38.21, y: 44.00 },
                    Point { x: 40.00, y: 42.21 },
                    Point { x: 40.00, y: 40.00 },
                ),
                PathEl::LineTo(Point { x: 40.00, y: 8.00 }),
                PathEl::CurveTo(
                    Point { x: 40.00, y: 5.79 },
                    Point { x: 38.21, y: 4.00 },
                    Point { x: 36.00, y: 4.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 12.00, y: 8.00 }),
                PathEl::LineTo(Point { x: 22.00, y: 8.00 }),
                PathEl::LineTo(Point { x: 22.00, y: 24.00 }),
                PathEl::LineTo(Point { x: 17.00, y: 21.00 }),
                PathEl::LineTo(Point { x: 12.00, y: 24.00 }),
                PathEl::LineTo(Point { x: 12.00, y: 8.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 12.00, y: 38.00 }),
                PathEl::LineTo(Point { x: 18.00, y: 30.29 }),
                PathEl::LineTo(Point { x: 22.29, y: 35.44 }),
                PathEl::LineTo(Point { x: 28.29, y: 27.71 }),
                PathEl::LineTo(Point { x: 36.00, y: 38.00 }),
                PathEl::LineTo(Point { x: 12.00, y: 38.00 }),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct FitnessCenter {
    size: f64,
    color: Color,
}

impl FitnessCenter {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for FitnessCenter {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 41.14, y: 29.71 }),
                PathEl::LineTo(Point { x: 44.00, y: 26.86 }),
                PathEl::LineTo(Point { x: 41.14, y: 24.00 }),
                PathEl::LineTo(Point { x: 34.00, y: 31.14 }),
                PathEl::LineTo(Point { x: 16.86, y: 14.00 }),
                PathEl::LineTo(Point { x: 24.00, y: 6.86 }),
                PathEl::LineTo(Point { x: 21.14, y: 4.00 }),
                PathEl::LineTo(Point { x: 18.29, y: 6.86 }),
                PathEl::LineTo(Point { x: 15.43, y: 4.00 }),
                PathEl::LineTo(Point { x: 11.14, y: 8.29 }),
                PathEl::LineTo(Point { x: 8.29, y: 5.43 }),
                PathEl::LineTo(Point { x: 5.43, y: 8.29 }),
                PathEl::LineTo(Point { x: 8.29, y: 11.14 }),
                PathEl::LineTo(Point { x: 4.00, y: 15.43 }),
                PathEl::LineTo(Point { x: 6.86, y: 18.29 }),
                PathEl::LineTo(Point { x: 4.00, y: 21.14 }),
                PathEl::LineTo(Point { x: 6.86, y: 24.00 }),
                PathEl::LineTo(Point { x: 14.00, y: 16.86 }),
                PathEl::LineTo(Point { x: 31.14, y: 34.00 }),
                PathEl::LineTo(Point { x: 24.00, y: 41.14 }),
                PathEl::LineTo(Point { x: 26.86, y: 44.00 }),
                PathEl::LineTo(Point { x: 29.71, y: 41.14 }),
                PathEl::LineTo(Point { x: 32.57, y: 44.00 }),
                PathEl::LineTo(Point { x: 36.86, y: 39.71 }),
                PathEl::LineTo(Point { x: 39.71, y: 42.57 }),
                PathEl::LineTo(Point { x: 42.57, y: 39.71 }),
                PathEl::LineTo(Point { x: 39.71, y: 36.86 }),
                PathEl::LineTo(Point { x: 44.00, y: 32.57 }),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct GpsOff {
    size: f64,
    color: Color,
}

impl GpsOff {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for GpsOff {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 41.88, y: 22.00 }),
                PathEl::CurveTo(
                    Point { x: 40.96, y: 13.66 },
                    Point { x: 34.34, y: 7.04 },
                    Point { x: 26.00, y: 6.12 },
                ),
                PathEl::LineTo(Point { x: 26.00, y: 2.00 }),
                PathEl::LineTo(Point { x: 22.00, y: 2.00 }),
                PathEl::LineTo(Point { x: 22.00, y: 6.12 }),
                PathEl::CurveTo(
                    Point { x: 19.74, y: 6.37 },
                    Point { x: 17.62, y: 7.05 },
                    Point { x: 15.69, y: 8.06 },
                ),
                PathEl::LineTo(Point { x: 18.69, y: 11.06 }),
                PathEl::CurveTo(
                    Point { x: 20.33, y: 10.38 },
                    Point { x: 22.12, y: 10.00 },
                    Point { x: 24.00, y: 10.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 31.73, y: 10.00 },
                    Point { x: 38.00, y: 16.27 },
                    Point { x: 38.00, y: 24.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 38.00, y: 25.88 },
                    Point { x: 37.62, y: 27.67 },
                    Point { x: 36.95, y: 29.31 },
                ),
                PathEl::LineTo(Point { x: 39.95, y: 32.31 }),
                PathEl::CurveTo(
                    Point { x: 40.96, y: 30.38 },
                    Point { x: 41.63, y: 28.26 },
                    Point { x: 41.88, y: 26.00 },
                ),
                PathEl::LineTo(Point { x: 46.00, y: 26.00 }),
                PathEl::LineTo(Point { x: 46.00, y: 22.00 }),
                PathEl::LineTo(Point { x: 41.88, y: 22.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 6.00, y: 8.55 }),
                PathEl::LineTo(Point { x: 10.07, y: 12.62 }),
                PathEl::CurveTo(
                    Point { x: 7.93, y: 15.24 },
                    Point { x: 6.51, y: 18.46 },
                    Point { x: 6.12, y: 22.00 },
                ),
                PathEl::LineTo(Point { x: 2.00, y: 22.00 }),
                PathEl::LineTo(Point { x: 2.00, y: 26.00 }),
                PathEl::LineTo(Point { x: 6.12, y: 26.00 }),
                PathEl::CurveTo(
                    Point { x: 7.04, y: 34.34 },
                    Point { x: 13.66, y: 40.96 },
                    Point { x: 22.00, y: 41.88 },
                ),
                PathEl::LineTo(Point { x: 22.00, y: 46.00 }),
                PathEl::LineTo(Point { x: 26.00, y: 46.00 }),
                PathEl::LineTo(Point { x: 26.00, y: 41.88 }),
                PathEl::CurveTo(
                    Point { x: 29.54, y: 41.49 },
                    Point { x: 32.76, y: 40.06 },
                    Point { x: 35.38, y: 37.92 },
                ),
                PathEl::LineTo(Point { x: 39.45, y: 42.00 }),
                PathEl::LineTo(Point { x: 42.00, y: 39.46 }),
                PathEl::LineTo(Point { x: 8.55, y: 6.00 }),
                PathEl::LineTo(Point { x: 6.00, y: 8.55 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 32.53, y: 35.08 }),
                PathEl::CurveTo(
                    Point { x: 30.17, y: 36.90 },
                    Point { x: 27.22, y: 38.00 },
                    Point { x: 24.00, y: 38.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 16.27, y: 38.00 },
                    Point { x: 10.00, y: 31.73 },
                    Point { x: 10.00, y: 24.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 10.00, y: 20.78 },
                    Point { x: 11.10, y: 17.83 },
                    Point { x: 12.92, y: 15.47 },
                ),
                PathEl::LineTo(Point { x: 32.53, y: 35.08 }),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct Nfc {
    size: f64,
    color: Color,
}

impl Nfc {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for Nfc {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 40.00, y: 4.17 }),
                PathEl::LineTo(Point { x: 8.00, y: 4.17 }),
                PathEl::CurveTo(
                    Point { x: 5.79, y: 4.17 },
                    Point { x: 4.00, y: 5.96 },
                    Point { x: 4.00, y: 8.17 },
                ),
                PathEl::LineTo(Point { x: 4.00, y: 40.17 }),
                PathEl::CurveTo(
                    Point { x: 4.00, y: 42.38 },
                    Point { x: 5.79, y: 44.17 },
                    Point { x: 8.00, y: 44.17 },
                ),
                PathEl::LineTo(Point { x: 40.00, y: 44.17 }),
                PathEl::CurveTo(
                    Point { x: 42.21, y: 44.17 },
                    Point { x: 44.00, y: 42.38 },
                    Point { x: 44.00, y: 40.17 },
                ),
                PathEl::LineTo(Point { x: 44.00, y: 8.17 }),
                PathEl::CurveTo(
                    Point { x: 44.00, y: 5.96 },
                    Point { x: 42.21, y: 4.17 },
                    Point { x: 40.00, y: 4.17 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 40.00, y: 40.17 }),
                PathEl::LineTo(Point { x: 8.00, y: 40.17 }),
                PathEl::LineTo(Point { x: 8.00, y: 8.17 }),
                PathEl::LineTo(Point { x: 40.00, y: 8.17 }),
                PathEl::LineTo(Point { x: 40.00, y: 40.17 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 36.00, y: 12.17 }),
                PathEl::LineTo(Point { x: 26.00, y: 12.17 }),
                PathEl::CurveTo(
                    Point { x: 23.79, y: 12.17 },
                    Point { x: 22.00, y: 13.96 },
                    Point { x: 22.00, y: 16.17 },
                ),
                PathEl::LineTo(Point { x: 22.00, y: 20.72 }),
                PathEl::CurveTo(
                    Point { x: 20.81, y: 21.41 },
                    Point { x: 20.00, y: 22.69 },
                    Point { x: 20.00, y: 24.17 },
                ),
                PathEl::CurveTo(
                    Point { x: 20.00, y: 26.38 },
                    Point { x: 21.79, y: 28.17 },
                    Point { x: 24.00, y: 28.17 },
                ),
                PathEl::CurveTo(
                    Point { x: 26.21, y: 28.17 },
                    Point { x: 28.00, y: 26.38 },
                    Point { x: 28.00, y: 24.17 },
                ),
                PathEl::CurveTo(
                    Point { x: 28.00, y: 22.69 },
                    Point { x: 27.19, y: 21.42 },
                    Point { x: 26.00, y: 20.72 },
                ),
                PathEl::LineTo(Point { x: 26.00, y: 16.17 }),
                PathEl::LineTo(Point { x: 32.00, y: 16.17 }),
                PathEl::LineTo(Point { x: 32.00, y: 32.17 }),
                PathEl::LineTo(Point { x: 16.00, y: 32.17 }),
                PathEl::LineTo(Point { x: 16.00, y: 16.17 }),
                PathEl::LineTo(Point { x: 20.00, y: 16.17 }),
                PathEl::LineTo(Point { x: 20.00, y: 12.17 }),
                PathEl::LineTo(Point { x: 12.00, y: 12.17 }),
                PathEl::LineTo(Point { x: 12.00, y: 36.17 }),
                PathEl::LineTo(Point { x: 36.00, y: 36.17 }),
                PathEl::LineTo(Point { x: 36.00, y: 12.17 }),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct CheckBoxOutlineBlank {
    size: f64,
    color: Color,
}

impl CheckBoxOutlineBlank {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for CheckBoxOutlineBlank {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 38.00, y: 10.00 }),
                PathEl::LineTo(Point { x: 38.00, y: 38.00 }),
                PathEl::LineTo(Point { x: 10.00, y: 38.00 }),
                PathEl::LineTo(Point { x: 10.00, y: 10.00 }),
                PathEl::LineTo(Point { x: 38.00, y: 10.00 }),
                PathEl::MoveTo(Point { x: 38.00, y: 6.00 }),
                PathEl::LineTo(Point { x: 10.00, y: 6.00 }),
                PathEl::CurveTo(
                    Point { x: 7.79, y: 6.00 },
                    Point { x: 6.00, y: 7.79 },
                    Point { x: 6.00, y: 10.00 },
                ),
                PathEl::LineTo(Point { x: 6.00, y: 38.00 }),
                PathEl::CurveTo(
                    Point { x: 6.00, y: 40.21 },
                    Point { x: 7.79, y: 42.00 },
                    Point { x: 10.00, y: 42.00 },
                ),
                PathEl::LineTo(Point { x: 38.00, y: 42.00 }),
                PathEl::CurveTo(
                    Point { x: 40.21, y: 42.00 },
                    Point { x: 42.00, y: 40.21 },
                    Point { x: 42.00, y: 38.00 },
                ),
                PathEl::LineTo(Point { x: 42.00, y: 10.00 }),
                PathEl::CurveTo(
                    Point { x: 42.00, y: 7.79 },
                    Point { x: 40.21, y: 6.00 },
                    Point { x: 38.00, y: 6.00 },
                ),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct ZoomIn {
    size: f64,
    color: Color,
}

impl ZoomIn {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for ZoomIn {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 24.0, height / 24.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 15.50, y: 14.00 }),
                PathEl::LineTo(Point { x: 14.71, y: 14.00 }),
                PathEl::LineTo(Point { x: 14.43, y: 13.73 }),
                PathEl::CurveTo(
                    Point { x: 15.41, y: 12.59 },
                    Point { x: 16.00, y: 11.11 },
                    Point { x: 16.00, y: 9.50 },
                ),
                PathEl::CurveTo(
                    Point { x: 16.00, y: 5.91 },
                    Point { x: 13.09, y: 3.00 },
                    Point { x: 9.50, y: 3.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 5.91, y: 3.00 },
                    Point { x: 3.00, y: 5.91 },
                    Point { x: 3.00, y: 9.50 },
                ),
                PathEl::CurveTo(
                    Point { x: 3.00, y: 13.09 },
                    Point { x: 5.91, y: 16.00 },
                    Point { x: 9.50, y: 16.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 11.11, y: 16.00 },
                    Point { x: 12.59, y: 15.41 },
                    Point { x: 13.73, y: 14.43 },
                ),
                PathEl::LineTo(Point { x: 14.00, y: 14.71 }),
                PathEl::LineTo(Point { x: 14.00, y: 15.50 }),
                PathEl::LineTo(Point { x: 19.00, y: 20.49 }),
                PathEl::LineTo(Point { x: 20.49, y: 19.00 }),
                PathEl::LineTo(Point { x: 15.50, y: 14.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 9.50, y: 14.00 }),
                PathEl::CurveTo(
                    Point { x: 7.01, y: 14.00 },
                    Point { x: 5.00, y: 11.99 },
                    Point { x: 5.00, y: 9.50 },
                ),
                PathEl::CurveTo(
                    Point { x: 5.00, y: 7.01 },
                    Point { x: 7.01, y: 5.00 },
                    Point { x: 9.50, y: 5.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 11.99, y: 5.00 },
                    Point { x: 14.00, y: 7.01 },
                    Point { x: 14.00, y: 9.50 },
                ),
                PathEl::CurveTo(
                    Point { x: 14.00, y: 11.99 },
                    Point { x: 11.99, y: 14.00 },
                    Point { x: 9.50, y: 14.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 12.00, y: 10.00 }),
                PathEl::LineTo(Point { x: 10.00, y: 10.00 }),
                PathEl::LineTo(Point { x: 10.00, y: 12.00 }),
                PathEl::LineTo(Point { x: 9.00, y: 12.00 }),
                PathEl::LineTo(Point { x: 9.00, y: 10.00 }),
                PathEl::LineTo(Point { x: 7.00, y: 10.00 }),
                PathEl::LineTo(Point { x: 7.00, y: 9.00 }),
                PathEl::LineTo(Point { x: 9.00, y: 9.00 }),
                PathEl::LineTo(Point { x: 9.00, y: 7.00 }),
                PathEl::LineTo(Point { x: 10.00, y: 7.00 }),
                PathEl::LineTo(Point { x: 10.00, y: 9.00 }),
                PathEl::LineTo(Point { x: 12.00, y: 9.00 }),
                PathEl::LineTo(Point { x: 12.00, y: 10.00 }),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct Brightness1 {
    size: f64,
    color: Color,
}

impl Brightness1 {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for Brightness1 {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            Circle {
                center: Point { x: 24.00, y: 24.00 },
                radius: 20.00,
            },
            &brush,
        );
    }
}

pub struct LocalHotel {
    size: f64,
    color: Color,
}

impl LocalHotel {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for LocalHotel {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 14.00, y: 26.00 }),
                PathEl::CurveTo(
                    Point { x: 17.31, y: 26.00 },
                    Point { x: 20.00, y: 23.31 },
                    Point { x: 20.00, y: 20.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 20.00, y: 16.69 },
                    Point { x: 17.31, y: 14.00 },
                    Point { x: 14.00, y: 14.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 10.69, y: 14.00 },
                    Point { x: 8.00, y: 16.69 },
                    Point { x: 8.00, y: 20.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 8.00, y: 23.31 },
                    Point { x: 10.69, y: 26.00 },
                    Point { x: 14.00, y: 26.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 38.00, y: 14.00 }),
                PathEl::LineTo(Point { x: 22.00, y: 14.00 }),
                PathEl::LineTo(Point { x: 22.00, y: 28.00 }),
                PathEl::LineTo(Point { x: 6.00, y: 28.00 }),
                PathEl::LineTo(Point { x: 6.00, y: 10.00 }),
                PathEl::LineTo(Point { x: 2.00, y: 10.00 }),
                PathEl::LineTo(Point { x: 2.00, y: 40.00 }),
                PathEl::LineTo(Point { x: 6.00, y: 40.00 }),
                PathEl::LineTo(Point { x: 6.00, y: 34.00 }),
                PathEl::LineTo(Point { x: 42.00, y: 34.00 }),
                PathEl::LineTo(Point { x: 42.00, y: 40.00 }),
                PathEl::LineTo(Point { x: 46.00, y: 40.00 }),
                PathEl::LineTo(Point { x: 46.00, y: 22.00 }),
                PathEl::CurveTo(
                    Point { x: 46.00, y: 17.58 },
                    Point { x: 42.42, y: 14.00 },
                    Point { x: 38.00, y: 14.00 },
                ),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct ArtTrack {
    size: f64,
    color: Color,
}

impl ArtTrack {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for ArtTrack {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 44.00, y: 26.00 }),
                PathEl::LineTo(Point { x: 28.00, y: 26.00 }),
                PathEl::LineTo(Point { x: 28.00, y: 22.00 }),
                PathEl::LineTo(Point { x: 44.00, y: 22.00 }),
                PathEl::LineTo(Point { x: 44.00, y: 26.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 44.00, y: 14.00 }),
                PathEl::LineTo(Point { x: 28.00, y: 14.00 }),
                PathEl::LineTo(Point { x: 28.00, y: 18.00 }),
                PathEl::LineTo(Point { x: 44.00, y: 18.00 }),
                PathEl::LineTo(Point { x: 44.00, y: 14.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 28.00, y: 34.00 }),
                PathEl::LineTo(Point { x: 44.00, y: 34.00 }),
                PathEl::LineTo(Point { x: 44.00, y: 30.00 }),
                PathEl::LineTo(Point { x: 28.00, y: 30.00 }),
                PathEl::LineTo(Point { x: 28.00, y: 34.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 24.00, y: 18.00 }),
                PathEl::LineTo(Point { x: 24.00, y: 30.00 }),
                PathEl::CurveTo(
                    Point { x: 24.00, y: 32.20 },
                    Point { x: 22.20, y: 34.00 },
                    Point { x: 20.00, y: 34.00 },
                ),
                PathEl::LineTo(Point { x: 8.00, y: 34.00 }),
                PathEl::CurveTo(
                    Point { x: 5.80, y: 34.00 },
                    Point { x: 4.00, y: 32.20 },
                    Point { x: 4.00, y: 30.00 },
                ),
                PathEl::LineTo(Point { x: 4.00, y: 18.00 }),
                PathEl::CurveTo(
                    Point { x: 4.00, y: 15.80 },
                    Point { x: 5.80, y: 14.00 },
                    Point { x: 8.00, y: 14.00 },
                ),
                PathEl::LineTo(Point { x: 20.00, y: 14.00 }),
                PathEl::CurveTo(
                    Point { x: 22.20, y: 14.00 },
                    Point { x: 24.00, y: 15.80 },
                    Point { x: 24.00, y: 18.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 21.00, y: 30.00 }),
                PathEl::LineTo(Point { x: 16.50, y: 24.00 }),
                PathEl::LineTo(Point { x: 13.00, y: 28.51 }),
                PathEl::LineTo(Point { x: 10.50, y: 25.50 }),
                PathEl::LineTo(Point { x: 7.00, y: 30.00 }),
                PathEl::LineTo(Point { x: 21.00, y: 30.00 }),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct LocalConvenienceStore {
    size: f64,
    color: Color,
}

impl LocalConvenienceStore {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for LocalConvenienceStore {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 38.00, y: 14.00 }),
                PathEl::LineTo(Point { x: 38.00, y: 8.00 }),
                PathEl::LineTo(Point { x: 10.00, y: 8.00 }),
                PathEl::LineTo(Point { x: 10.00, y: 14.00 }),
                PathEl::LineTo(Point { x: 4.00, y: 14.00 }),
                PathEl::LineTo(Point { x: 4.00, y: 40.00 }),
                PathEl::LineTo(Point { x: 20.00, y: 40.00 }),
                PathEl::LineTo(Point { x: 20.00, y: 32.00 }),
                PathEl::LineTo(Point { x: 28.00, y: 32.00 }),
                PathEl::LineTo(Point { x: 28.00, y: 40.00 }),
                PathEl::LineTo(Point { x: 44.00, y: 40.00 }),
                PathEl::LineTo(Point { x: 44.00, y: 14.00 }),
                PathEl::LineTo(Point { x: 38.00, y: 14.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 22.00, y: 20.00 }),
                PathEl::LineTo(Point { x: 18.00, y: 20.00 }),
                PathEl::LineTo(Point { x: 18.00, y: 22.00 }),
                PathEl::LineTo(Point { x: 22.00, y: 22.00 }),
                PathEl::LineTo(Point { x: 22.00, y: 24.00 }),
                PathEl::LineTo(Point { x: 16.00, y: 24.00 }),
                PathEl::LineTo(Point { x: 16.00, y: 18.00 }),
                PathEl::LineTo(Point { x: 20.00, y: 18.00 }),
                PathEl::LineTo(Point { x: 20.00, y: 16.00 }),
                PathEl::LineTo(Point { x: 16.00, y: 16.00 }),
                PathEl::LineTo(Point { x: 16.00, y: 14.00 }),
                PathEl::LineTo(Point { x: 22.00, y: 14.00 }),
                PathEl::LineTo(Point { x: 22.00, y: 20.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 32.00, y: 24.00 }),
                PathEl::LineTo(Point { x: 30.00, y: 24.00 }),
                PathEl::LineTo(Point { x: 30.00, y: 20.00 }),
                PathEl::LineTo(Point { x: 26.00, y: 20.00 }),
                PathEl::LineTo(Point { x: 26.00, y: 14.00 }),
                PathEl::LineTo(Point { x: 28.00, y: 14.00 }),
                PathEl::LineTo(Point { x: 28.00, y: 18.00 }),
                PathEl::LineTo(Point { x: 30.00, y: 18.00 }),
                PathEl::LineTo(Point { x: 30.00, y: 14.00 }),
                PathEl::LineTo(Point { x: 32.00, y: 14.00 }),
                PathEl::LineTo(Point { x: 32.00, y: 24.00 }),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct EventBusy {
    size: f64,
    color: Color,
}

impl EventBusy {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for EventBusy {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 18.62, y: 34.00 }),
                PathEl::LineTo(Point { x: 23.50, y: 29.12 }),
                PathEl::LineTo(Point { x: 28.38, y: 34.00 }),
                PathEl::LineTo(Point { x: 30.50, y: 31.88 }),
                PathEl::LineTo(Point { x: 25.62, y: 27.00 }),
                PathEl::LineTo(Point { x: 30.50, y: 22.12 }),
                PathEl::LineTo(Point { x: 28.38, y: 20.00 }),
                PathEl::LineTo(Point { x: 23.50, y: 24.88 }),
                PathEl::LineTo(Point { x: 18.62, y: 20.00 }),
                PathEl::LineTo(Point { x: 16.50, y: 22.12 }),
                PathEl::LineTo(Point { x: 21.38, y: 27.00 }),
                PathEl::LineTo(Point { x: 16.50, y: 31.88 }),
                PathEl::LineTo(Point { x: 18.62, y: 34.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 38.00, y: 6.00 }),
                PathEl::LineTo(Point { x: 36.00, y: 6.00 }),
                PathEl::LineTo(Point { x: 36.00, y: 2.00 }),
                PathEl::LineTo(Point { x: 32.00, y: 2.00 }),
                PathEl::LineTo(Point { x: 32.00, y: 6.00 }),
                PathEl::LineTo(Point { x: 16.00, y: 6.00 }),
                PathEl::LineTo(Point { x: 16.00, y: 2.00 }),
                PathEl::LineTo(Point { x: 12.00, y: 2.00 }),
                PathEl::LineTo(Point { x: 12.00, y: 6.00 }),
                PathEl::LineTo(Point { x: 10.00, y: 6.00 }),
                PathEl::CurveTo(
                    Point { x: 7.79, y: 6.00 },
                    Point { x: 6.02, y: 7.79 },
                    Point { x: 6.02, y: 10.00 },
                ),
                PathEl::LineTo(Point { x: 6.00, y: 38.00 }),
                PathEl::CurveTo(
                    Point { x: 6.00, y: 40.21 },
                    Point { x: 7.79, y: 42.00 },
                    Point { x: 10.00, y: 42.00 },
                ),
                PathEl::LineTo(Point { x: 38.00, y: 42.00 }),
                PathEl::CurveTo(
                    Point { x: 40.21, y: 42.00 },
                    Point { x: 42.00, y: 40.21 },
                    Point { x: 42.00, y: 38.00 },
                ),
                PathEl::LineTo(Point { x: 42.00, y: 10.00 }),
                PathEl::CurveTo(
                    Point { x: 42.00, y: 7.79 },
                    Point { x: 40.21, y: 6.00 },
                    Point { x: 38.00, y: 6.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 38.00, y: 38.00 }),
                PathEl::LineTo(Point { x: 10.00, y: 38.00 }),
                PathEl::LineTo(Point { x: 10.00, y: 16.00 }),
                PathEl::LineTo(Point { x: 38.00, y: 16.00 }),
                PathEl::LineTo(Point { x: 38.00, y: 38.00 }),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct FormatListNumbered {
    size: f64,
    color: Color,
}

impl FormatListNumbered {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for FormatListNumbered {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 4.00, y: 34.00 }),
                PathEl::LineTo(Point { x: 8.00, y: 34.00 }),
                PathEl::LineTo(Point { x: 8.00, y: 35.00 }),
                PathEl::LineTo(Point { x: 6.00, y: 35.00 }),
                PathEl::LineTo(Point { x: 6.00, y: 37.00 }),
                PathEl::LineTo(Point { x: 8.00, y: 37.00 }),
                PathEl::LineTo(Point { x: 8.00, y: 38.00 }),
                PathEl::LineTo(Point { x: 4.00, y: 38.00 }),
                PathEl::LineTo(Point { x: 4.00, y: 40.00 }),
                PathEl::LineTo(Point { x: 10.00, y: 40.00 }),
                PathEl::LineTo(Point { x: 10.00, y: 32.00 }),
                PathEl::LineTo(Point { x: 4.00, y: 32.00 }),
                PathEl::LineTo(Point { x: 4.00, y: 34.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 6.00, y: 16.00 }),
                PathEl::LineTo(Point { x: 8.00, y: 16.00 }),
                PathEl::LineTo(Point { x: 8.00, y: 8.00 }),
                PathEl::LineTo(Point { x: 4.00, y: 8.00 }),
                PathEl::LineTo(Point { x: 4.00, y: 10.00 }),
                PathEl::LineTo(Point { x: 6.00, y: 10.00 }),
                PathEl::LineTo(Point { x: 6.00, y: 16.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 4.00, y: 22.00 }),
                PathEl::LineTo(Point { x: 7.60, y: 22.00 }),
                PathEl::LineTo(Point { x: 4.00, y: 26.20 }),
                PathEl::LineTo(Point { x: 4.00, y: 28.00 }),
                PathEl::LineTo(Point { x: 10.00, y: 28.00 }),
                PathEl::LineTo(Point { x: 10.00, y: 26.00 }),
                PathEl::LineTo(Point { x: 6.40, y: 26.00 }),
                PathEl::LineTo(Point { x: 10.00, y: 21.80 }),
                PathEl::LineTo(Point { x: 10.00, y: 20.00 }),
                PathEl::LineTo(Point { x: 4.00, y: 20.00 }),
                PathEl::LineTo(Point { x: 4.00, y: 22.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 14.00, y: 10.00 }),
                PathEl::LineTo(Point { x: 14.00, y: 14.00 }),
                PathEl::LineTo(Point { x: 42.00, y: 14.00 }),
                PathEl::LineTo(Point { x: 42.00, y: 10.00 }),
                PathEl::LineTo(Point { x: 14.00, y: 10.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 14.00, y: 38.00 }),
                PathEl::LineTo(Point { x: 42.00, y: 38.00 }),
                PathEl::LineTo(Point { x: 42.00, y: 34.00 }),
                PathEl::LineTo(Point { x: 14.00, y: 34.00 }),
                PathEl::LineTo(Point { x: 14.00, y: 38.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 14.00, y: 26.00 }),
                PathEl::LineTo(Point { x: 42.00, y: 26.00 }),
                PathEl::LineTo(Point { x: 42.00, y: 22.00 }),
                PathEl::LineTo(Point { x: 14.00, y: 22.00 }),
                PathEl::LineTo(Point { x: 14.00, y: 26.00 }),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct Headset {
    size: f64,
    color: Color,
}

impl Headset {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for Headset {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 24.00, y: 2.00 }),
                PathEl::CurveTo(
                    Point { x: 14.06, y: 2.00 },
                    Point { x: 6.00, y: 10.06 },
                    Point { x: 6.00, y: 20.00 },
                ),
                PathEl::LineTo(Point { x: 6.00, y: 34.00 }),
                PathEl::CurveTo(
                    Point { x: 6.00, y: 37.31 },
                    Point { x: 8.69, y: 40.00 },
                    Point { x: 12.00, y: 40.00 },
                ),
                PathEl::LineTo(Point { x: 18.00, y: 40.00 }),
                PathEl::LineTo(Point { x: 18.00, y: 24.00 }),
                PathEl::LineTo(Point { x: 10.00, y: 24.00 }),
                PathEl::LineTo(Point { x: 10.00, y: 20.00 }),
                PathEl::CurveTo(
                    Point { x: 10.00, y: 12.27 },
                    Point { x: 16.27, y: 6.00 },
                    Point { x: 24.00, y: 6.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 31.73, y: 6.00 },
                    Point { x: 38.00, y: 12.27 },
                    Point { x: 38.00, y: 20.00 },
                ),
                PathEl::LineTo(Point { x: 38.00, y: 24.00 }),
                PathEl::LineTo(Point { x: 30.00, y: 24.00 }),
                PathEl::LineTo(Point { x: 30.00, y: 40.00 }),
                PathEl::LineTo(Point { x: 36.00, y: 40.00 }),
                PathEl::CurveTo(
                    Point { x: 39.31, y: 40.00 },
                    Point { x: 42.00, y: 37.31 },
                    Point { x: 42.00, y: 34.00 },
                ),
                PathEl::LineTo(Point { x: 42.00, y: 20.00 }),
                PathEl::CurveTo(
                    Point { x: 42.00, y: 10.06 },
                    Point { x: 33.94, y: 2.00 },
                    Point { x: 24.00, y: 2.00 },
                ),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct KeyboardBackspace {
    size: f64,
    color: Color,
}

impl KeyboardBackspace {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for KeyboardBackspace {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 42.00, y: 22.00 }),
                PathEl::LineTo(Point { x: 13.66, y: 22.00 }),
                PathEl::LineTo(Point { x: 20.83, y: 14.83 }),
                PathEl::LineTo(Point { x: 18.00, y: 12.00 }),
                PathEl::LineTo(Point { x: 6.00, y: 24.00 }),
                PathEl::LineTo(Point { x: 18.00, y: 36.00 }),
                PathEl::LineTo(Point { x: 20.83, y: 33.17 }),
                PathEl::LineTo(Point { x: 13.66, y: 26.00 }),
                PathEl::LineTo(Point { x: 42.00, y: 26.00 }),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct Language {
    size: f64,
    color: Color,
}

impl Language {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for Language {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 23.99, y: 4.00 }),
                PathEl::CurveTo(
                    Point { x: 12.94, y: 4.00 },
                    Point { x: 4.00, y: 12.95 },
                    Point { x: 4.00, y: 24.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 4.00, y: 35.05 },
                    Point { x: 12.94, y: 44.00 },
                    Point { x: 23.99, y: 44.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 35.04, y: 44.00 },
                    Point { x: 44.00, y: 35.05 },
                    Point { x: 44.00, y: 24.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 44.00, y: 12.95 },
                    Point { x: 35.04, y: 4.00 },
                    Point { x: 23.99, y: 4.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 37.84, y: 16.00 }),
                PathEl::LineTo(Point { x: 31.94, y: 16.00 }),
                PathEl::CurveTo(
                    Point { x: 31.29, y: 13.50 },
                    Point { x: 30.38, y: 11.10 },
                    Point { x: 29.18, y: 8.88 },
                ),
                PathEl::CurveTo(
                    Point { x: 32.86, y: 10.14 },
                    Point { x: 35.92, y: 12.69 },
                    Point { x: 37.84, y: 16.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 24.00, y: 8.07 }),
                PathEl::CurveTo(
                    Point { x: 25.67, y: 10.47 },
                    Point { x: 26.97, y: 13.14 },
                    Point { x: 27.82, y: 16.00 },
                ),
                PathEl::LineTo(Point { x: 20.18, y: 16.00 }),
                PathEl::CurveTo(
                    Point { x: 21.03, y: 13.14 },
                    Point { x: 22.33, y: 10.47 },
                    Point { x: 24.00, y: 8.07 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 8.52, y: 28.00 }),
                PathEl::CurveTo(
                    Point { x: 8.19, y: 26.72 },
                    Point { x: 8.00, y: 25.38 },
                    Point { x: 8.00, y: 24.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 8.00, y: 22.62 },
                    Point { x: 8.19, y: 21.28 },
                    Point { x: 8.52, y: 20.00 },
                ),
                PathEl::LineTo(Point { x: 15.27, y: 20.00 }),
                PathEl::CurveTo(
                    Point { x: 15.11, y: 21.31 },
                    Point { x: 15.00, y: 22.64 },
                    Point { x: 15.00, y: 24.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 15.00, y: 25.36 },
                    Point { x: 15.11, y: 26.69 },
                    Point { x: 15.28, y: 28.00 },
                ),
                PathEl::LineTo(Point { x: 8.52, y: 28.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 10.15, y: 32.00 }),
                PathEl::LineTo(Point { x: 16.05, y: 32.00 }),
                PathEl::CurveTo(
                    Point { x: 16.70, y: 34.50 },
                    Point { x: 17.61, y: 36.90 },
                    Point { x: 18.81, y: 39.13 },
                ),
                PathEl::CurveTo(
                    Point { x: 15.13, y: 37.87 },
                    Point { x: 12.07, y: 35.31 },
                    Point { x: 10.15, y: 32.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 16.05, y: 16.00 }),
                PathEl::LineTo(Point { x: 10.15, y: 16.00 }),
                PathEl::CurveTo(
                    Point { x: 12.07, y: 12.69 },
                    Point { x: 15.13, y: 10.13 },
                    Point { x: 18.81, y: 8.87 },
                ),
                PathEl::CurveTo(
                    Point { x: 17.61, y: 11.10 },
                    Point { x: 16.70, y: 13.50 },
                    Point { x: 16.05, y: 16.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 24.00, y: 39.93 }),
                PathEl::CurveTo(
                    Point { x: 22.34, y: 37.53 },
                    Point { x: 21.04, y: 34.86 },
                    Point { x: 20.18, y: 32.00 },
                ),
                PathEl::LineTo(Point { x: 27.82, y: 32.00 }),
                PathEl::CurveTo(
                    Point { x: 26.96, y: 34.86 },
                    Point { x: 25.66, y: 37.53 },
                    Point { x: 24.00, y: 39.93 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 28.68, y: 28.00 }),
                PathEl::LineTo(Point { x: 19.32, y: 28.00 }),
                PathEl::CurveTo(
                    Point { x: 19.13, y: 26.69 },
                    Point { x: 19.00, y: 25.36 },
                    Point { x: 19.00, y: 24.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 19.00, y: 22.64 },
                    Point { x: 19.13, y: 21.31 },
                    Point { x: 19.32, y: 20.00 },
                ),
                PathEl::LineTo(Point { x: 28.68, y: 20.00 }),
                PathEl::CurveTo(
                    Point { x: 28.87, y: 21.31 },
                    Point { x: 29.00, y: 22.64 },
                    Point { x: 29.00, y: 24.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 29.00, y: 25.36 },
                    Point { x: 28.87, y: 26.69 },
                    Point { x: 28.68, y: 28.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 29.19, y: 39.12 }),
                PathEl::CurveTo(
                    Point { x: 30.39, y: 36.89 },
                    Point { x: 31.30, y: 34.50 },
                    Point { x: 31.95, y: 32.00 },
                ),
                PathEl::LineTo(Point { x: 37.85, y: 32.00 }),
                PathEl::CurveTo(
                    Point { x: 35.92, y: 35.31 },
                    Point { x: 32.86, y: 37.86 },
                    Point { x: 29.19, y: 39.12 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 32.72, y: 28.00 }),
                PathEl::CurveTo(
                    Point { x: 32.88, y: 26.69 },
                    Point { x: 33.00, y: 25.36 },
                    Point { x: 33.00, y: 24.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 33.00, y: 22.64 },
                    Point { x: 32.89, y: 21.31 },
                    Point { x: 32.72, y: 20.00 },
                ),
                PathEl::LineTo(Point { x: 39.47, y: 20.00 }),
                PathEl::CurveTo(
                    Point { x: 39.80, y: 21.28 },
                    Point { x: 40.00, y: 22.62 },
                    Point { x: 40.00, y: 24.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 40.00, y: 25.38 },
                    Point { x: 39.81, y: 26.72 },
                    Point { x: 39.47, y: 28.00 },
                ),
                PathEl::LineTo(Point { x: 32.72, y: 28.00 }),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct PlayArrow {
    size: f64,
    color: Color,
}

impl PlayArrow {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for PlayArrow {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 16.00, y: 10.00 }),
                PathEl::LineTo(Point { x: 16.00, y: 38.00 }),
                PathEl::LineTo(Point { x: 38.00, y: 24.00 }),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct PhonelinkErase {
    size: f64,
    color: Color,
}

impl PhonelinkErase {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for PhonelinkErase {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 24.0, height / 24.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 13.00, y: 8.20 }),
                PathEl::LineTo(Point { x: 12.00, y: 7.20 }),
                PathEl::LineTo(Point { x: 8.00, y: 11.20 }),
                PathEl::LineTo(Point { x: 4.00, y: 7.20 }),
                PathEl::LineTo(Point { x: 3.00, y: 8.20 }),
                PathEl::LineTo(Point { x: 7.00, y: 12.20 }),
                PathEl::LineTo(Point { x: 3.00, y: 16.20 }),
                PathEl::LineTo(Point { x: 4.00, y: 17.20 }),
                PathEl::LineTo(Point { x: 8.00, y: 13.20 }),
                PathEl::LineTo(Point { x: 12.00, y: 17.20 }),
                PathEl::LineTo(Point { x: 13.00, y: 16.20 }),
                PathEl::LineTo(Point { x: 9.00, y: 12.20 }),
                PathEl::LineTo(Point { x: 13.00, y: 8.20 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 19.00, y: 1.00 }),
                PathEl::LineTo(Point { x: 9.00, y: 1.00 }),
                PathEl::CurveTo(
                    Point { x: 7.90, y: 1.00 },
                    Point { x: 7.00, y: 1.90 },
                    Point { x: 7.00, y: 3.00 },
                ),
                PathEl::LineTo(Point { x: 7.00, y: 6.00 }),
                PathEl::LineTo(Point { x: 9.00, y: 6.00 }),
                PathEl::LineTo(Point { x: 9.00, y: 4.00 }),
                PathEl::LineTo(Point { x: 19.00, y: 4.00 }),
                PathEl::LineTo(Point { x: 19.00, y: 20.00 }),
                PathEl::LineTo(Point { x: 9.00, y: 20.00 }),
                PathEl::LineTo(Point { x: 9.00, y: 18.00 }),
                PathEl::LineTo(Point { x: 7.00, y: 18.00 }),
                PathEl::LineTo(Point { x: 7.00, y: 21.00 }),
                PathEl::CurveTo(
                    Point { x: 7.00, y: 22.10 },
                    Point { x: 7.90, y: 23.00 },
                    Point { x: 9.00, y: 23.00 },
                ),
                PathEl::LineTo(Point { x: 19.00, y: 23.00 }),
                PathEl::CurveTo(
                    Point { x: 20.10, y: 23.00 },
                    Point { x: 21.00, y: 22.10 },
                    Point { x: 21.00, y: 21.00 },
                ),
                PathEl::LineTo(Point { x: 21.00, y: 3.00 }),
                PathEl::CurveTo(
                    Point { x: 21.00, y: 1.90 },
                    Point { x: 20.10, y: 1.00 },
                    Point { x: 19.00, y: 1.00 },
                ),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct TimerOff {
    size: f64,
    color: Color,
}

impl TimerOff {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for TimerOff {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 38.07, y: 9.10 }),
                PathEl::LineTo(Point { x: 35.22, y: 11.95 }),
                PathEl::CurveTo(
                    Point { x: 32.15, y: 9.48 },
                    Point { x: 28.24, y: 8.00 },
                    Point { x: 23.99, y: 8.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 20.33, y: 8.00 },
                    Point { x: 16.94, y: 9.10 },
                    Point { x: 14.10, y: 10.97 },
                ),
                PathEl::LineTo(Point { x: 17.01, y: 13.88 }),
                PathEl::CurveTo(
                    Point { x: 19.07, y: 12.69 },
                    Point { x: 21.45, y: 12.00 },
                    Point { x: 24.00, y: 12.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 31.73, y: 12.00 },
                    Point { x: 38.00, y: 18.27 },
                    Point { x: 38.00, y: 26.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 38.00, y: 28.55 },
                    Point { x: 37.31, y: 30.93 },
                    Point { x: 36.12, y: 32.99 },
                ),
                PathEl::LineTo(Point { x: 39.03, y: 35.90 }),
                PathEl::CurveTo(
                    Point { x: 40.90, y: 33.06 },
                    Point { x: 42.00, y: 29.66 },
                    Point { x: 42.00, y: 26.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 42.00, y: 21.75 },
                    Point { x: 40.52, y: 17.85 },
                    Point { x: 38.05, y: 14.77 },
                ),
                PathEl::LineTo(Point { x: 40.90, y: 11.92 }),
                PathEl::LineTo(Point { x: 38.07, y: 9.10 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 30.00, y: 2.00 }),
                PathEl::LineTo(Point { x: 18.00, y: 2.00 }),
                PathEl::LineTo(Point { x: 18.00, y: 6.00 }),
                PathEl::LineTo(Point { x: 30.00, y: 6.00 }),
                PathEl::LineTo(Point { x: 30.00, y: 2.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 22.00, y: 18.87 }),
                PathEl::LineTo(Point { x: 26.00, y: 22.87 }),
                PathEl::LineTo(Point { x: 26.00, y: 16.00 }),
                PathEl::LineTo(Point { x: 22.00, y: 16.00 }),
                PathEl::LineTo(Point { x: 22.00, y: 18.87 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 6.04, y: 8.00 }),
                PathEl::LineTo(Point { x: 3.49, y: 10.54 }),
                PathEl::LineTo(Point { x: 9.00, y: 16.05 }),
                PathEl::CurveTo(
                    Point { x: 7.11, y: 18.90 },
                    Point { x: 6.00, y: 22.32 },
                    Point { x: 6.00, y: 26.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 6.00, y: 35.94 },
                    Point { x: 14.04, y: 44.00 },
                    Point { x: 23.99, y: 44.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 27.67, y: 44.00 },
                    Point { x: 31.09, y: 42.89 },
                    Point { x: 33.94, y: 41.00 },
                ),
                PathEl::LineTo(Point { x: 38.94, y: 46.00 }),
                PathEl::LineTo(Point { x: 41.48, y: 43.45 }),
                PathEl::LineTo(Point { x: 26.08, y: 28.04 }),
                PathEl::LineTo(Point { x: 6.04, y: 8.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 24.00, y: 40.00 }),
                PathEl::CurveTo(
                    Point { x: 16.27, y: 40.00 },
                    Point { x: 10.00, y: 33.73 },
                    Point { x: 10.00, y: 26.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 10.00, y: 23.43 },
                    Point { x: 10.70, y: 21.03 },
                    Point { x: 11.91, y: 18.96 },
                ),
                PathEl::LineTo(Point { x: 31.04, y: 38.09 }),
                PathEl::CurveTo(
                    Point { x: 28.97, y: 39.30 },
                    Point { x: 26.57, y: 40.00 },
                    Point { x: 24.00, y: 40.00 },
                ),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct LocalAtm {
    size: f64,
    color: Color,
}

impl LocalAtm {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for LocalAtm {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 22.00, y: 34.00 }),
                PathEl::LineTo(Point { x: 26.00, y: 34.00 }),
                PathEl::LineTo(Point { x: 26.00, y: 32.00 }),
                PathEl::LineTo(Point { x: 28.00, y: 32.00 }),
                PathEl::CurveTo(
                    Point { x: 29.10, y: 32.00 },
                    Point { x: 30.00, y: 31.10 },
                    Point { x: 30.00, y: 30.00 },
                ),
                PathEl::LineTo(Point { x: 30.00, y: 24.00 }),
                PathEl::CurveTo(
                    Point { x: 30.00, y: 22.90 },
                    Point { x: 29.10, y: 22.00 },
                    Point { x: 28.00, y: 22.00 },
                ),
                PathEl::LineTo(Point { x: 22.00, y: 22.00 }),
                PathEl::LineTo(Point { x: 22.00, y: 20.00 }),
                PathEl::LineTo(Point { x: 30.00, y: 20.00 }),
                PathEl::LineTo(Point { x: 30.00, y: 16.00 }),
                PathEl::LineTo(Point { x: 26.00, y: 16.00 }),
                PathEl::LineTo(Point { x: 26.00, y: 14.00 }),
                PathEl::LineTo(Point { x: 22.00, y: 14.00 }),
                PathEl::LineTo(Point { x: 22.00, y: 16.00 }),
                PathEl::LineTo(Point { x: 20.00, y: 16.00 }),
                PathEl::CurveTo(
                    Point { x: 18.90, y: 16.00 },
                    Point { x: 18.00, y: 16.90 },
                    Point { x: 18.00, y: 18.00 },
                ),
                PathEl::LineTo(Point { x: 18.00, y: 24.00 }),
                PathEl::CurveTo(
                    Point { x: 18.00, y: 25.10 },
                    Point { x: 18.90, y: 26.00 },
                    Point { x: 20.00, y: 26.00 },
                ),
                PathEl::LineTo(Point { x: 26.00, y: 26.00 }),
                PathEl::LineTo(Point { x: 26.00, y: 28.00 }),
                PathEl::LineTo(Point { x: 18.00, y: 28.00 }),
                PathEl::LineTo(Point { x: 18.00, y: 32.00 }),
                PathEl::LineTo(Point { x: 22.00, y: 32.00 }),
                PathEl::LineTo(Point { x: 22.00, y: 34.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 40.00, y: 8.00 }),
                PathEl::LineTo(Point { x: 8.00, y: 8.00 }),
                PathEl::CurveTo(
                    Point { x: 5.79, y: 8.00 },
                    Point { x: 4.02, y: 9.79 },
                    Point { x: 4.02, y: 12.00 },
                ),
                PathEl::LineTo(Point { x: 4.00, y: 36.00 }),
                PathEl::CurveTo(
                    Point { x: 4.00, y: 38.21 },
                    Point { x: 5.79, y: 40.00 },
                    Point { x: 8.00, y: 40.00 },
                ),
                PathEl::LineTo(Point { x: 40.00, y: 40.00 }),
                PathEl::CurveTo(
                    Point { x: 42.21, y: 40.00 },
                    Point { x: 44.00, y: 38.21 },
                    Point { x: 44.00, y: 36.00 },
                ),
                PathEl::LineTo(Point { x: 44.00, y: 12.00 }),
                PathEl::CurveTo(
                    Point { x: 44.00, y: 9.79 },
                    Point { x: 42.21, y: 8.00 },
                    Point { x: 40.00, y: 8.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 40.00, y: 36.00 }),
                PathEl::LineTo(Point { x: 8.00, y: 36.00 }),
                PathEl::LineTo(Point { x: 8.00, y: 12.00 }),
                PathEl::LineTo(Point { x: 40.00, y: 12.00 }),
                PathEl::LineTo(Point { x: 40.00, y: 36.00 }),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct FilterTiltShift {
    size: f64,
    color: Color,
}

impl FilterTiltShift {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for FilterTiltShift {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 22.00, y: 8.14 }),
                PathEl::LineTo(Point { x: 22.00, y: 4.10 }),
                PathEl::CurveTo(
                    Point { x: 17.98, y: 4.50 },
                    Point { x: 14.32, y: 6.10 },
                    Point { x: 11.35, y: 8.52 },
                ),
                PathEl::LineTo(Point { x: 14.20, y: 11.37 }),
                PathEl::CurveTo(
                    Point { x: 16.42, y: 9.66 },
                    Point { x: 19.08, y: 8.50 },
                    Point { x: 22.00, y: 8.14 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 36.65, y: 8.52 }),
                PathEl::CurveTo(
                    Point { x: 33.69, y: 6.10 },
                    Point { x: 30.02, y: 4.50 },
                    Point { x: 26.00, y: 4.10 },
                ),
                PathEl::LineTo(Point { x: 26.00, y: 8.14 }),
                PathEl::CurveTo(
                    Point { x: 28.92, y: 8.51 },
                    Point { x: 31.58, y: 9.66 },
                    Point { x: 33.80, y: 11.38 },
                ),
                PathEl::LineTo(Point { x: 36.65, y: 8.52 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 39.86, y: 22.00 }),
                PathEl::LineTo(Point { x: 43.90, y: 22.00 }),
                PathEl::CurveTo(
                    Point { x: 43.50, y: 17.98 },
                    Point { x: 41.90, y: 14.32 },
                    Point { x: 39.48, y: 11.35 },
                ),
                PathEl::LineTo(Point { x: 36.63, y: 14.20 }),
                PathEl::CurveTo(
                    Point { x: 38.34, y: 16.42 },
                    Point { x: 39.50, y: 19.08 },
                    Point { x: 39.86, y: 22.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 11.38, y: 14.20 }),
                PathEl::LineTo(Point { x: 8.53, y: 11.35 }),
                PathEl::CurveTo(
                    Point { x: 6.10, y: 14.32 },
                    Point { x: 4.50, y: 17.98 },
                    Point { x: 4.10, y: 22.00 },
                ),
                PathEl::LineTo(Point { x: 8.14, y: 22.00 }),
                PathEl::CurveTo(
                    Point { x: 8.51, y: 19.08 },
                    Point { x: 9.66, y: 16.42 },
                    Point { x: 11.38, y: 14.20 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 8.14, y: 26.00 }),
                PathEl::LineTo(Point { x: 4.10, y: 26.00 }),
                PathEl::CurveTo(
                    Point { x: 4.50, y: 30.02 },
                    Point { x: 6.10, y: 33.68 },
                    Point { x: 8.52, y: 36.65 },
                ),
                PathEl::LineTo(Point { x: 11.37, y: 33.80 }),
                PathEl::CurveTo(
                    Point { x: 9.66, y: 31.58 },
                    Point { x: 8.51, y: 28.91 },
                    Point { x: 8.14, y: 26.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 30.00, y: 24.00 }),
                PathEl::CurveTo(
                    Point { x: 30.00, y: 20.69 },
                    Point { x: 27.31, y: 18.00 },
                    Point { x: 24.00, y: 18.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 20.69, y: 18.00 },
                    Point { x: 18.00, y: 20.69 },
                    Point { x: 18.00, y: 24.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 18.00, y: 27.31 },
                    Point { x: 20.69, y: 30.00 },
                    Point { x: 24.00, y: 30.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 27.31, y: 30.00 },
                    Point { x: 30.00, y: 27.31 },
                    Point { x: 30.00, y: 24.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 36.62, y: 33.79 }),
                PathEl::LineTo(Point { x: 39.47, y: 36.64 }),
                PathEl::CurveTo(
                    Point { x: 41.90, y: 33.68 },
                    Point { x: 43.50, y: 30.02 },
                    Point { x: 43.90, y: 26.00 },
                ),
                PathEl::LineTo(Point { x: 39.86, y: 26.00 }),
                PathEl::CurveTo(
                    Point { x: 39.50, y: 28.91 },
                    Point { x: 38.34, y: 31.58 },
                    Point { x: 36.62, y: 33.79 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 26.00, y: 39.86 }),
                PathEl::LineTo(Point { x: 26.00, y: 43.90 }),
                PathEl::CurveTo(
                    Point { x: 30.02, y: 43.50 },
                    Point { x: 33.68, y: 41.90 },
                    Point { x: 36.65, y: 39.48 },
                ),
                PathEl::LineTo(Point { x: 33.80, y: 36.63 }),
                PathEl::CurveTo(
                    Point { x: 31.58, y: 38.34 },
                    Point { x: 28.92, y: 39.49 },
                    Point { x: 26.00, y: 39.86 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 11.35, y: 39.48 }),
                PathEl::CurveTo(
                    Point { x: 14.32, y: 41.90 },
                    Point { x: 17.98, y: 43.50 },
                    Point { x: 22.00, y: 43.90 },
                ),
                PathEl::LineTo(Point { x: 22.00, y: 39.86 }),
                PathEl::CurveTo(
                    Point { x: 19.08, y: 39.49 },
                    Point { x: 16.42, y: 38.34 },
                    Point { x: 14.20, y: 36.62 },
                ),
                PathEl::LineTo(Point { x: 11.35, y: 39.48 }),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct Publish {
    size: f64,
    color: Color,
}

impl Publish {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for Publish {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 10.00, y: 8.00 }),
                PathEl::LineTo(Point { x: 10.00, y: 12.00 }),
                PathEl::LineTo(Point { x: 38.00, y: 12.00 }),
                PathEl::LineTo(Point { x: 38.00, y: 8.00 }),
                PathEl::LineTo(Point { x: 10.00, y: 8.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 10.00, y: 28.00 }),
                PathEl::LineTo(Point { x: 18.00, y: 28.00 }),
                PathEl::LineTo(Point { x: 18.00, y: 40.00 }),
                PathEl::LineTo(Point { x: 30.00, y: 40.00 }),
                PathEl::LineTo(Point { x: 30.00, y: 28.00 }),
                PathEl::LineTo(Point { x: 38.00, y: 28.00 }),
                PathEl::LineTo(Point { x: 24.00, y: 14.00 }),
                PathEl::LineTo(Point { x: 10.00, y: 28.00 }),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct LinkedCamera {
    size: f64,
    color: Color,
}

impl LinkedCamera {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for LinkedCamera {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            Circle {
                center: Point { x: 24.00, y: 28.00 },
                radius: 6.40,
            },
            &brush,
        );
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 32.00, y: 6.66 }),
                PathEl::CurveTo(
                    Point { x: 37.16, y: 6.66 },
                    Point { x: 41.34, y: 10.84 },
                    Point { x: 41.34, y: 16.00 },
                ),
                PathEl::LineTo(Point { x: 44.00, y: 16.00 }),
                PathEl::CurveTo(
                    Point { x: 44.00, y: 9.38 },
                    Point { x: 38.62, y: 4.00 },
                    Point { x: 32.00, y: 4.00 },
                ),
                PathEl::LineTo(Point { x: 32.00, y: 6.66 }),
                PathEl::MoveTo(Point { x: 32.00, y: 12.00 }),
                PathEl::CurveTo(
                    Point { x: 34.22, y: 12.00 },
                    Point { x: 36.00, y: 13.78 },
                    Point { x: 36.00, y: 16.00 },
                ),
                PathEl::LineTo(Point { x: 38.66, y: 16.00 }),
                PathEl::CurveTo(
                    Point { x: 38.66, y: 12.32 },
                    Point { x: 35.68, y: 9.34 },
                    Point { x: 32.00, y: 9.34 },
                ),
                PathEl::LineTo(Point { x: 32.00, y: 12.00 }),
            ][..],
            &brush,
        );
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 34.00, y: 18.00 }),
                PathEl::CurveTo(
                    Point { x: 34.00, y: 15.78 },
                    Point { x: 32.22, y: 14.00 },
                    Point { x: 30.00, y: 14.00 },
                ),
                PathEl::LineTo(Point { x: 30.00, y: 8.00 }),
                PathEl::LineTo(Point { x: 18.00, y: 8.00 }),
                PathEl::LineTo(Point { x: 14.34, y: 12.00 }),
                PathEl::LineTo(Point { x: 8.00, y: 12.00 }),
                PathEl::CurveTo(
                    Point { x: 5.80, y: 12.00 },
                    Point { x: 4.00, y: 13.80 },
                    Point { x: 4.00, y: 16.00 },
                ),
                PathEl::LineTo(Point { x: 4.00, y: 40.00 }),
                PathEl::CurveTo(
                    Point { x: 4.00, y: 42.20 },
                    Point { x: 5.80, y: 44.00 },
                    Point { x: 8.00, y: 44.00 },
                ),
                PathEl::LineTo(Point { x: 40.00, y: 44.00 }),
                PathEl::CurveTo(
                    Point { x: 42.20, y: 44.00 },
                    Point { x: 44.00, y: 42.20 },
                    Point { x: 44.00, y: 40.00 },
                ),
                PathEl::LineTo(Point { x: 44.00, y: 18.00 }),
                PathEl::LineTo(Point { x: 34.00, y: 18.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 24.00, y: 38.00 }),
                PathEl::CurveTo(
                    Point { x: 18.48, y: 38.00 },
                    Point { x: 14.00, y: 33.52 },
                    Point { x: 14.00, y: 28.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 14.00, y: 22.48 },
                    Point { x: 18.48, y: 18.00 },
                    Point { x: 24.00, y: 18.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 29.52, y: 18.00 },
                    Point { x: 34.00, y: 22.48 },
                    Point { x: 34.00, y: 28.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 34.00, y: 33.52 },
                    Point { x: 29.52, y: 38.00 },
                    Point { x: 24.00, y: 38.00 },
                ),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct Search {
    size: f64,
    color: Color,
}

impl Search {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for Search {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 31.00, y: 28.00 }),
                PathEl::LineTo(Point { x: 29.41, y: 28.00 }),
                PathEl::LineTo(Point { x: 28.86, y: 27.45 }),
                PathEl::CurveTo(
                    Point { x: 30.82, y: 25.18 },
                    Point { x: 32.00, y: 22.23 },
                    Point { x: 32.00, y: 19.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 32.00, y: 11.82 },
                    Point { x: 26.18, y: 6.00 },
                    Point { x: 19.00, y: 6.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 11.82, y: 6.00 },
                    Point { x: 6.00, y: 11.82 },
                    Point { x: 6.00, y: 19.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 6.00, y: 26.18 },
                    Point { x: 11.82, y: 32.00 },
                    Point { x: 19.00, y: 32.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 22.23, y: 32.00 },
                    Point { x: 25.18, y: 30.82 },
                    Point { x: 27.45, y: 28.87 },
                ),
                PathEl::LineTo(Point { x: 28.00, y: 29.42 }),
                PathEl::LineTo(Point { x: 28.00, y: 31.00 }),
                PathEl::LineTo(Point { x: 38.00, y: 40.98 }),
                PathEl::LineTo(Point { x: 40.98, y: 38.00 }),
                PathEl::LineTo(Point { x: 31.00, y: 28.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 19.00, y: 28.00 }),
                PathEl::CurveTo(
                    Point { x: 14.03, y: 28.00 },
                    Point { x: 10.00, y: 23.97 },
                    Point { x: 10.00, y: 19.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 10.00, y: 14.03 },
                    Point { x: 14.03, y: 10.00 },
                    Point { x: 19.00, y: 10.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 23.97, y: 10.00 },
                    Point { x: 28.00, y: 14.03 },
                    Point { x: 28.00, y: 19.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 28.00, y: 23.97 },
                    Point { x: 23.97, y: 28.00 },
                    Point { x: 19.00, y: 28.00 },
                ),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct AddToPhotos {
    size: f64,
    color: Color,
}

impl AddToPhotos {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for AddToPhotos {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 8.00, y: 12.00 }),
                PathEl::LineTo(Point { x: 4.00, y: 12.00 }),
                PathEl::LineTo(Point { x: 4.00, y: 40.00 }),
                PathEl::CurveTo(
                    Point { x: 4.00, y: 42.21 },
                    Point { x: 5.79, y: 44.00 },
                    Point { x: 8.00, y: 44.00 },
                ),
                PathEl::LineTo(Point { x: 36.00, y: 44.00 }),
                PathEl::LineTo(Point { x: 36.00, y: 40.00 }),
                PathEl::LineTo(Point { x: 8.00, y: 40.00 }),
                PathEl::LineTo(Point { x: 8.00, y: 12.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 40.00, y: 4.00 }),
                PathEl::LineTo(Point { x: 16.00, y: 4.00 }),
                PathEl::CurveTo(
                    Point { x: 13.79, y: 4.00 },
                    Point { x: 12.00, y: 5.79 },
                    Point { x: 12.00, y: 8.00 },
                ),
                PathEl::LineTo(Point { x: 12.00, y: 32.00 }),
                PathEl::CurveTo(
                    Point { x: 12.00, y: 34.21 },
                    Point { x: 13.79, y: 36.00 },
                    Point { x: 16.00, y: 36.00 },
                ),
                PathEl::LineTo(Point { x: 40.00, y: 36.00 }),
                PathEl::CurveTo(
                    Point { x: 42.21, y: 36.00 },
                    Point { x: 44.00, y: 34.21 },
                    Point { x: 44.00, y: 32.00 },
                ),
                PathEl::LineTo(Point { x: 44.00, y: 8.00 }),
                PathEl::CurveTo(
                    Point { x: 44.00, y: 5.79 },
                    Point { x: 42.21, y: 4.00 },
                    Point { x: 40.00, y: 4.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 38.00, y: 22.00 }),
                PathEl::LineTo(Point { x: 30.00, y: 22.00 }),
                PathEl::LineTo(Point { x: 30.00, y: 30.00 }),
                PathEl::LineTo(Point { x: 26.00, y: 30.00 }),
                PathEl::LineTo(Point { x: 26.00, y: 22.00 }),
                PathEl::LineTo(Point { x: 18.00, y: 22.00 }),
                PathEl::LineTo(Point { x: 18.00, y: 18.00 }),
                PathEl::LineTo(Point { x: 26.00, y: 18.00 }),
                PathEl::LineTo(Point { x: 26.00, y: 10.00 }),
                PathEl::LineTo(Point { x: 30.00, y: 10.00 }),
                PathEl::LineTo(Point { x: 30.00, y: 18.00 }),
                PathEl::LineTo(Point { x: 38.00, y: 18.00 }),
                PathEl::LineTo(Point { x: 38.00, y: 22.00 }),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct AddShoppingCart {
    size: f64,
    color: Color,
}

impl AddShoppingCart {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for AddShoppingCart {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 22.00, y: 18.00 }),
                PathEl::LineTo(Point { x: 26.00, y: 18.00 }),
                PathEl::LineTo(Point { x: 26.00, y: 12.00 }),
                PathEl::LineTo(Point { x: 32.00, y: 12.00 }),
                PathEl::LineTo(Point { x: 32.00, y: 8.00 }),
                PathEl::LineTo(Point { x: 26.00, y: 8.00 }),
                PathEl::LineTo(Point { x: 26.00, y: 2.00 }),
                PathEl::LineTo(Point { x: 22.00, y: 2.00 }),
                PathEl::LineTo(Point { x: 22.00, y: 8.00 }),
                PathEl::LineTo(Point { x: 16.00, y: 8.00 }),
                PathEl::LineTo(Point { x: 16.00, y: 12.00 }),
                PathEl::LineTo(Point { x: 22.00, y: 12.00 }),
                PathEl::LineTo(Point { x: 22.00, y: 18.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 14.00, y: 36.00 }),
                PathEl::CurveTo(
                    Point { x: 11.79, y: 36.00 },
                    Point { x: 10.02, y: 37.79 },
                    Point { x: 10.02, y: 40.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 10.02, y: 42.21 },
                    Point { x: 11.79, y: 44.00 },
                    Point { x: 14.00, y: 44.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 16.21, y: 44.00 },
                    Point { x: 18.00, y: 42.21 },
                    Point { x: 18.00, y: 40.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 18.00, y: 37.79 },
                    Point { x: 16.21, y: 36.00 },
                    Point { x: 14.00, y: 36.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 34.00, y: 36.00 }),
                PathEl::CurveTo(
                    Point { x: 31.79, y: 36.00 },
                    Point { x: 30.02, y: 37.79 },
                    Point { x: 30.02, y: 40.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 30.02, y: 42.21 },
                    Point { x: 31.79, y: 44.00 },
                    Point { x: 34.00, y: 44.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 36.21, y: 44.00 },
                    Point { x: 38.00, y: 42.21 },
                    Point { x: 38.00, y: 40.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 38.00, y: 37.79 },
                    Point { x: 36.21, y: 36.00 },
                    Point { x: 34.00, y: 36.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 14.35, y: 29.50 }),
                PathEl::CurveTo(
                    Point { x: 14.35, y: 29.41 },
                    Point { x: 14.37, y: 29.33 },
                    Point { x: 14.41, y: 29.26 },
                ),
                PathEl::LineTo(Point { x: 16.21, y: 26.00 }),
                PathEl::LineTo(Point { x: 31.11, y: 26.00 }),
                PathEl::CurveTo(
                    Point { x: 32.61, y: 26.00 },
                    Point { x: 33.92, y: 25.17 },
                    Point { x: 34.61, y: 23.94 },
                ),
                PathEl::LineTo(Point { x: 42.33, y: 9.92 }),
                PathEl::LineTo(Point { x: 38.83, y: 8.00 }),
                PathEl::LineTo(Point { x: 38.82, y: 8.00 }),
                PathEl::LineTo(Point { x: 36.61, y: 12.00 }),
                PathEl::LineTo(Point { x: 31.10, y: 22.00 }),
                PathEl::LineTo(Point { x: 17.07, y: 22.00 }),
                PathEl::LineTo(Point { x: 16.81, y: 21.46 }),
                PathEl::LineTo(Point { x: 12.32, y: 12.00 }),
                PathEl::LineTo(Point { x: 10.42, y: 8.00 }),
                PathEl::LineTo(Point { x: 8.53, y: 4.00 }),
                PathEl::LineTo(Point { x: 2.00, y: 4.00 }),
                PathEl::LineTo(Point { x: 2.00, y: 8.00 }),
                PathEl::LineTo(Point { x: 6.00, y: 8.00 }),
                PathEl::LineTo(Point { x: 13.20, y: 23.17 }),
                PathEl::LineTo(Point { x: 10.49, y: 28.07 }),
                PathEl::CurveTo(
                    Point { x: 10.18, y: 28.65 },
                    Point { x: 10.00, y: 29.30 },
                    Point { x: 10.00, y: 30.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 10.00, y: 32.21 },
                    Point { x: 11.79, y: 34.00 },
                    Point { x: 14.00, y: 34.00 },
                ),
                PathEl::LineTo(Point { x: 38.00, y: 34.00 }),
                PathEl::LineTo(Point { x: 38.00, y: 30.00 }),
                PathEl::LineTo(Point { x: 14.85, y: 30.00 }),
                PathEl::CurveTo(
                    Point { x: 14.57, y: 30.00 },
                    Point { x: 14.35, y: 29.78 },
                    Point { x: 14.35, y: 29.50 },
                ),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct SettingsOverscan {
    size: f64,
    color: Color,
}

impl SettingsOverscan {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for SettingsOverscan {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 24.01, y: 11.00 }),
                PathEl::LineTo(Point { x: 20.00, y: 16.00 }),
                PathEl::LineTo(Point { x: 28.00, y: 16.00 }),
                PathEl::LineTo(Point { x: 24.01, y: 11.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 36.00, y: 20.00 }),
                PathEl::LineTo(Point { x: 36.00, y: 28.00 }),
                PathEl::LineTo(Point { x: 41.00, y: 24.01 }),
                PathEl::LineTo(Point { x: 36.00, y: 20.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 12.00, y: 20.00 }),
                PathEl::LineTo(Point { x: 7.00, y: 24.01 }),
                PathEl::LineTo(Point { x: 12.00, y: 28.00 }),
                PathEl::LineTo(Point { x: 12.00, y: 20.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 28.00, y: 32.00 }),
                PathEl::LineTo(Point { x: 20.00, y: 32.00 }),
                PathEl::LineTo(Point { x: 24.01, y: 37.00 }),
                PathEl::LineTo(Point { x: 28.00, y: 32.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 42.00, y: 6.00 }),
                PathEl::LineTo(Point { x: 6.00, y: 6.00 }),
                PathEl::CurveTo(
                    Point { x: 3.79, y: 6.00 },
                    Point { x: 2.00, y: 7.79 },
                    Point { x: 2.00, y: 10.00 },
                ),
                PathEl::LineTo(Point { x: 2.00, y: 38.00 }),
                PathEl::CurveTo(
                    Point { x: 2.00, y: 40.21 },
                    Point { x: 3.79, y: 42.00 },
                    Point { x: 6.00, y: 42.00 },
                ),
                PathEl::LineTo(Point { x: 42.00, y: 42.00 }),
                PathEl::CurveTo(
                    Point { x: 44.21, y: 42.00 },
                    Point { x: 46.00, y: 40.21 },
                    Point { x: 46.00, y: 38.00 },
                ),
                PathEl::LineTo(Point { x: 46.00, y: 10.00 }),
                PathEl::CurveTo(
                    Point { x: 46.00, y: 7.79 },
                    Point { x: 44.21, y: 6.00 },
                    Point { x: 42.00, y: 6.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 42.00, y: 38.03 }),
                PathEl::LineTo(Point { x: 6.00, y: 38.03 }),
                PathEl::LineTo(Point { x: 6.00, y: 9.97 }),
                PathEl::LineTo(Point { x: 42.00, y: 9.97 }),
                PathEl::LineTo(Point { x: 42.00, y: 38.03 }),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct PersonPinCircle {
    size: f64,
    color: Color,
}

impl PersonPinCircle {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for PersonPinCircle {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 24.00, y: 4.00 }),
                PathEl::CurveTo(
                    Point { x: 16.27, y: 4.00 },
                    Point { x: 10.00, y: 10.27 },
                    Point { x: 10.00, y: 18.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 10.00, y: 28.50 },
                    Point { x: 24.00, y: 44.00 },
                    Point { x: 24.00, y: 44.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 24.00, y: 44.00 },
                    Point { x: 38.00, y: 28.50 },
                    Point { x: 38.00, y: 18.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 38.00, y: 10.27 },
                    Point { x: 31.73, y: 4.00 },
                    Point { x: 24.00, y: 4.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 24.00, y: 8.00 }),
                PathEl::CurveTo(
                    Point { x: 26.21, y: 8.00 },
                    Point { x: 28.00, y: 9.79 },
                    Point { x: 28.00, y: 12.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 28.00, y: 14.21 },
                    Point { x: 26.21, y: 16.00 },
                    Point { x: 24.00, y: 16.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 21.79, y: 16.00 },
                    Point { x: 20.00, y: 14.21 },
                    Point { x: 20.00, y: 12.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 20.00, y: 9.79 },
                    Point { x: 21.79, y: 8.00 },
                    Point { x: 24.00, y: 8.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 24.00, y: 28.00 }),
                PathEl::CurveTo(
                    Point { x: 20.66, y: 28.00 },
                    Point { x: 17.73, y: 26.29 },
                    Point { x: 16.00, y: 23.71 },
                ),
                PathEl::CurveTo(
                    Point { x: 16.03, y: 21.06 },
                    Point { x: 21.34, y: 19.60 },
                    Point { x: 24.00, y: 19.60 },
                ),
                PathEl::CurveTo(
                    Point { x: 26.66, y: 19.60 },
                    Point { x: 31.96, y: 21.06 },
                    Point { x: 32.00, y: 23.71 },
                ),
                PathEl::CurveTo(
                    Point { x: 30.27, y: 26.29 },
                    Point { x: 27.34, y: 28.00 },
                    Point { x: 24.00, y: 28.00 },
                ),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct LabelOutline {
    size: f64,
    color: Color,
}

impl LabelOutline {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for LabelOutline {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 35.27, y: 11.69 }),
                PathEl::CurveTo(
                    Point { x: 34.54, y: 10.67 },
                    Point { x: 33.35, y: 10.00 },
                    Point { x: 32.00, y: 10.00 },
                ),
                PathEl::LineTo(Point { x: 10.00, y: 10.02 }),
                PathEl::CurveTo(
                    Point { x: 7.79, y: 10.02 },
                    Point { x: 6.00, y: 11.79 },
                    Point { x: 6.00, y: 14.00 },
                ),
                PathEl::LineTo(Point { x: 6.00, y: 34.00 }),
                PathEl::CurveTo(
                    Point { x: 6.00, y: 36.21 },
                    Point { x: 7.79, y: 37.98 },
                    Point { x: 10.00, y: 37.98 },
                ),
                PathEl::LineTo(Point { x: 32.00, y: 38.00 }),
                PathEl::CurveTo(
                    Point { x: 33.35, y: 38.00 },
                    Point { x: 34.54, y: 37.33 },
                    Point { x: 35.27, y: 36.31 },
                ),
                PathEl::LineTo(Point { x: 44.00, y: 24.00 }),
                PathEl::LineTo(Point { x: 35.27, y: 11.69 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 32.00, y: 34.00 }),
                PathEl::LineTo(Point { x: 10.00, y: 34.00 }),
                PathEl::LineTo(Point { x: 10.00, y: 14.00 }),
                PathEl::LineTo(Point { x: 32.00, y: 14.00 }),
                PathEl::LineTo(Point { x: 39.09, y: 24.00 }),
                PathEl::LineTo(Point { x: 32.00, y: 34.00 }),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct PhonelinkLock {
    size: f64,
    color: Color,
}

impl PhonelinkLock {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for PhonelinkLock {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 24.0, height / 24.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 19.00, y: 1.00 }),
                PathEl::LineTo(Point { x: 9.00, y: 1.00 }),
                PathEl::CurveTo(
                    Point { x: 7.90, y: 1.00 },
                    Point { x: 7.00, y: 1.90 },
                    Point { x: 7.00, y: 3.00 },
                ),
                PathEl::LineTo(Point { x: 7.00, y: 6.00 }),
                PathEl::LineTo(Point { x: 9.00, y: 6.00 }),
                PathEl::LineTo(Point { x: 9.00, y: 4.00 }),
                PathEl::LineTo(Point { x: 19.00, y: 4.00 }),
                PathEl::LineTo(Point { x: 19.00, y: 20.00 }),
                PathEl::LineTo(Point { x: 9.00, y: 20.00 }),
                PathEl::LineTo(Point { x: 9.00, y: 18.00 }),
                PathEl::LineTo(Point { x: 7.00, y: 18.00 }),
                PathEl::LineTo(Point { x: 7.00, y: 21.00 }),
                PathEl::CurveTo(
                    Point { x: 7.00, y: 22.10 },
                    Point { x: 7.90, y: 23.00 },
                    Point { x: 9.00, y: 23.00 },
                ),
                PathEl::LineTo(Point { x: 19.00, y: 23.00 }),
                PathEl::CurveTo(
                    Point { x: 20.10, y: 23.00 },
                    Point { x: 21.00, y: 22.10 },
                    Point { x: 21.00, y: 21.00 },
                ),
                PathEl::LineTo(Point { x: 21.00, y: 3.00 }),
                PathEl::CurveTo(
                    Point { x: 21.00, y: 1.90 },
                    Point { x: 20.10, y: 1.00 },
                    Point { x: 19.00, y: 1.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 10.80, y: 11.00 }),
                PathEl::LineTo(Point { x: 10.80, y: 9.50 }),
                PathEl::CurveTo(
                    Point { x: 10.80, y: 8.10 },
                    Point { x: 9.40, y: 7.00 },
                    Point { x: 8.00, y: 7.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 6.60, y: 7.00 },
                    Point { x: 5.20, y: 8.10 },
                    Point { x: 5.20, y: 9.50 },
                ),
                PathEl::LineTo(Point { x: 5.20, y: 11.00 }),
                PathEl::CurveTo(
                    Point { x: 4.60, y: 11.00 },
                    Point { x: 4.00, y: 11.60 },
                    Point { x: 4.00, y: 12.20 },
                ),
                PathEl::LineTo(Point { x: 4.00, y: 15.70 }),
                PathEl::CurveTo(
                    Point { x: 4.00, y: 16.40 },
                    Point { x: 4.60, y: 17.00 },
                    Point { x: 5.20, y: 17.00 },
                ),
                PathEl::LineTo(Point { x: 10.70, y: 17.00 }),
                PathEl::CurveTo(
                    Point { x: 11.40, y: 17.00 },
                    Point { x: 12.00, y: 16.40 },
                    Point { x: 12.00, y: 15.80 },
                ),
                PathEl::LineTo(Point { x: 12.00, y: 12.30 }),
                PathEl::CurveTo(
                    Point { x: 12.00, y: 11.60 },
                    Point { x: 11.40, y: 11.00 },
                    Point { x: 10.80, y: 11.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 9.50, y: 11.00 }),
                PathEl::LineTo(Point { x: 6.50, y: 11.00 }),
                PathEl::LineTo(Point { x: 6.50, y: 9.50 }),
                PathEl::CurveTo(
                    Point { x: 6.50, y: 8.70 },
                    Point { x: 7.20, y: 8.20 },
                    Point { x: 8.00, y: 8.20 },
                ),
                PathEl::CurveTo(
                    Point { x: 8.80, y: 8.20 },
                    Point { x: 9.50, y: 8.70 },
                    Point { x: 9.50, y: 9.50 },
                ),
                PathEl::LineTo(Point { x: 9.50, y: 11.00 }),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct SwapVerticalCircle {
    size: f64,
    color: Color,
}

impl SwapVerticalCircle {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for SwapVerticalCircle {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 24.00, y: 4.00 }),
                PathEl::CurveTo(
                    Point { x: 12.95, y: 4.00 },
                    Point { x: 4.00, y: 12.95 },
                    Point { x: 4.00, y: 24.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 4.00, y: 35.05 },
                    Point { x: 12.95, y: 44.00 },
                    Point { x: 24.00, y: 44.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 35.05, y: 44.00 },
                    Point { x: 44.00, y: 35.05 },
                    Point { x: 44.00, y: 24.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 44.00, y: 12.95 },
                    Point { x: 35.05, y: 4.00 },
                    Point { x: 24.00, y: 4.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 13.00, y: 18.00 }),
                PathEl::LineTo(Point { x: 20.00, y: 11.00 }),
                PathEl::LineTo(Point { x: 27.00, y: 18.00 }),
                PathEl::LineTo(Point { x: 22.00, y: 18.00 }),
                PathEl::LineTo(Point { x: 22.00, y: 26.00 }),
                PathEl::LineTo(Point { x: 18.00, y: 26.00 }),
                PathEl::LineTo(Point { x: 18.00, y: 18.00 }),
                PathEl::LineTo(Point { x: 13.00, y: 18.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 35.00, y: 30.00 }),
                PathEl::LineTo(Point { x: 28.00, y: 37.00 }),
                PathEl::LineTo(Point { x: 21.00, y: 30.00 }),
                PathEl::LineTo(Point { x: 26.00, y: 30.00 }),
                PathEl::LineTo(Point { x: 26.00, y: 22.00 }),
                PathEl::LineTo(Point { x: 30.00, y: 22.00 }),
                PathEl::LineTo(Point { x: 30.00, y: 30.00 }),
                PathEl::LineTo(Point { x: 35.00, y: 30.00 }),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct AddLocation {
    size: f64,
    color: Color,
}

impl AddLocation {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for AddLocation {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 24.00, y: 4.00 }),
                PathEl::CurveTo(
                    Point { x: 16.28, y: 4.00 },
                    Point { x: 10.00, y: 10.28 },
                    Point { x: 10.00, y: 18.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 10.00, y: 28.50 },
                    Point { x: 24.00, y: 44.00 },
                    Point { x: 24.00, y: 44.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 24.00, y: 44.00 },
                    Point { x: 38.00, y: 28.50 },
                    Point { x: 38.00, y: 18.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 38.00, y: 10.28 },
                    Point { x: 31.72, y: 4.00 },
                    Point { x: 24.00, y: 4.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 32.00, y: 20.00 }),
                PathEl::LineTo(Point { x: 26.00, y: 20.00 }),
                PathEl::LineTo(Point { x: 26.00, y: 26.00 }),
                PathEl::LineTo(Point { x: 22.00, y: 26.00 }),
                PathEl::LineTo(Point { x: 22.00, y: 20.00 }),
                PathEl::LineTo(Point { x: 16.00, y: 20.00 }),
                PathEl::LineTo(Point { x: 16.00, y: 16.00 }),
                PathEl::LineTo(Point { x: 22.00, y: 16.00 }),
                PathEl::LineTo(Point { x: 22.00, y: 10.00 }),
                PathEl::LineTo(Point { x: 26.00, y: 10.00 }),
                PathEl::LineTo(Point { x: 26.00, y: 16.00 }),
                PathEl::LineTo(Point { x: 32.00, y: 16.00 }),
                PathEl::LineTo(Point { x: 32.00, y: 20.00 }),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct Brightness7 {
    size: f64,
    color: Color,
}

impl Brightness7 {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for Brightness7 {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 40.00, y: 17.37 }),
                PathEl::LineTo(Point { x: 40.00, y: 8.00 }),
                PathEl::LineTo(Point { x: 30.63, y: 8.00 }),
                PathEl::LineTo(Point { x: 24.00, y: 1.37 }),
                PathEl::LineTo(Point { x: 17.37, y: 8.00 }),
                PathEl::LineTo(Point { x: 8.00, y: 8.00 }),
                PathEl::LineTo(Point { x: 8.00, y: 17.37 }),
                PathEl::LineTo(Point { x: 1.37, y: 24.00 }),
                PathEl::LineTo(Point { x: 8.00, y: 30.63 }),
                PathEl::LineTo(Point { x: 8.00, y: 40.00 }),
                PathEl::LineTo(Point { x: 17.37, y: 40.00 }),
                PathEl::LineTo(Point { x: 24.00, y: 46.63 }),
                PathEl::LineTo(Point { x: 30.63, y: 40.00 }),
                PathEl::LineTo(Point { x: 40.00, y: 40.00 }),
                PathEl::LineTo(Point { x: 40.00, y: 30.63 }),
                PathEl::LineTo(Point { x: 46.63, y: 24.00 }),
                PathEl::LineTo(Point { x: 40.00, y: 17.37 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 24.00, y: 36.00 }),
                PathEl::CurveTo(
                    Point { x: 17.37, y: 36.00 },
                    Point { x: 12.00, y: 30.63 },
                    Point { x: 12.00, y: 24.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 12.00, y: 17.37 },
                    Point { x: 17.37, y: 12.00 },
                    Point { x: 24.00, y: 12.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 30.63, y: 12.00 },
                    Point { x: 36.00, y: 17.37 },
                    Point { x: 36.00, y: 24.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 36.00, y: 30.63 },
                    Point { x: 30.63, y: 36.00 },
                    Point { x: 24.00, y: 36.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 24.00, y: 16.00 }),
                PathEl::CurveTo(
                    Point { x: 19.58, y: 16.00 },
                    Point { x: 16.00, y: 19.58 },
                    Point { x: 16.00, y: 24.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 16.00, y: 28.42 },
                    Point { x: 19.58, y: 32.00 },
                    Point { x: 24.00, y: 32.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 28.42, y: 32.00 },
                    Point { x: 32.00, y: 28.42 },
                    Point { x: 32.00, y: 24.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 32.00, y: 19.58 },
                    Point { x: 28.42, y: 16.00 },
                    Point { x: 24.00, y: 16.00 },
                ),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct NoteAdd {
    size: f64,
    color: Color,
}

impl NoteAdd {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for NoteAdd {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 28.00, y: 4.00 }),
                PathEl::LineTo(Point { x: 12.00, y: 4.00 }),
                PathEl::CurveTo(
                    Point { x: 9.79, y: 4.00 },
                    Point { x: 8.02, y: 5.79 },
                    Point { x: 8.02, y: 8.00 },
                ),
                PathEl::LineTo(Point { x: 8.00, y: 40.00 }),
                PathEl::CurveTo(
                    Point { x: 8.00, y: 42.21 },
                    Point { x: 9.77, y: 44.00 },
                    Point { x: 11.98, y: 44.00 },
                ),
                PathEl::LineTo(Point { x: 36.00, y: 44.00 }),
                PathEl::CurveTo(
                    Point { x: 38.21, y: 44.00 },
                    Point { x: 40.00, y: 42.21 },
                    Point { x: 40.00, y: 40.00 },
                ),
                PathEl::LineTo(Point { x: 40.00, y: 16.00 }),
                PathEl::LineTo(Point { x: 28.00, y: 4.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 32.00, y: 32.00 }),
                PathEl::LineTo(Point { x: 26.00, y: 32.00 }),
                PathEl::LineTo(Point { x: 26.00, y: 38.00 }),
                PathEl::LineTo(Point { x: 22.00, y: 38.00 }),
                PathEl::LineTo(Point { x: 22.00, y: 32.00 }),
                PathEl::LineTo(Point { x: 16.00, y: 32.00 }),
                PathEl::LineTo(Point { x: 16.00, y: 28.00 }),
                PathEl::LineTo(Point { x: 22.00, y: 28.00 }),
                PathEl::LineTo(Point { x: 22.00, y: 22.00 }),
                PathEl::LineTo(Point { x: 26.00, y: 22.00 }),
                PathEl::LineTo(Point { x: 26.00, y: 28.00 }),
                PathEl::LineTo(Point { x: 32.00, y: 28.00 }),
                PathEl::LineTo(Point { x: 32.00, y: 32.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 26.00, y: 18.00 }),
                PathEl::LineTo(Point { x: 26.00, y: 7.00 }),
                PathEl::LineTo(Point { x: 37.00, y: 18.00 }),
                PathEl::LineTo(Point { x: 26.00, y: 18.00 }),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct FormatItalic {
    size: f64,
    color: Color,
}

impl FormatItalic {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for FormatItalic {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 20.00, y: 8.00 }),
                PathEl::LineTo(Point { x: 20.00, y: 14.00 }),
                PathEl::LineTo(Point { x: 24.43, y: 14.00 }),
                PathEl::LineTo(Point { x: 17.57, y: 30.00 }),
                PathEl::LineTo(Point { x: 12.00, y: 30.00 }),
                PathEl::LineTo(Point { x: 12.00, y: 36.00 }),
                PathEl::LineTo(Point { x: 28.00, y: 36.00 }),
                PathEl::LineTo(Point { x: 28.00, y: 30.00 }),
                PathEl::LineTo(Point { x: 23.57, y: 30.00 }),
                PathEl::LineTo(Point { x: 30.43, y: 14.00 }),
                PathEl::LineTo(Point { x: 36.00, y: 14.00 }),
                PathEl::LineTo(Point { x: 36.00, y: 8.00 }),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct AlarmOn {
    size: f64,
    color: Color,
}

impl AlarmOn {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for AlarmOn {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 44.00, y: 11.44 }),
                PathEl::LineTo(Point { x: 34.81, y: 3.73 }),
                PathEl::LineTo(Point { x: 32.24, y: 6.79 }),
                PathEl::LineTo(Point { x: 41.43, y: 14.50 }),
                PathEl::LineTo(Point { x: 44.00, y: 11.44 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 15.76, y: 6.78 }),
                PathEl::LineTo(Point { x: 13.19, y: 3.72 }),
                PathEl::LineTo(Point { x: 4.00, y: 11.43 }),
                PathEl::LineTo(Point { x: 6.57, y: 14.49 }),
                PathEl::LineTo(Point { x: 15.76, y: 6.78 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 23.99, y: 8.00 }),
                PathEl::CurveTo(
                    Point { x: 14.04, y: 8.00 },
                    Point { x: 6.00, y: 16.06 },
                    Point { x: 6.00, y: 26.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 6.00, y: 35.94 },
                    Point { x: 14.04, y: 44.00 },
                    Point { x: 23.99, y: 44.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 33.94, y: 44.00 },
                    Point { x: 42.00, y: 35.94 },
                    Point { x: 42.00, y: 26.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 42.00, y: 16.06 },
                    Point { x: 33.94, y: 8.00 },
                    Point { x: 23.99, y: 8.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 24.00, y: 40.00 }),
                PathEl::CurveTo(
                    Point { x: 16.27, y: 40.00 },
                    Point { x: 10.00, y: 33.73 },
                    Point { x: 10.00, y: 26.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 10.00, y: 18.27 },
                    Point { x: 16.27, y: 12.00 },
                    Point { x: 24.00, y: 12.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 31.73, y: 12.00 },
                    Point { x: 38.00, y: 18.27 },
                    Point { x: 38.00, y: 26.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 38.00, y: 33.73 },
                    Point { x: 31.74, y: 40.00 },
                    Point { x: 24.00, y: 40.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 21.07, y: 29.05 }),
                PathEl::LineTo(Point { x: 16.83, y: 24.81 }),
                PathEl::LineTo(Point { x: 14.71, y: 26.93 }),
                PathEl::LineTo(Point { x: 21.07, y: 33.29 }),
                PathEl::LineTo(Point { x: 33.08, y: 21.28 }),
                PathEl::LineTo(Point { x: 30.96, y: 19.16 }),
                PathEl::LineTo(Point { x: 21.07, y: 29.05 }),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct Forward {
    size: f64,
    color: Color,
}

impl Forward {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for Forward {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 24.00, y: 16.00 }),
                PathEl::LineTo(Point { x: 24.00, y: 8.00 }),
                PathEl::LineTo(Point { x: 40.00, y: 24.00 }),
                PathEl::LineTo(Point { x: 24.00, y: 40.00 }),
                PathEl::LineTo(Point { x: 24.00, y: 32.00 }),
                PathEl::LineTo(Point { x: 8.00, y: 32.00 }),
                PathEl::LineTo(Point { x: 8.00, y: 16.00 }),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct ScreenLockPortrait {
    size: f64,
    color: Color,
}

impl ScreenLockPortrait {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for ScreenLockPortrait {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 20.00, y: 32.00 }),
                PathEl::LineTo(Point { x: 28.00, y: 32.00 }),
                PathEl::CurveTo(
                    Point { x: 29.11, y: 32.00 },
                    Point { x: 30.00, y: 31.10 },
                    Point { x: 30.00, y: 30.00 },
                ),
                PathEl::LineTo(Point { x: 30.00, y: 24.00 }),
                PathEl::CurveTo(
                    Point { x: 30.00, y: 22.90 },
                    Point { x: 29.11, y: 22.00 },
                    Point { x: 28.00, y: 22.00 },
                ),
                PathEl::LineTo(Point { x: 28.00, y: 20.00 }),
                PathEl::CurveTo(
                    Point { x: 28.00, y: 17.79 },
                    Point { x: 26.21, y: 16.00 },
                    Point { x: 24.00, y: 16.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 21.79, y: 16.00 },
                    Point { x: 20.00, y: 17.79 },
                    Point { x: 20.00, y: 20.00 },
                ),
                PathEl::LineTo(Point { x: 20.00, y: 22.00 }),
                PathEl::CurveTo(
                    Point { x: 18.89, y: 22.00 },
                    Point { x: 18.00, y: 22.90 },
                    Point { x: 18.00, y: 24.00 },
                ),
                PathEl::LineTo(Point { x: 18.00, y: 30.00 }),
                PathEl::CurveTo(
                    Point { x: 18.00, y: 31.10 },
                    Point { x: 18.89, y: 32.00 },
                    Point { x: 20.00, y: 32.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 21.60, y: 20.00 }),
                PathEl::CurveTo(
                    Point { x: 21.60, y: 18.67 },
                    Point { x: 22.67, y: 17.60 },
                    Point { x: 24.00, y: 17.60 },
                ),
                PathEl::CurveTo(
                    Point { x: 25.33, y: 17.60 },
                    Point { x: 26.40, y: 18.68 },
                    Point { x: 26.40, y: 20.00 },
                ),
                PathEl::LineTo(Point { x: 26.40, y: 22.00 }),
                PathEl::LineTo(Point { x: 21.60, y: 22.00 }),
                PathEl::LineTo(Point { x: 21.60, y: 20.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 34.00, y: 2.00 }),
                PathEl::LineTo(Point { x: 14.00, y: 2.00 }),
                PathEl::CurveTo(
                    Point { x: 11.79, y: 2.00 },
                    Point { x: 10.00, y: 3.79 },
                    Point { x: 10.00, y: 6.00 },
                ),
                PathEl::LineTo(Point { x: 10.00, y: 42.00 }),
                PathEl::CurveTo(
                    Point { x: 10.00, y: 44.21 },
                    Point { x: 11.79, y: 46.00 },
                    Point { x: 14.00, y: 46.00 },
                ),
                PathEl::LineTo(Point { x: 34.00, y: 46.00 }),
                PathEl::CurveTo(
                    Point { x: 36.21, y: 46.00 },
                    Point { x: 38.00, y: 44.21 },
                    Point { x: 38.00, y: 42.00 },
                ),
                PathEl::LineTo(Point { x: 38.00, y: 6.00 }),
                PathEl::CurveTo(
                    Point { x: 38.00, y: 3.79 },
                    Point { x: 36.21, y: 2.00 },
                    Point { x: 34.00, y: 2.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 34.00, y: 38.00 }),
                PathEl::LineTo(Point { x: 14.00, y: 38.00 }),
                PathEl::LineTo(Point { x: 14.00, y: 10.00 }),
                PathEl::LineTo(Point { x: 34.00, y: 10.00 }),
                PathEl::LineTo(Point { x: 34.00, y: 38.00 }),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct Message {
    size: f64,
    color: Color,
}

impl Message {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for Message {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 40.00, y: 4.00 }),
                PathEl::LineTo(Point { x: 8.00, y: 4.00 }),
                PathEl::CurveTo(
                    Point { x: 5.79, y: 4.00 },
                    Point { x: 4.02, y: 5.79 },
                    Point { x: 4.02, y: 8.00 },
                ),
                PathEl::LineTo(Point { x: 4.00, y: 44.00 }),
                PathEl::LineTo(Point { x: 12.00, y: 36.00 }),
                PathEl::LineTo(Point { x: 40.00, y: 36.00 }),
                PathEl::CurveTo(
                    Point { x: 42.21, y: 36.00 },
                    Point { x: 44.00, y: 34.21 },
                    Point { x: 44.00, y: 32.00 },
                ),
                PathEl::LineTo(Point { x: 44.00, y: 8.00 }),
                PathEl::CurveTo(
                    Point { x: 44.00, y: 5.79 },
                    Point { x: 42.21, y: 4.00 },
                    Point { x: 40.00, y: 4.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 36.00, y: 28.00 }),
                PathEl::LineTo(Point { x: 12.00, y: 28.00 }),
                PathEl::LineTo(Point { x: 12.00, y: 24.00 }),
                PathEl::LineTo(Point { x: 36.00, y: 24.00 }),
                PathEl::LineTo(Point { x: 36.00, y: 28.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 36.00, y: 22.00 }),
                PathEl::LineTo(Point { x: 12.00, y: 22.00 }),
                PathEl::LineTo(Point { x: 12.00, y: 18.00 }),
                PathEl::LineTo(Point { x: 36.00, y: 18.00 }),
                PathEl::LineTo(Point { x: 36.00, y: 22.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 36.00, y: 16.00 }),
                PathEl::LineTo(Point { x: 12.00, y: 16.00 }),
                PathEl::LineTo(Point { x: 12.00, y: 12.00 }),
                PathEl::LineTo(Point { x: 36.00, y: 12.00 }),
                PathEl::LineTo(Point { x: 36.00, y: 16.00 }),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct AddAPhoto {
    size: f64,
    color: Color,
}

impl AddAPhoto {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for AddAPhoto {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 6.00, y: 8.00 }),
                PathEl::LineTo(Point { x: 6.00, y: 2.00 }),
                PathEl::LineTo(Point { x: 10.00, y: 2.00 }),
                PathEl::LineTo(Point { x: 10.00, y: 8.00 }),
                PathEl::LineTo(Point { x: 16.00, y: 8.00 }),
                PathEl::LineTo(Point { x: 16.00, y: 12.00 }),
                PathEl::LineTo(Point { x: 10.00, y: 12.00 }),
                PathEl::LineTo(Point { x: 10.00, y: 18.00 }),
                PathEl::LineTo(Point { x: 6.00, y: 18.00 }),
                PathEl::LineTo(Point { x: 6.00, y: 12.00 }),
                PathEl::LineTo(Point { x: 0.00, y: 12.00 }),
                PathEl::LineTo(Point { x: 0.00, y: 8.00 }),
                PathEl::LineTo(Point { x: 6.00, y: 8.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 12.00, y: 20.00 }),
                PathEl::LineTo(Point { x: 12.00, y: 14.00 }),
                PathEl::LineTo(Point { x: 18.00, y: 14.00 }),
                PathEl::LineTo(Point { x: 18.00, y: 8.00 }),
                PathEl::LineTo(Point { x: 32.00, y: 8.00 }),
                PathEl::LineTo(Point { x: 35.66, y: 12.00 }),
                PathEl::LineTo(Point { x: 42.00, y: 12.00 }),
                PathEl::CurveTo(
                    Point { x: 44.20, y: 12.00 },
                    Point { x: 46.00, y: 13.80 },
                    Point { x: 46.00, y: 16.00 },
                ),
                PathEl::LineTo(Point { x: 46.00, y: 40.00 }),
                PathEl::CurveTo(
                    Point { x: 46.00, y: 42.20 },
                    Point { x: 44.20, y: 44.00 },
                    Point { x: 42.00, y: 44.00 },
                ),
                PathEl::LineTo(Point { x: 10.00, y: 44.00 }),
                PathEl::CurveTo(
                    Point { x: 7.80, y: 44.00 },
                    Point { x: 6.00, y: 42.20 },
                    Point { x: 6.00, y: 40.00 },
                ),
                PathEl::LineTo(Point { x: 6.00, y: 20.00 }),
                PathEl::LineTo(Point { x: 12.00, y: 20.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 26.00, y: 38.00 }),
                PathEl::CurveTo(
                    Point { x: 31.52, y: 38.00 },
                    Point { x: 36.00, y: 33.52 },
                    Point { x: 36.00, y: 28.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 36.00, y: 22.48 },
                    Point { x: 31.52, y: 18.00 },
                    Point { x: 26.00, y: 18.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 20.48, y: 18.00 },
                    Point { x: 16.00, y: 22.48 },
                    Point { x: 16.00, y: 28.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 16.00, y: 33.52 },
                    Point { x: 20.48, y: 38.00 },
                    Point { x: 26.00, y: 38.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 19.60, y: 28.00 }),
                PathEl::CurveTo(
                    Point { x: 19.60, y: 31.54 },
                    Point { x: 22.46, y: 34.40 },
                    Point { x: 26.00, y: 34.40 },
                ),
                PathEl::CurveTo(
                    Point { x: 29.54, y: 34.40 },
                    Point { x: 32.40, y: 31.54 },
                    Point { x: 32.40, y: 28.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 32.40, y: 24.46 },
                    Point { x: 29.54, y: 21.60 },
                    Point { x: 26.00, y: 21.60 },
                ),
                PathEl::CurveTo(
                    Point { x: 22.46, y: 21.60 },
                    Point { x: 19.60, y: 24.46 },
                    Point { x: 19.60, y: 28.00 },
                ),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct Directions {
    size: f64,
    color: Color,
}

impl Directions {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for Directions {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 43.41, y: 22.59 }),
                PathEl::LineTo(Point { x: 25.41, y: 4.59 }),
                PathEl::CurveTo(
                    Point { x: 24.63, y: 3.81 },
                    Point { x: 23.36, y: 3.81 },
                    Point { x: 22.59, y: 4.59 },
                ),
                PathEl::LineTo(Point { x: 4.59, y: 22.59 }),
                PathEl::CurveTo(
                    Point { x: 3.81, y: 23.37 },
                    Point { x: 3.81, y: 24.64 },
                    Point { x: 4.59, y: 25.42 },
                ),
                PathEl::LineTo(Point { x: 22.59, y: 43.41 }),
                PathEl::LineTo(Point { x: 22.59, y: 43.42 }),
                PathEl::CurveTo(
                    Point { x: 23.37, y: 44.20 },
                    Point { x: 24.64, y: 44.20 },
                    Point { x: 25.42, y: 43.42 },
                ),
                PathEl::LineTo(Point { x: 43.42, y: 25.42 }),
                PathEl::CurveTo(
                    Point { x: 44.20, y: 24.63 },
                    Point { x: 44.20, y: 23.37 },
                    Point { x: 43.41, y: 22.59 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 28.00, y: 29.00 }),
                PathEl::LineTo(Point { x: 28.00, y: 24.00 }),
                PathEl::LineTo(Point { x: 20.00, y: 24.00 }),
                PathEl::LineTo(Point { x: 20.00, y: 30.00 }),
                PathEl::LineTo(Point { x: 16.00, y: 30.00 }),
                PathEl::LineTo(Point { x: 16.00, y: 22.00 }),
                PathEl::CurveTo(
                    Point { x: 16.00, y: 20.89 },
                    Point { x: 16.89, y: 20.00 },
                    Point { x: 18.00, y: 20.00 },
                ),
                PathEl::LineTo(Point { x: 28.00, y: 20.00 }),
                PathEl::LineTo(Point { x: 28.00, y: 15.00 }),
                PathEl::LineTo(Point { x: 35.00, y: 22.00 }),
                PathEl::LineTo(Point { x: 28.00, y: 29.00 }),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct CallMissedOutgoing {
    size: f64,
    color: Color,
}

impl CallMissedOutgoing {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for CallMissedOutgoing {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 6.00, y: 16.82 }),
                PathEl::LineTo(Point { x: 24.00, y: 34.82 }),
                PathEl::LineTo(Point { x: 38.00, y: 20.82 }),
                PathEl::LineTo(Point { x: 38.00, y: 30.00 }),
                PathEl::LineTo(Point { x: 42.00, y: 30.00 }),
                PathEl::LineTo(Point { x: 42.00, y: 14.00 }),
                PathEl::LineTo(Point { x: 26.00, y: 14.00 }),
                PathEl::LineTo(Point { x: 26.00, y: 18.00 }),
                PathEl::LineTo(Point { x: 35.18, y: 18.00 }),
                PathEl::LineTo(Point { x: 24.00, y: 29.18 }),
                PathEl::LineTo(Point { x: 8.82, y: 14.00 }),
                PathEl::LineTo(Point { x: 6.00, y: 16.82 }),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct Stars {
    size: f64,
    color: Color,
}

impl Stars {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for Stars {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 23.99, y: 4.00 }),
                PathEl::CurveTo(
                    Point { x: 12.94, y: 4.00 },
                    Point { x: 4.00, y: 12.95 },
                    Point { x: 4.00, y: 24.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 4.00, y: 35.05 },
                    Point { x: 12.94, y: 44.00 },
                    Point { x: 23.99, y: 44.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 35.04, y: 44.00 },
                    Point { x: 44.00, y: 35.05 },
                    Point { x: 44.00, y: 24.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 44.00, y: 12.95 },
                    Point { x: 35.04, y: 4.00 },
                    Point { x: 23.99, y: 4.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 32.46, y: 36.00 }),
                PathEl::LineTo(Point { x: 24.00, y: 30.90 }),
                PathEl::LineTo(Point { x: 15.54, y: 36.00 }),
                PathEl::LineTo(Point { x: 17.78, y: 26.38 }),
                PathEl::LineTo(Point { x: 10.32, y: 19.91 }),
                PathEl::LineTo(Point { x: 20.16, y: 19.07 }),
                PathEl::LineTo(Point { x: 24.00, y: 10.00 }),
                PathEl::LineTo(Point { x: 27.84, y: 19.07 }),
                PathEl::LineTo(Point { x: 37.68, y: 19.91 }),
                PathEl::LineTo(Point { x: 30.22, y: 26.38 }),
                PathEl::LineTo(Point { x: 32.46, y: 36.00 }),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct ReplyAll {
    size: f64,
    color: Color,
}

impl ReplyAll {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for ReplyAll {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 14.00, y: 16.00 }),
                PathEl::LineTo(Point { x: 14.00, y: 10.00 }),
                PathEl::LineTo(Point { x: 0.00, y: 24.00 }),
                PathEl::LineTo(Point { x: 14.00, y: 38.00 }),
                PathEl::LineTo(Point { x: 14.00, y: 32.00 }),
                PathEl::LineTo(Point { x: 6.00, y: 24.00 }),
                PathEl::LineTo(Point { x: 14.00, y: 16.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 26.00, y: 18.00 }),
                PathEl::LineTo(Point { x: 26.00, y: 10.00 }),
                PathEl::LineTo(Point { x: 12.00, y: 24.00 }),
                PathEl::LineTo(Point { x: 26.00, y: 38.00 }),
                PathEl::LineTo(Point { x: 26.00, y: 29.80 }),
                PathEl::CurveTo(
                    Point { x: 36.00, y: 29.80 },
                    Point { x: 43.00, y: 33.00 },
                    Point { x: 48.00, y: 40.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 46.00, y: 30.00 },
                    Point { x: 40.00, y: 20.00 },
                    Point { x: 26.00, y: 18.00 },
                ),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct WifiTethering {
    size: f64,
    color: Color,
}

impl WifiTethering {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for WifiTethering {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 24.00, y: 22.00 }),
                PathEl::CurveTo(
                    Point { x: 21.79, y: 22.00 },
                    Point { x: 20.00, y: 23.79 },
                    Point { x: 20.00, y: 26.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 20.00, y: 28.21 },
                    Point { x: 21.79, y: 30.00 },
                    Point { x: 24.00, y: 30.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 26.21, y: 30.00 },
                    Point { x: 28.00, y: 28.21 },
                    Point { x: 28.00, y: 26.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 28.00, y: 23.79 },
                    Point { x: 26.21, y: 22.00 },
                    Point { x: 24.00, y: 22.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 36.00, y: 26.00 }),
                PathEl::CurveTo(
                    Point { x: 36.00, y: 19.37 },
                    Point { x: 30.63, y: 14.00 },
                    Point { x: 24.00, y: 14.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 17.37, y: 14.00 },
                    Point { x: 12.00, y: 19.37 },
                    Point { x: 12.00, y: 26.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 12.00, y: 30.44 },
                    Point { x: 14.41, y: 34.30 },
                    Point { x: 17.99, y: 36.38 },
                ),
                PathEl::LineTo(Point { x: 20.01, y: 32.90 }),
                PathEl::CurveTo(
                    Point { x: 17.62, y: 31.51 },
                    Point { x: 16.00, y: 28.96 },
                    Point { x: 16.00, y: 26.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 16.00, y: 21.58 },
                    Point { x: 19.58, y: 18.00 },
                    Point { x: 24.00, y: 18.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 28.42, y: 18.00 },
                    Point { x: 32.00, y: 21.58 },
                    Point { x: 32.00, y: 26.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 32.00, y: 28.96 },
                    Point { x: 30.38, y: 31.51 },
                    Point { x: 27.99, y: 32.89 },
                ),
                PathEl::LineTo(Point { x: 30.01, y: 36.37 }),
                PathEl::CurveTo(
                    Point { x: 33.59, y: 34.30 },
                    Point { x: 36.00, y: 30.44 },
                    Point { x: 36.00, y: 26.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 24.00, y: 6.00 }),
                PathEl::CurveTo(
                    Point { x: 12.95, y: 6.00 },
                    Point { x: 4.00, y: 14.95 },
                    Point { x: 4.00, y: 26.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 4.00, y: 33.39 },
                    Point { x: 8.02, y: 39.83 },
                    Point { x: 13.99, y: 43.29 },
                ),
                PathEl::LineTo(Point { x: 15.99, y: 39.83 }),
                PathEl::CurveTo(
                    Point { x: 11.22, y: 37.07 },
                    Point { x: 8.00, y: 31.91 },
                    Point { x: 8.00, y: 26.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 8.00, y: 17.16 },
                    Point { x: 15.16, y: 10.00 },
                    Point { x: 24.00, y: 10.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 32.84, y: 10.00 },
                    Point { x: 40.00, y: 17.16 },
                    Point { x: 40.00, y: 26.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 40.00, y: 31.91 },
                    Point { x: 36.78, y: 37.07 },
                    Point { x: 32.01, y: 39.84 },
                ),
                PathEl::LineTo(Point { x: 34.01, y: 43.30 }),
                PathEl::CurveTo(
                    Point { x: 39.98, y: 39.83 },
                    Point { x: 44.00, y: 33.39 },
                    Point { x: 44.00, y: 26.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 44.00, y: 14.95 },
                    Point { x: 35.04, y: 6.00 },
                    Point { x: 24.00, y: 6.00 },
                ),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct ThumbDown {
    size: f64,
    color: Color,
}

impl ThumbDown {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for ThumbDown {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 30.00, y: 6.00 }),
                PathEl::LineTo(Point { x: 12.00, y: 6.00 }),
                PathEl::CurveTo(
                    Point { x: 10.34, y: 6.00 },
                    Point { x: 8.92, y: 7.01 },
                    Point { x: 8.32, y: 8.44 },
                ),
                PathEl::LineTo(Point { x: 2.29, y: 22.54 }),
                PathEl::CurveTo(
                    Point { x: 2.11, y: 23.00 },
                    Point { x: 2.00, y: 23.49 },
                    Point { x: 2.00, y: 24.00 },
                ),
                PathEl::LineTo(Point { x: 2.00, y: 27.83 }),
                PathEl::LineTo(Point { x: 2.02, y: 27.85 }),
                PathEl::LineTo(Point { x: 2.00, y: 28.00 }),
                PathEl::CurveTo(
                    Point { x: 2.00, y: 30.21 },
                    Point { x: 3.79, y: 32.00 },
                    Point { x: 6.00, y: 32.00 },
                ),
                PathEl::LineTo(Point { x: 18.63, y: 32.00 }),
                PathEl::LineTo(Point { x: 16.72, y: 41.14 }),
                PathEl::CurveTo(
                    Point { x: 16.68, y: 41.34 },
                    Point { x: 16.65, y: 41.55 },
                    Point { x: 16.65, y: 41.77 },
                ),
                PathEl::CurveTo(
                    Point { x: 16.65, y: 42.60 },
                    Point { x: 16.99, y: 43.35 },
                    Point { x: 17.53, y: 43.89 },
                ),
                PathEl::LineTo(Point { x: 19.66, y: 46.00 }),
                PathEl::LineTo(Point { x: 32.83, y: 32.83 }),
                PathEl::CurveTo(
                    Point { x: 33.55, y: 32.10 },
                    Point { x: 34.00, y: 31.10 },
                    Point { x: 34.00, y: 30.00 },
                ),
                PathEl::LineTo(Point { x: 34.00, y: 10.00 }),
                PathEl::CurveTo(
                    Point { x: 34.00, y: 7.79 },
                    Point { x: 32.21, y: 6.00 },
                    Point { x: 30.00, y: 6.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 38.00, y: 6.00 }),
                PathEl::LineTo(Point { x: 38.00, y: 30.00 }),
                PathEl::LineTo(Point { x: 46.00, y: 30.00 }),
                PathEl::LineTo(Point { x: 46.00, y: 6.00 }),
                PathEl::LineTo(Point { x: 38.00, y: 6.00 }),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct ContentPaste {
    size: f64,
    color: Color,
}

impl ContentPaste {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for ContentPaste {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 38.00, y: 4.00 }),
                PathEl::LineTo(Point { x: 29.63, y: 4.00 }),
                PathEl::CurveTo(
                    Point { x: 28.81, y: 1.68 },
                    Point { x: 26.61, y: 0.00 },
                    Point { x: 24.00, y: 0.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 21.39, y: 0.00 },
                    Point { x: 19.19, y: 1.68 },
                    Point { x: 18.37, y: 4.00 },
                ),
                PathEl::LineTo(Point { x: 10.00, y: 4.00 }),
                PathEl::CurveTo(
                    Point { x: 7.79, y: 4.00 },
                    Point { x: 6.00, y: 5.79 },
                    Point { x: 6.00, y: 8.00 },
                ),
                PathEl::LineTo(Point { x: 6.00, y: 40.00 }),
                PathEl::CurveTo(
                    Point { x: 6.00, y: 42.21 },
                    Point { x: 7.79, y: 44.00 },
                    Point { x: 10.00, y: 44.00 },
                ),
                PathEl::LineTo(Point { x: 38.00, y: 44.00 }),
                PathEl::CurveTo(
                    Point { x: 40.21, y: 44.00 },
                    Point { x: 42.00, y: 42.21 },
                    Point { x: 42.00, y: 40.00 },
                ),
                PathEl::LineTo(Point { x: 42.00, y: 8.00 }),
                PathEl::CurveTo(
                    Point { x: 42.00, y: 5.79 },
                    Point { x: 40.21, y: 4.00 },
                    Point { x: 38.00, y: 4.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 24.00, y: 4.00 }),
                PathEl::CurveTo(
                    Point { x: 25.10, y: 4.00 },
                    Point { x: 26.00, y: 4.89 },
                    Point { x: 26.00, y: 6.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 26.00, y: 7.11 },
                    Point { x: 25.10, y: 8.00 },
                    Point { x: 24.00, y: 8.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 22.90, y: 8.00 },
                    Point { x: 22.00, y: 7.11 },
                    Point { x: 22.00, y: 6.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 22.00, y: 4.89 },
                    Point { x: 22.90, y: 4.00 },
                    Point { x: 24.00, y: 4.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 38.00, y: 40.00 }),
                PathEl::LineTo(Point { x: 10.00, y: 40.00 }),
                PathEl::LineTo(Point { x: 10.00, y: 8.00 }),
                PathEl::LineTo(Point { x: 14.00, y: 8.00 }),
                PathEl::LineTo(Point { x: 14.00, y: 14.00 }),
                PathEl::LineTo(Point { x: 34.00, y: 14.00 }),
                PathEl::LineTo(Point { x: 34.00, y: 8.00 }),
                PathEl::LineTo(Point { x: 38.00, y: 8.00 }),
                PathEl::LineTo(Point { x: 38.00, y: 40.00 }),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct ExposureZero {
    size: f64,
    color: Color,
}

impl ExposureZero {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for ExposureZero {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 32.28, y: 25.00 }),
                PathEl::CurveTo(
                    Point { x: 32.28, y: 27.00 },
                    Point { x: 32.08, y: 28.70 },
                    Point { x: 31.69, y: 30.10 },
                ),
                PathEl::CurveTo(
                    Point { x: 31.30, y: 31.50 },
                    Point { x: 30.74, y: 32.63 },
                    Point { x: 30.02, y: 33.51 },
                ),
                PathEl::CurveTo(
                    Point { x: 29.30, y: 34.38 },
                    Point { x: 28.43, y: 35.02 },
                    Point { x: 27.42, y: 35.41 },
                ),
                PathEl::CurveTo(
                    Point { x: 26.41, y: 35.80 },
                    Point { x: 25.28, y: 36.00 },
                    Point { x: 24.03, y: 36.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 22.79, y: 36.00 },
                    Point { x: 21.66, y: 35.80 },
                    Point { x: 20.64, y: 35.41 },
                ),
                PathEl::CurveTo(
                    Point { x: 19.62, y: 35.02 },
                    Point { x: 18.75, y: 34.38 },
                    Point { x: 18.02, y: 33.51 },
                ),
                PathEl::CurveTo(
                    Point { x: 17.29, y: 32.64 },
                    Point { x: 16.72, y: 31.50 },
                    Point { x: 16.33, y: 30.10 },
                ),
                PathEl::CurveTo(
                    Point { x: 15.93, y: 28.70 },
                    Point { x: 15.73, y: 27.00 },
                    Point { x: 15.73, y: 25.00 },
                ),
                PathEl::LineTo(Point { x: 15.73, y: 20.92 }),
                PathEl::CurveTo(
                    Point { x: 15.73, y: 18.92 },
                    Point { x: 15.93, y: 17.22 },
                    Point { x: 16.32, y: 15.83 },
                ),
                PathEl::CurveTo(
                    Point { x: 16.71, y: 14.44 },
                    Point { x: 17.27, y: 13.31 },
                    Point { x: 18.00, y: 12.45 },
                ),
                PathEl::CurveTo(
                    Point { x: 18.72, y: 11.59 },
                    Point { x: 19.59, y: 10.96 },
                    Point { x: 20.61, y: 10.58 },
                ),
                PathEl::CurveTo(
                    Point { x: 21.63, y: 10.20 },
                    Point { x: 22.76, y: 10.01 },
                    Point { x: 24.00, y: 10.01 },
                ),
                PathEl::CurveTo(
                    Point { x: 25.25, y: 10.01 },
                    Point { x: 26.39, y: 10.20 },
                    Point { x: 27.41, y: 10.58 },
                ),
                PathEl::CurveTo(
                    Point { x: 28.43, y: 10.96 },
                    Point { x: 29.30, y: 11.59 },
                    Point { x: 30.03, y: 12.45 },
                ),
                PathEl::CurveTo(
                    Point { x: 30.75, y: 13.31 },
                    Point { x: 31.31, y: 14.44 },
                    Point { x: 31.71, y: 15.83 },
                ),
                PathEl::CurveTo(
                    Point { x: 32.10, y: 17.22 },
                    Point { x: 32.30, y: 18.92 },
                    Point { x: 32.30, y: 20.92 },
                ),
                PathEl::LineTo(Point { x: 32.30, y: 25.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 28.06, y: 20.27 }),
                PathEl::CurveTo(
                    Point { x: 28.06, y: 18.98 },
                    Point { x: 27.97, y: 17.90 },
                    Point { x: 27.79, y: 17.03 },
                ),
                PathEl::CurveTo(
                    Point { x: 27.61, y: 16.16 },
                    Point { x: 27.35, y: 15.45 },
                    Point { x: 27.00, y: 14.91 },
                ),
                PathEl::CurveTo(
                    Point { x: 26.65, y: 14.37 },
                    Point { x: 26.23, y: 13.98 },
                    Point { x: 25.72, y: 13.75 },
                ),
                PathEl::CurveTo(
                    Point { x: 25.22, y: 13.51 },
                    Point { x: 24.64, y: 13.39 },
                    Point { x: 23.99, y: 13.39 },
                ),
                PathEl::CurveTo(
                    Point { x: 23.34, y: 13.39 },
                    Point { x: 22.76, y: 13.51 },
                    Point { x: 22.26, y: 13.75 },
                ),
                PathEl::CurveTo(
                    Point { x: 21.75, y: 13.99 },
                    Point { x: 21.33, y: 14.38 },
                    Point { x: 20.98, y: 14.91 },
                ),
                PathEl::CurveTo(
                    Point { x: 20.63, y: 15.45 },
                    Point { x: 20.37, y: 16.16 },
                    Point { x: 20.19, y: 17.03 },
                ),
                PathEl::CurveTo(
                    Point { x: 20.01, y: 17.90 },
                    Point { x: 19.92, y: 18.99 },
                    Point { x: 19.92, y: 20.27 },
                ),
                PathEl::LineTo(Point { x: 19.92, y: 25.61 }),
                PathEl::CurveTo(
                    Point { x: 19.92, y: 26.88 },
                    Point { x: 20.01, y: 27.97 },
                    Point { x: 20.20, y: 28.86 },
                ),
                PathEl::CurveTo(
                    Point { x: 20.39, y: 29.75 },
                    Point { x: 20.65, y: 30.48 },
                    Point { x: 21.00, y: 31.03 },
                ),
                PathEl::CurveTo(
                    Point { x: 21.35, y: 31.59 },
                    Point { x: 21.78, y: 31.99 },
                    Point { x: 22.29, y: 32.25 },
                ),
                PathEl::CurveTo(
                    Point { x: 22.80, y: 32.50 },
                    Point { x: 23.38, y: 32.63 },
                    Point { x: 24.03, y: 32.63 },
                ),
                PathEl::CurveTo(
                    Point { x: 24.69, y: 32.63 },
                    Point { x: 25.27, y: 32.50 },
                    Point { x: 25.77, y: 32.25 },
                ),
                PathEl::CurveTo(
                    Point { x: 26.27, y: 32.00 },
                    Point { x: 26.69, y: 31.59 },
                    Point { x: 27.03, y: 31.03 },
                ),
                PathEl::CurveTo(
                    Point { x: 27.37, y: 30.47 },
                    Point { x: 27.63, y: 29.75 },
                    Point { x: 27.80, y: 28.86 },
                ),
                PathEl::CurveTo(
                    Point { x: 27.97, y: 27.97 },
                    Point { x: 28.06, y: 26.88 },
                    Point { x: 28.06, y: 25.61 },
                ),
                PathEl::LineTo(Point { x: 28.06, y: 20.27 }),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct Crop75 {
    size: f64,
    color: Color,
}

impl Crop75 {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for Crop75 {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 38.00, y: 14.00 }),
                PathEl::LineTo(Point { x: 10.00, y: 14.00 }),
                PathEl::CurveTo(
                    Point { x: 7.79, y: 14.00 },
                    Point { x: 6.00, y: 15.79 },
                    Point { x: 6.00, y: 18.00 },
                ),
                PathEl::LineTo(Point { x: 6.00, y: 30.00 }),
                PathEl::CurveTo(
                    Point { x: 6.00, y: 32.21 },
                    Point { x: 7.79, y: 34.00 },
                    Point { x: 10.00, y: 34.00 },
                ),
                PathEl::LineTo(Point { x: 38.00, y: 34.00 }),
                PathEl::CurveTo(
                    Point { x: 40.21, y: 34.00 },
                    Point { x: 42.00, y: 32.21 },
                    Point { x: 42.00, y: 30.00 },
                ),
                PathEl::LineTo(Point { x: 42.00, y: 18.00 }),
                PathEl::CurveTo(
                    Point { x: 42.00, y: 15.79 },
                    Point { x: 40.21, y: 14.00 },
                    Point { x: 38.00, y: 14.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 38.00, y: 30.00 }),
                PathEl::LineTo(Point { x: 10.00, y: 30.00 }),
                PathEl::LineTo(Point { x: 10.00, y: 18.00 }),
                PathEl::LineTo(Point { x: 38.00, y: 18.00 }),
                PathEl::LineTo(Point { x: 38.00, y: 30.00 }),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct VolumeUp {
    size: f64,
    color: Color,
}

impl VolumeUp {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for VolumeUp {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 6.00, y: 18.00 }),
                PathEl::LineTo(Point { x: 6.00, y: 30.00 }),
                PathEl::LineTo(Point { x: 14.00, y: 30.00 }),
                PathEl::LineTo(Point { x: 24.00, y: 40.00 }),
                PathEl::LineTo(Point { x: 24.00, y: 8.00 }),
                PathEl::LineTo(Point { x: 14.00, y: 18.00 }),
                PathEl::LineTo(Point { x: 6.00, y: 18.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 33.00, y: 24.00 }),
                PathEl::CurveTo(
                    Point { x: 33.00, y: 20.47 },
                    Point { x: 30.96, y: 17.42 },
                    Point { x: 28.00, y: 15.95 },
                ),
                PathEl::LineTo(Point { x: 28.00, y: 32.06 }),
                PathEl::CurveTo(
                    Point { x: 30.96, y: 30.58 },
                    Point { x: 33.00, y: 27.53 },
                    Point { x: 33.00, y: 24.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 28.00, y: 6.46 }),
                PathEl::LineTo(Point { x: 28.00, y: 10.59 }),
                PathEl::CurveTo(
                    Point { x: 33.78, y: 12.31 },
                    Point { x: 38.00, y: 17.66 },
                    Point { x: 38.00, y: 24.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 38.00, y: 30.34 },
                    Point { x: 33.78, y: 35.69 },
                    Point { x: 28.00, y: 37.41 },
                ),
                PathEl::LineTo(Point { x: 28.00, y: 41.54 }),
                PathEl::CurveTo(
                    Point { x: 36.01, y: 39.72 },
                    Point { x: 42.00, y: 32.57 },
                    Point { x: 42.00, y: 24.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 42.00, y: 15.43 },
                    Point { x: 36.01, y: 8.28 },
                    Point { x: 28.00, y: 6.46 },
                ),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct Tune {
    size: f64,
    color: Color,
}

impl Tune {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for Tune {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 6.00, y: 34.00 }),
                PathEl::LineTo(Point { x: 6.00, y: 38.00 }),
                PathEl::LineTo(Point { x: 18.00, y: 38.00 }),
                PathEl::LineTo(Point { x: 18.00, y: 34.00 }),
                PathEl::LineTo(Point { x: 6.00, y: 34.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 6.00, y: 10.00 }),
                PathEl::LineTo(Point { x: 6.00, y: 14.00 }),
                PathEl::LineTo(Point { x: 26.00, y: 14.00 }),
                PathEl::LineTo(Point { x: 26.00, y: 10.00 }),
                PathEl::LineTo(Point { x: 6.00, y: 10.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 26.00, y: 42.00 }),
                PathEl::LineTo(Point { x: 26.00, y: 38.00 }),
                PathEl::LineTo(Point { x: 42.00, y: 38.00 }),
                PathEl::LineTo(Point { x: 42.00, y: 34.00 }),
                PathEl::LineTo(Point { x: 26.00, y: 34.00 }),
                PathEl::LineTo(Point { x: 26.00, y: 30.00 }),
                PathEl::LineTo(Point { x: 22.00, y: 30.00 }),
                PathEl::LineTo(Point { x: 22.00, y: 42.00 }),
                PathEl::LineTo(Point { x: 26.00, y: 42.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 14.00, y: 18.00 }),
                PathEl::LineTo(Point { x: 14.00, y: 22.00 }),
                PathEl::LineTo(Point { x: 6.00, y: 22.00 }),
                PathEl::LineTo(Point { x: 6.00, y: 26.00 }),
                PathEl::LineTo(Point { x: 14.00, y: 26.00 }),
                PathEl::LineTo(Point { x: 14.00, y: 30.00 }),
                PathEl::LineTo(Point { x: 18.00, y: 30.00 }),
                PathEl::LineTo(Point { x: 18.00, y: 18.00 }),
                PathEl::LineTo(Point { x: 14.00, y: 18.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 42.00, y: 26.00 }),
                PathEl::LineTo(Point { x: 42.00, y: 22.00 }),
                PathEl::LineTo(Point { x: 22.00, y: 22.00 }),
                PathEl::LineTo(Point { x: 22.00, y: 26.00 }),
                PathEl::LineTo(Point { x: 42.00, y: 26.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 30.00, y: 18.00 }),
                PathEl::LineTo(Point { x: 34.00, y: 18.00 }),
                PathEl::LineTo(Point { x: 34.00, y: 14.00 }),
                PathEl::LineTo(Point { x: 42.00, y: 14.00 }),
                PathEl::LineTo(Point { x: 42.00, y: 10.00 }),
                PathEl::LineTo(Point { x: 34.00, y: 10.00 }),
                PathEl::LineTo(Point { x: 34.00, y: 6.00 }),
                PathEl::LineTo(Point { x: 30.00, y: 6.00 }),
                PathEl::LineTo(Point { x: 30.00, y: 18.00 }),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct Hotel {
    size: f64,
    color: Color,
}

impl Hotel {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for Hotel {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 14.00, y: 26.00 }),
                PathEl::CurveTo(
                    Point { x: 17.31, y: 26.00 },
                    Point { x: 20.00, y: 23.31 },
                    Point { x: 20.00, y: 20.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 20.00, y: 16.69 },
                    Point { x: 17.31, y: 14.00 },
                    Point { x: 14.00, y: 14.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 10.69, y: 14.00 },
                    Point { x: 8.00, y: 16.69 },
                    Point { x: 8.00, y: 20.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 8.00, y: 23.31 },
                    Point { x: 10.69, y: 26.00 },
                    Point { x: 14.00, y: 26.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 38.00, y: 14.00 }),
                PathEl::LineTo(Point { x: 22.00, y: 14.00 }),
                PathEl::LineTo(Point { x: 22.00, y: 28.00 }),
                PathEl::LineTo(Point { x: 6.00, y: 28.00 }),
                PathEl::LineTo(Point { x: 6.00, y: 10.00 }),
                PathEl::LineTo(Point { x: 2.00, y: 10.00 }),
                PathEl::LineTo(Point { x: 2.00, y: 40.00 }),
                PathEl::LineTo(Point { x: 6.00, y: 40.00 }),
                PathEl::LineTo(Point { x: 6.00, y: 34.00 }),
                PathEl::LineTo(Point { x: 42.00, y: 34.00 }),
                PathEl::LineTo(Point { x: 42.00, y: 40.00 }),
                PathEl::LineTo(Point { x: 46.00, y: 40.00 }),
                PathEl::LineTo(Point { x: 46.00, y: 22.00 }),
                PathEl::CurveTo(
                    Point { x: 46.00, y: 17.58 },
                    Point { x: 42.42, y: 14.00 },
                    Point { x: 38.00, y: 14.00 },
                ),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct RotateRight {
    size: f64,
    color: Color,
}

impl RotateRight {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for RotateRight {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 31.10, y: 11.10 }),
                PathEl::LineTo(Point { x: 22.00, y: 2.00 }),
                PathEl::LineTo(Point { x: 22.00, y: 8.14 }),
                PathEl::CurveTo(
                    Point { x: 14.11, y: 9.12 },
                    Point { x: 8.00, y: 15.84 },
                    Point { x: 8.00, y: 24.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 8.00, y: 32.16 },
                    Point { x: 14.11, y: 38.88 },
                    Point { x: 22.00, y: 39.86 },
                ),
                PathEl::LineTo(Point { x: 22.00, y: 35.82 }),
                PathEl::CurveTo(
                    Point { x: 16.33, y: 34.87 },
                    Point { x: 12.00, y: 29.94 },
                    Point { x: 12.00, y: 24.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 12.00, y: 18.06 },
                    Point { x: 16.33, y: 13.13 },
                    Point { x: 22.00, y: 12.18 },
                ),
                PathEl::LineTo(Point { x: 22.00, y: 20.00 }),
                PathEl::LineTo(Point { x: 31.10, y: 11.10 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 39.86, y: 22.00 }),
                PathEl::CurveTo(
                    Point { x: 39.52, y: 19.22 },
                    Point { x: 38.41, y: 16.54 },
                    Point { x: 36.61, y: 14.22 },
                ),
                PathEl::LineTo(Point { x: 33.78, y: 17.05 }),
                PathEl::CurveTo(
                    Point { x: 34.85, y: 18.56 },
                    Point { x: 35.53, y: 20.25 },
                    Point { x: 35.82, y: 22.00 },
                ),
                PathEl::LineTo(Point { x: 39.86, y: 22.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 26.00, y: 35.81 }),
                PathEl::LineTo(Point { x: 26.00, y: 39.86 }),
                PathEl::CurveTo(
                    Point { x: 28.78, y: 39.52 },
                    Point { x: 31.48, y: 38.44 },
                    Point { x: 33.80, y: 36.64 },
                ),
                PathEl::LineTo(Point { x: 30.93, y: 33.77 }),
                PathEl::CurveTo(
                    Point { x: 29.43, y: 34.83 },
                    Point { x: 27.75, y: 35.51 },
                    Point { x: 26.00, y: 35.81 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 33.78, y: 30.95 }),
                PathEl::LineTo(Point { x: 36.61, y: 33.78 }),
                PathEl::CurveTo(
                    Point { x: 38.41, y: 31.46 },
                    Point { x: 39.52, y: 28.78 },
                    Point { x: 39.86, y: 26.00 },
                ),
                PathEl::LineTo(Point { x: 35.82, y: 26.00 }),
                PathEl::CurveTo(
                    Point { x: 35.53, y: 27.75 },
                    Point { x: 34.85, y: 29.44 },
                    Point { x: 33.78, y: 30.95 },
                ),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct Forward5 {
    size: f64,
    color: Color,
}

impl Forward5 {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for Forward5 {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 8.00, y: 26.00 }),
                PathEl::CurveTo(
                    Point { x: 8.00, y: 34.80 },
                    Point { x: 15.20, y: 42.00 },
                    Point { x: 24.00, y: 42.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 32.80, y: 42.00 },
                    Point { x: 40.00, y: 34.80 },
                    Point { x: 40.00, y: 26.00 },
                ),
                PathEl::LineTo(Point { x: 36.00, y: 26.00 }),
                PathEl::CurveTo(
                    Point { x: 36.00, y: 32.60 },
                    Point { x: 30.60, y: 38.00 },
                    Point { x: 24.00, y: 38.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 17.40, y: 38.00 },
                    Point { x: 12.00, y: 32.60 },
                    Point { x: 12.00, y: 26.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 12.00, y: 19.40 },
                    Point { x: 17.40, y: 14.00 },
                    Point { x: 24.00, y: 14.00 },
                ),
                PathEl::LineTo(Point { x: 24.00, y: 22.00 }),
                PathEl::LineTo(Point { x: 34.00, y: 12.00 }),
                PathEl::LineTo(Point { x: 24.00, y: 2.00 }),
                PathEl::LineTo(Point { x: 24.00, y: 10.00 }),
                PathEl::CurveTo(
                    Point { x: 15.20, y: 10.00 },
                    Point { x: 8.00, y: 17.20 },
                    Point { x: 8.00, y: 26.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 21.40, y: 27.80 }),
                PathEl::LineTo(Point { x: 21.90, y: 23.50 }),
                PathEl::LineTo(Point { x: 26.70, y: 23.50 }),
                PathEl::LineTo(Point { x: 26.70, y: 24.90 }),
                PathEl::LineTo(Point { x: 23.30, y: 24.90 }),
                PathEl::LineTo(Point { x: 23.10, y: 26.70 }),
                PathEl::CurveTo(
                    Point { x: 23.20, y: 26.70 },
                    Point { x: 23.20, y: 26.60 },
                    Point { x: 23.30, y: 26.60 },
                ),
                PathEl::CurveTo(
                    Point { x: 23.40, y: 26.60 },
                    Point { x: 23.50, y: 26.50 },
                    Point { x: 23.60, y: 26.50 },
                ),
                PathEl::CurveTo(
                    Point { x: 23.70, y: 26.50 },
                    Point { x: 23.80, y: 26.40 },
                    Point { x: 24.00, y: 26.40 },
                ),
                PathEl::LineTo(Point { x: 24.40, y: 26.40 }),
                PathEl::CurveTo(
                    Point { x: 24.80, y: 26.40 },
                    Point { x: 25.20, y: 26.50 },
                    Point { x: 25.50, y: 26.60 },
                ),
                PathEl::CurveTo(
                    Point { x: 25.80, y: 26.70 },
                    Point { x: 26.10, y: 26.90 },
                    Point { x: 26.30, y: 27.20 },
                ),
                PathEl::CurveTo(
                    Point { x: 26.50, y: 27.50 },
                    Point { x: 26.70, y: 27.70 },
                    Point { x: 26.80, y: 28.10 },
                ),
                PathEl::CurveTo(
                    Point { x: 26.90, y: 28.50 },
                    Point { x: 27.00, y: 28.90 },
                    Point { x: 27.00, y: 29.30 },
                ),
                PathEl::CurveTo(
                    Point { x: 27.00, y: 29.70 },
                    Point { x: 26.90, y: 30.00 },
                    Point { x: 26.80, y: 30.40 },
                ),
                PathEl::CurveTo(
                    Point { x: 26.70, y: 30.80 },
                    Point { x: 26.50, y: 31.00 },
                    Point { x: 26.30, y: 31.30 },
                ),
                PathEl::CurveTo(
                    Point { x: 26.10, y: 31.60 },
                    Point { x: 25.80, y: 31.80 },
                    Point { x: 25.40, y: 31.90 },
                ),
                PathEl::CurveTo(
                    Point { x: 25.00, y: 32.00 },
                    Point { x: 24.60, y: 32.10 },
                    Point { x: 24.10, y: 32.10 },
                ),
                PathEl::CurveTo(
                    Point { x: 23.70, y: 32.10 },
                    Point { x: 23.40, y: 32.00 },
                    Point { x: 23.00, y: 31.90 },
                ),
                PathEl::CurveTo(
                    Point { x: 22.60, y: 31.80 },
                    Point { x: 22.40, y: 31.60 },
                    Point { x: 22.10, y: 31.40 },
                ),
                PathEl::CurveTo(
                    Point { x: 21.80, y: 31.20 },
                    Point { x: 21.60, y: 30.90 },
                    Point { x: 21.50, y: 30.60 },
                ),
                PathEl::CurveTo(
                    Point { x: 21.40, y: 30.30 },
                    Point { x: 21.20, y: 29.90 },
                    Point { x: 21.20, y: 29.50 },
                ),
                PathEl::LineTo(Point { x: 22.90, y: 29.50 }),
                PathEl::CurveTo(
                    Point { x: 22.90, y: 29.90 },
                    Point { x: 23.10, y: 30.10 },
                    Point { x: 23.30, y: 30.30 },
                ),
                PathEl::CurveTo(
                    Point { x: 23.50, y: 30.50 },
                    Point { x: 23.80, y: 30.60 },
                    Point { x: 24.10, y: 30.60 },
                ),
                PathEl::CurveTo(
                    Point { x: 24.30, y: 30.60 },
                    Point { x: 24.50, y: 30.60 },
                    Point { x: 24.60, y: 30.50 },
                ),
                PathEl::CurveTo(
                    Point { x: 24.70, y: 30.40 },
                    Point { x: 24.90, y: 30.30 },
                    Point { x: 25.00, y: 30.20 },
                ),
                PathEl::CurveTo(
                    Point { x: 25.10, y: 30.10 },
                    Point { x: 25.20, y: 29.90 },
                    Point { x: 25.20, y: 29.70 },
                ),
                PathEl::CurveTo(
                    Point { x: 25.20, y: 29.50 },
                    Point { x: 25.30, y: 29.30 },
                    Point { x: 25.30, y: 29.10 },
                ),
                PathEl::CurveTo(
                    Point { x: 25.30, y: 28.90 },
                    Point { x: 25.30, y: 28.70 },
                    Point { x: 25.20, y: 28.50 },
                ),
                PathEl::CurveTo(
                    Point { x: 25.10, y: 28.30 },
                    Point { x: 25.10, y: 28.20 },
                    Point { x: 24.90, y: 28.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 24.70, y: 27.80 },
                    Point { x: 24.60, y: 27.80 },
                    Point { x: 24.50, y: 27.70 },
                ),
                PathEl::CurveTo(
                    Point { x: 24.40, y: 27.60 },
                    Point { x: 24.10, y: 27.60 },
                    Point { x: 23.90, y: 27.60 },
                ),
                PathEl::LineTo(Point { x: 23.50, y: 27.60 }),
                PathEl::CurveTo(
                    Point { x: 23.50, y: 27.60 },
                    Point { x: 23.30, y: 27.70 },
                    Point { x: 23.20, y: 27.70 },
                ),
                PathEl::CurveTo(
                    Point { x: 23.10, y: 27.70 },
                    Point { x: 23.00, y: 27.90 },
                    Point { x: 22.90, y: 28.00 },
                ),
                PathEl::LineTo(Point { x: 22.70, y: 28.20 }),
                PathEl::LineTo(Point { x: 21.40, y: 27.80 }),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct ContactPhone {
    size: f64,
    color: Color,
}

impl ContactPhone {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for ContactPhone {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 44.00, y: 6.00 }),
                PathEl::LineTo(Point { x: 4.00, y: 6.00 }),
                PathEl::CurveTo(
                    Point { x: 1.79, y: 6.00 },
                    Point { x: 0.00, y: 7.79 },
                    Point { x: 0.00, y: 10.00 },
                ),
                PathEl::LineTo(Point { x: 0.00, y: 38.00 }),
                PathEl::CurveTo(
                    Point { x: 0.00, y: 40.21 },
                    Point { x: 1.79, y: 42.00 },
                    Point { x: 4.00, y: 42.00 },
                ),
                PathEl::LineTo(Point { x: 44.00, y: 42.00 }),
                PathEl::CurveTo(
                    Point { x: 46.21, y: 42.00 },
                    Point { x: 47.98, y: 40.21 },
                    Point { x: 47.98, y: 38.00 },
                ),
                PathEl::LineTo(Point { x: 48.00, y: 10.00 }),
                PathEl::CurveTo(
                    Point { x: 48.00, y: 7.79 },
                    Point { x: 46.21, y: 6.00 },
                    Point { x: 44.00, y: 6.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 16.00, y: 12.00 }),
                PathEl::CurveTo(
                    Point { x: 19.31, y: 12.00 },
                    Point { x: 22.00, y: 14.69 },
                    Point { x: 22.00, y: 18.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 22.00, y: 21.32 },
                    Point { x: 19.31, y: 24.00 },
                    Point { x: 16.00, y: 24.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 12.69, y: 24.00 },
                    Point { x: 10.00, y: 21.32 },
                    Point { x: 10.00, y: 18.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 10.00, y: 14.69 },
                    Point { x: 12.69, y: 12.00 },
                    Point { x: 16.00, y: 12.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 28.00, y: 36.00 }),
                PathEl::LineTo(Point { x: 4.00, y: 36.00 }),
                PathEl::LineTo(Point { x: 4.00, y: 34.00 }),
                PathEl::CurveTo(
                    Point { x: 4.00, y: 30.00 },
                    Point { x: 12.00, y: 27.80 },
                    Point { x: 16.00, y: 27.80 },
                ),
                PathEl::CurveTo(
                    Point { x: 20.00, y: 27.80 },
                    Point { x: 28.00, y: 30.00 },
                    Point { x: 28.00, y: 34.00 },
                ),
                PathEl::LineTo(Point { x: 28.00, y: 36.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 35.70, y: 28.00 }),
                PathEl::LineTo(Point { x: 38.98, y: 28.00 }),
                PathEl::LineTo(Point { x: 42.00, y: 32.00 }),
                PathEl::LineTo(Point { x: 38.01, y: 35.99 }),
                PathEl::CurveTo(
                    Point { x: 35.40, y: 34.03 },
                    Point { x: 33.45, y: 31.24 },
                    Point { x: 32.55, y: 28.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 32.20, y: 26.72 },
                    Point { x: 32.00, y: 25.39 },
                    Point { x: 32.00, y: 24.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 32.00, y: 22.61 },
                    Point { x: 32.20, y: 21.28 },
                    Point { x: 32.56, y: 20.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 33.45, y: 16.76 },
                    Point { x: 35.40, y: 13.97 },
                    Point { x: 38.02, y: 12.01 },
                ),
                PathEl::LineTo(Point { x: 42.00, y: 16.00 }),
                PathEl::LineTo(Point { x: 38.98, y: 20.00 }),
                PathEl::LineTo(Point { x: 35.70, y: 20.00 }),
                PathEl::CurveTo(
                    Point { x: 35.26, y: 21.25 },
                    Point { x: 35.00, y: 22.60 },
                    Point { x: 35.00, y: 24.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 35.00, y: 25.40 },
                    Point { x: 35.25, y: 26.75 },
                    Point { x: 35.70, y: 28.00 },
                ),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct Launch {
    size: f64,
    color: Color,
}

impl Launch {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for Launch {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 38.00, y: 38.00 }),
                PathEl::LineTo(Point { x: 10.00, y: 38.00 }),
                PathEl::LineTo(Point { x: 10.00, y: 10.00 }),
                PathEl::LineTo(Point { x: 24.00, y: 10.00 }),
                PathEl::LineTo(Point { x: 24.00, y: 6.00 }),
                PathEl::LineTo(Point { x: 10.00, y: 6.00 }),
                PathEl::CurveTo(
                    Point { x: 7.79, y: 6.00 },
                    Point { x: 6.00, y: 7.79 },
                    Point { x: 6.00, y: 10.00 },
                ),
                PathEl::LineTo(Point { x: 6.00, y: 38.00 }),
                PathEl::CurveTo(
                    Point { x: 6.00, y: 40.21 },
                    Point { x: 7.79, y: 42.00 },
                    Point { x: 10.00, y: 42.00 },
                ),
                PathEl::LineTo(Point { x: 38.00, y: 42.00 }),
                PathEl::CurveTo(
                    Point { x: 40.21, y: 42.00 },
                    Point { x: 42.00, y: 40.21 },
                    Point { x: 42.00, y: 38.00 },
                ),
                PathEl::LineTo(Point { x: 42.00, y: 24.00 }),
                PathEl::LineTo(Point { x: 38.00, y: 24.00 }),
                PathEl::LineTo(Point { x: 38.00, y: 38.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 28.00, y: 6.00 }),
                PathEl::LineTo(Point { x: 28.00, y: 10.00 }),
                PathEl::LineTo(Point { x: 35.17, y: 10.00 }),
                PathEl::LineTo(Point { x: 15.51, y: 29.66 }),
                PathEl::LineTo(Point { x: 18.34, y: 32.49 }),
                PathEl::LineTo(Point { x: 38.00, y: 12.83 }),
                PathEl::LineTo(Point { x: 38.00, y: 20.00 }),
                PathEl::LineTo(Point { x: 42.00, y: 20.00 }),
                PathEl::LineTo(Point { x: 42.00, y: 6.00 }),
                PathEl::LineTo(Point { x: 28.00, y: 6.00 }),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct NetworkLocked {
    size: f64,
    color: Color,
}

impl NetworkLocked {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for NetworkLocked {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 39.00, y: 20.00 }),
                PathEl::CurveTo(
                    Point { x: 39.34, y: 20.00 },
                    Point { x: 39.67, y: 20.06 },
                    Point { x: 40.00, y: 20.10 },
                ),
                PathEl::LineTo(Point { x: 40.00, y: 2.00 }),
                PathEl::LineTo(Point { x: 2.00, y: 40.00 }),
                PathEl::LineTo(Point { x: 28.00, y: 40.00 }),
                PathEl::LineTo(Point { x: 28.00, y: 34.00 }),
                PathEl::CurveTo(
                    Point { x: 28.00, y: 32.23 },
                    Point { x: 28.77, y: 30.63 },
                    Point { x: 30.00, y: 29.53 },
                ),
                PathEl::LineTo(Point { x: 30.00, y: 29.00 }),
                PathEl::CurveTo(
                    Point { x: 30.00, y: 24.04 },
                    Point { x: 34.04, y: 20.00 },
                    Point { x: 39.00, y: 20.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 44.00, y: 32.00 }),
                PathEl::LineTo(Point { x: 44.00, y: 29.00 }),
                PathEl::CurveTo(
                    Point { x: 44.00, y: 26.24 },
                    Point { x: 41.76, y: 24.00 },
                    Point { x: 39.00, y: 24.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 36.24, y: 24.00 },
                    Point { x: 34.00, y: 26.24 },
                    Point { x: 34.00, y: 29.00 },
                ),
                PathEl::LineTo(Point { x: 34.00, y: 32.00 }),
                PathEl::CurveTo(
                    Point { x: 32.90, y: 32.00 },
                    Point { x: 32.00, y: 32.90 },
                    Point { x: 32.00, y: 34.00 },
                ),
                PathEl::LineTo(Point { x: 32.00, y: 42.00 }),
                PathEl::CurveTo(
                    Point { x: 32.00, y: 43.10 },
                    Point { x: 32.90, y: 44.00 },
                    Point { x: 34.00, y: 44.00 },
                ),
                PathEl::LineTo(Point { x: 44.00, y: 44.00 }),
                PathEl::CurveTo(
                    Point { x: 45.10, y: 44.00 },
                    Point { x: 46.00, y: 43.10 },
                    Point { x: 46.00, y: 42.00 },
                ),
                PathEl::LineTo(Point { x: 46.00, y: 34.00 }),
                PathEl::CurveTo(
                    Point { x: 46.00, y: 32.90 },
                    Point { x: 45.10, y: 32.00 },
                    Point { x: 44.00, y: 32.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 42.00, y: 32.00 }),
                PathEl::LineTo(Point { x: 36.00, y: 32.00 }),
                PathEl::LineTo(Point { x: 36.00, y: 29.00 }),
                PathEl::CurveTo(
                    Point { x: 36.00, y: 27.34 },
                    Point { x: 37.34, y: 26.00 },
                    Point { x: 39.00, y: 26.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 40.66, y: 26.00 },
                    Point { x: 42.00, y: 27.34 },
                    Point { x: 42.00, y: 29.00 },
                ),
                PathEl::LineTo(Point { x: 42.00, y: 32.00 }),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct BrightnessMedium {
    size: f64,
    color: Color,
}

impl BrightnessMedium {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for BrightnessMedium {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 40.00, y: 30.63 }),
                PathEl::LineTo(Point { x: 46.63, y: 24.00 }),
                PathEl::LineTo(Point { x: 40.00, y: 17.37 }),
                PathEl::LineTo(Point { x: 40.00, y: 8.00 }),
                PathEl::LineTo(Point { x: 30.63, y: 8.00 }),
                PathEl::LineTo(Point { x: 24.00, y: 1.37 }),
                PathEl::LineTo(Point { x: 17.37, y: 8.00 }),
                PathEl::LineTo(Point { x: 8.00, y: 8.00 }),
                PathEl::LineTo(Point { x: 8.00, y: 17.37 }),
                PathEl::LineTo(Point { x: 1.37, y: 24.00 }),
                PathEl::LineTo(Point { x: 8.00, y: 30.63 }),
                PathEl::LineTo(Point { x: 8.00, y: 40.00 }),
                PathEl::LineTo(Point { x: 17.37, y: 40.00 }),
                PathEl::LineTo(Point { x: 24.00, y: 46.63 }),
                PathEl::LineTo(Point { x: 30.63, y: 40.00 }),
                PathEl::LineTo(Point { x: 40.00, y: 40.00 }),
                PathEl::LineTo(Point { x: 40.00, y: 30.63 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 24.00, y: 36.00 }),
                PathEl::LineTo(Point { x: 24.00, y: 12.00 }),
                PathEl::CurveTo(
                    Point { x: 30.63, y: 12.00 },
                    Point { x: 36.00, y: 17.37 },
                    Point { x: 36.00, y: 24.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 36.00, y: 30.63 },
                    Point { x: 30.63, y: 36.00 },
                    Point { x: 24.00, y: 36.00 },
                ),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct AlarmAdd {
    size: f64,
    color: Color,
}

impl AlarmAdd {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for AlarmAdd {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 15.76, y: 6.78 }),
                PathEl::LineTo(Point { x: 13.19, y: 3.72 }),
                PathEl::LineTo(Point { x: 4.00, y: 11.43 }),
                PathEl::LineTo(Point { x: 6.57, y: 14.49 }),
                PathEl::LineTo(Point { x: 15.76, y: 6.78 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 44.00, y: 11.44 }),
                PathEl::LineTo(Point { x: 34.81, y: 3.73 }),
                PathEl::LineTo(Point { x: 32.24, y: 6.79 }),
                PathEl::LineTo(Point { x: 41.43, y: 14.50 }),
                PathEl::LineTo(Point { x: 44.00, y: 11.44 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 23.99, y: 8.00 }),
                PathEl::CurveTo(
                    Point { x: 14.04, y: 8.00 },
                    Point { x: 6.00, y: 16.06 },
                    Point { x: 6.00, y: 26.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 6.00, y: 35.94 },
                    Point { x: 14.04, y: 44.00 },
                    Point { x: 23.99, y: 44.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 33.94, y: 44.00 },
                    Point { x: 42.00, y: 35.94 },
                    Point { x: 42.00, y: 26.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 42.00, y: 16.06 },
                    Point { x: 33.94, y: 8.00 },
                    Point { x: 23.99, y: 8.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 24.00, y: 40.00 }),
                PathEl::CurveTo(
                    Point { x: 16.27, y: 40.00 },
                    Point { x: 10.00, y: 33.73 },
                    Point { x: 10.00, y: 26.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 10.00, y: 18.27 },
                    Point { x: 16.27, y: 12.00 },
                    Point { x: 24.00, y: 12.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 31.73, y: 12.00 },
                    Point { x: 38.00, y: 18.27 },
                    Point { x: 38.00, y: 26.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 38.00, y: 33.73 },
                    Point { x: 31.74, y: 40.00 },
                    Point { x: 24.00, y: 40.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 26.00, y: 18.00 }),
                PathEl::LineTo(Point { x: 22.00, y: 18.00 }),
                PathEl::LineTo(Point { x: 22.00, y: 24.00 }),
                PathEl::LineTo(Point { x: 16.00, y: 24.00 }),
                PathEl::LineTo(Point { x: 16.00, y: 28.00 }),
                PathEl::LineTo(Point { x: 22.00, y: 28.00 }),
                PathEl::LineTo(Point { x: 22.00, y: 34.00 }),
                PathEl::LineTo(Point { x: 26.00, y: 34.00 }),
                PathEl::LineTo(Point { x: 26.00, y: 28.00 }),
                PathEl::LineTo(Point { x: 32.00, y: 28.00 }),
                PathEl::LineTo(Point { x: 32.00, y: 24.00 }),
                PathEl::LineTo(Point { x: 26.00, y: 24.00 }),
                PathEl::LineTo(Point { x: 26.00, y: 18.00 }),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct FormatPaint {
    size: f64,
    color: Color,
}

impl FormatPaint {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for FormatPaint {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 36.00, y: 8.00 }),
                PathEl::LineTo(Point { x: 36.00, y: 6.00 }),
                PathEl::CurveTo(
                    Point { x: 36.00, y: 4.90 },
                    Point { x: 35.10, y: 4.00 },
                    Point { x: 34.00, y: 4.00 },
                ),
                PathEl::LineTo(Point { x: 10.00, y: 4.00 }),
                PathEl::CurveTo(
                    Point { x: 8.90, y: 4.00 },
                    Point { x: 8.00, y: 4.90 },
                    Point { x: 8.00, y: 6.00 },
                ),
                PathEl::LineTo(Point { x: 8.00, y: 14.00 }),
                PathEl::CurveTo(
                    Point { x: 8.00, y: 15.10 },
                    Point { x: 8.90, y: 16.00 },
                    Point { x: 10.00, y: 16.00 },
                ),
                PathEl::LineTo(Point { x: 34.00, y: 16.00 }),
                PathEl::CurveTo(
                    Point { x: 35.10, y: 16.00 },
                    Point { x: 36.00, y: 15.10 },
                    Point { x: 36.00, y: 14.00 },
                ),
                PathEl::LineTo(Point { x: 36.00, y: 12.00 }),
                PathEl::LineTo(Point { x: 38.00, y: 12.00 }),
                PathEl::LineTo(Point { x: 38.00, y: 20.00 }),
                PathEl::LineTo(Point { x: 18.00, y: 20.00 }),
                PathEl::LineTo(Point { x: 18.00, y: 42.00 }),
                PathEl::CurveTo(
                    Point { x: 18.00, y: 43.10 },
                    Point { x: 18.90, y: 44.00 },
                    Point { x: 20.00, y: 44.00 },
                ),
                PathEl::LineTo(Point { x: 24.00, y: 44.00 }),
                PathEl::CurveTo(
                    Point { x: 25.10, y: 44.00 },
                    Point { x: 26.00, y: 43.10 },
                    Point { x: 26.00, y: 42.00 },
                ),
                PathEl::LineTo(Point { x: 26.00, y: 24.00 }),
                PathEl::LineTo(Point { x: 42.00, y: 24.00 }),
                PathEl::LineTo(Point { x: 42.00, y: 8.00 }),
                PathEl::LineTo(Point { x: 36.00, y: 8.00 }),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct ViewDay {
    size: f64,
    color: Color,
}

impl ViewDay {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for ViewDay {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 4.00, y: 42.00 }),
                PathEl::LineTo(Point { x: 42.00, y: 42.00 }),
                PathEl::LineTo(Point { x: 42.00, y: 36.00 }),
                PathEl::LineTo(Point { x: 4.00, y: 36.00 }),
                PathEl::LineTo(Point { x: 4.00, y: 42.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 40.00, y: 16.00 }),
                PathEl::LineTo(Point { x: 6.00, y: 16.00 }),
                PathEl::CurveTo(
                    Point { x: 4.90, y: 16.00 },
                    Point { x: 4.00, y: 16.90 },
                    Point { x: 4.00, y: 18.00 },
                ),
                PathEl::LineTo(Point { x: 4.00, y: 30.00 }),
                PathEl::CurveTo(
                    Point { x: 4.00, y: 31.10 },
                    Point { x: 4.90, y: 32.00 },
                    Point { x: 6.00, y: 32.00 },
                ),
                PathEl::LineTo(Point { x: 40.00, y: 32.00 }),
                PathEl::CurveTo(
                    Point { x: 41.10, y: 32.00 },
                    Point { x: 42.00, y: 31.10 },
                    Point { x: 42.00, y: 30.00 },
                ),
                PathEl::LineTo(Point { x: 42.00, y: 18.00 }),
                PathEl::CurveTo(
                    Point { x: 42.00, y: 16.90 },
                    Point { x: 41.10, y: 16.00 },
                    Point { x: 40.00, y: 16.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 4.00, y: 6.00 }),
                PathEl::LineTo(Point { x: 4.00, y: 12.00 }),
                PathEl::LineTo(Point { x: 42.00, y: 12.00 }),
                PathEl::LineTo(Point { x: 42.00, y: 6.00 }),
                PathEl::LineTo(Point { x: 4.00, y: 6.00 }),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct SettingsInputComposite {
    size: f64,
    color: Color,
}

impl SettingsInputComposite {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for SettingsInputComposite {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 10.00, y: 4.00 }),
                PathEl::CurveTo(
                    Point { x: 10.00, y: 2.90 },
                    Point { x: 9.11, y: 2.00 },
                    Point { x: 8.00, y: 2.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 6.89, y: 2.00 },
                    Point { x: 6.00, y: 2.90 },
                    Point { x: 6.00, y: 4.00 },
                ),
                PathEl::LineTo(Point { x: 6.00, y: 12.00 }),
                PathEl::LineTo(Point { x: 2.00, y: 12.00 }),
                PathEl::LineTo(Point { x: 2.00, y: 24.00 }),
                PathEl::LineTo(Point { x: 14.00, y: 24.00 }),
                PathEl::LineTo(Point { x: 14.00, y: 12.00 }),
                PathEl::LineTo(Point { x: 10.00, y: 12.00 }),
                PathEl::LineTo(Point { x: 10.00, y: 4.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 18.00, y: 32.00 }),
                PathEl::CurveTo(
                    Point { x: 18.00, y: 34.61 },
                    Point { x: 19.68, y: 36.81 },
                    Point { x: 22.00, y: 37.63 },
                ),
                PathEl::LineTo(Point { x: 22.00, y: 46.00 }),
                PathEl::LineTo(Point { x: 26.00, y: 46.00 }),
                PathEl::LineTo(Point { x: 26.00, y: 37.63 }),
                PathEl::CurveTo(
                    Point { x: 28.32, y: 36.80 },
                    Point { x: 30.00, y: 34.61 },
                    Point { x: 30.00, y: 32.00 },
                ),
                PathEl::LineTo(Point { x: 30.00, y: 28.00 }),
                PathEl::LineTo(Point { x: 18.00, y: 28.00 }),
                PathEl::LineTo(Point { x: 18.00, y: 32.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 2.00, y: 32.00 }),
                PathEl::CurveTo(
                    Point { x: 2.00, y: 34.61 },
                    Point { x: 3.68, y: 36.81 },
                    Point { x: 6.00, y: 37.63 },
                ),
                PathEl::LineTo(Point { x: 6.00, y: 46.00 }),
                PathEl::LineTo(Point { x: 10.00, y: 46.00 }),
                PathEl::LineTo(Point { x: 10.00, y: 37.63 }),
                PathEl::CurveTo(
                    Point { x: 12.32, y: 36.80 },
                    Point { x: 14.00, y: 34.61 },
                    Point { x: 14.00, y: 32.00 },
                ),
                PathEl::LineTo(Point { x: 14.00, y: 28.00 }),
                PathEl::LineTo(Point { x: 2.00, y: 28.00 }),
                PathEl::LineTo(Point { x: 2.00, y: 32.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 42.00, y: 12.00 }),
                PathEl::LineTo(Point { x: 42.00, y: 4.00 }),
                PathEl::CurveTo(
                    Point { x: 42.00, y: 2.90 },
                    Point { x: 41.11, y: 2.00 },
                    Point { x: 40.00, y: 2.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 38.89, y: 2.00 },
                    Point { x: 38.00, y: 2.90 },
                    Point { x: 38.00, y: 4.00 },
                ),
                PathEl::LineTo(Point { x: 38.00, y: 12.00 }),
                PathEl::LineTo(Point { x: 34.00, y: 12.00 }),
                PathEl::LineTo(Point { x: 34.00, y: 24.00 }),
                PathEl::LineTo(Point { x: 46.00, y: 24.00 }),
                PathEl::LineTo(Point { x: 46.00, y: 12.00 }),
                PathEl::LineTo(Point { x: 42.00, y: 12.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 26.00, y: 4.00 }),
                PathEl::CurveTo(
                    Point { x: 26.00, y: 2.90 },
                    Point { x: 25.11, y: 2.00 },
                    Point { x: 24.00, y: 2.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 22.89, y: 2.00 },
                    Point { x: 22.00, y: 2.90 },
                    Point { x: 22.00, y: 4.00 },
                ),
                PathEl::LineTo(Point { x: 22.00, y: 12.00 }),
                PathEl::LineTo(Point { x: 18.00, y: 12.00 }),
                PathEl::LineTo(Point { x: 18.00, y: 24.00 }),
                PathEl::LineTo(Point { x: 30.00, y: 24.00 }),
                PathEl::LineTo(Point { x: 30.00, y: 12.00 }),
                PathEl::LineTo(Point { x: 26.00, y: 12.00 }),
                PathEl::LineTo(Point { x: 26.00, y: 4.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 34.00, y: 32.00 }),
                PathEl::CurveTo(
                    Point { x: 34.00, y: 34.61 },
                    Point { x: 35.68, y: 36.81 },
                    Point { x: 38.00, y: 37.63 },
                ),
                PathEl::LineTo(Point { x: 38.00, y: 46.00 }),
                PathEl::LineTo(Point { x: 42.00, y: 46.00 }),
                PathEl::LineTo(Point { x: 42.00, y: 37.63 }),
                PathEl::CurveTo(
                    Point { x: 44.32, y: 36.80 },
                    Point { x: 46.00, y: 34.61 },
                    Point { x: 46.00, y: 32.00 },
                ),
                PathEl::LineTo(Point { x: 46.00, y: 28.00 }),
                PathEl::LineTo(Point { x: 34.00, y: 28.00 }),
                PathEl::LineTo(Point { x: 34.00, y: 32.00 }),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct FlashAuto {
    size: f64,
    color: Color,
}

impl FlashAuto {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for FlashAuto {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 6.00, y: 4.00 }),
                PathEl::LineTo(Point { x: 6.00, y: 28.00 }),
                PathEl::LineTo(Point { x: 12.00, y: 28.00 }),
                PathEl::LineTo(Point { x: 12.00, y: 46.00 }),
                PathEl::LineTo(Point { x: 26.00, y: 22.00 }),
                PathEl::LineTo(Point { x: 18.00, y: 22.00 }),
                PathEl::LineTo(Point { x: 26.00, y: 4.00 }),
                PathEl::LineTo(Point { x: 6.00, y: 4.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 38.00, y: 4.00 }),
                PathEl::LineTo(Point { x: 34.00, y: 4.00 }),
                PathEl::LineTo(Point { x: 27.60, y: 22.00 }),
                PathEl::LineTo(Point { x: 31.40, y: 22.00 }),
                PathEl::LineTo(Point { x: 32.80, y: 18.00 }),
                PathEl::LineTo(Point { x: 39.20, y: 18.00 }),
                PathEl::LineTo(Point { x: 40.60, y: 22.00 }),
                PathEl::LineTo(Point { x: 44.40, y: 22.00 }),
                PathEl::LineTo(Point { x: 38.00, y: 4.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 33.70, y: 15.30 }),
                PathEl::LineTo(Point { x: 36.00, y: 8.00 }),
                PathEl::LineTo(Point { x: 38.30, y: 15.30 }),
                PathEl::LineTo(Point { x: 33.70, y: 15.30 }),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct Traffic {
    size: f64,
    color: Color,
}

impl Traffic {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for Traffic {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 40.00, y: 20.00 }),
                PathEl::LineTo(Point { x: 34.00, y: 20.00 }),
                PathEl::LineTo(Point { x: 34.00, y: 17.72 }),
                PathEl::CurveTo(
                    Point { x: 37.45, y: 16.83 },
                    Point { x: 40.00, y: 13.73 },
                    Point { x: 40.00, y: 10.00 },
                ),
                PathEl::LineTo(Point { x: 34.00, y: 10.00 }),
                PathEl::LineTo(Point { x: 34.00, y: 8.00 }),
                PathEl::CurveTo(
                    Point { x: 34.00, y: 6.90 },
                    Point { x: 33.11, y: 6.00 },
                    Point { x: 32.00, y: 6.00 },
                ),
                PathEl::LineTo(Point { x: 16.00, y: 6.00 }),
                PathEl::CurveTo(
                    Point { x: 14.90, y: 6.00 },
                    Point { x: 14.00, y: 6.90 },
                    Point { x: 14.00, y: 8.00 },
                ),
                PathEl::LineTo(Point { x: 14.00, y: 10.00 }),
                PathEl::LineTo(Point { x: 8.00, y: 10.00 }),
                PathEl::CurveTo(
                    Point { x: 8.00, y: 13.72 },
                    Point { x: 10.56, y: 16.83 },
                    Point { x: 14.00, y: 17.72 },
                ),
                PathEl::LineTo(Point { x: 14.00, y: 20.00 }),
                PathEl::LineTo(Point { x: 8.00, y: 20.00 }),
                PathEl::CurveTo(
                    Point { x: 8.00, y: 23.72 },
                    Point { x: 10.56, y: 26.83 },
                    Point { x: 14.00, y: 27.72 },
                ),
                PathEl::LineTo(Point { x: 14.00, y: 30.00 }),
                PathEl::LineTo(Point { x: 8.00, y: 30.00 }),
                PathEl::CurveTo(
                    Point { x: 8.00, y: 33.72 },
                    Point { x: 10.56, y: 36.83 },
                    Point { x: 14.00, y: 37.72 },
                ),
                PathEl::LineTo(Point { x: 14.00, y: 40.00 }),
                PathEl::CurveTo(
                    Point { x: 14.00, y: 41.10 },
                    Point { x: 14.90, y: 42.00 },
                    Point { x: 16.00, y: 42.00 },
                ),
                PathEl::LineTo(Point { x: 32.00, y: 42.00 }),
                PathEl::CurveTo(
                    Point { x: 33.11, y: 42.00 },
                    Point { x: 34.00, y: 41.10 },
                    Point { x: 34.00, y: 40.00 },
                ),
                PathEl::LineTo(Point { x: 34.00, y: 37.72 }),
                PathEl::CurveTo(
                    Point { x: 37.45, y: 36.83 },
                    Point { x: 40.00, y: 33.73 },
                    Point { x: 40.00, y: 30.00 },
                ),
                PathEl::LineTo(Point { x: 34.00, y: 30.00 }),
                PathEl::LineTo(Point { x: 34.00, y: 27.72 }),
                PathEl::CurveTo(
                    Point { x: 37.45, y: 26.83 },
                    Point { x: 40.00, y: 23.72 },
                    Point { x: 40.00, y: 20.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 24.00, y: 38.00 }),
                PathEl::CurveTo(
                    Point { x: 21.79, y: 38.00 },
                    Point { x: 20.00, y: 36.21 },
                    Point { x: 20.00, y: 34.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 20.00, y: 31.79 },
                    Point { x: 21.79, y: 30.00 },
                    Point { x: 24.00, y: 30.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 26.21, y: 30.00 },
                    Point { x: 28.00, y: 31.79 },
                    Point { x: 28.00, y: 34.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 28.00, y: 36.21 },
                    Point { x: 26.21, y: 38.00 },
                    Point { x: 24.00, y: 38.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 24.00, y: 28.00 }),
                PathEl::CurveTo(
                    Point { x: 21.79, y: 28.00 },
                    Point { x: 20.00, y: 26.21 },
                    Point { x: 20.00, y: 24.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 20.00, y: 21.79 },
                    Point { x: 21.79, y: 20.00 },
                    Point { x: 24.00, y: 20.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 26.21, y: 20.00 },
                    Point { x: 28.00, y: 21.79 },
                    Point { x: 28.00, y: 24.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 28.00, y: 26.21 },
                    Point { x: 26.21, y: 28.00 },
                    Point { x: 24.00, y: 28.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 24.00, y: 18.00 }),
                PathEl::CurveTo(
                    Point { x: 21.79, y: 18.00 },
                    Point { x: 20.00, y: 16.21 },
                    Point { x: 20.00, y: 14.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 20.00, y: 11.79 },
                    Point { x: 21.79, y: 10.00 },
                    Point { x: 24.00, y: 10.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 26.21, y: 10.00 },
                    Point { x: 28.00, y: 11.79 },
                    Point { x: 28.00, y: 14.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 28.00, y: 16.21 },
                    Point { x: 26.21, y: 18.00 },
                    Point { x: 24.00, y: 18.00 },
                ),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct Storage {
    size: f64,
    color: Color,
}

impl Storage {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for Storage {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 4.00, y: 40.00 }),
                PathEl::LineTo(Point { x: 44.00, y: 40.00 }),
                PathEl::LineTo(Point { x: 44.00, y: 32.00 }),
                PathEl::LineTo(Point { x: 4.00, y: 32.00 }),
                PathEl::LineTo(Point { x: 4.00, y: 40.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 8.00, y: 34.00 }),
                PathEl::LineTo(Point { x: 12.00, y: 34.00 }),
                PathEl::LineTo(Point { x: 12.00, y: 38.00 }),
                PathEl::LineTo(Point { x: 8.00, y: 38.00 }),
                PathEl::LineTo(Point { x: 8.00, y: 34.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 4.00, y: 8.00 }),
                PathEl::LineTo(Point { x: 4.00, y: 16.00 }),
                PathEl::LineTo(Point { x: 44.00, y: 16.00 }),
                PathEl::LineTo(Point { x: 44.00, y: 8.00 }),
                PathEl::LineTo(Point { x: 4.00, y: 8.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 12.00, y: 14.00 }),
                PathEl::LineTo(Point { x: 8.00, y: 14.00 }),
                PathEl::LineTo(Point { x: 8.00, y: 10.00 }),
                PathEl::LineTo(Point { x: 12.00, y: 10.00 }),
                PathEl::LineTo(Point { x: 12.00, y: 14.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 4.00, y: 28.00 }),
                PathEl::LineTo(Point { x: 44.00, y: 28.00 }),
                PathEl::LineTo(Point { x: 44.00, y: 20.00 }),
                PathEl::LineTo(Point { x: 4.00, y: 20.00 }),
                PathEl::LineTo(Point { x: 4.00, y: 28.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 8.00, y: 22.00 }),
                PathEl::LineTo(Point { x: 12.00, y: 22.00 }),
                PathEl::LineTo(Point { x: 12.00, y: 26.00 }),
                PathEl::LineTo(Point { x: 8.00, y: 26.00 }),
                PathEl::LineTo(Point { x: 8.00, y: 22.00 }),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct LaptopMac {
    size: f64,
    color: Color,
}

impl LaptopMac {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for LaptopMac {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 40.00, y: 36.00 }),
                PathEl::CurveTo(
                    Point { x: 42.21, y: 36.00 },
                    Point { x: 43.98, y: 34.21 },
                    Point { x: 43.98, y: 32.00 },
                ),
                PathEl::LineTo(Point { x: 44.00, y: 10.00 }),
                PathEl::CurveTo(
                    Point { x: 44.00, y: 7.79 },
                    Point { x: 42.21, y: 6.00 },
                    Point { x: 40.00, y: 6.00 },
                ),
                PathEl::LineTo(Point { x: 8.00, y: 6.00 }),
                PathEl::CurveTo(
                    Point { x: 5.79, y: 6.00 },
                    Point { x: 4.00, y: 7.79 },
                    Point { x: 4.00, y: 10.00 },
                ),
                PathEl::LineTo(Point { x: 4.00, y: 32.00 }),
                PathEl::CurveTo(
                    Point { x: 4.00, y: 34.21 },
                    Point { x: 5.79, y: 36.00 },
                    Point { x: 8.00, y: 36.00 },
                ),
                PathEl::LineTo(Point { x: 0.00, y: 36.00 }),
                PathEl::CurveTo(
                    Point { x: 0.00, y: 38.21 },
                    Point { x: 1.79, y: 40.00 },
                    Point { x: 4.00, y: 40.00 },
                ),
                PathEl::LineTo(Point { x: 44.00, y: 40.00 }),
                PathEl::CurveTo(
                    Point { x: 46.21, y: 40.00 },
                    Point { x: 48.00, y: 38.21 },
                    Point { x: 48.00, y: 36.00 },
                ),
                PathEl::LineTo(Point { x: 40.00, y: 36.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 8.00, y: 10.00 }),
                PathEl::LineTo(Point { x: 40.00, y: 10.00 }),
                PathEl::LineTo(Point { x: 40.00, y: 32.00 }),
                PathEl::LineTo(Point { x: 8.00, y: 32.00 }),
                PathEl::LineTo(Point { x: 8.00, y: 10.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 24.00, y: 38.00 }),
                PathEl::CurveTo(
                    Point { x: 22.90, y: 38.00 },
                    Point { x: 22.00, y: 37.10 },
                    Point { x: 22.00, y: 36.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 22.00, y: 34.90 },
                    Point { x: 22.90, y: 34.00 },
                    Point { x: 24.00, y: 34.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 25.10, y: 34.00 },
                    Point { x: 26.00, y: 34.90 },
                    Point { x: 26.00, y: 36.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 26.00, y: 37.10 },
                    Point { x: 25.10, y: 38.00 },
                    Point { x: 24.00, y: 38.00 },
                ),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct Exposure {
    size: f64,
    color: Color,
}

impl Exposure {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for Exposure {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 30.00, y: 34.00 }),
                PathEl::LineTo(Point { x: 30.00, y: 38.00 }),
                PathEl::LineTo(Point { x: 34.00, y: 38.00 }),
                PathEl::LineTo(Point { x: 34.00, y: 34.00 }),
                PathEl::LineTo(Point { x: 38.00, y: 34.00 }),
                PathEl::LineTo(Point { x: 38.00, y: 30.00 }),
                PathEl::LineTo(Point { x: 34.00, y: 30.00 }),
                PathEl::LineTo(Point { x: 34.00, y: 26.00 }),
                PathEl::LineTo(Point { x: 30.00, y: 26.00 }),
                PathEl::LineTo(Point { x: 30.00, y: 30.00 }),
                PathEl::LineTo(Point { x: 26.00, y: 30.00 }),
                PathEl::LineTo(Point { x: 26.00, y: 34.00 }),
                PathEl::LineTo(Point { x: 30.00, y: 34.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 40.00, y: 4.00 }),
                PathEl::LineTo(Point { x: 8.00, y: 4.00 }),
                PathEl::CurveTo(
                    Point { x: 5.79, y: 4.00 },
                    Point { x: 4.00, y: 5.79 },
                    Point { x: 4.00, y: 8.00 },
                ),
                PathEl::LineTo(Point { x: 4.00, y: 40.00 }),
                PathEl::CurveTo(
                    Point { x: 4.00, y: 42.21 },
                    Point { x: 5.79, y: 44.00 },
                    Point { x: 8.00, y: 44.00 },
                ),
                PathEl::LineTo(Point { x: 40.00, y: 44.00 }),
                PathEl::CurveTo(
                    Point { x: 42.21, y: 44.00 },
                    Point { x: 44.00, y: 42.21 },
                    Point { x: 44.00, y: 40.00 },
                ),
                PathEl::LineTo(Point { x: 44.00, y: 8.00 }),
                PathEl::CurveTo(
                    Point { x: 44.00, y: 5.79 },
                    Point { x: 42.21, y: 4.00 },
                    Point { x: 40.00, y: 4.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 10.00, y: 10.00 }),
                PathEl::LineTo(Point { x: 22.00, y: 10.00 }),
                PathEl::LineTo(Point { x: 22.00, y: 14.00 }),
                PathEl::LineTo(Point { x: 10.00, y: 14.00 }),
                PathEl::LineTo(Point { x: 10.00, y: 10.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 40.00, y: 40.00 }),
                PathEl::LineTo(Point { x: 8.00, y: 40.00 }),
                PathEl::LineTo(Point { x: 40.00, y: 8.00 }),
                PathEl::LineTo(Point { x: 40.00, y: 40.00 }),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct GolfCourse {
    size: f64,
    color: Color,
}

impl GolfCourse {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for GolfCourse {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 39.00, y: 36.00 }),
                PathEl::CurveTo(
                    Point { x: 37.34, y: 36.00 },
                    Point { x: 36.00, y: 37.34 },
                    Point { x: 36.00, y: 39.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 36.00, y: 40.66 },
                    Point { x: 37.34, y: 42.00 },
                    Point { x: 39.00, y: 42.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 40.66, y: 42.00 },
                    Point { x: 42.00, y: 40.66 },
                    Point { x: 42.00, y: 39.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 42.00, y: 37.34 },
                    Point { x: 40.66, y: 36.00 },
                    Point { x: 39.00, y: 36.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 34.00, y: 11.85 }),
                PathEl::LineTo(Point { x: 18.00, y: 4.00 }),
                PathEl::LineTo(Point { x: 18.00, y: 40.00 }),
                PathEl::LineTo(Point { x: 14.00, y: 40.00 }),
                PathEl::LineTo(Point { x: 14.00, y: 36.54 }),
                PathEl::CurveTo(
                    Point { x: 10.42, y: 37.23 },
                    Point { x: 8.00, y: 38.52 },
                    Point { x: 8.00, y: 40.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 8.00, y: 42.21 },
                    Point { x: 13.37, y: 44.00 },
                    Point { x: 20.00, y: 44.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 26.63, y: 44.00 },
                    Point { x: 32.00, y: 42.21 },
                    Point { x: 32.00, y: 40.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 32.00, y: 38.02 },
                    Point { x: 27.67, y: 36.38 },
                    Point { x: 22.00, y: 36.06 },
                ),
                PathEl::LineTo(Point { x: 22.00, y: 17.96 }),
                PathEl::LineTo(Point { x: 34.00, y: 11.85 }),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct GridOff {
    size: f64,
    color: Color,
}

impl GridOff {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for GridOff {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 16.00, y: 8.00 }),
                PathEl::LineTo(Point { x: 16.00, y: 10.91 }),
                PathEl::LineTo(Point { x: 20.00, y: 14.91 }),
                PathEl::LineTo(Point { x: 20.00, y: 8.00 }),
                PathEl::LineTo(Point { x: 28.00, y: 8.00 }),
                PathEl::LineTo(Point { x: 28.00, y: 16.00 }),
                PathEl::LineTo(Point { x: 21.09, y: 16.00 }),
                PathEl::LineTo(Point { x: 25.09, y: 20.00 }),
                PathEl::LineTo(Point { x: 28.00, y: 20.00 }),
                PathEl::LineTo(Point { x: 28.00, y: 22.91 }),
                PathEl::LineTo(Point { x: 32.00, y: 26.91 }),
                PathEl::LineTo(Point { x: 32.00, y: 20.00 }),
                PathEl::LineTo(Point { x: 40.00, y: 20.00 }),
                PathEl::LineTo(Point { x: 40.00, y: 28.00 }),
                PathEl::LineTo(Point { x: 33.09, y: 28.00 }),
                PathEl::LineTo(Point { x: 37.09, y: 32.00 }),
                PathEl::LineTo(Point { x: 40.00, y: 32.00 }),
                PathEl::LineTo(Point { x: 40.00, y: 34.91 }),
                PathEl::LineTo(Point { x: 44.00, y: 38.91 }),
                PathEl::LineTo(Point { x: 44.00, y: 8.00 }),
                PathEl::CurveTo(
                    Point { x: 44.00, y: 5.79 },
                    Point { x: 42.21, y: 4.00 },
                    Point { x: 40.00, y: 4.00 },
                ),
                PathEl::LineTo(Point { x: 9.09, y: 4.00 }),
                PathEl::LineTo(Point { x: 13.09, y: 8.00 }),
                PathEl::LineTo(Point { x: 16.00, y: 8.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 32.00, y: 8.00 }),
                PathEl::LineTo(Point { x: 40.00, y: 8.00 }),
                PathEl::LineTo(Point { x: 40.00, y: 16.00 }),
                PathEl::LineTo(Point { x: 32.00, y: 16.00 }),
                PathEl::LineTo(Point { x: 32.00, y: 8.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 2.55, y: 2.55 }),
                PathEl::LineTo(Point { x: 0.00, y: 5.09 }),
                PathEl::LineTo(Point { x: 4.00, y: 9.09 }),
                PathEl::LineTo(Point { x: 4.00, y: 40.00 }),
                PathEl::CurveTo(
                    Point { x: 4.00, y: 42.21 },
                    Point { x: 5.79, y: 44.00 },
                    Point { x: 8.00, y: 44.00 },
                ),
                PathEl::LineTo(Point { x: 38.91, y: 44.00 }),
                PathEl::LineTo(Point { x: 42.91, y: 48.00 }),
                PathEl::LineTo(Point { x: 45.45, y: 45.45 }),
                PathEl::LineTo(Point { x: 2.55, y: 2.55 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 20.00, y: 25.09 }),
                PathEl::LineTo(Point { x: 22.91, y: 28.00 }),
                PathEl::LineTo(Point { x: 20.00, y: 28.00 }),
                PathEl::LineTo(Point { x: 20.00, y: 25.09 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 8.00, y: 13.09 }),
                PathEl::LineTo(Point { x: 10.91, y: 16.00 }),
                PathEl::LineTo(Point { x: 8.00, y: 16.00 }),
                PathEl::LineTo(Point { x: 8.00, y: 13.09 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 16.00, y: 40.00 }),
                PathEl::LineTo(Point { x: 8.00, y: 40.00 }),
                PathEl::LineTo(Point { x: 8.00, y: 32.00 }),
                PathEl::LineTo(Point { x: 16.00, y: 32.00 }),
                PathEl::LineTo(Point { x: 16.00, y: 40.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 16.00, y: 28.00 }),
                PathEl::LineTo(Point { x: 8.00, y: 28.00 }),
                PathEl::LineTo(Point { x: 8.00, y: 20.00 }),
                PathEl::LineTo(Point { x: 14.91, y: 20.00 }),
                PathEl::LineTo(Point { x: 16.00, y: 21.09 }),
                PathEl::LineTo(Point { x: 16.00, y: 28.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 28.00, y: 40.00 }),
                PathEl::LineTo(Point { x: 20.00, y: 40.00 }),
                PathEl::LineTo(Point { x: 20.00, y: 32.00 }),
                PathEl::LineTo(Point { x: 26.91, y: 32.00 }),
                PathEl::LineTo(Point { x: 28.00, y: 33.09 }),
                PathEl::LineTo(Point { x: 28.00, y: 40.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 32.00, y: 40.00 }),
                PathEl::LineTo(Point { x: 32.00, y: 37.09 }),
                PathEl::LineTo(Point { x: 34.91, y: 40.00 }),
                PathEl::LineTo(Point { x: 32.00, y: 40.00 }),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct BorderBottom {
    size: f64,
    color: Color,
}

impl BorderBottom {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for BorderBottom {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 18.00, y: 22.00 }),
                PathEl::LineTo(Point { x: 14.00, y: 22.00 }),
                PathEl::LineTo(Point { x: 14.00, y: 26.00 }),
                PathEl::LineTo(Point { x: 18.00, y: 26.00 }),
                PathEl::LineTo(Point { x: 18.00, y: 22.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 26.00, y: 30.00 }),
                PathEl::LineTo(Point { x: 22.00, y: 30.00 }),
                PathEl::LineTo(Point { x: 22.00, y: 34.00 }),
                PathEl::LineTo(Point { x: 26.00, y: 34.00 }),
                PathEl::LineTo(Point { x: 26.00, y: 30.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 18.00, y: 6.00 }),
                PathEl::LineTo(Point { x: 14.00, y: 6.00 }),
                PathEl::LineTo(Point { x: 14.00, y: 10.00 }),
                PathEl::LineTo(Point { x: 18.00, y: 10.00 }),
                PathEl::LineTo(Point { x: 18.00, y: 6.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 26.00, y: 22.00 }),
                PathEl::LineTo(Point { x: 22.00, y: 22.00 }),
                PathEl::LineTo(Point { x: 22.00, y: 26.00 }),
                PathEl::LineTo(Point { x: 26.00, y: 26.00 }),
                PathEl::LineTo(Point { x: 26.00, y: 22.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 10.00, y: 6.00 }),
                PathEl::LineTo(Point { x: 6.00, y: 6.00 }),
                PathEl::LineTo(Point { x: 6.00, y: 10.00 }),
                PathEl::LineTo(Point { x: 10.00, y: 10.00 }),
                PathEl::LineTo(Point { x: 10.00, y: 6.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 26.00, y: 14.00 }),
                PathEl::LineTo(Point { x: 22.00, y: 14.00 }),
                PathEl::LineTo(Point { x: 22.00, y: 18.00 }),
                PathEl::LineTo(Point { x: 26.00, y: 18.00 }),
                PathEl::LineTo(Point { x: 26.00, y: 14.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 34.00, y: 22.00 }),
                PathEl::LineTo(Point { x: 30.00, y: 22.00 }),
                PathEl::LineTo(Point { x: 30.00, y: 26.00 }),
                PathEl::LineTo(Point { x: 34.00, y: 26.00 }),
                PathEl::LineTo(Point { x: 34.00, y: 22.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 26.00, y: 6.00 }),
                PathEl::LineTo(Point { x: 22.00, y: 6.00 }),
                PathEl::LineTo(Point { x: 22.00, y: 10.00 }),
                PathEl::LineTo(Point { x: 26.00, y: 10.00 }),
                PathEl::LineTo(Point { x: 26.00, y: 6.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 34.00, y: 6.00 }),
                PathEl::LineTo(Point { x: 30.00, y: 6.00 }),
                PathEl::LineTo(Point { x: 30.00, y: 10.00 }),
                PathEl::LineTo(Point { x: 34.00, y: 10.00 }),
                PathEl::LineTo(Point { x: 34.00, y: 6.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 38.00, y: 26.00 }),
                PathEl::LineTo(Point { x: 42.00, y: 26.00 }),
                PathEl::LineTo(Point { x: 42.00, y: 22.00 }),
                PathEl::LineTo(Point { x: 38.00, y: 22.00 }),
                PathEl::LineTo(Point { x: 38.00, y: 26.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 38.00, y: 34.00 }),
                PathEl::LineTo(Point { x: 42.00, y: 34.00 }),
                PathEl::LineTo(Point { x: 42.00, y: 30.00 }),
                PathEl::LineTo(Point { x: 38.00, y: 30.00 }),
                PathEl::LineTo(Point { x: 38.00, y: 34.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 10.00, y: 14.00 }),
                PathEl::LineTo(Point { x: 6.00, y: 14.00 }),
                PathEl::LineTo(Point { x: 6.00, y: 18.00 }),
                PathEl::LineTo(Point { x: 10.00, y: 18.00 }),
                PathEl::LineTo(Point { x: 10.00, y: 14.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 38.00, y: 6.00 }),
                PathEl::LineTo(Point { x: 38.00, y: 10.00 }),
                PathEl::LineTo(Point { x: 42.00, y: 10.00 }),
                PathEl::LineTo(Point { x: 42.00, y: 6.00 }),
                PathEl::LineTo(Point { x: 38.00, y: 6.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 38.00, y: 18.00 }),
                PathEl::LineTo(Point { x: 42.00, y: 18.00 }),
                PathEl::LineTo(Point { x: 42.00, y: 14.00 }),
                PathEl::LineTo(Point { x: 38.00, y: 14.00 }),
                PathEl::LineTo(Point { x: 38.00, y: 18.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 10.00, y: 22.00 }),
                PathEl::LineTo(Point { x: 6.00, y: 22.00 }),
                PathEl::LineTo(Point { x: 6.00, y: 26.00 }),
                PathEl::LineTo(Point { x: 10.00, y: 26.00 }),
                PathEl::LineTo(Point { x: 10.00, y: 22.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 6.00, y: 42.00 }),
                PathEl::LineTo(Point { x: 42.00, y: 42.00 }),
                PathEl::LineTo(Point { x: 42.00, y: 38.00 }),
                PathEl::LineTo(Point { x: 6.00, y: 38.00 }),
                PathEl::LineTo(Point { x: 6.00, y: 42.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 10.00, y: 30.00 }),
                PathEl::LineTo(Point { x: 6.00, y: 30.00 }),
                PathEl::LineTo(Point { x: 6.00, y: 34.00 }),
                PathEl::LineTo(Point { x: 10.00, y: 34.00 }),
                PathEl::LineTo(Point { x: 10.00, y: 30.00 }),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct Schedule {
    size: f64,
    color: Color,
}

impl Schedule {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for Schedule {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 23.99, y: 4.00 }),
                PathEl::CurveTo(
                    Point { x: 12.94, y: 4.00 },
                    Point { x: 4.00, y: 12.95 },
                    Point { x: 4.00, y: 24.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 4.00, y: 35.05 },
                    Point { x: 12.94, y: 44.00 },
                    Point { x: 23.99, y: 44.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 35.04, y: 44.00 },
                    Point { x: 44.00, y: 35.05 },
                    Point { x: 44.00, y: 24.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 44.00, y: 12.95 },
                    Point { x: 35.04, y: 4.00 },
                    Point { x: 23.99, y: 4.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 24.00, y: 40.00 }),
                PathEl::CurveTo(
                    Point { x: 15.16, y: 40.00 },
                    Point { x: 8.00, y: 32.84 },
                    Point { x: 8.00, y: 24.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 8.00, y: 15.16 },
                    Point { x: 15.16, y: 8.00 },
                    Point { x: 24.00, y: 8.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 32.84, y: 8.00 },
                    Point { x: 40.00, y: 15.16 },
                    Point { x: 40.00, y: 24.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 40.00, y: 32.84 },
                    Point { x: 32.84, y: 40.00 },
                    Point { x: 24.00, y: 40.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 25.00, y: 14.00 }),
                PathEl::LineTo(Point { x: 22.00, y: 14.00 }),
                PathEl::LineTo(Point { x: 22.00, y: 26.00 }),
                PathEl::LineTo(Point { x: 32.49, y: 32.30 }),
                PathEl::LineTo(Point { x: 34.00, y: 29.84 }),
                PathEl::LineTo(Point { x: 25.00, y: 24.50 }),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct Sort {
    size: f64,
    color: Color,
}

impl Sort {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for Sort {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 6.00, y: 36.00 }),
                PathEl::LineTo(Point { x: 18.00, y: 36.00 }),
                PathEl::LineTo(Point { x: 18.00, y: 32.00 }),
                PathEl::LineTo(Point { x: 6.00, y: 32.00 }),
                PathEl::LineTo(Point { x: 6.00, y: 36.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 6.00, y: 12.00 }),
                PathEl::LineTo(Point { x: 6.00, y: 16.00 }),
                PathEl::LineTo(Point { x: 42.00, y: 16.00 }),
                PathEl::LineTo(Point { x: 42.00, y: 12.00 }),
                PathEl::LineTo(Point { x: 6.00, y: 12.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 6.00, y: 26.00 }),
                PathEl::LineTo(Point { x: 30.00, y: 26.00 }),
                PathEl::LineTo(Point { x: 30.00, y: 22.00 }),
                PathEl::LineTo(Point { x: 6.00, y: 22.00 }),
                PathEl::LineTo(Point { x: 6.00, y: 26.00 }),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct Tv {
    size: f64,
    color: Color,
}

impl Tv {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for Tv {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 42.00, y: 6.00 }),
                PathEl::LineTo(Point { x: 6.00, y: 6.00 }),
                PathEl::CurveTo(
                    Point { x: 3.79, y: 6.00 },
                    Point { x: 2.00, y: 7.79 },
                    Point { x: 2.00, y: 10.00 },
                ),
                PathEl::LineTo(Point { x: 2.00, y: 34.00 }),
                PathEl::CurveTo(
                    Point { x: 2.00, y: 36.21 },
                    Point { x: 3.79, y: 38.00 },
                    Point { x: 6.00, y: 38.00 },
                ),
                PathEl::LineTo(Point { x: 16.00, y: 38.00 }),
                PathEl::LineTo(Point { x: 16.00, y: 42.00 }),
                PathEl::LineTo(Point { x: 32.00, y: 42.00 }),
                PathEl::LineTo(Point { x: 32.00, y: 38.00 }),
                PathEl::LineTo(Point { x: 42.00, y: 38.00 }),
                PathEl::CurveTo(
                    Point { x: 44.21, y: 38.00 },
                    Point { x: 45.98, y: 36.21 },
                    Point { x: 45.98, y: 34.00 },
                ),
                PathEl::LineTo(Point { x: 46.00, y: 10.00 }),
                PathEl::CurveTo(
                    Point { x: 46.00, y: 7.79 },
                    Point { x: 44.21, y: 6.00 },
                    Point { x: 42.00, y: 6.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 42.00, y: 34.00 }),
                PathEl::LineTo(Point { x: 6.00, y: 34.00 }),
                PathEl::LineTo(Point { x: 6.00, y: 10.00 }),
                PathEl::LineTo(Point { x: 42.00, y: 10.00 }),
                PathEl::LineTo(Point { x: 42.00, y: 34.00 }),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct Android {
    size: f64,
    color: Color,
}

impl Android {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for Android {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 12.00, y: 36.00 }),
                PathEl::CurveTo(
                    Point { x: 12.00, y: 37.10 },
                    Point { x: 12.90, y: 38.00 },
                    Point { x: 14.00, y: 38.00 },
                ),
                PathEl::LineTo(Point { x: 16.00, y: 38.00 }),
                PathEl::LineTo(Point { x: 16.00, y: 45.00 }),
                PathEl::CurveTo(
                    Point { x: 16.00, y: 46.66 },
                    Point { x: 17.34, y: 48.00 },
                    Point { x: 19.00, y: 48.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 20.66, y: 48.00 },
                    Point { x: 22.00, y: 46.66 },
                    Point { x: 22.00, y: 45.00 },
                ),
                PathEl::LineTo(Point { x: 22.00, y: 38.00 }),
                PathEl::LineTo(Point { x: 26.00, y: 38.00 }),
                PathEl::LineTo(Point { x: 26.00, y: 45.00 }),
                PathEl::CurveTo(
                    Point { x: 26.00, y: 46.66 },
                    Point { x: 27.34, y: 48.00 },
                    Point { x: 29.00, y: 48.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 30.66, y: 48.00 },
                    Point { x: 32.00, y: 46.66 },
                    Point { x: 32.00, y: 45.00 },
                ),
                PathEl::LineTo(Point { x: 32.00, y: 38.00 }),
                PathEl::LineTo(Point { x: 34.00, y: 38.00 }),
                PathEl::CurveTo(
                    Point { x: 35.10, y: 38.00 },
                    Point { x: 36.00, y: 37.10 },
                    Point { x: 36.00, y: 36.00 },
                ),
                PathEl::LineTo(Point { x: 36.00, y: 16.00 }),
                PathEl::LineTo(Point { x: 12.00, y: 16.00 }),
                PathEl::LineTo(Point { x: 12.00, y: 36.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 7.00, y: 16.00 }),
                PathEl::CurveTo(
                    Point { x: 5.34, y: 16.00 },
                    Point { x: 4.00, y: 17.34 },
                    Point { x: 4.00, y: 19.00 },
                ),
                PathEl::LineTo(Point { x: 4.00, y: 33.00 }),
                PathEl::CurveTo(
                    Point { x: 4.00, y: 34.66 },
                    Point { x: 5.34, y: 36.00 },
                    Point { x: 7.00, y: 36.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 8.66, y: 36.00 },
                    Point { x: 10.00, y: 34.66 },
                    Point { x: 10.00, y: 33.00 },
                ),
                PathEl::LineTo(Point { x: 10.00, y: 19.00 }),
                PathEl::CurveTo(
                    Point { x: 10.00, y: 17.34 },
                    Point { x: 8.66, y: 16.00 },
                    Point { x: 7.00, y: 16.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 41.00, y: 16.00 }),
                PathEl::CurveTo(
                    Point { x: 39.34, y: 16.00 },
                    Point { x: 38.00, y: 17.34 },
                    Point { x: 38.00, y: 19.00 },
                ),
                PathEl::LineTo(Point { x: 38.00, y: 33.00 }),
                PathEl::CurveTo(
                    Point { x: 38.00, y: 34.66 },
                    Point { x: 39.34, y: 36.00 },
                    Point { x: 41.00, y: 36.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 42.66, y: 36.00 },
                    Point { x: 44.00, y: 34.66 },
                    Point { x: 44.00, y: 33.00 },
                ),
                PathEl::LineTo(Point { x: 44.00, y: 19.00 }),
                PathEl::CurveTo(
                    Point { x: 44.00, y: 17.34 },
                    Point { x: 42.66, y: 16.00 },
                    Point { x: 41.00, y: 16.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 31.06, y: 4.32 }),
                PathEl::LineTo(Point { x: 33.67, y: 1.71 }),
                PathEl::CurveTo(
                    Point { x: 34.06, y: 1.32 },
                    Point { x: 34.06, y: 0.69 },
                    Point { x: 33.67, y: 0.30 },
                ),
                PathEl::CurveTo(
                    Point { x: 33.28, y: -0.09 },
                    Point { x: 32.65, y: -0.09 },
                    Point { x: 32.26, y: 0.30 },
                ),
                PathEl::LineTo(Point { x: 29.30, y: 3.25 }),
                PathEl::CurveTo(
                    Point { x: 27.70, y: 2.46 },
                    Point { x: 25.91, y: 2.00 },
                    Point { x: 24.00, y: 2.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 22.08, y: 2.00 },
                    Point { x: 20.28, y: 2.46 },
                    Point { x: 18.67, y: 3.26 },
                ),
                PathEl::LineTo(Point { x: 15.70, y: 0.29 }),
                PathEl::CurveTo(
                    Point { x: 15.31, y: -0.10 },
                    Point { x: 14.68, y: -0.10 },
                    Point { x: 14.29, y: 0.29 },
                ),
                PathEl::CurveTo(
                    Point { x: 13.90, y: 0.68 },
                    Point { x: 13.90, y: 1.31 },
                    Point { x: 14.29, y: 1.70 },
                ),
                PathEl::LineTo(Point { x: 16.91, y: 4.32 }),
                PathEl::CurveTo(
                    Point { x: 13.94, y: 6.51 },
                    Point { x: 12.00, y: 10.03 },
                    Point { x: 12.00, y: 14.00 },
                ),
                PathEl::LineTo(Point { x: 36.00, y: 14.00 }),
                PathEl::CurveTo(
                    Point { x: 36.00, y: 10.02 },
                    Point { x: 34.05, y: 6.50 },
                    Point { x: 31.06, y: 4.32 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 20.00, y: 10.00 }),
                PathEl::LineTo(Point { x: 18.00, y: 10.00 }),
                PathEl::LineTo(Point { x: 18.00, y: 8.00 }),
                PathEl::LineTo(Point { x: 20.00, y: 8.00 }),
                PathEl::LineTo(Point { x: 20.00, y: 10.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 30.00, y: 10.00 }),
                PathEl::LineTo(Point { x: 28.00, y: 10.00 }),
                PathEl::LineTo(Point { x: 28.00, y: 8.00 }),
                PathEl::LineTo(Point { x: 30.00, y: 8.00 }),
                PathEl::LineTo(Point { x: 30.00, y: 10.00 }),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct LocalDrink {
    size: f64,
    color: Color,
}

impl LocalDrink {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for LocalDrink {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 6.00, y: 4.00 }),
                PathEl::LineTo(Point { x: 10.03, y: 40.47 }),
                PathEl::CurveTo(
                    Point { x: 10.26, y: 42.46 },
                    Point { x: 11.95, y: 44.00 },
                    Point { x: 14.00, y: 44.00 },
                ),
                PathEl::LineTo(Point { x: 34.00, y: 44.00 }),
                PathEl::CurveTo(
                    Point { x: 36.05, y: 44.00 },
                    Point { x: 37.74, y: 42.46 },
                    Point { x: 37.97, y: 40.47 },
                ),
                PathEl::LineTo(Point { x: 42.00, y: 4.00 }),
                PathEl::LineTo(Point { x: 6.00, y: 4.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 24.00, y: 38.00 }),
                PathEl::CurveTo(
                    Point { x: 20.69, y: 38.00 },
                    Point { x: 18.00, y: 35.31 },
                    Point { x: 18.00, y: 32.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 18.00, y: 28.00 },
                    Point { x: 24.00, y: 21.20 },
                    Point { x: 24.00, y: 21.20 },
                ),
                PathEl::CurveTo(
                    Point { x: 24.00, y: 21.20 },
                    Point { x: 30.00, y: 28.00 },
                    Point { x: 30.00, y: 32.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 30.00, y: 35.31 },
                    Point { x: 27.31, y: 38.00 },
                    Point { x: 24.00, y: 38.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 36.65, y: 16.00 }),
                PathEl::LineTo(Point { x: 11.35, y: 16.00 }),
                PathEl::LineTo(Point { x: 10.47, y: 8.00 }),
                PathEl::LineTo(Point { x: 37.54, y: 8.00 }),
                PathEl::LineTo(Point { x: 36.65, y: 16.00 }),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct BlurOff {
    size: f64,
    color: Color,
}

impl BlurOff {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for BlurOff {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 28.00, y: 14.00 }),
                PathEl::CurveTo(
                    Point { x: 29.10, y: 14.00 },
                    Point { x: 30.00, y: 13.10 },
                    Point { x: 30.00, y: 12.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 30.00, y: 10.90 },
                    Point { x: 29.10, y: 10.00 },
                    Point { x: 28.00, y: 10.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 26.90, y: 10.00 },
                    Point { x: 26.00, y: 10.90 },
                    Point { x: 26.00, y: 12.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 26.00, y: 13.10 },
                    Point { x: 26.90, y: 14.00 },
                    Point { x: 28.00, y: 14.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 27.60, y: 22.96 }),
                PathEl::CurveTo(
                    Point { x: 27.73, y: 22.98 },
                    Point { x: 27.86, y: 23.00 },
                    Point { x: 28.00, y: 23.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 29.66, y: 23.00 },
                    Point { x: 31.00, y: 21.66 },
                    Point { x: 31.00, y: 20.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 31.00, y: 18.34 },
                    Point { x: 29.66, y: 17.00 },
                    Point { x: 28.00, y: 17.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 26.34, y: 17.00 },
                    Point { x: 25.00, y: 18.34 },
                    Point { x: 25.00, y: 20.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 25.00, y: 20.14 },
                    Point { x: 25.02, y: 20.27 },
                    Point { x: 25.04, y: 20.41 },
                ),
                PathEl::CurveTo(
                    Point { x: 25.22, y: 21.73 },
                    Point { x: 26.27, y: 22.78 },
                    Point { x: 27.60, y: 22.96 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 28.00, y: 7.00 }),
                PathEl::CurveTo(
                    Point { x: 28.55, y: 7.00 },
                    Point { x: 29.00, y: 6.55 },
                    Point { x: 29.00, y: 6.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 29.00, y: 5.45 },
                    Point { x: 28.55, y: 5.00 },
                    Point { x: 28.00, y: 5.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 27.45, y: 5.00 },
                    Point { x: 27.00, y: 5.45 },
                    Point { x: 27.00, y: 6.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 27.00, y: 6.55 },
                    Point { x: 27.45, y: 7.00 },
                    Point { x: 28.00, y: 7.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 20.00, y: 7.00 }),
                PathEl::CurveTo(
                    Point { x: 20.55, y: 7.00 },
                    Point { x: 21.00, y: 6.55 },
                    Point { x: 21.00, y: 6.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 21.00, y: 5.45 },
                    Point { x: 20.55, y: 5.00 },
                    Point { x: 20.00, y: 5.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 19.45, y: 5.00 },
                    Point { x: 19.00, y: 5.45 },
                    Point { x: 19.00, y: 6.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 19.00, y: 6.55 },
                    Point { x: 19.45, y: 7.00 },
                    Point { x: 20.00, y: 7.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 42.00, y: 21.00 }),
                PathEl::CurveTo(
                    Point { x: 42.55, y: 21.00 },
                    Point { x: 43.00, y: 20.55 },
                    Point { x: 43.00, y: 20.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 43.00, y: 19.45 },
                    Point { x: 42.55, y: 19.00 },
                    Point { x: 42.00, y: 19.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 41.45, y: 19.00 },
                    Point { x: 41.00, y: 19.45 },
                    Point { x: 41.00, y: 20.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 41.00, y: 20.55 },
                    Point { x: 41.45, y: 21.00 },
                    Point { x: 42.00, y: 21.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 20.00, y: 14.00 }),
                PathEl::CurveTo(
                    Point { x: 21.10, y: 14.00 },
                    Point { x: 22.00, y: 13.10 },
                    Point { x: 22.00, y: 12.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 22.00, y: 10.90 },
                    Point { x: 21.10, y: 10.00 },
                    Point { x: 20.00, y: 10.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 18.90, y: 10.00 },
                    Point { x: 18.00, y: 10.90 },
                    Point { x: 18.00, y: 12.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 18.00, y: 13.10 },
                    Point { x: 18.90, y: 14.00 },
                    Point { x: 20.00, y: 14.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 36.00, y: 30.00 }),
                PathEl::CurveTo(
                    Point { x: 37.10, y: 30.00 },
                    Point { x: 38.00, y: 29.10 },
                    Point { x: 38.00, y: 28.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 38.00, y: 26.90 },
                    Point { x: 37.10, y: 26.00 },
                    Point { x: 36.00, y: 26.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 34.90, y: 26.00 },
                    Point { x: 34.00, y: 26.90 },
                    Point { x: 34.00, y: 28.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 34.00, y: 29.10 },
                    Point { x: 34.90, y: 30.00 },
                    Point { x: 36.00, y: 30.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 36.00, y: 22.00 }),
                PathEl::CurveTo(
                    Point { x: 37.10, y: 22.00 },
                    Point { x: 38.00, y: 21.10 },
                    Point { x: 38.00, y: 20.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 38.00, y: 18.90 },
                    Point { x: 37.10, y: 18.00 },
                    Point { x: 36.00, y: 18.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 34.90, y: 18.00 },
                    Point { x: 34.00, y: 18.90 },
                    Point { x: 34.00, y: 20.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 34.00, y: 21.10 },
                    Point { x: 34.90, y: 22.00 },
                    Point { x: 36.00, y: 22.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 36.00, y: 14.00 }),
                PathEl::CurveTo(
                    Point { x: 37.10, y: 14.00 },
                    Point { x: 38.00, y: 13.10 },
                    Point { x: 38.00, y: 12.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 38.00, y: 10.90 },
                    Point { x: 37.10, y: 10.00 },
                    Point { x: 36.00, y: 10.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 34.90, y: 10.00 },
                    Point { x: 34.00, y: 10.90 },
                    Point { x: 34.00, y: 12.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 34.00, y: 13.10 },
                    Point { x: 34.90, y: 14.00 },
                    Point { x: 36.00, y: 14.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 28.00, y: 41.00 }),
                PathEl::CurveTo(
                    Point { x: 27.45, y: 41.00 },
                    Point { x: 27.00, y: 41.45 },
                    Point { x: 27.00, y: 42.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 27.00, y: 42.55 },
                    Point { x: 27.45, y: 43.00 },
                    Point { x: 28.00, y: 43.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 28.55, y: 43.00 },
                    Point { x: 29.00, y: 42.55 },
                    Point { x: 29.00, y: 42.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 29.00, y: 41.45 },
                    Point { x: 28.55, y: 41.00 },
                    Point { x: 28.00, y: 41.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 5.00, y: 10.55 }),
                PathEl::LineTo(Point { x: 12.57, y: 18.12 }),
                PathEl::CurveTo(
                    Point { x: 12.38, y: 18.06 },
                    Point { x: 12.20, y: 18.00 },
                    Point { x: 12.00, y: 18.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 10.90, y: 18.00 },
                    Point { x: 10.00, y: 18.90 },
                    Point { x: 10.00, y: 20.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 10.00, y: 21.10 },
                    Point { x: 10.90, y: 22.00 },
                    Point { x: 12.00, y: 22.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 13.10, y: 22.00 },
                    Point { x: 14.00, y: 21.10 },
                    Point { x: 14.00, y: 20.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 14.00, y: 19.80 },
                    Point { x: 13.94, y: 19.62 },
                    Point { x: 13.89, y: 19.43 },
                ),
                PathEl::LineTo(Point { x: 19.51, y: 25.05 }),
                PathEl::CurveTo(
                    Point { x: 18.08, y: 25.29 },
                    Point { x: 17.00, y: 26.51 },
                    Point { x: 17.00, y: 28.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 17.00, y: 29.66 },
                    Point { x: 18.34, y: 31.00 },
                    Point { x: 20.00, y: 31.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 21.49, y: 31.00 },
                    Point { x: 22.71, y: 29.92 },
                    Point { x: 22.95, y: 28.50 },
                ),
                PathEl::LineTo(Point { x: 28.57, y: 34.12 }),
                PathEl::CurveTo(
                    Point { x: 28.39, y: 34.06 },
                    Point { x: 28.20, y: 34.00 },
                    Point { x: 28.00, y: 34.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 26.90, y: 34.00 },
                    Point { x: 26.00, y: 34.90 },
                    Point { x: 26.00, y: 36.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 26.00, y: 37.10 },
                    Point { x: 26.90, y: 38.00 },
                    Point { x: 28.00, y: 38.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 29.10, y: 38.00 },
                    Point { x: 30.00, y: 37.10 },
                    Point { x: 30.00, y: 36.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 30.00, y: 35.80 },
                    Point { x: 29.94, y: 35.62 },
                    Point { x: 29.89, y: 35.43 },
                ),
                PathEl::LineTo(Point { x: 37.45, y: 43.00 }),
                PathEl::LineTo(Point { x: 40.00, y: 40.45 }),
                PathEl::LineTo(Point { x: 7.55, y: 8.00 }),
                PathEl::LineTo(Point { x: 5.00, y: 10.55 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 20.00, y: 34.00 }),
                PathEl::CurveTo(
                    Point { x: 18.90, y: 34.00 },
                    Point { x: 18.00, y: 34.90 },
                    Point { x: 18.00, y: 36.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 18.00, y: 37.10 },
                    Point { x: 18.90, y: 38.00 },
                    Point { x: 20.00, y: 38.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 21.10, y: 38.00 },
                    Point { x: 22.00, y: 37.10 },
                    Point { x: 22.00, y: 36.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 22.00, y: 34.90 },
                    Point { x: 21.10, y: 34.00 },
                    Point { x: 20.00, y: 34.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 42.00, y: 27.00 }),
                PathEl::CurveTo(
                    Point { x: 41.45, y: 27.00 },
                    Point { x: 41.00, y: 27.45 },
                    Point { x: 41.00, y: 28.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 41.00, y: 28.55 },
                    Point { x: 41.45, y: 29.00 },
                    Point { x: 42.00, y: 29.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 42.55, y: 29.00 },
                    Point { x: 43.00, y: 28.55 },
                    Point { x: 43.00, y: 28.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 43.00, y: 27.45 },
                    Point { x: 42.55, y: 27.00 },
                    Point { x: 42.00, y: 27.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 12.00, y: 26.00 }),
                PathEl::CurveTo(
                    Point { x: 10.90, y: 26.00 },
                    Point { x: 10.00, y: 26.90 },
                    Point { x: 10.00, y: 28.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 10.00, y: 29.10 },
                    Point { x: 10.90, y: 30.00 },
                    Point { x: 12.00, y: 30.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 13.10, y: 30.00 },
                    Point { x: 14.00, y: 29.10 },
                    Point { x: 14.00, y: 28.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 14.00, y: 26.90 },
                    Point { x: 13.10, y: 26.00 },
                    Point { x: 12.00, y: 26.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 6.00, y: 19.00 }),
                PathEl::CurveTo(
                    Point { x: 5.45, y: 19.00 },
                    Point { x: 5.00, y: 19.45 },
                    Point { x: 5.00, y: 20.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 5.00, y: 20.55 },
                    Point { x: 5.45, y: 21.00 },
                    Point { x: 6.00, y: 21.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 6.55, y: 21.00 },
                    Point { x: 7.00, y: 20.55 },
                    Point { x: 7.00, y: 20.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 7.00, y: 19.45 },
                    Point { x: 6.55, y: 19.00 },
                    Point { x: 6.00, y: 19.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 20.00, y: 41.00 }),
                PathEl::CurveTo(
                    Point { x: 19.45, y: 41.00 },
                    Point { x: 19.00, y: 41.45 },
                    Point { x: 19.00, y: 42.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 19.00, y: 42.55 },
                    Point { x: 19.45, y: 43.00 },
                    Point { x: 20.00, y: 43.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 20.55, y: 43.00 },
                    Point { x: 21.00, y: 42.55 },
                    Point { x: 21.00, y: 42.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 21.00, y: 41.45 },
                    Point { x: 20.55, y: 41.00 },
                    Point { x: 20.00, y: 41.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 12.00, y: 34.00 }),
                PathEl::CurveTo(
                    Point { x: 10.90, y: 34.00 },
                    Point { x: 10.00, y: 34.90 },
                    Point { x: 10.00, y: 36.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 10.00, y: 37.10 },
                    Point { x: 10.90, y: 38.00 },
                    Point { x: 12.00, y: 38.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 13.10, y: 38.00 },
                    Point { x: 14.00, y: 37.10 },
                    Point { x: 14.00, y: 36.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 14.00, y: 34.90 },
                    Point { x: 13.10, y: 34.00 },
                    Point { x: 12.00, y: 34.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 6.00, y: 27.00 }),
                PathEl::CurveTo(
                    Point { x: 5.45, y: 27.00 },
                    Point { x: 5.00, y: 27.45 },
                    Point { x: 5.00, y: 28.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 5.00, y: 28.55 },
                    Point { x: 5.45, y: 29.00 },
                    Point { x: 6.00, y: 29.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 6.55, y: 29.00 },
                    Point { x: 7.00, y: 28.55 },
                    Point { x: 7.00, y: 28.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 7.00, y: 27.45 },
                    Point { x: 6.55, y: 27.00 },
                    Point { x: 6.00, y: 27.00 },
                ),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct Web {
    size: f64,
    color: Color,
}

impl Web {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for Web {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 40.00, y: 8.00 }),
                PathEl::LineTo(Point { x: 8.00, y: 8.00 }),
                PathEl::CurveTo(
                    Point { x: 5.79, y: 8.00 },
                    Point { x: 4.02, y: 9.79 },
                    Point { x: 4.02, y: 12.00 },
                ),
                PathEl::LineTo(Point { x: 4.00, y: 36.00 }),
                PathEl::CurveTo(
                    Point { x: 4.00, y: 38.21 },
                    Point { x: 5.79, y: 40.00 },
                    Point { x: 8.00, y: 40.00 },
                ),
                PathEl::LineTo(Point { x: 40.00, y: 40.00 }),
                PathEl::CurveTo(
                    Point { x: 42.21, y: 40.00 },
                    Point { x: 44.00, y: 38.21 },
                    Point { x: 44.00, y: 36.00 },
                ),
                PathEl::LineTo(Point { x: 44.00, y: 12.00 }),
                PathEl::CurveTo(
                    Point { x: 44.00, y: 9.79 },
                    Point { x: 42.21, y: 8.00 },
                    Point { x: 40.00, y: 8.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 30.00, y: 36.00 }),
                PathEl::LineTo(Point { x: 8.00, y: 36.00 }),
                PathEl::LineTo(Point { x: 8.00, y: 28.00 }),
                PathEl::LineTo(Point { x: 30.00, y: 28.00 }),
                PathEl::LineTo(Point { x: 30.00, y: 36.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 30.00, y: 26.00 }),
                PathEl::LineTo(Point { x: 8.00, y: 26.00 }),
                PathEl::LineTo(Point { x: 8.00, y: 18.00 }),
                PathEl::LineTo(Point { x: 30.00, y: 18.00 }),
                PathEl::LineTo(Point { x: 30.00, y: 26.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 40.00, y: 36.00 }),
                PathEl::LineTo(Point { x: 32.00, y: 36.00 }),
                PathEl::LineTo(Point { x: 32.00, y: 18.00 }),
                PathEl::LineTo(Point { x: 40.00, y: 18.00 }),
                PathEl::LineTo(Point { x: 40.00, y: 36.00 }),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct ShortText {
    size: f64,
    color: Color,
}

impl ShortText {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for ShortText {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 8.00, y: 18.00 }),
                PathEl::LineTo(Point { x: 40.00, y: 18.00 }),
                PathEl::LineTo(Point { x: 40.00, y: 22.00 }),
                PathEl::LineTo(Point { x: 8.00, y: 22.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 8.00, y: 26.00 }),
                PathEl::LineTo(Point { x: 28.00, y: 26.00 }),
                PathEl::LineTo(Point { x: 28.00, y: 30.00 }),
                PathEl::LineTo(Point { x: 8.00, y: 30.00 }),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct Domain {
    size: f64,
    color: Color,
}

impl Domain {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for Domain {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 24.00, y: 14.00 }),
                PathEl::LineTo(Point { x: 24.00, y: 6.00 }),
                PathEl::LineTo(Point { x: 4.00, y: 6.00 }),
                PathEl::LineTo(Point { x: 4.00, y: 42.00 }),
                PathEl::LineTo(Point { x: 44.00, y: 42.00 }),
                PathEl::LineTo(Point { x: 44.00, y: 14.00 }),
                PathEl::LineTo(Point { x: 24.00, y: 14.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 12.00, y: 38.00 }),
                PathEl::LineTo(Point { x: 8.00, y: 38.00 }),
                PathEl::LineTo(Point { x: 8.00, y: 34.00 }),
                PathEl::LineTo(Point { x: 12.00, y: 34.00 }),
                PathEl::LineTo(Point { x: 12.00, y: 38.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 12.00, y: 30.00 }),
                PathEl::LineTo(Point { x: 8.00, y: 30.00 }),
                PathEl::LineTo(Point { x: 8.00, y: 26.00 }),
                PathEl::LineTo(Point { x: 12.00, y: 26.00 }),
                PathEl::LineTo(Point { x: 12.00, y: 30.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 12.00, y: 22.00 }),
                PathEl::LineTo(Point { x: 8.00, y: 22.00 }),
                PathEl::LineTo(Point { x: 8.00, y: 18.00 }),
                PathEl::LineTo(Point { x: 12.00, y: 18.00 }),
                PathEl::LineTo(Point { x: 12.00, y: 22.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 12.00, y: 14.00 }),
                PathEl::LineTo(Point { x: 8.00, y: 14.00 }),
                PathEl::LineTo(Point { x: 8.00, y: 10.00 }),
                PathEl::LineTo(Point { x: 12.00, y: 10.00 }),
                PathEl::LineTo(Point { x: 12.00, y: 14.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 20.00, y: 38.00 }),
                PathEl::LineTo(Point { x: 16.00, y: 38.00 }),
                PathEl::LineTo(Point { x: 16.00, y: 34.00 }),
                PathEl::LineTo(Point { x: 20.00, y: 34.00 }),
                PathEl::LineTo(Point { x: 20.00, y: 38.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 20.00, y: 30.00 }),
                PathEl::LineTo(Point { x: 16.00, y: 30.00 }),
                PathEl::LineTo(Point { x: 16.00, y: 26.00 }),
                PathEl::LineTo(Point { x: 20.00, y: 26.00 }),
                PathEl::LineTo(Point { x: 20.00, y: 30.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 20.00, y: 22.00 }),
                PathEl::LineTo(Point { x: 16.00, y: 22.00 }),
                PathEl::LineTo(Point { x: 16.00, y: 18.00 }),
                PathEl::LineTo(Point { x: 20.00, y: 18.00 }),
                PathEl::LineTo(Point { x: 20.00, y: 22.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 20.00, y: 14.00 }),
                PathEl::LineTo(Point { x: 16.00, y: 14.00 }),
                PathEl::LineTo(Point { x: 16.00, y: 10.00 }),
                PathEl::LineTo(Point { x: 20.00, y: 10.00 }),
                PathEl::LineTo(Point { x: 20.00, y: 14.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 40.00, y: 38.00 }),
                PathEl::LineTo(Point { x: 24.00, y: 38.00 }),
                PathEl::LineTo(Point { x: 24.00, y: 34.00 }),
                PathEl::LineTo(Point { x: 28.00, y: 34.00 }),
                PathEl::LineTo(Point { x: 28.00, y: 30.00 }),
                PathEl::LineTo(Point { x: 24.00, y: 30.00 }),
                PathEl::LineTo(Point { x: 24.00, y: 26.00 }),
                PathEl::LineTo(Point { x: 28.00, y: 26.00 }),
                PathEl::LineTo(Point { x: 28.00, y: 22.00 }),
                PathEl::LineTo(Point { x: 24.00, y: 22.00 }),
                PathEl::LineTo(Point { x: 24.00, y: 18.00 }),
                PathEl::LineTo(Point { x: 40.00, y: 18.00 }),
                PathEl::LineTo(Point { x: 40.00, y: 38.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 36.00, y: 22.00 }),
                PathEl::LineTo(Point { x: 32.00, y: 22.00 }),
                PathEl::LineTo(Point { x: 32.00, y: 26.00 }),
                PathEl::LineTo(Point { x: 36.00, y: 26.00 }),
                PathEl::LineTo(Point { x: 36.00, y: 22.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 36.00, y: 30.00 }),
                PathEl::LineTo(Point { x: 32.00, y: 30.00 }),
                PathEl::LineTo(Point { x: 32.00, y: 34.00 }),
                PathEl::LineTo(Point { x: 36.00, y: 34.00 }),
                PathEl::LineTo(Point { x: 36.00, y: 30.00 }),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct AttachMoney {
    size: f64,
    color: Color,
}

impl AttachMoney {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for AttachMoney {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 23.60, y: 21.80 }),
                PathEl::CurveTo(
                    Point { x: 19.06, y: 20.62 },
                    Point { x: 17.60, y: 19.41 },
                    Point { x: 17.60, y: 17.51 },
                ),
                PathEl::CurveTo(
                    Point { x: 17.60, y: 15.33 },
                    Point { x: 19.61, y: 13.80 },
                    Point { x: 23.00, y: 13.80 },
                ),
                PathEl::CurveTo(
                    Point { x: 26.56, y: 13.80 },
                    Point { x: 27.88, y: 15.50 },
                    Point { x: 28.00, y: 18.00 },
                ),
                PathEl::LineTo(Point { x: 32.42, y: 18.00 }),
                PathEl::CurveTo(
                    Point { x: 32.29, y: 14.55 },
                    Point { x: 30.18, y: 11.41 },
                    Point { x: 26.00, y: 10.38 },
                ),
                PathEl::LineTo(Point { x: 26.00, y: 6.00 }),
                PathEl::LineTo(Point { x: 20.00, y: 6.00 }),
                PathEl::LineTo(Point { x: 20.00, y: 10.32 }),
                PathEl::CurveTo(
                    Point { x: 16.12, y: 11.17 },
                    Point { x: 13.00, y: 13.67 },
                    Point { x: 13.00, y: 17.54 },
                ),
                PathEl::CurveTo(
                    Point { x: 13.00, y: 22.16 },
                    Point { x: 16.83, y: 24.46 },
                    Point { x: 22.40, y: 25.80 },
                ),
                PathEl::CurveTo(
                    Point { x: 27.41, y: 27.00 },
                    Point { x: 28.40, y: 28.75 },
                    Point { x: 28.40, y: 30.63 },
                ),
                PathEl::CurveTo(
                    Point { x: 28.40, y: 32.00 },
                    Point { x: 27.43, y: 34.20 },
                    Point { x: 23.00, y: 34.20 },
                ),
                PathEl::CurveTo(
                    Point { x: 18.88, y: 34.20 },
                    Point { x: 17.25, y: 32.35 },
                    Point { x: 17.04, y: 30.00 },
                ),
                PathEl::LineTo(Point { x: 12.63, y: 30.00 }),
                PathEl::CurveTo(
                    Point { x: 12.88, y: 34.38 },
                    Point { x: 16.15, y: 36.83 },
                    Point { x: 20.00, y: 37.66 },
                ),
                PathEl::LineTo(Point { x: 20.00, y: 42.00 }),
                PathEl::LineTo(Point { x: 26.00, y: 42.00 }),
                PathEl::LineTo(Point { x: 26.00, y: 37.70 }),
                PathEl::CurveTo(
                    Point { x: 29.89, y: 36.95 },
                    Point { x: 33.00, y: 34.70 },
                    Point { x: 33.00, y: 30.59 },
                ),
                PathEl::CurveTo(
                    Point { x: 33.00, y: 24.93 },
                    Point { x: 28.14, y: 22.99 },
                    Point { x: 23.60, y: 21.80 },
                ),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct VideoLibrary {
    size: f64,
    color: Color,
}

impl VideoLibrary {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for VideoLibrary {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 8.00, y: 12.00 }),
                PathEl::LineTo(Point { x: 4.00, y: 12.00 }),
                PathEl::LineTo(Point { x: 4.00, y: 40.00 }),
                PathEl::CurveTo(
                    Point { x: 4.00, y: 42.21 },
                    Point { x: 5.79, y: 44.00 },
                    Point { x: 8.00, y: 44.00 },
                ),
                PathEl::LineTo(Point { x: 36.00, y: 44.00 }),
                PathEl::LineTo(Point { x: 36.00, y: 40.00 }),
                PathEl::LineTo(Point { x: 8.00, y: 40.00 }),
                PathEl::LineTo(Point { x: 8.00, y: 12.00 }),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 40.00, y: 4.00 }),
                PathEl::LineTo(Point { x: 16.00, y: 4.00 }),
                PathEl::CurveTo(
                    Point { x: 13.79, y: 4.00 },
                    Point { x: 12.00, y: 5.79 },
                    Point { x: 12.00, y: 8.00 },
                ),
                PathEl::LineTo(Point { x: 12.00, y: 32.00 }),
                PathEl::CurveTo(
                    Point { x: 12.00, y: 34.21 },
                    Point { x: 13.79, y: 36.00 },
                    Point { x: 16.00, y: 36.00 },
                ),
                PathEl::LineTo(Point { x: 40.00, y: 36.00 }),
                PathEl::CurveTo(
                    Point { x: 42.21, y: 36.00 },
                    Point { x: 44.00, y: 34.21 },
                    Point { x: 44.00, y: 32.00 },
                ),
                PathEl::LineTo(Point { x: 44.00, y: 8.00 }),
                PathEl::CurveTo(
                    Point { x: 44.00, y: 5.79 },
                    Point { x: 42.21, y: 4.00 },
                    Point { x: 40.00, y: 4.00 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 24.00, y: 29.00 }),
                PathEl::LineTo(Point { x: 24.00, y: 11.00 }),
                PathEl::LineTo(Point { x: 36.00, y: 20.00 }),
                PathEl::LineTo(Point { x: 24.00, y: 29.00 }),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}

pub struct Backup {
    size: f64,
    color: Color,
}

impl Backup {
    pub fn new(color: Color, size: f64) -> Self {
        Self { color, size }
    }
}

impl<T: Data> ::druid::Widget<T> for Backup {
    fn event(
        &mut self,
        _ctx: &mut ::druid::EventCtx,
        _event: &::druid::Event,
        _data: &mut T,
        _env: &::druid::Env,
    ) {
        // no events
    }
    fn lifecycle(
        &mut self,
        _ctx: &mut ::druid::LifeCycleCtx,
        _event: &::druid::LifeCycle,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no lifecycle
    }
    fn update(
        &mut self,
        _ctx: &mut ::druid::UpdateCtx,
        _old_data: &T,
        _data: &T,
        _env: &::druid::Env,
    ) {
        // no update
    }
    fn layout(
        &mut self,
        _ctx: &mut ::druid::LayoutCtx,
        bc: &::druid::BoxConstraints,
        _data: &T,
        _env: &::druid::Env,
    ) -> Size {
        bc.constrain((self.size, self.size))
    }
    fn paint(&mut self, ctx: &mut ::druid::PaintCtx, _data: &T, _env: &::druid::Env) {
        let Size { width, height } = ctx.size();
        ctx.transform(Affine::scale_non_uniform(width / 48.0, height / 48.0));
        let brush = ctx.solid_brush(self.color.clone());
        ctx.fill(
            &[
                PathEl::MoveTo(Point { x: 38.71, y: 20.07 }),
                PathEl::CurveTo(
                    Point { x: 37.35, y: 13.19 },
                    Point { x: 31.28, y: 8.00 },
                    Point { x: 24.00, y: 8.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 18.22, y: 8.00 },
                    Point { x: 13.21, y: 11.28 },
                    Point { x: 10.70, y: 16.07 },
                ),
                PathEl::CurveTo(
                    Point { x: 4.69, y: 16.72 },
                    Point { x: 0.00, y: 21.81 },
                    Point { x: 0.00, y: 28.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 0.00, y: 34.63 },
                    Point { x: 5.37, y: 40.00 },
                    Point { x: 12.00, y: 40.00 },
                ),
                PathEl::LineTo(Point { x: 38.00, y: 40.00 }),
                PathEl::CurveTo(
                    Point { x: 43.52, y: 40.00 },
                    Point { x: 48.00, y: 35.52 },
                    Point { x: 48.00, y: 30.00 },
                ),
                PathEl::CurveTo(
                    Point { x: 48.00, y: 24.72 },
                    Point { x: 43.89, y: 20.44 },
                    Point { x: 38.71, y: 20.07 },
                ),
                PathEl::ClosePath,
                PathEl::MoveTo(Point { x: 28.00, y: 26.00 }),
                PathEl::LineTo(Point { x: 28.00, y: 34.00 }),
                PathEl::LineTo(Point { x: 20.00, y: 34.00 }),
                PathEl::LineTo(Point { x: 20.00, y: 26.00 }),
                PathEl::LineTo(Point { x: 14.00, y: 26.00 }),
                PathEl::LineTo(Point { x: 24.00, y: 16.00 }),
                PathEl::LineTo(Point { x: 34.00, y: 26.00 }),
                PathEl::LineTo(Point { x: 28.00, y: 26.00 }),
                PathEl::ClosePath,
            ][..],
            &brush,
        );
    }
}
